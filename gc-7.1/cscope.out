cscope 15 $HOME/proj/sim/gc-7.1               0001591697
	@AmigaOS.c

11 #i‡!
deföed
(
GC_AMIGA_DEF
Ë&& !deföed(
GC_AMIGA_SB
Ë&& !deföed(
GC_AMIGA_DS
Ë&& !deföed(
GC_AMIGA_AM
)

12 
	~"gc_¥iv.h
"

13 
	~<°dio.h
>

14 
	~<sig«l.h
>

15 
	#GC_AMIGA_DEF


	)

16 
	#GC_AMIGA_SB


	)

17 
	#GC_AMIGA_DS


	)

18 
	#GC_AMIGA_AM


	)

22 #ifde‡
GC_AMIGA_DEF


24 #i‚de‡
__GNUC__


25 
	~<exec/exec.h
>

27 
	~<¥Ÿo/exec.h
>

28 
	~<¥Ÿo/dos.h
>

29 
	~<dos/do£xãns.h
>

30 
	~<w‹kbích/°¨tup.h
>

37 #ifde‡
GC_AMIGA_SB


43 
±r_t
 
	$GC_gë_maö_°ack_ba£
()

45 
Pro˚ss
 *
¥oc
 = (Pro˚ss*)
SysBa£
->
ThisTask
;

48 i‡(
¥oc
->
¥_Task
.
tc_Node
.
 _Ty≥
==
NT_PROCESS


49 && 
¥oc
->
¥_CLI
 !
NULL
) {

54  (*)
¥oc
->
¥_Rëu∫Addr
 + (
ULONG
);

56  (*)
¥oc
->
¥_Task
.
tc_SPUµî
;

58 
	}
}

61 
±r_t
 
	$GC_gë_°ack_ba£
()

63 
WBSèπup
 *
_WBíchMsg
;

64 
__ba£
;

65 
__°ack
;

66 
Task
 *
èsk
;

67 
Pro˚ss
 *
¥oc
;

68 
Comm™dLöeI¡îÁ˚
 *
˛i
;

69 
size
;

71 i‡((
èsk
 = 
	`FödTask
(0)) == 0) {

72 
	`GC_îr_puts
("Cannot find ownÅask structure\n");

73 
	`ABORT
("task missing");

75 
¥oc
 = (
Pro˚ss
 *)
èsk
;

76 
˛i
 = 
	`BADDR
(
¥oc
->
¥_CLI
);

78 i‡(
_WBíchMsg
 !0 || 
˛i
 == 0) {

79 
size
 = (*)
èsk
->
tc_SPUµî
 - (*Èask->
tc_SPLowî
;

81 
size
 = 
˛i
->
˛i_DeÁu…Sèck
 * 4;

83  (
±r_t
)(
__ba£
 + 
	`GC_max
(
size
, 
__°ack
));

84 
	}
}

91 #ifde‡
GC_AMIGA_DS


96 
	$GC_ªgi°î_d©a_£gmíts
()

98 
Pro˚ss
 *
¥oc
;

99 
Comm™dLöeI¡îÁ˚
 *
˛i
;

100 
BPTR
 
my£gli°
;

101 
ULONG
 *
d©a
;

103 
num
;

106 #ifde‡
__GNUC__


107 
ULONG
 
d©aSegSize
;

108 
GC_boﬁ
 
found_£gmít
 = 
FALSE
;

109 
__d©a_size
[];

111 
d©aSegSize
=
__d©a_size
+8;

117 
¥oc
(
Pro˚ss
*)
SysBa£
->
ThisTask
;

121 i‡(
¥oc
->
¥_Task
.
tc_Node
.
 _Ty≥
==
NT_PROCESS
) {

122 i‡(
¥oc
->
¥_CLI
 =
NULL
) {

123 
my£gli°
 = 
¥oc
->
¥_SegLi°
;

126 
˛i
 = 
	`BADDR
(
¥oc
->
¥_CLI
);

127 
my£gli°
 = 
˛i
->
˛i_ModuÀ
;

130 
	`ABORT
("Notá Process.");

133 i‡(
my£gli°
 =
NULL
) {

134 
	`ABORT
("Arrrgh.. can't find segments,áborting");

139 
num
=0;

140 
d©a
 = (
ULONG
 *)
	`BADDR
(
my£gli°
); d©®!
NULL
;

141 
d©a
 = (
ULONG
 *)
	`BADDR
(data[0])) {

142 i‡(((
ULONG
Ë
GC_ªgi°î_d©a_£gmíts
 < (ULONGË&
d©a
[1]) ||

143 ((
ULONG
Ë
GC_ªgi°î_d©a_£gmíts
 > (ULONGË&
d©a
[1] + data[-1])) {

144 #ifde‡
__GNUC__


145 i‡(
d©aSegSize
 =
d©a
[-1]) {

146 
found_£gmít
 = 
TRUE
;

149 
	`GC_add_roŸs_ö√r
((*)&
d©a
[1],

150 ((*)&
d©a
[1]Ë+ d©a[-1], 
FALSE
);

152 ++
num
;

154 #ifde‡
__GNUC__


155 i‡(!
found_£gmít
) {

156 
	`ABORT
("Can`t find correct Segments.\nSolution: UseánÇewer version of ixemul.library");

159 
	}
}

162 
	$GC_ªgi°î_d©a_£gmíts
()

164 
WBSèπup
 *
_WBíchMsg
;

165 
Pro˚ss
 *
¥oc
;

166 
Comm™dLöeI¡îÁ˚
 *
˛i
;

167 
BPTR
 
my£gli°
;

168 
ULONG
 *
d©a
;

170 i‡–
_WBíchMsg
 != 0 ) {

171 i‡((
my£gli°
 = 
_WBíchMsg
->
sm_Segmít
) == 0) {

172 
	`GC_îr_puts
("No seglist from workbench\n");

176 i‡((
¥oc
 = (
Pro˚ss
 *)
	`FödTask
(0)) == 0) {

177 
	`GC_îr_puts
("Cannot findÖrocess structure\n");

180 i‡((
˛i
 = 
	`BADDR
(
¥oc
->
¥_CLI
)) == 0) {

181 
	`GC_îr_puts
("No CLI\n");

184 i‡((
my£gli°
 = 
˛i
->
˛i_ModuÀ
) == 0) {

185 
	`GC_îr_puts
("No seglist from CLI\n");

190 
d©a
 = (
ULONG
 *)
	`BADDR
(
my£gli°
); data != 0;

191 
d©a
 = (
ULONG
 *)
	`BADDR
(data[0])) {

192 #ifde‡
AMIGA_SKIP_SEG


193 i‡(((
ULONG
Ë
GC_ªgi°î_d©a_£gmíts
 < (ULONGË&
d©a
[1]) ||

194 ((
ULONG
Ë
GC_ªgi°î_d©a_£gmíts
 > (ULONGË&
d©a
[1] + data[-1])) {

198 
	`GC_add_roŸs_ö√r
((*)&
d©a
[1],

199 ((*)&
d©a
[1]Ë+ d©a[-1], 
FALSE
);

202 
	}
}

210 #ifde‡
GC_AMIGA_AM


212 #i‚de‡
GC_AMIGA_FASTALLOC


214 *
GC_amiga_Ælocwøµî
(
size_t
 
size
,*(*
AŒocFun˘i⁄
)(size_à
size2
)){

215  (*
	gAŒocFun˘i⁄
)(
	gsize
);

218 *(*
	gGC_amiga_Ælocwøµî_do
)(
size_t
 
	gsize
,*(*
	gAŒocFun˘i⁄
)(size_à
	gsize2
))

219 =
GC_amiga_Ælocwøµî
;

226 *
GC_amiga_Ælocwøµî_fú°time
(
size_t
 
size
,*(*
AŒocFun˘i⁄
)(size_à
size2
));

228 *(*
	gGC_amiga_Ælocwøµî_do
)(
size_t
 
	gsize
,*(*
	gAŒocFun˘i⁄
)(size_à
	gsize2
))

229 =
GC_amiga_Ælocwøµî_fú°time
;

245 
	sGC_Amiga_AŒo˚dMem‹yHódî
{

246 
ULONG
 
	msize
;

247 
GC_Amiga_AŒo˚dMem‹yHódî
 *
	m√xt
;

249 
GC_Amiga_AŒo˚dMem‹yHódî
 *
	gGC_AMIGAMEM
=(GC_Amiga_AŒo˚dMem‹yHódî *)()~(
NULL
);

255 
ULONG
 
	gGC_AMIGA_MEMF
 = 
MEMF_FAST
 | 
MEMF_CLEAR
;

259 #i‚de‡
GC_AMIGA_ONLYFAST


260 
BOOL
 
	gGC_amiga_d⁄èŒoc
=
FALSE
;

263 #ifde‡
GC_AMIGA_PRINTSTATS


264 
	gsucc
=0,
	gsucc2
=0;

265 
	gnsucc
=0,
	gnsucc2
=0;

266 
	gnuŒªåõs
=0;

267 
	gnumcﬁÀ˘s
=0;

268 
	gchùa
=0;

269 
	gÆlochù
=0;

270 
	gÆlocÁ°
=0;

271 
	gcur0
=0;

272 
	gcur1
=0;

273 
	gcur10
=0;

274 
	gcur50
=0;

275 
	gcur150
=0;

276 
	gcur151
=0;

277 
	gncur0
=0;

278 
	gncur1
=0;

279 
	gncur10
=0;

280 
	gncur50
=0;

281 
	gncur150
=0;

282 
	gncur151
=0;

287 
	$GC_amiga_‰ì_Æl_mem
(){

288 
GC_Amiga_AŒo˚dMem‹yHódî
 *
gc_am
=(GC_Amiga_AŒo˚dMem‹yHódî *)(~()(
GC_AMIGAMEM
));

289 
GC_Amiga_AŒo˚dMem‹yHódî
 *
ãmp
;

291 #ifde‡
GC_AMIGA_PRINTSTATS


292 
	`¥ötf
("\n\n"

294 
Ælochù
,
ÆlocÁ°


296 
	`¥ötf
(

298 
chùa


300 
	`¥ötf
("\n");

301 
	`¥ötf
("GC_gcﬁÀ˘ wa†ˇŒed %dÅime†tÿavoidÑëu∫ög NULL o∏°¨àÆloˇtög wôhÅhêMEMF_ANY fœg.\n",
numcﬁÀ˘s
);

302 
	`¥ötf
("%d o‡them wa†®suc˚ss. (thêŸhî†hadÅÿu£áŒoˇti⁄ fromÅhêOS.)\n",
nuŒªåõs
);

303 
	`¥ötf
("\n");

304 
	`¥ötf
("Suc˚ded f‹cög %d gc-Æloˇti⁄†(%d byãsËo‡chù-memÅÿbêÁ°-mem.\n",
succ
,
succ2
);

305 
	`¥ötf
("Faûed f‹cög %d gc-Æloˇti⁄†(%d byãsËo‡chù-memÅÿbêÁ°-mem.\n",
nsucc
,
nsucc2
);

306 
	`¥ötf
("\n");

307 
	`¥ötf
(

310 
cur0
,
cur1
,
cur10
,
cur50
,
cur150
,
cur151


312 
	`¥ötf
(

315 
ncur0
,
ncur1
,
ncur10
,
ncur50
,
ncur150
,
ncur151


319 
gc_am
!=
NULL
){

320 
ãmp
=
gc_am
->
√xt
;

321 
	`FªeMem
(
gc_am
,gc_am->
size
);

322 
gc_am
=(
GC_Amiga_AŒo˚dMem‹yHódî
 *)(~()(
ãmp
));

324 
	}
}

326 #i‚de‡
GC_AMIGA_ONLYFAST


330 *
	gchùmax
;

338 
size_t
 
	gœã°size
;

348 *
	$GC_amiga_gë_mem
(
size_t
 
size
){

349 
GC_Amiga_AŒo˚dMem‹yHódî
 *
gc_am
;

351 #i‚de‡
GC_AMIGA_ONLYFAST


352 if(
GC_amiga_d⁄èŒoc
==
TRUE
){

354  
NULL
;

358 if(
GC_AMIGA_MEMF
==(
MEMF_ANY
|
MEMF_CLEAR
Ë&& 
size
>100000 && 
œã°size
<50000Ë 
NULL
;

361 
gc_am
=
	`AŒocMem
((
ULONG
)(
size
 + (
GC_Amiga_AŒo˚dMem‹yHódî
)),
GC_AMIGA_MEMF
);

362 if(
gc_am
==
NULL
)  NULL;

364 
gc_am
->
√xt
=
GC_AMIGAMEM
;

365 
gc_am
->
size
=sizê+ (
GC_Amiga_AŒo˚dMem‹yHódî
);

366 
GC_AMIGAMEM
=(
GC_Amiga_AŒo˚dMem‹yHódî
 *)(~()(
gc_am
));

370 #ifde‡
GC_AMIGA_PRINTSTATS


371 if((*)
gc_am
<
chùmax
){

372 
Ælochù
+=
size
;

374 
ÆlocÁ°
+=
size
;

378  
gc_am
+1;

380 
	}
}

385 #i‚de‡
GC_AMIGA_ONLYFAST


392 #ifde‡
GC_AMIGA_RETRY


393 *
GC_amiga_ªc_Æloc
(
size_t
 
size
,*(*
AŒocFun˘i⁄
)(size_à
size2
),c⁄° 
ªc
){

394 *
	gªt
;

396 
	gªt
=(*
AŒocFun˘i⁄
)(
size
);

398 #ifde‡
GC_AMIGA_PRINTSTATS


399 if((*)
	gªt
>
	gchùmax
 ||Ñë==
NULL
){

400 if(
ªt
==
NULL
){

401 
nsucc
++;

402 
	gnsucc2
+=
size
;

403 if(
	gªc
==0Ë
ncur0
++;

404 if(
	gªc
==1Ë
ncur1
++;

405 if(
	gªc
>1 &&Ñec<10Ë
	gncur10
++;

406 if(
	gªc
>=10 && 
ªc
<50Ë
ncur50
++;

407 if(
	gªc
>=50 && 
ªc
<150Ë
ncur150
++;

408 if(
	gªc
>=150Ë
ncur151
++;

410 
	gsucc
++;

411 
	gsucc2
+=
size
;

412 if(
	gªc
==0Ë
cur0
++;

413 if(
	gªc
==1Ë
cur1
++;

414 if(
	gªc
>1 &&Ñec<10Ë
	gcur10
++;

415 if(
	gªc
>=10 && 
ªc
<50Ë
cur50
++;

416 if(
	gªc
>=50 && 
ªc
<150Ë
cur150
++;

417 if(
	gªc
>=150Ë
cur151
++;

422 i‡(((*)
	gªt
)<=
chùmax
 && 
ªt
!=
NULL
 && (
ªc
<(
size
>500000?9:size/5000))){

423 
ªt
=
GC_amiga_ªc_Æloc
(
size
,
AŒocFun˘i⁄
,
ªc
+1);

427  
	gªt
;

437 *
GC_amiga_Ælocwøµî_™y
(
size_t
 
size
,*(*
AŒocFun˘i⁄
)(size_à
size2
)){

438 *
	gªt
,*
	gªt2
;

440 
	gGC_amiga_d⁄èŒoc
=
TRUE
;

441 
	gœã°size
=
size
;

443 
	gªt
=(*
AŒocFun˘i⁄
)(
size
);

445 if(((*)
	gªt
Ë<
chùmax
){

446 if(
ªt
==
NULL
){

448 #ifde‡
GC_AMIGA_GC


449 if(!
GC_d⁄t_gc
){

450 
GC_gcﬁÀ˘
();

451 #ifde‡
GC_AMIGA_PRINTSTATS


452 
	gnumcﬁÀ˘s
++;

454 
	gªt
=(*
AŒocFun˘i⁄
)(
size
);

457 if(
	gªt
==
NULL
){

458 
GC_amiga_d⁄èŒoc
=
FALSE
;

459 
	gªt
=(*
AŒocFun˘i⁄
)(
size
);

460 if(
	gªt
==
NULL
){

461 
WARN
("Out of Memory! Returning NIL!\n", 0);

464 #ifde‡
GC_AMIGA_PRINTSTATS


466 
	gnuŒªåõs
++;

468 if(
	gªt
!=
NULL
 && (*)
ªt
<=
chùmax
Ë
chùa
+=
size
;

471 #ifde‡
GC_AMIGA_RETRY


478 
	gAŒocFun˘i⁄
!=
GC_mÆloc_uncﬁÀ˘abÀ


479 #ifde‡
ATOMIC_UNCOLLECTABLE


480 && 
AŒocFun˘i⁄
!=
GC_mÆloc_©omic_uncﬁÀ˘abÀ


483 
ªt2
=
GC_amiga_ªc_Æloc
(
size
,
AŒocFun˘i⁄
,0);

485 
	gªt2
=(*
AŒocFun˘i⁄
)(
size
);

486 #ifde‡
GC_AMIGA_PRINTSTATS


487 if((*)
	gªt2
<
	gchùmax
 ||Ñë2==
NULL
){

488 
nsucc
++;

489 
	gnsucc2
+=
size
;

490 
	gncur0
++;

492 
	gsucc
++;

493 
	gsucc2
+=
size
;

494 
	gcur0
++;

498 if(((*)
	gªt2
)>
	gchùmax
){

500 
GC_‰ì
(
ªt
);

501 
	gªt
=
ªt2
;

503 
GC_‰ì
(
ªt2
);

510 
	gGC_amiga_d⁄èŒoc
=
FALSE
;

512  
	gªt
;

517 (*
GC_amiga_tﬂny
)()=
NULL
;

519 
	`GC_amiga_£t_tﬂny
((*
func
)()){

520 
GC_amiga_tﬂny
=
func
;

521 
	}
}

526 *
GC_amiga_Ælocwøµî_Á°
(
size_t
 
size
,*(*
AŒocFun˘i⁄
)(size_à
size2
)){

527 *
	gªt
;

529 
	gªt
=(*
AŒocFun˘i⁄
)(
size
);

531 if(
	gªt
==
NULL
){

534 #ifde‡
GC_AMIGA_GC


535 if(!
GC_d⁄t_gc
){

536 
GC_gcﬁÀ˘
();

537 #ifde‡
GC_AMIGA_PRINTSTATS


538 
	gnumcﬁÀ˘s
++;

540 
	gªt
=(*
AŒocFun˘i⁄
)(
size
);

543 if(
	gªt
==
NULL
){

544 #i‚de‡
GC_AMIGA_ONLYFAST


545 
GC_AMIGA_MEMF
=
MEMF_ANY
 | 
MEMF_CLEAR
;

546 if(
	gGC_amiga_tﬂny
!=
NULL
Ë(*
GC_amiga_tﬂny
)();

547 
	gGC_amiga_Ælocwøµî_do
=
GC_amiga_Ælocwøµî_™y
;

548  
GC_amiga_Ælocwøµî_™y
(
size
,
AŒocFun˘i⁄
);

551 #ifde‡
GC_AMIGA_PRINTSTATS


553 
	gnuŒªåõs
++;

558  
	gªt
;

561 *
GC_amiga_Ælocwøµî_fú°time
(
size_t
 
size
,*(*
AŒocFun˘i⁄
)(size_à
size2
)){

562 
©exô
(&
GC_amiga_‰ì_Æl_mem
);

563 
	gchùmax
=(*)
SysBa£
->
MaxLocMem
;

564 
	gGC_amiga_Ælocwøµî_do
=
GC_amiga_Ælocwøµî_Á°
;

565  
GC_amiga_Ælocwøµî_Á°
(
size
,
AŒocFun˘i⁄
);

577 *
	$GC_amiga_ªÆloc
(*
ﬁd_obje˘
,
size_t
 
√w_size_ö_byãs
){

578 #i‚de‡
GC_AMIGA_FASTALLOC


579  
	`GC_ªÆloc
(
ﬁd_obje˘
,
√w_size_ö_byãs
);

581 *
ªt
;

582 
œã°size
=
√w_size_ö_byãs
;

583 
ªt
=
	`GC_ªÆloc
(
ﬁd_obje˘
,
√w_size_ö_byãs
);

584 if(
ªt
==
NULL
 && 
GC_AMIGA_MEMF
==(
MEMF_FAST
 | 
MEMF_CLEAR
)){

586 #ifde‡
GC_AMIGA_GC


587 if(!
GC_d⁄t_gc
){

588 
	`GC_gcﬁÀ˘
();

589 #ifde‡
GC_AMIGA_PRINTSTATS


590 
numcﬁÀ˘s
++;

592 
ªt
=
	`GC_ªÆloc
(
ﬁd_obje˘
,
√w_size_ö_byãs
);

595 if(
ªt
==
NULL
){

596 #i‚de‡
GC_AMIGA_ONLYFAST


597 
GC_AMIGA_MEMF
=
MEMF_ANY
 | 
MEMF_CLEAR
;

598 if(
GC_amiga_tﬂny
!=
NULL
) (*GC_amiga_toany)();

599 
GC_amiga_Ælocwøµî_do
=
GC_amiga_Ælocwøµî_™y
;

600 
ªt
=
	`GC_ªÆloc
(
ﬁd_obje˘
,
√w_size_ö_byãs
);

603 #ifde‡
GC_AMIGA_PRINTSTATS


605 
nuŒªåõs
++;

609 if(
ªt
==
NULL
){

610 
	`WARN
("Out of Memory! Returning NIL!\n", 0);

612 #ifde‡
GC_AMIGA_PRINTSTATS


613 if(((*)
ªt
)<
chùmax
 &&Ñë!=
NULL
){

614 
chùa
+=
√w_size_ö_byãs
;

617  
ªt
;

619 
	}
}

	@MacOS.c

18 
	~<Resour˚s.h
>

19 
	~<Mem‹y.h
>

20 
	~<LowMem.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

25 
	~"gc.h
"

26 
	~"gc_¥iv.h
"

31 
	maboveA5
;

32 
	mbñowA5
;

33 
	mJTSize
;

34 
	mJTOff£t
;

35 } *
	tCodeZîoPå
, **
	tCodeZîoH™dÀ
;

37 * 
	$GC_MacGëD©aSèπ
()

39 
CodeZîoH™dÀ
 
code0
 = (CodeZîoH™dÀ)
	`GëResour˚
('CODE', 0);

40 i‡(
code0
) {

41 
bñowA5Size
 = (**
code0
).
bñowA5
;

42 
	`Rñó£Resour˚
((
H™dÀ
)
code0
);

43  (
	`LMGëCuºítA5
(Ë- 
bñowA5Size
);

45 
	`Ârötf
(
°dîr
, "Couldn'tÜoadÅhe jumpÅable.");

46 
	`exô
(-1);

48 
	}
}

52 
Temp‹¨yMem‹yBlock
 
	tTemp‹¨yMem‹yBlock
, **
	tTemp‹¨yMem‹yH™dÀ
;

54 
	sTemp‹¨yMem‹yBlock
 {

55 
Temp‹¨yMem‹yH™dÀ
 
	m√xtBlock
;

56 
	md©a
[];

59 
Temp‹¨yMem‹yH™dÀ
 
	gtheTemp‹¨yMem‹y
 = 
NULL
;

60 
Boﬁón
 
	gfú°Time
 = 
åue
;

62 
GC_MacFªeTemp‹¨yMem‹y
();

64 
På
 
	$GC_MacTemp‹¨yNewPå
(
size_t
 
size
, 
Boﬁón
 
˛órMem‹y
)

66 
Boﬁón
 
fú°Time
 = 
åue
;

67 
OSEº
 
ªsu…
;

68 
Temp‹¨yMem‹yH™dÀ
 
ãmpMemBlock
;

69 
På
 
ãmpPå
 = 
nû
;

71 
ãmpMemBlock
 = (
Temp‹¨yMem‹yH™dÀ
)
	`TempNewH™dÀ
(
size
 + (
Temp‹¨yMem‹yBlock
), &
ªsu…
);

72 i‡(
ãmpMemBlock
 && 
ªsu…
 =
noEº
) {

73 
	`HLockHi
((
H™dÀ
)
ãmpMemBlock
);

74 
ãmpPå
 = (**
ãmpMemBlock
).
d©a
;

75 i‡(
˛órMem‹y
Ë
	`mem£t
(
ãmpPå
, 0, 
size
);

76 
ãmpPå
 = 
	`SåùAddªss
(tempPtr);

79 (**
ãmpMemBlock
).
√xtBlock
 = 
theTemp‹¨yMem‹y
;

80 
theTemp‹¨yMem‹y
 = 
ãmpMemBlock
;

83 #i‡!
	`deföed
(
SHARED_LIBRARY_BUILD
)

85 i‡(
fú°Time
) {

86 
	`©exô
(&
GC_MacFªeTemp‹¨yMem‹y
);

87 
fú°Time
 = 
Ál£
;

91  
ãmpPå
;

92 
	}
}

94 
w‹d
 
GC_fo_íåõs
;

96 
	$≥rf‹m_föÆ_cﬁÀ˘i⁄
()

98 
i
;

99 
w‹d
 
œ°_fo_íåõs
 = 0;

103 
GC_°ackbŸtom
 = (
±r_t
)&
i
;

106 
i
 = 0; i < 2 || 
GC_fo_íåõs
 < 
œ°_fo_íåõs
; i++) {

107 
œ°_fo_íåõs
 = 
GC_fo_íåõs
;

108 
	`GC_gcﬁÀ˘
();

110 
	}
}

113 
	$GC_MacFªeTemp‹¨yMem‹y
()

115 #i‡
	`deföed
(
SHARED_LIBRARY_BUILD
)

117 
	`≥rf‹m_föÆ_cﬁÀ˘i⁄
();

120 i‡(
theTemp‹¨yMem‹y
 !
NULL
) {

121 
tŸÆMem‹yU£d
 = 0;

122 
Temp‹¨yMem‹yH™dÀ
 
ãmpMemBlock
 = 
theTemp‹¨yMem‹y
;

123 
ãmpMemBlock
 !
NULL
) {

124 
Temp‹¨yMem‹yH™dÀ
 
√xtBlock
 = (**
ãmpMemBlock
).nextBlock;

125 
tŸÆMem‹yU£d
 +
	`GëH™dÀSize
((
H™dÀ
)
ãmpMemBlock
);

126 
	`Di•o£H™dÀ
((
H™dÀ
)
ãmpMemBlock
);

127 
ãmpMemBlock
 = 
√xtBlock
;

129 
theTemp‹¨yMem‹y
 = 
NULL
;

131 #i‡!
	`deföed
(
SHARED_LIBRARY_BUILD
)

132 i‡(
GC_¥öt_°©s
) {

133 
	`Ârötf
(
°dout
, "[total memory used: %ld bytes.]\n",

134 
tŸÆMem‹yU£d
);

135 
	`Ârötf
(
°dout
, "[tŸÆ cﬁÀ˘i⁄s: %ld.]\n", 
GC_gc_no
);

139 
	}
}

141 #i‡
__›ti⁄
(
Ár_d©a
)

143 * 
	$GC_MacGëD©aEnd
()

145 
CodeZîoH™dÀ
 
code0
 = (CodeZîoH™dÀ)
	`GëResour˚
('CODE', 0);

146 i‡(
code0
) {

147 
aboveA5Size
 = (**
code0
).
aboveA5
;

148 
	`Rñó£Resour˚
((
H™dÀ
)
code0
);

149  (
	`LMGëCuºítA5
(Ë+ 
aboveA5Size
);

151 
	`Ârötf
(
°dîr
, "Couldn'tÜoadÅhe jumpÅable.");

152 
	`exô
(-1);

154 
	}
}

	@Mac_files/MacOS_Test_config.h

16 #ifde‡
__MWERKS__


20 
	~<™si_¥efix.mac.h
>

21 #i‚de‡
__STDC__


22 
	#__STDC__
 0

	)

28 #unde‡
TRUE


29 #unde‡
FALSE


31 
	#ALL_INTERIOR_POINTERS


35 
	#NO_SIGNALS


36 
	#USE_TEMPORARY_MEMORY


37 

	)

	@Mac_files/MacOS_config.h

14 #ifde‡
__MWERKS__


18 
	~<™si_¥efix.mac.h
>

19 #i‚de‡
__STDC__


20 
	#__STDC__
 0

	)

26 #unde‡
TRUE


27 #unde‡
FALSE


29 
	#ALL_INTERIOR_POINTERS


30 
	#SILENT


33 
	#NO_SIGNALS


34 
	#USE_TEMPORARY_MEMORY


35 

	)

	@Mac_files/dataend.c

9 
	g__d©´nd
;

	@Mac_files/datastart.c

9 
	g__d©a°¨t
;

	@add_gc_prefix.c

1 
	~<°dio.h
>

2 
	~<gc.h
>

4 
	$maö
(
¨gc
, 
¨gv
, 
ívp
)

5 
¨gc
;

6 ** 
¨gv
;

7 ** 
ívp
;

9 
i
;

11 
i
 = 1; i < 
¨gc
; i++) {

12 i‡(
GC_ALPHA_VERSION
 =
GC_NOT_ALPHA
) {

13 
	`¥ötf
("gc%d.%d/%†", 
GC_VERSION_MAJOR
, 
GC_VERSION_MINOR
, 
¨gv
[
i
]);

15 
	`¥ötf
("gc%d.%dÆpha%d/%†", 
GC_VERSION_MAJOR
,

16 
GC_VERSION_MINOR
, 
GC_ALPHA_VERSION
, 
¨gv
[
i
]);

20 
	}
}

	@allchblk.c

18 
	~<°dio.h
>

19 
	~"¥iv©e/gc_¥iv.h
"

21 
GC_boﬁ
 
	gGC_u£_ítúe_hóp
 = 0;

30 
	#MAX_BLACK_LIST_ALLOC
 (2*
HBLKSIZE
)

	)

35 
	#UNIQUE_THRESHOLD
 32

	)

37 
	#HUGE_THRESHOLD
 256

	)

40 
	#FL_COMPRESSION
 8

	)

44 
	#N_HBLK_FLS
 (
HUGE_THRESHOLD
 - 
UNIQUE_THRESHOLD
)/
FL_COMPRESSION
 \

45 + 
UNIQUE_THRESHOLD


	)

47 
hblk
 * 
	gGC_hblk‰ìli°
[
N_HBLK_FLS
+1] = { 0 };

49 #i‚de‡
USE_MUNMAP


51 
w‹d
 
	gGC_‰ì_byãs
[
N_HBLK_FLS
+1] = { 0 };

58 #ifde‡
__GNUC__


59 
	g__ölöe__


61 
	$GC_íough_œrge_byãs_À·
()

63 
n
;

64 
w‹d
 
byãs
 = 
GC_œrge_Ælocd_byãs
;

66 
	`GC_ASSERT
(
GC_max_œrge_Ælocd_byãs
 <
GC_hópsize
);

67 
n
 = 
N_HBLK_FLS
;Ç >= 0; --n) {

68 
byãs
 +
GC_‰ì_byãs
[
n
];

69 i‡(
byãs
 >
GC_max_œrge_Ælocd_byãs
Ë 
n
;

72 
	}
}

74 
	#INCR_FREE_BYTES
(
n
, 
b
Ë
GC_‰ì_byãs
[n] +(b);

	)

76 
	#FREE_ASSERT
(
e
Ë
	`GC_ASSERT
”)

	)

80 
	#INCR_FREE_BYTES
(
n
, 
b
)

	)

81 
	#FREE_ASSERT
(
e
)

	)

86 
	$GC_hblk_Ê_‰om_blocks
(
w‹d
 
blocks_√eded
)

88 i‡(
blocks_√eded
 <
UNIQUE_THRESHOLD
)  ()blocks_needed;

89 i‡(
blocks_√eded
 >
HUGE_THRESHOLD
Ë 
N_HBLK_FLS
;

90  ()(
blocks_√eded
 - 
UNIQUE_THRESHOLD
)/
FL_COMPRESSION


91 + 
UNIQUE_THRESHOLD
;

93 
	}
}

95 
	#PHDR
(
hhdr
Ë
	`HDR
(hhd∏-> 
hb_¥ev
)

	)

96 
	#NHDR
(
hhdr
Ë
	`HDR
(hhd∏-> 
hb_√xt
)

	)

98 #ifde‡
USE_MUNMAP


99 
	#IS_MAPPED
(
hhdr
Ë(((hhdrË-> 
hb_Êags
 & 
WAS_UNMAPPED
Ë=0)

	)

101 
	#IS_MAPPED
(
hhdr
Ë1

	)

104 #i‡!
deföed
(
NO_DEBUGGING
)

105 
	$GC_¥öt_hblk‰ìli°
()

107 
hblk
 * 
h
;

108 
w‹d
 
tŸÆ_‰ì
 = 0;

109 
hdr
 * 
hhdr
;

110 
w‹d
 
sz
;

111 
i
;

113 
i
 = 0; i <
N_HBLK_FLS
; ++i) {

114 
h
 = 
GC_hblk‰ìli°
[
i
];

115 #ifde‡
USE_MUNMAP


116 i‡(0 !
h
Ë
	`GC_¥ötf
("FreeÜist %ld:\n",

117 ()
i
);

119 i‡(0 !
h
Ë
	`GC_¥ötf
("FreeÜist %lu (Total size %lu):\n",

120 
i
, ()
GC_‰ì_byãs
[i]);

122 
h
 != 0) {

123 
hhdr
 = 
	`HDR
(
h
);

124 
sz
 = 
hhdr
 -> 
hb_sz
;

125 
	`GC_¥ötf
("\t%∞sizê%lu ", 
h
, ()
sz
);

126 
tŸÆ_‰ì
 +
sz
;

127 i‡(
	`GC_is_bœck_li°ed
(
h
, 
HBLKSIZE
) != 0) {

128 
	`GC_¥ötf
("start blackÜisted\n");

129 } i‡(
	`GC_is_bœck_li°ed
(
h
, 
hhdr
 -> 
hb_sz
) != 0) {

130 
	`GC_¥ötf
("partially blackÜisted\n");

132 
	`GC_¥ötf
("not blackÜisted\n");

134 
h
 = 
hhdr
 -> 
hb_√xt
;

137 #i‚de‡
USE_MUNMAP


138 i‡(
tŸÆ_‰ì
 !
GC_œrge_‰ì_byãs
) {

139 
	`GC_¥ötf
("GC_large_free_bytes = %lu (INCONSISTENT!!)\n",

140 (Ë
GC_œrge_‰ì_byãs
);

143 
	`GC_¥ötf
("TŸÆ o‡%lu byã†⁄ fªêli°\n", ()
tŸÆ_‰ì
);

144 
	}
}

148 
	$‰ì_li°_ödex_of
(
hdr
 *
w™ãd
)

150 
hblk
 * 
h
;

151 
hdr
 * 
hhdr
;

152 
i
;

154 
i
 = 0; i <
N_HBLK_FLS
; ++i) {

155 
h
 = 
GC_hblk‰ìli°
[
i
];

156 
h
 != 0) {

157 
hhdr
 = 
	`HDR
(
h
);

158 i‡(
hhdr
 =
w™ãd
Ë 
i
;

159 
h
 = 
hhdr
 -> 
hb_√xt
;

163 
	}
}

165 
	$GC_dump_ªgi⁄s
()

167 
i
;

168 
±r_t
 
°¨t
, 
íd
;

169 
±r_t
 
p
;

170 
size_t
 
byãs
;

171 
hdr
 *
hhdr
;

172 
i
 = 0; i < 
GC_n_hóp_£˘s
; ++i) {

173 
°¨t
 = 
GC_hóp_£˘s
[
i
].
hs_°¨t
;

174 
byãs
 = 
GC_hóp_£˘s
[
i
].
hs_byãs
;

175 
íd
 = 
°¨t
 + 
byãs
;

177 
i
+1 < 
GC_n_hóp_£˘s
 && 
GC_hóp_£˘s
[i+1].
hs_°¨t
 =
íd
) {

178 ++
i
;

179 
íd
 = 
GC_hóp_£˘s
[
i
].
hs_°¨t
 + GC_hóp_£˘s[i].
hs_byãs
;

181 
	`GC_¥ötf
("***Se˘i⁄ from %∞tÿ%p\n", 
°¨t
, 
íd
);

182 
p
 = 
°¨t
;Ö < 
íd
;) {

183 
hhdr
 = 
	`HDR
(
p
);

184 
	`GC_¥ötf
("\t%∞", 
p
);

185 i‡(
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
)) {

186 
	`GC_¥ötf
("Missög hódî!!(%d)\n", 
hhdr
);

187 
p
 +
HBLKSIZE
;

190 i‡(
	`HBLK_IS_FREE
(
hhdr
)) {

191 
c‹ª˘_ödex
 = 
	`GC_hblk_Ê_‰om_blocks
(

192 
	`divHBLKSZ
(
hhdr
 -> 
hb_sz
));

193 
a˘uÆ_ödex
;

195 
	`GC_¥ötf
("\tfree block of size 0x%lx bytes",

196 ()(
hhdr
 -> 
hb_sz
));

197 i‡(
	`IS_MAPPED
(
hhdr
)) {

198 
	`GC_¥ötf
("\n");

200 
	`GC_¥ötf
("(unmapped)\n");

202 
a˘uÆ_ödex
 = 
	`‰ì_li°_ödex_of
(
hhdr
);

203 i‡(-1 =
a˘uÆ_ödex
) {

204 
	`GC_¥ötf
("\t\tBlockÇot on freeÜist %d!!\n",

205 
c‹ª˘_ödex
);

206 } i‡(
c‹ª˘_ödex
 !
a˘uÆ_ödex
) {

207 
	`GC_¥ötf
("\t\tBlock onÜist %d, should be on %d!!\n",

208 
a˘uÆ_ödex
, 
c‹ª˘_ödex
);

210 
p
 +
hhdr
 -> 
hb_sz
;

212 
	`GC_¥ötf
("\tused for blocks of size 0x%lx bytes\n",

213 ()(
hhdr
 -> 
hb_sz
));

214 
p
 +
HBLKSIZE
 * 
	`OBJ_SZ_TO_BLOCKS
(
hhdr
 -> 
hb_sz
);

218 
	}
}

225 
GC_boﬁ
 
	$£tup_hódî
(
hdr
 * 
hhdr
, 
hblk
 *
block
, 
size_t
 
byã_sz
,

226 
köd
, 
Êags
)

228 
w‹d
 
des¸
;

229 
size_t
 
gønuÀs
;

232 
hhdr
 -> 
hb_sz
 = 
byã_sz
;

233 
hhdr
 -> 
hb_obj_köd
 = ()
köd
;

234 
hhdr
 -> 
hb_Êags
 = ()
Êags
;

235 
hhdr
 -> 
hb_block
 = 
block
;

236 
des¸
 = 
GC_obj_köds
[
köd
].
ok_des¸ùt‹
;

237 i‡(
GC_obj_köds
[
köd
].
ok_ªloˇã_des¸
Ë
des¸
 +
byã_sz
;

238 
hhdr
 -> 
hb_des¸
 = 
des¸
;

240 #ifde‡
MARK_BIT_PER_OBJ


244 i‡(
byã_sz
 > 
MAXOBJBYTES
) {

245 
hhdr
 -> 
hb_öv_sz
 = 
LARGE_INV_SZ
;

247 
w‹d
 
öv_sz
;

249 #i‡
CPP_WORDSZ
 == 64

250 
öv_sz
 = ((
w‹d
)1 << 32)/
byã_sz
;

251 i‡(((
öv_sz
*
byã_sz
) >> 32) == 0) ++inv_sz;

253 
	`GC_ASSERT
(
byã_sz
 >= 4);

254 
öv_sz
 = (()1 << 31)/
byã_sz
;

255 
öv_sz
 *= 2;

256 
öv_sz
*
byã_sz
 > byte_sz) ++inv_sz;

258 
hhdr
 -> 
hb_öv_sz
 = 
öv_sz
;

261 
hhdr
 -> 
hb_œrge_block
 = ()(
byã_sz
 > 
MAXOBJBYTES
);

262 
gønuÀs
 = 
	`BYTES_TO_GRANULES
(
byã_sz
);

263 i‡(
	`EXPECT
(!
	`GC_add_m≠_íåy
(
gønuÀs
), 
FALSE
)) {

265 
hhdr
 -> 
hb_sz
 = 
HBLKSIZE
;

266 
hhdr
 -> 
hb_des¸
 = 0;

267 
hhdr
 -> 
hb_œrge_block
 = 
TRUE
;

268 
hhdr
 -> 
hb_m≠
 = 0;

269  
FALSE
;

271 
size_t
 
ödex
 = (
hhdr
 -> 
hb_œrge_block
? 0 : 
gønuÀs
);

272 
hhdr
 -> 
hb_m≠
 = 
GC_obj_m≠
[
ödex
];

277 
	`GC_˛ór_hdr_m¨ks
(
hhdr
);

279 
hhdr
 -> 
hb_œ°_ª˛aimed
 = ()
GC_gc_no
;

280 (
TRUE
);

281 
	}
}

283 
	#FL_UNKNOWN
 -1

	)

289 
	$GC_ªmove_‰om_Ê
(
hdr
 *
hhdr
, 
n
)

291 
ödex
;

293 
	`GC_ASSERT
(((
hhdr
 -> 
hb_sz
Ë& (
HBLKSIZE
-1)) == 0);

294 #i‚de‡
USE_MUNMAP


296 i‡(
FL_UNKNOWN
 =
n
) {

297 
ödex
 = 
	`GC_hblk_Ê_‰om_blocks
(
	`divHBLKSZ
(
hhdr
 -> 
hb_sz
));

299 
ödex
 = 
n
;

302 i‡(
hhdr
 -> 
hb_¥ev
 == 0) {

303 #ifde‡
USE_MUNMAP


304 i‡(
FL_UNKNOWN
 =
n
) {

305 
ödex
 = 
	`GC_hblk_Ê_‰om_blocks
(
	`divHBLKSZ
(
hhdr
 -> 
hb_sz
));

307 
ödex
 = 
n
;

310 
	`GC_ASSERT
(
	`HDR
(
GC_hblk‰ìli°
[
ödex
]Ë=
hhdr
);

311 
GC_hblk‰ìli°
[
ödex
] = 
hhdr
 -> 
hb_√xt
;

313 
hdr
 *
phdr
;

314 
	`GET_HDR
(
hhdr
 -> 
hb_¥ev
, 
phdr
);

315 
phdr
 -> 
hb_√xt
 = 
hhdr
 -> hb_next;

317 
	`FREE_ASSERT
(
GC_‰ì_byãs
[
ödex
] >
hhdr
 -> 
hb_sz
);

318 
	`INCR_FREE_BYTES
(
ödex
, - (
sig√d_w‹d
)(
hhdr
 -> 
hb_sz
));

319 i‡(0 !
hhdr
 -> 
hb_√xt
) {

320 
hdr
 * 
nhdr
;

321 
	`GC_ASSERT
(!
	`IS_FORWARDING_ADDR_OR_NIL
(
	`NHDR
(
hhdr
)));

322 
	`GET_HDR
(
hhdr
 -> 
hb_√xt
, 
nhdr
);

323 
nhdr
 -> 
hb_¥ev
 = 
hhdr
 -> hb_prev;

325 
	}
}

330 
hblk
 * 
	$GC_‰ì_block_ídög_©
(
hblk
 *
h
)

332 
hblk
 * 
p
 = 
h
 - 1;

333 
hdr
 * 
phdr
;

335 
	`GET_HDR
(
p
, 
phdr
);

336 0 !
phdr
 && 
	`IS_FORWARDING_ADDR_OR_NIL
(phdr)) {

337 
p
 = 
	`FORWARDED_ADDR
’,
phdr
);

338 
phdr
 = 
	`HDR
(
p
);

340 i‡(0 !
phdr
) {

341 if(
	`HBLK_IS_FREE
(
phdr
)) {

342  
p
;

347 
p
 = 
	`GC_¥ev_block
(
h
 - 1);

348 i‡(0 !
p
) {

349 
phdr
 = 
	`HDR
(
p
);

350 i‡(
	`HBLK_IS_FREE
(
phdr
Ë&& (
±r_t
)
p
 +Öhd∏-> 
hb_sz
 =’å_t)
h
) {

351  
p
;

355 
	}
}

361 
	$GC_add_to_Ê
(
hblk
 *
h
, 
hdr
 *
hhdr
)

363 
ödex
 = 
	`GC_hblk_Ê_‰om_blocks
(
	`divHBLKSZ
(
hhdr
 -> 
hb_sz
));

364 
hblk
 *
£c⁄d
 = 
GC_hblk‰ìli°
[
ödex
];

365 
hdr
 * 
£c⁄d_hdr
;

366 #i‡
	`deföed
(
GC_ASSERTIONS
Ë&& !deföed(
USE_MUNMAP
)

367 
hblk
 *
√xt
 = (hblk *)((
w‹d
)
h
 + 
hhdr
 -> 
hb_sz
);

368 
hdr
 * 
√xthdr
 = 
	`HDR
(
√xt
);

369 
hblk
 *
¥ev
 = 
	`GC_‰ì_block_ídög_©
(
h
);

370 
hdr
 * 
¥evhdr
 = 
	`HDR
(
¥ev
);

371 
	`GC_ASSERT
(
√xthdr
 =0 || !
	`HBLK_IS_FREE
(nexthdr)

372 || (
sig√d_w‹d
)
GC_hópsize
 < 0);

374 
	`GC_ASSERT
(
¥ev
 =0 || !
	`HBLK_IS_FREE
(
¥evhdr
)

375 || (
sig√d_w‹d
)
GC_hópsize
 < 0);

377 
	`GC_ASSERT
(((
hhdr
 -> 
hb_sz
Ë& (
HBLKSIZE
-1)) == 0);

378 
GC_hblk‰ìli°
[
ödex
] = 
h
;

379 
	`INCR_FREE_BYTES
(
ödex
, 
hhdr
 -> 
hb_sz
);

380 
	`FREE_ASSERT
(
GC_‰ì_byãs
[
ödex
] <
GC_œrge_‰ì_byãs
)

381 
hhdr
 -> 
hb_√xt
 = 
£c⁄d
;

382 
hhdr
 -> 
hb_¥ev
 = 0;

383 i‡(0 !
£c⁄d
) {

384 
	`GET_HDR
(
£c⁄d
, 
£c⁄d_hdr
);

385 
£c⁄d_hdr
 -> 
hb_¥ev
 = 
h
;

387 
hhdr
 -> 
hb_Êags
 |
FREE_BLK
;

388 
	}
}

390 #ifde‡
USE_MUNMAP


394 
	$GC_unm≠_ﬁd
()

396 
hblk
 * 
h
;

397 
hdr
 * 
hhdr
;

398 
w‹d
 
sz
;

399 
œ°_ªc
, 
thªshﬁd
;

400 
i
;

401 #i‚de‡
MUNMAP_THRESHOLD


402 
	#MUNMAP_THRESHOLD
 6

	)

405 
i
 = 0; i <
N_HBLK_FLS
; ++i) {

406 
h
 = 
GC_hblk‰ìli°
[
i
]; 0 !h; h = 
hhdr
 -> 
hb_√xt
) {

407 
hhdr
 = 
	`HDR
(
h
);

408 i‡(!
	`IS_MAPPED
(
hhdr
)) ;

409 
thªshﬁd
 = ()(
GC_gc_no
 - 
MUNMAP_THRESHOLD
);

410 
œ°_ªc
 = 
hhdr
 -> 
hb_œ°_ª˛aimed
;

411 i‡((
œ°_ªc
 > 
GC_gc_no
 ||Üa°_ª¯< 
thªshﬁd
)

412 && 
thªshﬁd
 < 
GC_gc_no
 ) {

413 
sz
 = 
hhdr
 -> 
hb_sz
;

414 
	`GC_unm≠
((
±r_t
)
h
, 
sz
);

415 
hhdr
 -> 
hb_Êags
 |
WAS_UNMAPPED
;

419 
	}
}

424 
	$GC_mîge_unm≠≥d
()

426 
hblk
 * 
h
, *
√xt
;

427 
hdr
 * 
hhdr
, *
√xthdr
;

428 
w‹d
 
size
, 
√xtsize
;

429 
i
;

431 
i
 = 0; i <
N_HBLK_FLS
; ++i) {

432 
h
 = 
GC_hblk‰ìli°
[
i
];

433 
h
 != 0) {

434 
	`GET_HDR
(
h
, 
hhdr
);

435 
size
 = 
hhdr
->
hb_sz
;

436 
√xt
 = (
hblk
 *)((
w‹d
)
h
 + 
size
);

437 
	`GET_HDR
(
√xt
, 
√xthdr
);

439 i‡(0 !
√xthdr
 && 
	`HBLK_IS_FREE
(nexthdr)

440 && (
sig√d_w‹d
Ë(
size
 + (
√xtsize
 = 
√xthdr
->
hb_sz
)) > 0

442 i‡(
	`IS_MAPPED
(
hhdr
)) {

443 
	`GC_ASSERT
(!
	`IS_MAPPED
(
√xthdr
));

445 i‡(
size
 > 
√xtsize
) {

446 
	`GC_ªm≠
((
±r_t
)
√xt
, 
√xtsize
);

448 
	`GC_unm≠
((
±r_t
)
h
, 
size
);

449 
hhdr
 -> 
hb_Êags
 |
WAS_UNMAPPED
;

451 } i‡(
	`IS_MAPPED
(
√xthdr
)) {

452 
	`GC_ASSERT
(!
	`IS_MAPPED
(
hhdr
));

453 i‡(
size
 > 
√xtsize
) {

454 
	`GC_unm≠
((
±r_t
)
√xt
, 
√xtsize
);

456 
	`GC_ªm≠
((
±r_t
)
h
, 
size
);

457 
hhdr
 -> 
hb_Êags
 &~
WAS_UNMAPPED
;

458 
hhdr
 -> 
hb_œ°_ª˛aimed
 = 
√xthdr
 -> hb_last_reclaimed;

462 
	`GC_unm≠_g≠
((
±r_t
)
h
, 
size
, (±r_t)
√xt
, 
√xthdr
 -> 
hb_sz
);

465 
	`GC_ªmove_‰om_Ê
(
hhdr
, 
i
);

466 
	`GC_ªmove_‰om_Ê
(
√xthdr
, 
FL_UNKNOWN
);

467 
hhdr
 -> 
hb_sz
 +
√xthdr
 -> hb_sz;

468 
	`GC_ªmove_hódî
(
√xt
);

469 
	`GC_add_to_Ê
(
h
, 
hhdr
);

471 
h
 = 
GC_hblk‰ìli°
[
i
];

473 
h
 = 
hhdr
 -> 
hb_√xt
;

477 
	}
}

490 
hblk
 * 
	$GC_gë_fú°_∑π
(
hblk
 *
h
, 
hdr
 *
hhdr
,

491 
size_t
 
byãs
, 
ödex
)

493 
w‹d
 
tŸÆ_size
 = 
hhdr
 -> 
hb_sz
;

494 
hblk
 * 
ª°
;

495 
hdr
 * 
ª°_hdr
;

497 
	`GC_ASSERT
((
tŸÆ_size
 & (
HBLKSIZE
-1)) == 0);

498 
	`GC_ªmove_‰om_Ê
(
hhdr
, 
ödex
);

499 i‡(
tŸÆ_size
 =
byãs
Ë 
h
;

500 
ª°
 = (
hblk
 *)((
w‹d
)
h
 + 
byãs
);

501 
ª°_hdr
 = 
	`GC_ö°Æl_hódî
(
ª°
);

502 i‡(0 =
ª°_hdr
) {

504 
	`WARN
("Headerállocation failed: Dropping block.\n", 0);

507 
ª°_hdr
 -> 
hb_sz
 = 
tŸÆ_size
 - 
byãs
;

508 
ª°_hdr
 -> 
hb_Êags
 = 0;

509 #ifde‡
GC_ASSERTIONS


511 
hhdr
 -> 
hb_Êags
 &~
FREE_BLK
;

513 
	`GC_add_to_Ê
(
ª°
, 
ª°_hdr
);

514  
h
;

515 
	}
}

529 
	$GC_•lô_block
(
hblk
 *
h
, 
hdr
 *
hhdr
, hblk *
n
,

530 
hdr
 *
nhdr
, 
ödex
 )

532 
w‹d
 
tŸÆ_size
 = 
hhdr
 -> 
hb_sz
;

533 
w‹d
 
h_size
 = (w‹d)
n
 - (w‹d)
h
;

534 
hblk
 *
¥ev
 = 
hhdr
 -> 
hb_¥ev
;

535 
hblk
 *
√xt
 = 
hhdr
 -> 
hb_√xt
;

538 
nhdr
 -> 
hb_¥ev
 = 
¥ev
;

539 
nhdr
 -> 
hb_√xt
 = 
√xt
;

540 
nhdr
 -> 
hb_sz
 = 
tŸÆ_size
 - 
h_size
;

541 
nhdr
 -> 
hb_Êags
 = 0;

542 i‡(0 !
¥ev
) {

543 
	`HDR
(
¥ev
Ë-> 
hb_√xt
 = 
n
;

545 
GC_hblk‰ìli°
[
ödex
] = 
n
;

547 i‡(0 !
√xt
) {

548 
	`HDR
(
√xt
Ë-> 
hb_¥ev
 = 
n
;

550 
	`INCR_FREE_BYTES
(
ödex
, -(
sig√d_w‹d
)
h_size
);

551 
	`FREE_ASSERT
(
GC_‰ì_byãs
[
ödex
] > 0);

552 #ifde‡
GC_ASSERTIONS


553 
nhdr
 -> 
hb_Êags
 &~
FREE_BLK
;

557 #ifde‡
USE_MUNMAP


558 
hhdr
 -> 
hb_œ°_ª˛aimed
 = ()
GC_gc_no
;

560 
hhdr
 -> 
hb_sz
 = 
h_size
;

561 
	`GC_add_to_Ê
(
h
, 
hhdr
);

562 
nhdr
 -> 
hb_Êags
 |
FREE_BLK
;

563 
	}
}

565 
hblk
 *

566 
GC_Ælochblk_¡h
(
size_t
 
sz
 , 
köd
, 
Êags
, 
n
,

567 
GC_boﬁ
 
may_•lô
);

578 
hblk
 *

579 
	$GC_Ælochblk
(
size_t
 
sz
, 
köd
, 
Êags
 )

581 
w‹d
 
blocks
;

582 
°¨t_li°
;

583 
i
;

584 
hblk
 *
ªsu…
;

585 
•lô_limô
;

588 
	`GC_ASSERT
((
sz
 & (
GRANULE_BYTES
 - 1)) == 0);

589 
blocks
 = 
	`OBJ_SZ_TO_BLOCKS
(
sz
);

590 i‡((
sig√d_w‹d
)(
blocks
 * 
HBLKSIZE
) < 0) {

593 
°¨t_li°
 = 
	`GC_hblk_Ê_‰om_blocks
(
blocks
);

595 
ªsu…
 = 
	`GC_Ælochblk_¡h
(
sz
, 
köd
, 
Êags
, 
°¨t_li°
, 
FALSE
);

596 i‡(0 !
ªsu…
) Ñesult;

597 i‡(
GC_u£_ítúe_hóp
 || 
GC_d⁄t_gc


598 || 
USED_HEAP_SIZE
 < 
GC_ªque°ed_hópsize


599 || 
TRUE_INCREMENTAL
 || !
	`GC_should_cﬁÀ˘
()) {

601 
•lô_limô
 = 
N_HBLK_FLS
;

603 #ifde‡
USE_MUNMAP


605 
•lô_limô
 = 0;

607 i‡(
GC_föÆizî_byãs_‰ìd
 > (
GC_hópsize
 >> 4)) {

611 
•lô_limô
 = 0;

618 
•lô_limô
 = 
	`GC_íough_œrge_byãs_À·
();

622 i‡(
°¨t_li°
 < 
UNIQUE_THRESHOLD
) {

625 ++
°¨t_li°
;

627 
i
 = 
°¨t_li°
; i <
•lô_limô
; ++i) {

628 
hblk
 * 
ªsu…
 = 
	`GC_Ælochblk_¡h
(
sz
, 
köd
, 
Êags
, 
i
, 
TRUE
);

629 i‡(0 !
ªsu…
) Ñesult;

632 
	}
}

639 
hblk
 *

640 
	$GC_Ælochblk_¡h
(
size_t
 
sz
, 
köd
, 
Êags
, 
n
, 
GC_boﬁ
 
may_•lô
)

642 
hblk
 *
hbp
;

643 
hdr
 * 
hhdr
;

646 
hblk
 *
thishbp
;

647 
hdr
 * 
thishdr
;

648 
sig√d_w‹d
 
size_√eded
;

649 
sig√d_w‹d
 
size_avaû
;

651 
size_√eded
 = 
HBLKSIZE
 * 
	`OBJ_SZ_TO_BLOCKS
(
sz
);

654 
hbp
 = 
GC_hblk‰ìli°
[
n
];

655 ; 0 !
hbp
; hb∞
hhdr
 -> 
hb_√xt
) {

656 
	`GET_HDR
(
hbp
, 
hhdr
);

657 
size_avaû
 = 
hhdr
->
hb_sz
;

658 i‡(
size_avaû
 < 
size_√eded
) ;

659 i‡(
size_avaû
 !
size_√eded
) {

660 
sig√d_w‹d
 
√xt_size
;

662 i‡(!
may_•lô
) ;

666 
thishbp
 = 
hhdr
 -> 
hb_√xt
;

667 i‡(
thishbp
 != 0) {

668 
	`GET_HDR
(
thishbp
, 
thishdr
);

669 
√xt_size
 = (
sig√d_w‹d
)(
thishdr
 -> 
hb_sz
);

670 i‡(
√xt_size
 < 
size_avaû


671 && 
√xt_size
 >
size_√eded


672 && !
	`GC_is_bœck_li°ed
(
thishbp
, (
w‹d
)
size_√eded
)) {

677 i‡–!
	`IS_UNCOLLECTABLE
(
köd
) &&

678 (
köd
 !
PTRFREE
 || 
size_√eded
 > 
MAX_BLACK_LIST_ALLOC
)) {

679 
hblk
 * 
œ°hbp
 = 
hbp
;

680 
±r_t
 
£¨ch_íd
 = (±r_t)
hbp
 + 
size_avaû
 - 
size_√eded
;

681 
sig√d_w‹d
 
‹ig_avaû
 = 
size_avaû
;

682 
sig√d_w‹d
 
eff_size_√eded
 = ((
Êags
 & 
IGNORE_OFF_PAGE
)?

683 
HBLKSIZE


684 : 
size_√eded
);

687 (
±r_t
)
œ°hbp
 <
£¨ch_íd


688 && (
thishbp
 = 
	`GC_is_bœck_li°ed
(
œ°hbp
,

689 (
w‹d
)
eff_size_√eded
))

691 
œ°hbp
 = 
thishbp
;

693 
size_avaû
 -(
±r_t
)
œ°hbp
 - (±r_t)
hbp
;

694 
thishbp
 = 
œ°hbp
;

695 i‡(
size_avaû
 >
size_√eded
) {

696 i‡(
thishbp
 !
hbp
 &&

697 0 !(
thishdr
 = 
	`GC_ö°Æl_hódî
(
thishbp
))) {

699 #ifde‡
USE_MUNMAP


700 i‡(!
	`IS_MAPPED
(
hhdr
)) {

701 
	`GC_ªm≠
((
±r_t
)
hbp
, 
hhdr
 -> 
hb_sz
);

702 
hhdr
 -> 
hb_Êags
 &~
WAS_UNMAPPED
;

706 
	`GC_•lô_block
(
hbp
, 
hhdr
, 
thishbp
, 
thishdr
, 
n
);

708 
hbp
 = 
thishbp
;

709 
hhdr
 = 
thishdr
;

713 } i‡(
size_√eded
 > (
sig√d_w‹d
)
BL_LIMIT


714 && 
‹ig_avaû
 - 
size_√eded


715 > (
sig√d_w‹d
)
BL_LIMIT
) {

717 i‡(++
GC_œrge_Æloc_w¨n_suµªs£d


718 >
GC_œrge_Æloc_w¨n_öãrvÆ
) {

719 
	`WARN
("Repeatedállocation of veryÜarge block "

722 
size_√eded
);

723 
GC_œrge_Æloc_w¨n_suµªs£d
 = 0;

725 
size_avaû
 = 
‹ig_avaû
;

726 } i‡(
size_avaû
 =0 && 
size_√eded
 =
HBLKSIZE


727 && 
	`IS_MAPPED
(
hhdr
)) {

728 i‡(!
GC_föd_Àak
) {

729 
cou¡
 = 0;

736 i‡((++
cou¡
 & 3) == 0) {

740 
w‹d
 
tŸÆ_size
 = 
hhdr
 -> 
hb_sz
;

741 
hblk
 * 
limô
 = 
hbp
 + 
	`divHBLKSZ
(
tŸÆ_size
);

742 
hblk
 * 
h
;

743 
hblk
 * 
¥ev
 = 
hhdr
 -> 
hb_¥ev
;

745 
GC_œrge_‰ì_byãs
 -
tŸÆ_size
;

746 
GC_byãs_dr›≥d
 +
tŸÆ_size
;

747 
	`GC_ªmove_‰om_Ê
(
hhdr
, 
n
);

748 
h
 = 
hbp
; h < 
limô
; h++) {

749 i‡(
h
 =
hbp
 || 0 !(
hhdr
 = 
	`GC_ö°Æl_hódî
(h))) {

750 (Ë
	`£tup_hódî
(

751 
hhdr
, 
h
,

752 
HBLKSIZE
,

753 
PTRFREE
, 0);

754 i‡(
GC_debuggög_°¨ãd
) {

755 
	`BZERO
(
h
, 
HBLKSIZE
);

760 
hbp
 = 
¥ev
;

761 i‡(0 =
hbp
) {

762  
	`GC_Ælochblk_¡h
(
sz
, 
köd
, 
Êags
, 
n
, 
may_•lô
);

764 
hhdr
 = 
	`HDR
(
hbp
);

769 if–
size_avaû
 >
size_√eded
 ) {

770 #ifde‡
USE_MUNMAP


771 i‡(!
	`IS_MAPPED
(
hhdr
)) {

772 
	`GC_ªm≠
((
±r_t
)
hbp
, 
hhdr
 -> 
hb_sz
);

773 
hhdr
 -> 
hb_Êags
 &~
WAS_UNMAPPED
;

779 
hbp
 = 
	`GC_gë_fú°_∑π
(hbp, 
hhdr
, 
size_√eded
, 
n
);

784 i‡(0 =
hbp
)  0;

787 i‡(!
	`GC_ö°Æl_cou¡s
(
hbp
, (
w‹d
)
size_√eded
)) (0);

791 i‡(!
	`£tup_hódî
(
hhdr
, 
hbp
, 
sz
, 
köd
, 
Êags
)) {

792 
	`GC_ªmove_cou¡s
(
hbp
, (
w‹d
)
size_√eded
);

798 
	`GC_ªmove_¥Ÿe˘i⁄
(
hbp
, 
	`divHBLKSZ
(
size_√eded
),

799 (
hhdr
 -> 
hb_des¸
 == 0) );

804 
GC_Áû_cou¡
;

806 
GC_Áû_cou¡
 = 0;

809 
GC_œrge_‰ì_byãs
 -
size_√eded
;

811 
	`GC_ASSERT
(
	`IS_MAPPED
(
hhdr
));

812 –
hbp
 );

813 
	}
}

815 
hblk
 * 
	gGC_‰ìhblk_±r
 = 0;

825 
	$GC_‰ìhblk
(
hblk
 *
hbp
)

827 
hblk
 *
√xt
, *
¥ev
;

828 
hdr
 *
hhdr
, *
¥evhdr
, *
√xthdr
;

829 
sig√d_w‹d
 
size
;

832 
	`GET_HDR
(
hbp
, 
hhdr
);

833 
size
 = 
hhdr
->
hb_sz
;

834 
size
 = 
HBLKSIZE
 * 
	`OBJ_SZ_TO_BLOCKS
(size);

835 i‡(
size
 <= 0)

836 
	`ABORT
("DeallocatingÉxcessivelyÜarge block. TooÜargeánállocation?");

840 
	`GC_ªmove_cou¡s
(
hbp
, (
w‹d
)
size
);

841 
hhdr
->
hb_sz
 = 
size
;

842 #ifde‡
USE_MUNMAP


843 
hhdr
 -> 
hb_œ°_ª˛aimed
 = ()
GC_gc_no
;

847 i‡(
	`HBLK_IS_FREE
(
hhdr
)) {

848 
	`GC_¥ötf
("Du∂iˇãÜ¨gêblock dóŒoˇti⁄ o‡%p\n", 
hbp
);

849 
	`ABORT
("DuplicateÜarge block deallocation");

852 
	`GC_ASSERT
(
	`IS_MAPPED
(
hhdr
));

853 
hhdr
 -> 
hb_Êags
 |
FREE_BLK
;

854 
√xt
 = (
hblk
 *)((
w‹d
)
hbp
 + 
size
);

855 
	`GET_HDR
(
√xt
, 
√xthdr
);

856 
¥ev
 = 
	`GC_‰ì_block_ídög_©
(
hbp
);

858 if(0 !
√xthdr
 && 
	`HBLK_IS_FREE
“exthdrË&& 
	`IS_MAPPED
(nexthdr)

859 && (
sig√d_w‹d
)(
hhdr
 -> 
hb_sz
 + 
√xthdr
 -> hb_sz) > 0

861 
	`GC_ªmove_‰om_Ê
(
√xthdr
, 
FL_UNKNOWN
);

862 
hhdr
 -> 
hb_sz
 +
√xthdr
 -> hb_sz;

863 
	`GC_ªmove_hódî
(
√xt
);

866 i‡(0 !
¥ev
) {

867 
¥evhdr
 = 
	`HDR
(
¥ev
);

868 i‡(
	`IS_MAPPED
(
¥evhdr
)

869 && (
sig√d_w‹d
)(
hhdr
 -> 
hb_sz
 + 
¥evhdr
 -> hb_sz) > 0) {

870 
	`GC_ªmove_‰om_Ê
(
¥evhdr
, 
FL_UNKNOWN
);

871 
¥evhdr
 -> 
hb_sz
 +
hhdr
 -> hb_sz;

872 #ifde‡
USE_MUNMAP


873 
¥evhdr
 -> 
hb_œ°_ª˛aimed
 = ()
GC_gc_no
;

875 
	`GC_ªmove_hódî
(
hbp
);

876 
hbp
 = 
¥ev
;

877 
hhdr
 = 
¥evhdr
;

884 
GC_œrge_‰ì_byãs
 +
size
;

885 
	`GC_add_to_Ê
(
hbp
, 
hhdr
);

886 
	}
}

	@alloc.c

19 
	~"¥iv©e/gc_¥iv.h
"

21 
	~<°dio.h
>

22 #i‡!
deföed
(
MACOS
Ë&& !deföed(
MSWINCE
)

23 
	~<sig«l.h
>

24 
	~<sys/ty≥s.h
>

58 
w‹d
 
	gGC_n⁄_gc_byãs
 = 0;

60 
w‹d
 
	gGC_gc_no
 = 0;

62 #i‚de‡
SMALL_CONFIG


63 
	gGC_ö¸emíèl
 = 0;

66 
	gGC_∑øŒñ
 = 
FALSE
;

68 
	gGC_fuŒ_‰eq
 = 19;

72 
GC_boﬁ
 
	gGC_√ed_fuŒ_gc
 = 
FALSE
;

75 #ifde‡
THREADS


76 
GC_boﬁ
 
	gGC_w‹ld_°›≥d
 = 
FALSE
;

77 
	#IF_THREADS
(
x
Ë
	)
x

79 
	#IF_THREADS
(
x
)

	)

82 
w‹d
 
	gGC_u£d_hóp_size_a·î_fuŒ
 = 0;

84 * 
	gGC_c›yright
[] =

96 #i‚de‡
GC_NO_VERSION_VAR


98 
	gGC_vîsi⁄
 = ((
GC_VERSION_MAJOR
 << 16Ë| (
GC_VERSION_MINOR
 << 8Ë| 
GC_TMP_ALPHA_VERSION
);

104 
sig√d_w‹d
 
GC_byãs_found
;

107 
GC_boﬁ
 
	gGC_d⁄t_ex∑nd
 = 0;

109 
w‹d
 
	gGC_‰ì_•a˚_divis‹
 = 3;

111 
GC_boﬁ
 
GC_cﬁÀ˘i⁄_ö_¥ogªss
();

114 
	$GC_√vî_°›_func
 (Ë{ (0); 
	}
}

116 
	gGC_time_limô
 = 
TIME_LIMIT
;

118 
CLOCK_TYPE
 
	gGC_°¨t_time
;

121 
	gGC_n_©ãm±s
 = 0;

124 #i‡
deföed
(
SMALL_CONFIG
Ë|| deföed(
NO_CLOCK
)

125 
	#GC_timeout_°›_func
 
GC_√vî_°›_func


	)

127 
	$GC_timeout_°›_func
 ()

129 
CLOCK_TYPE
 
cuºít_time
;

130 
cou¡
 = 0;

131 
time_diff
;

133 i‡((
cou¡
++ & 3) != 0) (0);

134 
	`GET_TIME
(
cuºít_time
);

135 
time_diff
 = 
	`MS_TIME_DIFF
(
cuºít_time
,
GC_°¨t_time
);

136 i‡(
time_diff
 >
GC_time_limô
) {

137 i‡(
GC_¥öt_°©s
) {

138 
	`GC_log_¥ötf
("Abandoning stopped markingáfter ");

139 
	`GC_log_¥ötf
("%lu m£cs", 
time_diff
);

140 
	`GC_log_¥ötf
("◊âem± %d)\n", 
GC_n_©ãm±s
);

145 
	}
}

150 
w‹d
 
	$mö_byãs_Ælocd
()

152 #ifde‡
THREADS


154 
sig√d_w‹d
 
°ack_size
 = 10000;

156 
dummy
;

157 
sig√d_w‹d
 
°ack_size
 = (
±r_t
)(&
dummy
Ë- 
GC_°ackbŸtom
;

159 
w‹d
 
tŸÆ_roŸ_size
;

162 
w‹d
 
sˇn_size
;

165 i‡(
°ack_size
 < 0) stack_size = -stack_size;

166 
tŸÆ_roŸ_size
 = 2 * 
°ack_size
 + 
GC_roŸ_size
;

167 
sˇn_size
 = 2 * 
GC_composôe_ö_u£
 + 
GC_©omic_ö_u£
/4

168 + 
tŸÆ_roŸ_size
;

169 i‡(
TRUE_INCREMENTAL
) {

170  
sˇn_size
 / (2 * 
GC_‰ì_•a˚_divis‹
);

172  
sˇn_size
 / 
GC_‰ì_•a˚_divis‹
;

174 
	}
}

179 
w‹d
 
	$GC_adj_byãs_Ælocd
()

181 
sig√d_w‹d
 
ªsu…
;

182 
sig√d_w‹d
 
ex∂_m™aged
 =

183 (
sig√d_w‹d
)
GC_n⁄_gc_byãs


184 - (
sig√d_w‹d
)
GC_n⁄_gc_byãs_©_gc
;

190 
ªsu…
 = (
sig√d_w‹d
)
GC_byãs_Ælocd


191 + (
sig√d_w‹d
)
GC_byãs_dr›≥d


192 - (
sig√d_w‹d
)
GC_byãs_‰ìd


193 + (
sig√d_w‹d
)
GC_föÆizî_byãs_‰ìd


194 - 
ex∂_m™aged
;

195 i‡(
ªsu…
 > (
sig√d_w‹d
)
GC_byãs_Ælocd
) {

196 
ªsu…
 = 
GC_byãs_Ælocd
;

199 
ªsu…
 +
GC_byãs_föÆized
;

204 i‡(
ªsu…
 < (
sig√d_w‹d
)(
GC_byãs_Ælocd
 >> 3)) {

209 (
GC_byãs_Ælocd
 >> 3);

211 (
ªsu…
);

213 
	}
}

221 
	$GC_˛ór_a_„w_‰ames
()

223 
	#NWORDS
 64

	)

224 
w‹d
 
‰ames
[
NWORDS
];

225 
i
;

227 
i
 = 0; i < 
NWORDS
; i++Ë
‰ames
[i] = 0;

228 
	}
}

232 
w‹d
 
	gGC_cﬁÀ˘_©_hópsize
 = (word)(-1);

235 
GC_boﬁ
 
	$GC_should_cﬁÀ˘
()

237 
w‹d
 
œ°_mö_byãs_Ælocd
;

238 
w‹d
 
œ°_gc_no
;

239 i‡(
œ°_gc_no
 !
GC_gc_no
) {

240 
œ°_gc_no
 = 
GC_gc_no
;

241 
œ°_mö_byãs_Ælocd
 = 
	`mö_byãs_Ælocd
();

243 (
	`GC_adj_byãs_Ælocd
(Ë>
œ°_mö_byãs_Ælocd


244 || 
GC_hópsize
 >
GC_cﬁÀ˘_©_hópsize
);

245 
	}
}

248 
	$GC_nŸify_fuŒ_gc
()

250 i‡(
GC_°¨t_ˇŒ_back
 != ((*) ())0) {

251 (*
GC_°¨t_ˇŒ_back
)();

253 
	}
}

255 
GC_boﬁ
 
	gGC_is_fuŒ_gc
 = 
FALSE
;

262 
	$GC_maybe_gc
()

264 
n_∑πül_gcs
 = 0;

266 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

267 i‡(
	`GC_should_cﬁÀ˘
()) {

268 i‡(!
GC_ö¸emíèl
) {

269 
	`GC_gcﬁÀ˘_ö√r
();

270 
n_∑πül_gcs
 = 0;

273 #ifde‡
PARALLEL_MARK


274 
	`GC_waô_f‹_ª˛aim
();

276 i‡(
GC_√ed_fuŒ_gc
 || 
n_∑πül_gcs
 >
GC_fuŒ_‰eq
) {

277 i‡(
GC_¥öt_°©s
) {

278 
	`GC_log_¥ötf
(

280 ()
GC_gc_no
+1,

281 ()
GC_byãs_Ælocd
);

283 
	`GC_¥omŸe_bœck_li°s
();

284 ()
	`GC_ª˛aim_Æl
((
GC_°›_func
)0, 
TRUE
);

285 
	`GC_˛ór_m¨ks
();

286 
n_∑πül_gcs
 = 0;

287 
	`GC_nŸify_fuŒ_gc
();

288 
GC_is_fuŒ_gc
 = 
TRUE
;

290 
n_∑πül_gcs
++;

296 #i‚de‡
NO_CLOCK


297 i‡(
GC_time_limô
 !
GC_TIME_UNLIMITED
Ë{ 
	`GET_TIME
(
GC_°¨t_time
); }

299 i‡(
	`GC_°›≥d_m¨k
(
GC_time_limô
 =
GC_TIME_UNLIMITED
?

300 
GC_√vî_°›_func
 : 
GC_timeout_°›_func
)) {

301 #ifde‡
SAVE_CALL_CHAIN


302 
	`GC_ßve_ˇŒîs
(
GC_œ°_°ack
);

304 
	`GC_föish_cﬁÀ˘i⁄
();

306 i‡(!
GC_is_fuŒ_gc
) {

308 
GC_n_©ãm±s
++;

312 
	}
}

320 
GC_boﬁ
 
	$GC_åy_to_cﬁÀ˘_ö√r
(
GC_°›_func
 
°›_func
)

322 
CLOCK_TYPE
 
°¨t_time
, 
cuºít_time
;

323 i‡(
GC_d⁄t_gc
Ë 
FALSE
;

324 i‡(
GC_ö¸emíèl
 && 
	`GC_cﬁÀ˘i⁄_ö_¥ogªss
()) {

325 i‡(
GC_¥öt_°©s
) {

326 
	`GC_log_¥ötf
(

330 
	`GC_cﬁÀ˘i⁄_ö_¥ogªss
()) {

331 i‡(
	`°›_func
()Ë(
FALSE
);

332 
	`GC_cﬁÀ˘_a_lôée_ö√r
(1);

335 i‡(
°›_func
 =
GC_√vî_°›_func
Ë
	`GC_nŸify_fuŒ_gc
();

336 i‡(
GC_¥öt_°©s
) {

337 
	`GET_TIME
(
°¨t_time
);

338 
	`GC_log_¥ötf
(

340 ()
GC_gc_no
+1, ()
GC_byãs_Ælocd
);

342 
	`GC_¥omŸe_bœck_li°s
();

348 #ifde‡
PARALLEL_MARK


349 
	`GC_waô_f‹_ª˛aim
();

351 i‡((
GC_föd_Àak
 || 
°›_func
 !
GC_√vî_°›_func
)

352 && !
	`GC_ª˛aim_Æl
(
°›_func
, 
FALSE
)) {

354 (
FALSE
);

356 
	`GC_övÆid©e_m¨k_°©e
();

357 
	`GC_˛ór_m¨ks
();

358 #ifde‡
SAVE_CALL_CHAIN


359 
	`GC_ßve_ˇŒîs
(
GC_œ°_°ack
);

361 
GC_is_fuŒ_gc
 = 
TRUE
;

362 i‡(!
	`GC_°›≥d_m¨k
(
°›_func
)) {

363 i‡(!
GC_ö¸emíèl
) {

367 
	`GC_övÆid©e_m¨k_°©e
();

368 
	`GC_u≈romŸe_bœck_li°s
();

371 (
FALSE
);

373 
	`GC_föish_cﬁÀ˘i⁄
();

374 i‡(
GC_¥öt_°©s
) {

375 
	`GET_TIME
(
cuºít_time
);

376 
	`GC_log_¥ötf
("Complete collectionÅook %lu msecs\n",

377 
	`MS_TIME_DIFF
(
cuºít_time
,
°¨t_time
));

379 (
TRUE
);

380 
	}
}

391 
	#GC_RATE
 10

	)

392 
	#MAX_PRIOR_ATTEMPTS
 1

	)

398 
	gGC_deficô
 = 0;

401 
	$GC_cﬁÀ˘_a_lôée_ö√r
(
n
)

403 
i
;

405 i‡(
GC_d⁄t_gc
) ;

406 i‡(
GC_ö¸emíèl
 && 
	`GC_cﬁÀ˘i⁄_ö_¥ogªss
()) {

407 
i
 = 
GC_deficô
; i < 
GC_RATE
*
n
; i++) {

408 i‡(
	`GC_m¨k_some
((
±r_t
)0)) {

410 #ifde‡
SAVE_CALL_CHAIN


411 
	`GC_ßve_ˇŒîs
(
GC_œ°_°ack
);

413 #ifde‡
PARALLEL_MARK


414 
	`GC_waô_f‹_ª˛aim
();

416 i‡(
GC_n_©ãm±s
 < 
MAX_PRIOR_ATTEMPTS


417 && 
GC_time_limô
 !
GC_TIME_UNLIMITED
) {

418 
	`GET_TIME
(
GC_°¨t_time
);

419 i‡(!
	`GC_°›≥d_m¨k
(
GC_timeout_°›_func
)) {

420 
GC_n_©ãm±s
++;

424 ()
	`GC_°›≥d_m¨k
(
GC_√vî_°›_func
);

426 
	`GC_föish_cﬁÀ˘i⁄
();

430 i‡(
GC_deficô
 > 0ËGC_deficô -
GC_RATE
*
n
;

431 i‡(
GC_deficô
 < 0) GC_deficit = 0;

433 
	`GC_maybe_gc
();

435 
	}
}

437 
	$GC_cﬁÀ˘_a_lôée
()

439 
ªsu…
;

440 
DCL_LOCK_STATE
;

442 
	`LOCK
();

443 
	`GC_cﬁÀ˘_a_lôée_ö√r
(1);

444 
ªsu…
 = ()
	`GC_cﬁÀ˘i⁄_ö_¥ogªss
();

445 
	`UNLOCK
();

446 i‡(!
ªsu…
 && 
GC_debuggög_°¨ãd
Ë
	`GC_¥öt_Æl_smashed
();

447 (
ªsu…
);

448 
	}
}

450 #i‡!
deföed
(
REDIRECT_MALLOC
Ë&& (deföed(
MSWIN32
Ë|| deföed(
MSWINCE
))

451 
GC_add_cuºít_mÆloc_hóp
();

459 
GC_boﬁ
 
	$GC_°›≥d_m¨k
(
GC_°›_func
 
°›_func
)

461 
i
;

462 
dummy
;

463 
CLOCK_TYPE
 
°¨t_time
, 
cuºít_time
;

465 i‡(
GC_¥öt_°©s
)

466 
	`GET_TIME
(
°¨t_time
);

468 #i‡!
	`deföed
(
REDIRECT_MALLOC
Ë&& (deföed(
MSWIN32
Ë|| deföed(
MSWINCE
))

469 
	`GC_add_cuºít_mÆloc_hóp
();

471 #i‡
	`deföed
(
REGISTER_LIBRARIES_EARLY
)

472 
	`GC_c⁄d_ªgi°î_dy«mic_libørõs
();

474 
	`STOP_WORLD
();

475 
	`IF_THREADS
(
GC_w‹ld_°›≥d
 = 
TRUE
);

476 i‡(
GC_¥öt_°©s
) {

477 
	`GC_log_¥ötf
("--> Marking for collection %lu ",

478 ()
GC_gc_no
 + 1);

479 
	`GC_log_¥ötf
("after %luállocd bytes\n",

480 (Ë
GC_byãs_Ælocd
);

482 #ifde‡
MAKE_BACK_GRAPH


483 i‡(
GC_¥öt_back_height
) {

484 
	`GC_buûd_back_gøph
();

490 
	`GC_˛ór_a_„w_‰ames
();

491 
	`GC_no›
(0,0,0,0,0,0);

492 
	`GC_öôüã_gc
();

493 
i
 = 0;;i++) {

494 i‡((*
°›_func
)()) {

495 i‡(
GC_¥öt_°©s
) {

496 
	`GC_log_¥ötf
("Abandoned stopped markingáfter ");

497 
	`GC_log_¥ötf
("%u iãøti⁄s\n", 
i
);

499 
GC_deficô
 = 
i
;

500 
	`IF_THREADS
(
GC_w‹ld_°›≥d
 = 
FALSE
);

501 
	`START_WORLD
();

502 (
FALSE
);

504 i‡(
	`GC_m¨k_some
((
±r_t
)(&
dummy
))) ;

507 
GC_gc_no
++;

508 i‡(
GC_¥öt_°©s
) {

509 
	`GC_log_¥ötf
("Collection %luÑeclaimed %ld bytes",

510 ()
GC_gc_no
 - 1,

511 ()
GC_byãs_found
);

512 
	`GC_log_¥ötf
(" ---> heapsize = %lu bytes\n",

513 (Ë
GC_hópsize
);

516 
	`GC_log_¥ötf
("");

520 i‡(
GC_debuggög_°¨ãd
) {

521 (*
GC_check_hóp
)();

524 
	`IF_THREADS
(
GC_w‹ld_°›≥d
 = 
FALSE
);

525 
	`START_WORLD
();

526 i‡(
GC_¥öt_°©s
) {

527 
	`GET_TIME
(
cuºít_time
);

528 
	`GC_log_¥ötf
("World-stopped markingÅook %lu msecs\n",

529 
	`MS_TIME_DIFF
(
cuºít_time
,
°¨t_time
));

531 (
TRUE
);

532 
	}
}

535 
	$GC_£t_Ê_m¨ks
(
±r_t
 
q
)

537 
±r_t
 
p
;

538 
hblk
 * 
h
, * 
œ°_h
 = 0;

539 
hdr
 *
hhdr
;

540 
	`IF_PER_OBJ
(
size_t
 
sz
;)

541 
bô_no
;

543 
p
 = 
q
;Ö !0;Ö = 
	`obj_lök
(p)){

544 
h
 = 
	`HBLKPTR
(
p
);

545 i‡(
h
 !
œ°_h
) {

546 
œ°_h
 = 
h
;

547 
hhdr
 = 
	`HDR
(
h
);

548 
	`IF_PER_OBJ
(
sz
 = 
hhdr
->
hb_sz
;)

550 
bô_no
 = 
	`MARK_BIT_NO
((
±r_t
)
p
 - (±r_t)
h
, 
sz
);

551 i‡(!
	`m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
)) {

552 
	`£t_m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
);

553 ++
hhdr
 -> 
hb_n_m¨ks
;

556 
	}
}

558 #ifde‡
GC_ASSERTIONS


561 
	$GC_check_Ê_m¨ks
(
±r_t
 
q
)

563 
±r_t
 
p
;

565 
p
 = 
q
;Ö !0;Ö = 
	`obj_lök
(p)){

566 i‡(!
	`GC_is_m¨ked
(
p
)) {

567 
	`GC_îr_¥ötf
("Unm¨ked obje˘ %∞⁄Üi° %p\n", 
p
, 
q
);

568 
	`ABORT
("UnmarkedÜocal freeÜistÉntry.");

571 
	}
}

576 
	$GC_˛ór_Ê_m¨ks
(
±r_t
 
q
)

578 
±r_t
 
p
;

579 
hblk
 * 
h
, * 
œ°_h
 = 0;

580 
hdr
 *
hhdr
;

581 
size_t
 
sz
;

582 
bô_no
;

584 
p
 = 
q
;Ö !0;Ö = 
	`obj_lök
(p)){

585 
h
 = 
	`HBLKPTR
(
p
);

586 i‡(
h
 !
œ°_h
) {

587 
œ°_h
 = 
h
;

588 
hhdr
 = 
	`HDR
(
h
);

589 
sz
 = 
hhdr
->
hb_sz
;

591 
bô_no
 = 
	`MARK_BIT_NO
((
±r_t
)
p
 - (±r_t)
h
, 
sz
);

592 i‡(
	`m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
)) {

593 
size_t
 
n_m¨ks
 = 
hhdr
 -> 
hb_n_m¨ks
 - 1;

594 
	`˛ór_m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
);

595 #ifde‡
PARALLEL_MARK


597 i‡(0 !
n_m¨ks
) {

598 
hhdr
 -> 
hb_n_m¨ks
 = 
n_m¨ks
;

601 
hhdr
 -> 
hb_n_m¨ks
 = 
n_m¨ks
;

604 
GC_byãs_found
 -
sz
;

606 
	}
}

608 #i‡
deföed
(
GC_ASSERTIONS
Ë&& deföed(
THREADS
Ë&& deföed(
THREAD_LOCAL_ALLOC
)

609 
GC_check_és
();

614 
	$GC_föish_cﬁÀ˘i⁄
()

616 
CLOCK_TYPE
 
°¨t_time
;

617 
CLOCK_TYPE
 
föÆize_time
;

618 
CLOCK_TYPE
 
d⁄e_time
;

620 #i‡
	`deföed
(
GC_ASSERTIONS
Ë&& deföed(
THREADS
) \

621 && 
	`deföed
(
THREAD_LOCAL_ALLOC
Ë&& !deföed(
DBG_HDRS_ALL
)

624 
	`GC_check_és
();

627 i‡(
GC_¥öt_°©s
)

628 
	`GET_TIME
(
°¨t_time
);

630 
GC_byãs_found
 = 0;

631 #i‡
	`deföed
(
LINUX
Ë&& deföed(
__ELF__
Ë&& !deföed(
SMALL_CONFIG
)

632 i‡(
	`gëív
("GC_PRINT_ADDRESS_MAP") != 0) {

633 
	`GC_¥öt_addªss_m≠
();

636 
COND_DUMP
;

637 i‡(
GC_föd_Àak
) {

641 
w‹d
 
size
;

642 
köd
;

643 
±r_t
 
q
;

645 
köd
 = 0; köd < 
GC_n_köds
; kind++) {

646 
size
 = 1; sizê<
MAXOBJGRANULES
; size++) {

647 
q
 = 
GC_obj_köds
[
köd
].
ok_‰ìli°
[
size
];

648 i‡(
q
 !0Ë
	`GC_£t_Ê_m¨ks
(q);

652 
	`GC_°¨t_ª˛aim
(
TRUE
);

656 
	`GC_föÆize
();

657 #ifde‡
STUBBORN_ALLOC


658 
	`GC_˛ón_ch™gög_li°
();

661 i‡(
GC_¥öt_°©s
)

662 
	`GET_TIME
(
föÆize_time
);

664 i‡(
GC_¥öt_back_height
) {

665 #ifde‡
MAKE_BACK_GRAPH


666 
	`GC_åavî£_back_gøph
();

668 #i‚de‡
SMALL_CONFIG


669 
	`GC_îr_¥ötf
("Back heightÇotávailable: "

682 
w‹d
 
size
;

683 
±r_t
 
q
;

684 
köd
;

686 
köd
 = 0; köd < 
GC_n_köds
; kind++) {

687 
size
 = 1; sizê<
MAXOBJGRANULES
; size++) {

688 
q
 = 
GC_obj_köds
[
köd
].
ok_‰ìli°
[
size
];

689 i‡(
q
 !0Ë
	`GC_˛ór_Ê_m¨ks
(q);

695 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

696 
	`GC_log_¥ötf
("BytesÑecovered before sweep - f.l. count = %ld\n",

697 ()
GC_byãs_found
);

700 
	`GC_°¨t_ª˛aim
(
FALSE
);

701 i‡(
GC_¥öt_°©s
) {

702 
	`GC_log_¥ötf
("Heap contains %luÖointer-containing "

704 ()
GC_composôe_ö_u£
,

705 ()
GC_©omic_ö_u£
);

707 i‡(
GC_is_fuŒ_gc
) {

708 
GC_u£d_hóp_size_a·î_fuŒ
 = 
USED_HEAP_SIZE
;

709 
GC_√ed_fuŒ_gc
 = 
FALSE
;

711 
GC_√ed_fuŒ_gc
 =

712 
USED_HEAP_SIZE
 - 
GC_u£d_hóp_size_a·î_fuŒ


713 > 
	`mö_byãs_Ælocd
();

716 i‡(
GC_¥öt_°©s
 =
VERBOSE
) {

717 
	`GC_log_¥ötf
(

719 ()
GC_byãs_found
,

720 ()
GC_hópsize
);

721 #ifde‡
USE_MUNMAP


722 
	`GC_log_¥ötf
("(%lu unm≠≥d)", ()
GC_unm≠≥d_byãs
);

724 
	`GC_log_¥ötf
("\n");

728 
GC_n_©ãm±s
 = 0;

729 
GC_is_fuŒ_gc
 = 
FALSE
;

730 
GC_byãs_Ælocd_bef‹e_gc
 +
GC_byãs_Ælocd
;

731 
GC_n⁄_gc_byãs_©_gc
 = 
GC_n⁄_gc_byãs
;

732 
GC_byãs_Ælocd
 = 0;

733 
GC_byãs_dr›≥d
 = 0;

734 
GC_byãs_‰ìd
 = 0;

735 
GC_föÆizî_byãs_‰ìd
 = 0;

737 #ifde‡
USE_MUNMAP


738 
	`GC_unm≠_ﬁd
();

740 i‡(
GC_¥öt_°©s
) {

741 
	`GET_TIME
(
d⁄e_time
);

742 
	`GC_log_¥ötf
("Finalize + initiate sweepÅook %lu + %lu msecs\n",

743 
	`MS_TIME_DIFF
(
föÆize_time
,
°¨t_time
),

744 
	`MS_TIME_DIFF
(
d⁄e_time
,
föÆize_time
));

746 
	}
}

749 
	$GC_åy_to_cﬁÀ˘
(
GC_°›_func
 
°›_func
)

751 
ªsu…
;

752 
DCL_LOCK_STATE
;

754 i‡(!
GC_is_öôülized
Ë
	`GC_öô
();

755 i‡(
GC_debuggög_°¨ãd
Ë
	`GC_¥öt_Æl_smashed
();

756 
	`GC_INVOKE_FINALIZERS
();

757 
	`LOCK
();

758 
	`ENTER_GC
();

759 i‡(!
GC_is_öôülized
Ë
	`GC_öô_ö√r
();

761 
	`GC_no›
(0,0,0,0,0,0);

762 
ªsu…
 = ()
	`GC_åy_to_cﬁÀ˘_ö√r
(
°›_func
);

763 
	`EXIT_GC
();

764 
	`UNLOCK
();

765 if(
ªsu…
) {

766 i‡(
GC_debuggög_°¨ãd
Ë
	`GC_¥öt_Æl_smashed
();

767 
	`GC_INVOKE_FINALIZERS
();

769 (
ªsu…
);

770 
	}
}

772 
	$GC_gcﬁÀ˘
()

774 ()
	`GC_åy_to_cﬁÀ˘
(
GC_√vî_°›_func
);

775 i‡(
GC_have_îr‹s
Ë
	`GC_¥öt_Æl_îr‹s
();

776 
	}
}

778 
w‹d
 
	gGC_n_hóp_£˘s
 = 0;

780 #ifde‡
USE_PROC_FOR_LIBRARIES


781 
w‹d
 
	gGC_n_mem‹y
 = 0;

785 #ifde‡
USE_PROC_FOR_LIBRARIES


788 
	$GC_add_to_our_mem‹y
(
±r_t
 
p
, 
size_t
 
byãs
)

790 i‡(0 =
p
) ;

791 
GC_our_mem‹y
[
GC_n_mem‹y
].
hs_°¨t
 = 
p
;

792 
GC_our_mem‹y
[
GC_n_mem‹y
].
hs_byãs
 = 
byãs
;

793 
GC_n_mem‹y
++;

794 
	}
}

800 
	$GC_add_to_hóp
(
hblk
 *
p
, 
size_t
 
byãs
)

802 
hdr
 * 
phdr
;

803 
w‹d
 
ídp
;

805 i‡(
GC_n_hóp_£˘s
 >
MAX_HEAP_SECTS
) {

806 
	`ABORT
("Too many heap sections: Increase MAXHINCR or MAX_HEAP_SECTS");

808 (
w‹d
)
p
 <
HBLKSIZE
) {

810 ++
p
;

811 
byãs
 -
HBLKSIZE
;

812 i‡(0 =
byãs
) ;

814 
ídp
 = (
w‹d
)
p
 + 
byãs
;

815 i‡(
ídp
 <(
w‹d
)
p
) {

817 
byãs
 -
HBLKSIZE
;

818 i‡(0 =
byãs
) ;

819 
ídp
 -
HBLKSIZE
;

821 
phdr
 = 
	`GC_ö°Æl_hódî
(
p
);

822 i‡(0 =
phdr
) {

828 
	`GC_ASSERT
(
ídp
 > (
w‹d
)
p
 &&Énd∞=(w‹dÌ + 
byãs
);

829 
GC_hóp_£˘s
[
GC_n_hóp_£˘s
].
hs_°¨t
 = (
±r_t
)
p
;

830 
GC_hóp_£˘s
[
GC_n_hóp_£˘s
].
hs_byãs
 = 
byãs
;

831 
GC_n_hóp_£˘s
++;

832 
phdr
 -> 
hb_sz
 = 
byãs
;

833 
phdr
 -> 
hb_Êags
 = 0;

834 
	`GC_‰ìhblk
(
p
);

835 
GC_hópsize
 +
byãs
;

836 i‡((
±r_t
)
p
 <’å_t)
GC_Àa°_∂ausibÀ_hóp_addr


837 || 
GC_Àa°_∂ausibÀ_hóp_addr
 == 0) {

838 
GC_Àa°_∂ausibÀ_hóp_addr
 = (*)((
±r_t
)
p
 - (
w‹d
));

844 i‡((
±r_t
)
p
 + 
byãs
 >’å_t)
GC_gª©e°_∂ausibÀ_hóp_addr
) {

845 
GC_gª©e°_∂ausibÀ_hóp_addr
 = (*)
ídp
;

847 
	}
}

849 #i‡!
deföed
(
NO_DEBUGGING
)

850 
	$GC_¥öt_hóp_£˘s
()

852 
i
;

854 
	`GC_¥ötf
("TŸÆ hó∞size: %lu\n", (Ë
GC_hópsize
);

855 
i
 = 0; i < 
GC_n_hóp_£˘s
; i++) {

856 
±r_t
 
°¨t
 = 
GC_hóp_£˘s
[
i
].
hs_°¨t
;

857 
size_t
 
Àn
 = 
GC_hóp_£˘s
[
i
].
hs_byãs
;

858 
hblk
 *
h
;

859 
nbl
 = 0;

861 
	`GC_¥ötf
("Se˘i⁄ %d from %∞tÿ%∞", 
i
,

862 
°¨t
, sèπ + 
Àn
);

863 
h
 = (
hblk
 *)
°¨t
; h < (hblk *)(°¨à+ 
Àn
); h++) {

864 i‡(
	`GC_is_bœck_li°ed
(
h
, 
HBLKSIZE
)Ë
nbl
++;

866 
	`GC_¥ötf
("%lu/%lu bœckli°ed\n", ()
nbl
,

867 ()(
Àn
/
HBLKSIZE
));

869 
	}
}

872 * 
	gGC_Àa°_∂ausibÀ_hóp_addr
 = (*)
ONES
;

873 * 
	gGC_gª©e°_∂ausibÀ_hóp_addr
 = 0;

875 
INLINE
 
w‹d
 
	$GC_max
(
w‹d
 
x
, w‹d 
y
)

877 (
x
 > 
y
? x : y);

878 
	}
}

880 
INLINE
 
w‹d
 
	$GC_mö
(
w‹d
 
x
, w‹d 
y
)

882 (
x
 < 
y
? x : y);

883 
	}
}

885 
	$GC_£t_max_hóp_size
(
GC_w‹d
 
n
)

887 
GC_max_hópsize
 = 
n
;

888 
	}
}

890 
GC_w‹d
 
	gGC_max_ªåõs
 = 0;

899 
GC_boﬁ
 
	$GC_ex∑nd_hp_ö√r
(
w‹d
 
n
)

901 
w‹d
 
byãs
;

902 
hblk
 * 
•a˚
;

903 
w‹d
 
ex∑nsi⁄_¶›
;

906 i‡(
n
 < 
MINHINCR
)Ç = MINHINCR;

907 
byãs
 = 
n
 * 
HBLKSIZE
;

910 
w‹d
 
mask
 = 
GC_∑ge_size
 - 1;

911 
byãs
 +
mask
;

912 
byãs
 &~
mask
;

915 i‡(
GC_max_hópsize
 !0 && 
GC_hópsize
 + 
byãs
 > GC_max_heapsize) {

917 (
FALSE
);

919 
•a˚
 = 
	`GET_MEM
(
byãs
);

920 
	`GC_add_to_our_mem‹y
((
±r_t
)
•a˚
, 
byãs
);

921 if–
•a˚
 == 0 ) {

922 i‡(
GC_¥öt_°©s
) {

923 
	`GC_log_¥ötf
("FailedÅoÉxpand heap by %ld bytes\n",

924 ()
byãs
);

926 (
FALSE
);

928 i‡(
GC_¥öt_°©s
) {

929 
	`GC_log_¥ötf
("Increasing heap size by %luáfter %luállocated bytes\n",

930 ()
byãs
,

931 ()
GC_byãs_Ælocd
);

935 
ex∑nsi⁄_¶›
 = 
	`mö_byãs_Ælocd
(Ë+ 4*
MAXHINCR
*
HBLKSIZE
;

936 i‡((
GC_œ°_hóp_addr
 =0 && !((
w‹d
)
•a˚
 & 
SIGNB
))

937 || (
GC_œ°_hóp_addr
 !0 && GC_œ°_hóp_add∏< (
±r_t
)
•a˚
)) {

939 
w‹d
 
√w_limô
 = (w‹d)
•a˚
 + 
byãs
 + 
ex∑nsi⁄_¶›
;

940 i‡(
√w_limô
 > (
w‹d
)
•a˚
) {

941 
GC_gª©e°_∂ausibÀ_hóp_addr
 =

942 (*)
	`GC_max
((
w‹d
)
GC_gª©e°_∂ausibÀ_hóp_addr
,

943 (
w‹d
)
√w_limô
);

947 
w‹d
 
√w_limô
 = (w‹d)
•a˚
 - 
ex∑nsi⁄_¶›
;

948 i‡(
√w_limô
 < (
w‹d
)
•a˚
) {

949 
GC_Àa°_∂ausibÀ_hóp_addr
 =

950 (*)
	`GC_mö
((
w‹d
)
GC_Àa°_∂ausibÀ_hóp_addr
,

951 (
w‹d
)
•a˚
 - 
ex∑nsi⁄_¶›
);

954 
GC_¥ev_hóp_addr
 = 
GC_œ°_hóp_addr
;

955 
GC_œ°_hóp_addr
 = (
±r_t
)
•a˚
;

956 
	`GC_add_to_hóp
(
•a˚
, 
byãs
);

958 
GC_cﬁÀ˘_©_hópsize
 =

959 
GC_hópsize
 + 
ex∑nsi⁄_¶›
 - 2*
MAXHINCR
*
HBLKSIZE
;

960 #i‡
	`deföed
(
LARGE_CONFIG
)

961 i‡(
GC_cﬁÀ˘_©_hópsize
 < 
GC_hópsize
 )

962 
GC_cﬁÀ˘_©_hópsize
 = (
w‹d
)(-1);

964 (
TRUE
);

965 
	}
}

969 
	$GC_ex∑nd_hp
(
size_t
 
byãs
)

971 
ªsu…
;

972 
DCL_LOCK_STATE
;

974 
	`LOCK
();

975 i‡(!
GC_is_öôülized
Ë
	`GC_öô_ö√r
();

976 
ªsu…
 = ()
	`GC_ex∑nd_hp_ö√r
(
	`divHBLKSZ
((
w‹d
)
byãs
));

977 i‡(
ªsu…
Ë
GC_ªque°ed_hópsize
 +
byãs
;

978 
	`UNLOCK
();

979 (
ªsu…
);

980 
	}
}

982 
	gGC_Áû_cou¡
 = 0;

986 
GC_boﬁ
 
	$GC_cﬁÀ˘_‹_ex∑nd
(
w‹d
 
√eded_blocks
, 
GC_boﬁ
 
ign‹e_off_∑ge
)

988 i‡(!
GC_ö¸emíèl
 && !
GC_d⁄t_gc
 &&

989 ((
GC_d⁄t_ex∑nd
 && 
GC_byãs_Ælocd
 > 0Ë|| 
	`GC_should_cﬁÀ˘
())) {

990 
	`GC_gcﬁÀ˘_ö√r
();

992 
w‹d
 
blocks_to_gë
 = 
GC_hópsize
/(
HBLKSIZE
*
GC_‰ì_•a˚_divis‹
)

993 + 
√eded_blocks
;

995 i‡(
blocks_to_gë
 > 
MAXHINCR
) {

996 
w‹d
 
¶›
;

1001 i‡(
ign‹e_off_∑ge
) {

1002 
¶›
 = 4;

1004 
¶›
 = 2*
	`divHBLKSZ
(
BL_LIMIT
);

1005 i‡(
¶›
 > 
√eded_blocks
) slop =Çeeded_blocks;

1007 i‡(
√eded_blocks
 + 
¶›
 > 
MAXHINCR
) {

1008 
blocks_to_gë
 = 
√eded_blocks
 + 
¶›
;

1010 
blocks_to_gë
 = 
MAXHINCR
;

1013 i‡(!
	`GC_ex∑nd_hp_ö√r
(
blocks_to_gë
)

1014 && !
	`GC_ex∑nd_hp_ö√r
(
√eded_blocks
)) {

1015 i‡(
GC_Áû_cou¡
++ < 
GC_max_ªåõs
) {

1016 
	`WARN
("Out of Memory! TryingÅo continue ...\n", 0);

1017 
	`GC_gcﬁÀ˘_ö√r
();

1019 #i‡!
	`deföed
(
AMIGA
Ë|| !deföed(
GC_AMIGA_FASTALLOC
)

1020 
	`WARN
("Out of Memory! Returning NIL!\n", 0);

1022 (
FALSE
);

1025 i‡(
GC_Áû_cou¡
 && 
GC_¥öt_°©s
) {

1026 
	`GC_¥ötf
("Memoryávailableágain ...\n");

1030 (
TRUE
);

1031 
	}
}

1040 
±r_t
 
	$GC_Ælocobj
(
size_t
 
gøn
, 
köd
)

1042 ** 
Êh
 = &(
GC_obj_köds
[
köd
].
ok_‰ìli°
[
gøn
]);

1043 
GC_boﬁ
 
åõd_mö‹
 = 
FALSE
;

1045 i‡(
gøn
 == 0) (0);

1047 *
Êh
 == 0) {

1048 
	`ENTER_GC
();

1050 if(
TRUE_INCREMENTAL
Ë
	`GC_cﬁÀ˘_a_lôée_ö√r
(1);

1052 
	`GC_c⁄töue_ª˛aim
(
gøn
, 
köd
);

1053 
	`EXIT_GC
();

1054 i‡(*
Êh
 == 0) {

1055 
	`GC_√w_hblk
(
gøn
, 
köd
);

1057 i‡(*
Êh
 == 0) {

1058 
	`ENTER_GC
();

1059 i‡(
GC_ö¸emíèl
 && 
GC_time_limô
 =
GC_TIME_UNLIMITED


1060 && ! 
åõd_mö‹
 ) {

1061 
	`GC_cﬁÀ˘_a_lôée_ö√r
(1);

1062 
åõd_mö‹
 = 
TRUE
;

1064 i‡(!
	`GC_cﬁÀ˘_‹_ex∑nd
((
w‹d
)1,
FALSE
)) {

1065 
	`EXIT_GC
();

1069 
	`EXIT_GC
();

1073 
GC_Áû_cou¡
 = 0;

1075 (*
Êh
);

1076 
	}
}

	@backgraph.c

27 #ifde‡
MAKE_BACK_GRAPH


29 
	#MAX_IN
 10

	)

31 
	~"¥iv©e/dbg_mlc.h
"

32 
	~<uni°d.h
>

34 #i‡!
deföed
(
DBG_HDRS_ALL
Ë|| (
ALIGNMENT
 !
CPP_WORDSZ
/8Ë|| !deföed(
UNIX_LIKE
)

35 #îr‹ 
C⁄figuøti⁄
 
d€¢t
 
suµ‹t
 
MAKE_BACK_GRAPH


45 
	#FLAG_MANY
 2

	)

47 
	sback_edges_°ru˘
 {

48 
w‹d
 
	mn_edges
;

50 
	mÊags
;

51 
	#RETAIN
 1

	)

53 
	mheight_gc_no
;

61 
sig√d_w‹d
 
	mheight
;

65 
	#HEIGHT_UNKNOWN
 ((
sig√d_w‹d
)(-2))

	)

66 
	#HEIGHT_IN_PROGRESS
 ((
sig√d_w‹d
)(-1))

	)

67 
±r_t
 
	medges
[
MAX_IN
];

68 
back_edges_°ru˘
 *
	mc⁄t
;

72 } 
	tback_edges
;

76 
	#MAX_BACK_EDGE_STRUCTS
 100000

	)

77 
back_edges
 *
	gback_edge_•a˚
 = 0;

78 
	gGC_n_back_edge_°ru˘s
 = 0;

80 
back_edges
 *
	gavaû_back_edges
 = 0;

84 
back_edges
 * 
	$√w_back_edges
()

86 i‡(0 =
back_edge_•a˚
) {

87 
back_edge_•a˚
 = (
back_edges
 *)

88 
	`GET_MEM
(
MAX_BACK_EDGE_STRUCTS
*(
back_edges
));

89 
	`GC_add_to_our_mem‹y
((
±r_t
)
back_edge_•a˚
,

90 
MAX_BACK_EDGE_STRUCTS
*(
back_edges
));

92 i‡(0 !
avaû_back_edges
) {

93 
back_edges
 * 
ªsu…
 = 
avaû_back_edges
;

94 
avaû_back_edges
 = 
ªsu…
 -> 
c⁄t
;

95 
ªsu…
 -> 
c⁄t
 = 0;

96  
ªsu…
;

98 i‡(
GC_n_back_edge_°ru˘s
 >
MAX_BACK_EDGE_STRUCTS
 - 1) {

99 
	`ABORT
("neededÅoo much space for backÉdges:ádjust "

102  
back_edge_•a˚
 + (
GC_n_back_edge_°ru˘s
++);

103 
	}
}

106 
	$dóŒoˇã_back_edges
(
back_edges
 *
p
)

108 
back_edges
 *
œ°
 = 
p
;

110 0 !
œ°
 -> 
c⁄t
)Üast =Üast -> cont;

111 
œ°
 -> 
c⁄t
 = 
avaû_back_edges
;

112 
avaû_back_edges
 = 
p
;

113 
	}
}

119 
	#INITIAL_IN_PROGRESS
 10000

	)

120 
±r_t
 * 
	gö_¥ogªss_•a˚
 = 0;

121 
size_t
 
	gö_¥ogªss_size
 = 0;

122 
size_t
 
	gn_ö_¥ogªss
 = 0;

124 
	$push_ö_¥ogªss
(
±r_t
 
p
)

126 i‡(
n_ö_¥ogªss
 >
ö_¥ogªss_size
)

127 i‡(
ö_¥ogªss_size
 == 0) {

128 
ö_¥ogªss_size
 = 
INITIAL_IN_PROGRESS
;

129 
ö_¥ogªss_•a˚
 = (
±r_t
 *)
	`GET_MEM
(
ö_¥ogªss_size
 * (ptr_t));

130 
	`GC_add_to_our_mem‹y
((
±r_t
)
ö_¥ogªss_•a˚
,

131 
ö_¥ogªss_size
 * (
±r_t
));

133 
±r_t
 * 
√w_ö_¥ogªss_•a˚
;

134 
ö_¥ogªss_size
 *= 2;

135 
√w_ö_¥ogªss_•a˚
 = (
±r_t
 *)

136 
	`GET_MEM
(
ö_¥ogªss_size
 * (
±r_t
));

137 
	`GC_add_to_our_mem‹y
((
±r_t
)
√w_ö_¥ogªss_•a˚
,

138 
ö_¥ogªss_size
 * (
±r_t
));

139 
	`BCOPY
(
ö_¥ogªss_•a˚
, 
√w_ö_¥ogªss_•a˚
,

140 
n_ö_¥ogªss
 * (
±r_t
));

141 
ö_¥ogªss_•a˚
 = 
√w_ö_¥ogªss_•a˚
;

144 i‡(
ö_¥ogªss_•a˚
 == 0)

145 
	`ABORT
("MAKE_BACK_GRAPH: Out of in-progress space: "

147 
ö_¥ogªss_•a˚
[
n_ö_¥ogªss
++] = 
p
;

148 
	}
}

150 
GC_boﬁ
 
	$is_ö_¥ogªss
(
±r_t
 
p
)

152 
i
;

153 
i
 = 0; i < 
n_ö_¥ogªss
; ++i) {

154 i‡(
ö_¥ogªss_•a˚
[
i
] =
p
Ë 
TRUE
;

156  
FALSE
;

157 
	}
}

159 
	$p›_ö_¥ogªss
(
±r_t
 
p
)

161 --
n_ö_¥ogªss
;

162 
	`GC_ASSERT
(
ö_¥ogªss_•a˚
[
n_ö_¥ogªss
] =
p
);

163 
	}
}

165 
	#GET_OH_BG_PTR
(
p
) \

166 (
±r_t
)
	`REVEAL_POINTER
(((
oh
 *)(
p
)Ë-> 
oh_bg_±r
)

	)

167 
	#SET_OH_BG_PTR
(
p
,
q
Ë(((
oh
 *)’)Ë-> 
oh_bg_±r
Ë
	`HIDE_POINTER
(q)

	)

171 
	#FOR_EACH_PRED
(
q
, 
p
, 
s
) \

173 
±r_t
 
q
 = 
	`GET_OH_BG_PTR
(
p
); \

174 i‡(!((
w‹d
)
q
 & 
FLAG_MANY
)) { \

175 i‡(
q
 && !((
w‹d
)q & 1)Ë
s
 \

178 
back_edges
 *
‹ig_be_
 = (back_edge†*)((
w‹d
)
q
 & ~
FLAG_MANY
); \

179 
back_edges
 *
be_
 = 
‹ig_be_
; \

180 
tŸÆ_
, 
loˇl_
; \

181 
n_edges_
 = 
be_
 -> 
n_edges
; \

182 
tŸÆ_
 = 0, 
loˇl_
 = 0;ÅŸÆ_ < 
n_edges_
; ++local_, ++total_) { \

183 i‡(
loˇl_
 =
MAX_IN
) { \

184 
be_
 = be_ -> 
c⁄t
; \

185 
loˇl_
 = 0; \

187 
q
 = 
be_
 -> 
edges
[
loˇl_
]; 
s
 \

190 }

	)

193 
	$ísuª_°ru˘
(
±r_t
 
p
)

195 
±r_t
 
ﬁd_back_±r
 = 
	`GET_OH_BG_PTR
(
p
);

197 i‡(!((
w‹d
)
ﬁd_back_±r
 & 
FLAG_MANY
)) {

198 
back_edges
 *
be
 = 
	`√w_back_edges
();

199 
be
 -> 
Êags
 = 0;

200 i‡(0 =
ﬁd_back_±r
) {

201 
be
 -> 
n_edges
 = 0;

203 
be
 -> 
n_edges
 = 1;

204 
be
 -> 
edges
[0] = 
ﬁd_back_±r
;

206 
be
 -> 
height
 = 
HEIGHT_UNKNOWN
;

207 
be
 -> 
height_gc_no
 = 
GC_gc_no
 - 1;

208 
	`GC_ASSERT
(
be
 >
back_edge_•a˚
);

209 
	`SET_OH_BG_PTR
(
p
, (
w‹d
)
be
 | 
FLAG_MANY
);

211 
	}
}

215 
	$add_edge
(
±r_t
 
p
,Öå_à
q
)

217 
±r_t
 
ﬁd_back_±r
 = 
	`GET_OH_BG_PTR
(
q
);

218 
back_edges
 * 
be
, *
be_c⁄t
;

219 
w‹d
 
i
;

220 
øndom_numbî
 = 13;

221 
	#GOT_LUCKY_NUMBER
 (((++
øndom_numbî
Ë& 0x7fË=0)

	)

228 
	`GC_ASSERT
(
p
 =
	`GC_ba£
’Ë&& 
q
 == GC_base(q));

229 i‡(!
	`GC_HAS_DEBUG_INFO
(
q
Ë|| !GC_HAS_DEBUG_INFO(
p
)) {

234 i‡(0 =
ﬁd_back_±r
) {

235 
	`SET_OH_BG_PTR
(
q
, 
p
);

236 i‡(
GOT_LUCKY_NUMBER
Ë
	`ísuª_°ru˘
(
q
);

240 
	`FOR_EACH_PRED
(
¥ed
, 
q
, { i‡(
p
 ==Öred) ; });

241 
	`ísuª_°ru˘
(
q
);

242 
ﬁd_back_±r
 = 
	`GET_OH_BG_PTR
(
q
);

243 
be
 = (
back_edges
 *)((
w‹d
)
ﬁd_back_±r
 & ~
FLAG_MANY
);

244 
i
 = 
be
 -> 
n_edges
, 
be_c⁄t
 = be; i > 
MAX_IN
;

245 
be_c⁄t
 = be_c⁄à-> 
c⁄t
, 
i
 -
MAX_IN
) {}

246 i‡(
i
 =
MAX_IN
) {

247 
be_c⁄t
 -> 
c⁄t
 = 
	`√w_back_edges
();

248 
be_c⁄t
 = be_c⁄à-> 
c⁄t
;

249 
i
 = 0;

251 
be_c⁄t
 -> 
edges
[
i
] = 
p
;

252 
be
 -> 
n_edges
++;

253 i‡(
be
 -> 
n_edges
 == 100) {

255 i‡(
GC_¥öt_°©s
) {

256 
	`GC_îr_¥ötf
("The following object has in-degree >= 100:\n");

257 
	`GC_¥öt_hóp_obj
(
q
);

261 
	}
}

263 (*
	t≥r_obje˘_func
)(
	t±r_t
 
	tp
, 
	tsize_t
 
	tn_byãs
, 
	tw‹d
 
	tgc_des¸
);

265 
	$≥r_obje˘_hñ≥r
(
hblk
 *
h
, 
w‹d
 
‚
)

267 
hdr
 * 
hhdr
 = 
	`HDR
(
h
);

268 
size_t
 
sz
 = 
hhdr
 -> 
hb_sz
;

269 
w‹d
 
des¸
 = 
hhdr
 -> 
hb_des¸
;

270 
≥r_obje˘_func
 
f
 = (≥r_obje˘_func)
‚
;

271 
i
 = 0;

274 
	`f
((
±r_t
)(
h
 -> 
hb_body
 + 
i
), 
sz
, 
des¸
);

275 
i
 +
sz
;

276 } 
i
 + 
sz
 <
	`BYTES_TO_WORDS
(
HBLKSIZE
));

277 
	}
}

279 
	$GC_≠∂y_to_óch_obje˘
(
≥r_obje˘_func
 
f
)

281 
	`GC_≠∂y_to_Æl_blocks
(
≥r_obje˘_hñ≥r
, (
w‹d
)
f
);

282 
	}
}

284 
	$ª£t_back_edge
(
±r_t
 
p
, 
size_t
 
n_byãs
, 
w‹d
 
gc_des¸
)

287 i‡(
	`GC_HAS_DEBUG_INFO
(
p
)) {

288 
±r_t
 
ﬁd_back_±r
 = 
	`GET_OH_BG_PTR
(
p
);

289 i‡((
w‹d
)
ﬁd_back_±r
 & 
FLAG_MANY
) {

290 
back_edges
 *
be
 = (back_edge†*)((
w‹d
)
ﬁd_back_±r
 & ~
FLAG_MANY
);

291 i‡(!(
be
 -> 
Êags
 & 
RETAIN
)) {

292 
	`dóŒoˇã_back_edges
(
be
);

293 
	`SET_OH_BG_PTR
(
p
, 0);

295 
w‹d
 *
cuºíç
;

297 
	`GC_ASSERT
(
	`GC_is_m¨ked
(
p
));

302 
be
 -> 
n_edges
 = 0;

303 i‡(0 !
be
 -> 
c⁄t
) {

304 
	`dóŒoˇã_back_edges
(
be
 -> 
c⁄t
);

305 
be
 -> 
c⁄t
 = 0;

308 
	`GC_ASSERT
(
	`GC_is_m¨ked
(
p
));

311 
be
 -> 
Êags
 &~
RETAIN
;

315 
	`SET_OH_BG_PTR
(
p
, 0);

318 
	}
}

320 
	$add_back_edges
(
±r_t
 
p
, 
size_t
 
n_byãs
, 
w‹d
 
gc_des¸
)

322 
w‹d
 *
cuºíç
 = (w‹d *)(
p
 + (
oh
));

325 if((
gc_des¸
 & 
GC_DS_TAGS
Ë!
GC_DS_LENGTH
) {

326 
gc_des¸
 = 
n_byãs
;

328 
cuºíç
 < (
w‹d
 *)(
p
 + 
gc_des¸
)) {

329 
w‹d
 
cuºít
 = *
cuºíç
++;

330 
	`FIXUP_POINTER
(
cuºít
);

331 i‡(
cuºít
 >(
w‹d
)
GC_Àa°_∂ausibÀ_hóp_addr
 &&

332 
cuºít
 <(
w‹d
)
GC_gª©e°_∂ausibÀ_hóp_addr
) {

333 
±r_t
 
èrgë
 = 
	`GC_ba£
((*)
cuºít
);

334 i‡(0 !
èrgë
) {

335 
	`add_edge
(
p
, 
èrgë
);

339 
	}
}

343 
	$GC_buûd_back_gøph
()

345 
	`GC_≠∂y_to_óch_obje˘
(
add_back_edges
);

346 
	}
}

351 
w‹d
 
	$backw¨ds_height
(
±r_t
 
p
)

353 
w‹d
 
ªsu…
;

354 
±r_t
 
back_±r
 = 
	`GET_OH_BG_PTR
(
p
);

355 
back_edges
 *
be
;

357 i‡(0 =
back_±r
)  1;

358 i‡(!((
w‹d
)
back_±r
 & 
FLAG_MANY
)) {

359 i‡(
	`is_ö_¥ogªss
(
p
))  0;

362 
	`push_ö_¥ogªss
(
p
);

363 
ªsu…
 = 
	`backw¨ds_height
(
back_±r
)+1;

364 
	`p›_ö_¥ogªss
(
p
);

365  
ªsu…
;

367 
be
 = (
back_edges
 *)((
w‹d
)
back_±r
 & ~
FLAG_MANY
);

368 i‡(
be
 -> 
height
 >0 && bê-> 
height_gc_no
 =
GC_gc_no
)

369  
be
 -> 
height
;

371 i‡(
be
 -> 
height
 =
HEIGHT_IN_PROGRESS
)  0;

372 
ªsu…
 = (
be
 -> 
height
 > 0? be -> height : 1);

373 
be
 -> 
height
 = 
HEIGHT_IN_PROGRESS
;

374 
	`FOR_EACH_PRED
(
q
, 
p
, {

375 
w‹d
 
this_height
;

376 i‡(
	`GC_is_m¨ked
(
q
Ë&& !(
FLAG_MANY
 & (
w‹d
)
	`GET_OH_BG_PTR
(
p
))) {

377 i‡(
GC_¥öt_°©s
)

378 
	`GC_log_¥ötf
("Found bogu†poöã∏‰om 0x%lxÅÿ0x%lx\n", 
q
, 
p
);

381 
this_height
 = 1;

383 
this_height
 = 
	`backw¨ds_height
(
q
);

385 i‡(
this_height
 >
ªsu…
)Ñesult =Åhis_height + 1;

387 
be
 -> 
height
 = 
ªsu…
;

388 
be
 -> 
height_gc_no
 = 
GC_gc_no
;

389  
ªsu…
;

390 
	}
}

392 
w‹d
 
	gGC_max_height
;

393 
±r_t
 
	gGC_dì≥°_obj
;

401 
	$upd©e_max_height
(
±r_t
 
p
, 
size_t
 
n_byãs
, 
w‹d
 
gc_des¸
)

403 i‡(
	`GC_is_m¨ked
(
p
Ë&& 
	`GC_HAS_DEBUG_INFO
(p)) {

404 
i
;

405 
w‹d
 
p_height
 = 0;

406 
±r_t
 
p_dì≥°_obj
 = 0;

407 
±r_t
 
back_±r
;

408 
back_edges
 *
be
 = 0;

413 
back_±r
 = 
	`GET_OH_BG_PTR
(
p
);

414 i‡(0 !
back_±r
 && ((
w‹d
)back_±∏& 
FLAG_MANY
)) {

415 
be
 = (
back_edges
 *)((
w‹d
)
back_±r
 & ~
FLAG_MANY
);

416 i‡(
be
 -> 
height
 !
HEIGHT_UNKNOWN
Ë
p_height
 = be -> height;

418 
	`FOR_EACH_PRED
(
q
, 
p
, {

419 i‡(!
	`GC_is_m¨ked
(
q
Ë&& 
	`GC_HAS_DEBUG_INFO
(q)) {

420 
w‹d
 
q_height
;

422 
q_height
 = 
	`backw¨ds_height
(
q
);

423 i‡(
q_height
 > 
p_height
) {

424 
p_height
 = 
q_height
;

425 
p_dì≥°_obj
 = 
q
;

429 i‡(
p_height
 > 0) {

431 i‡(
be
 == 0) {

432 
	`ísuª_°ru˘
(
p
);

433 
back_±r
 = 
	`GET_OH_BG_PTR
(
p
);

434 
be
 = (
back_edges
 *)((
w‹d
)
back_±r
 & ~
FLAG_MANY
);

436 
be
 -> 
Êags
 |
RETAIN
;

437 
be
 -> 
height
 = 
p_height
;

438 
be
 -> 
height_gc_no
 = 
GC_gc_no
;

440 i‡(
p_height
 > 
GC_max_height
) {

441 
GC_max_height
 = 
p_height
;

442 
GC_dì≥°_obj
 = 
p_dì≥°_obj
;

445 
	}
}

447 
w‹d
 
	gGC_max_max_height
 = 0;

449 
	$GC_åavî£_back_gøph
()

451 
GC_max_height
 = 0;

452 
	`GC_≠∂y_to_óch_obje˘
(
upd©e_max_height
);

453 i‡(0 !
GC_dì≥°_obj
)

454 
	`GC_£t_m¨k_bô
(
GC_dì≥°_obj
);

455 
	}
}

457 
	$GC_¥öt_back_gøph_°©s
()

459 
	`GC_¥ötf
("Maximum backwards height ofÑeachable objectsát GC %lu is %ld\n",

460 (Ë
GC_gc_no
, ()
GC_max_height
);

461 i‡(
GC_max_height
 > 
GC_max_max_height
) {

462 
GC_max_max_height
 = 
GC_max_height
;

463 
	`GC_¥ötf
("The following unreachable object isÜast ináÜongest chain "

465 
	`GC_¥öt_hóp_obj
(
GC_dì≥°_obj
);

467 i‡(
GC_¥öt_°©s
) {

468 
	`GC_log_¥ötf
("Needed maxÅotal of %ld back-edge structs\n",

469 
GC_n_back_edge_°ru˘s
);

471 
	`GC_≠∂y_to_óch_obje˘
(
ª£t_back_edge
);

472 
GC_dì≥°_obj
 = 0;

473 
	}
}

	@blacklst.c

15 
	~"¥iv©e/gc_¥iv.h
"

40 
w‹d
 * 
	gGC_ﬁd_n‹mÆ_bl
;

43 
w‹d
 * 
	gGC_öcom∂ëe_n‹mÆ_bl
;

46 
w‹d
 * 
	gGC_ﬁd_°ack_bl
;

47 
w‹d
 * 
	gGC_öcom∂ëe_°ack_bl
;

49 
w‹d
 
	gGC_tŸÆ_°ack_bœck_li°ed
;

51 
w‹d
 
	gGC_bœck_li°_•acög
 = 
MINHINCR
*
HBLKSIZE
;

53 
GC_˛ór_bl
(
w‹d
 *);

55 
	$GC_deÁu…_¥öt_hóp_obj_¥oc
(
±r_t
 
p
)

57 
±r_t
 
ba£
 = 
	`GC_ba£
(
p
);

59 
	`GC_îr_¥ötf
("°¨t: %p,áµr.Üígth: %ld", 
ba£
,

60 ()
	`GC_size
(
ba£
));

61 
	}
}

63 (*
GC_¥öt_hóp_obj
Ë(
±r_t
 
p
Ë
GC_deÁu…_¥öt_hóp_obj_¥oc
;

65 
	$GC_¥öt_sour˚_±r
(
±r_t
 
p
)

67 
±r_t
 
ba£
 = 
	`GC_ba£
(
p
);

68 i‡(0 =
ba£
) {

69 i‡(0 =
p
) {

70 
	`GC_îr_¥ötf
("inÑegister");

72 
	`GC_îr_¥ötf
("inÑoot set");

75 
	`GC_îr_¥ötf
("in objectát ");

76 (*
GC_¥öt_hóp_obj
)(
ba£
);

78 
	}
}

80 
	$GC_bl_öô
()

82 i‡(!
GC_Æl_öãri‹_poöãrs
) {

83 
GC_ﬁd_n‹mÆ_bl
 = (
w‹d
 *)

84 
	`GC_s¸©ch_Æloc
((
w‹d
)( (
∑ge_hash_èbÀ
)));

85 
GC_öcom∂ëe_n‹mÆ_bl
 = (
w‹d
 *)
GC_s¸©ch_Æloc


86 ((
w‹d
)((
∑ge_hash_èbÀ
)));

87 i‡(
GC_ﬁd_n‹mÆ_bl
 =0 || 
GC_öcom∂ëe_n‹mÆ_bl
 == 0) {

88 
	`GC_îr_¥ötf
("Insufficient memory for blackÜist\n");

89 
	`EXIT
();

91 
	`GC_˛ór_bl
(
GC_ﬁd_n‹mÆ_bl
);

92 
	`GC_˛ór_bl
(
GC_öcom∂ëe_n‹mÆ_bl
);

94 
GC_ﬁd_°ack_bl
 = (
w‹d
 *)
	`GC_s¸©ch_Æloc
((w‹d)((
∑ge_hash_èbÀ
)));

95 
GC_öcom∂ëe_°ack_bl
 = (
w‹d
 *)
GC_s¸©ch_Æloc


96 ((
w‹d
)((
∑ge_hash_èbÀ
)));

97 i‡(
GC_ﬁd_°ack_bl
 =0 || 
GC_öcom∂ëe_°ack_bl
 == 0) {

98 
	`GC_îr_¥ötf
("Insufficient memory for blackÜist\n");

99 
	`EXIT
();

101 
	`GC_˛ór_bl
(
GC_ﬁd_°ack_bl
);

102 
	`GC_˛ór_bl
(
GC_öcom∂ëe_°ack_bl
);

103 
	}
}

105 
	$GC_˛ór_bl
(
w‹d
 *
doomed
)

107 
	`BZERO
(
doomed
, (
∑ge_hash_èbÀ
));

108 
	}
}

110 
	$GC_c›y_bl
(
w‹d
 *
ﬁd
, w‹d *
√w
)

112 
	`BCOPY
(
ﬁd
, 
√w
, (
∑ge_hash_èbÀ
));

113 
	}
}

115 
w‹d
 
tŸÆ_°ack_bœck_li°ed
();

119 
	$GC_¥omŸe_bœck_li°s
()

121 
w‹d
 * 
vîy_ﬁd_n‹mÆ_bl
 = 
GC_ﬁd_n‹mÆ_bl
;

122 
w‹d
 * 
vîy_ﬁd_°ack_bl
 = 
GC_ﬁd_°ack_bl
;

124 
GC_ﬁd_n‹mÆ_bl
 = 
GC_öcom∂ëe_n‹mÆ_bl
;

125 
GC_ﬁd_°ack_bl
 = 
GC_öcom∂ëe_°ack_bl
;

126 i‡(!
GC_Æl_öãri‹_poöãrs
) {

127 
	`GC_˛ór_bl
(
vîy_ﬁd_n‹mÆ_bl
);

129 
	`GC_˛ór_bl
(
vîy_ﬁd_°ack_bl
);

130 
GC_öcom∂ëe_n‹mÆ_bl
 = 
vîy_ﬁd_n‹mÆ_bl
;

131 
GC_öcom∂ëe_°ack_bl
 = 
vîy_ﬁd_°ack_bl
;

132 
GC_tŸÆ_°ack_bœck_li°ed
 = 
	`tŸÆ_°ack_bœck_li°ed
();

133 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

134 
	`GC_log_¥ötf
("%ld bytes in heap blacklisted for interiorÖointers\n",

135 ()
GC_tŸÆ_°ack_bœck_li°ed
);

136 i‡(
GC_tŸÆ_°ack_bœck_li°ed
 != 0) {

137 
GC_bœck_li°_•acög
 =

138 
HBLKSIZE
*(
GC_hópsize
/
GC_tŸÆ_°ack_bœck_li°ed
);

140 i‡(
GC_bœck_li°_•acög
 < 3 * 
HBLKSIZE
) {

141 
GC_bœck_li°_•acög
 = 3 * 
HBLKSIZE
;

143 i‡(
GC_bœck_li°_•acög
 > 
MAXHINCR
 * 
HBLKSIZE
) {

144 
GC_bœck_li°_•acög
 = 
MAXHINCR
 * 
HBLKSIZE
;

150 
	}
}

152 
	$GC_u≈romŸe_bœck_li°s
()

154 i‡(!
GC_Æl_öãri‹_poöãrs
) {

155 
	`GC_c›y_bl
(
GC_ﬁd_n‹mÆ_bl
, 
GC_öcom∂ëe_n‹mÆ_bl
);

157 
	`GC_c›y_bl
(
GC_ﬁd_°ack_bl
, 
GC_öcom∂ëe_°ack_bl
);

158 
	}
}

163 #ifde‡
PRINT_BLACK_LIST


164 
	$GC_add_to_bœck_li°_n‹mÆ
(
w‹d
 
p
, 
±r_t
 
sour˚
)

166 
	$GC_add_to_bœck_li°_n‹mÆ
(
w‹d
 
p
)

169 i‡(!(
GC_modws_vÆid_off£ts
[
p
 & ((
w‹d
)-1)])) ;

171 
w‹d
 
ödex
 = 
	`PHT_HASH
((w‹d)
p
);

173 i‡(
	`HDR
(
p
Ë=0 || 
	`gë_pht_íåy_‰om_ödex
(
GC_ﬁd_n‹mÆ_bl
, 
ödex
)) {

174 #ifde‡
PRINT_BLACK_LIST


175 i‡(!
	`gë_pht_íåy_‰om_ödex
(
GC_öcom∂ëe_n‹mÆ_bl
, 
ödex
)) {

176 
	`GC_îr_¥ötf
(

178 (
±r_t
Ë
p
, 
sour˚
);

179 
	`GC_¥öt_sour˚_±r
(
sour˚
);

180 
	`GC_îr_puts
("\n");

183 
	`£t_pht_íåy_‰om_ödex
(
GC_öcom∂ëe_n‹mÆ_bl
, 
ödex
);

187 
	}
}

190 #ifde‡
PRINT_BLACK_LIST


191 
	$GC_add_to_bœck_li°_°ack
(
w‹d
 
p
, 
±r_t
 
sour˚
)

192 
±r_t
 
sour˚
;

194 
	$GC_add_to_bœck_li°_°ack
(
w‹d
 
p
)

197 
w‹d
 
ödex
 = 
	`PHT_HASH
((w‹d)
p
);

199 i‡(
	`HDR
(
p
Ë=0 || 
	`gë_pht_íåy_‰om_ödex
(
GC_ﬁd_°ack_bl
, 
ödex
)) {

200 #ifde‡
PRINT_BLACK_LIST


201 i‡(!
	`gë_pht_íåy_‰om_ödex
(
GC_öcom∂ëe_°ack_bl
, 
ödex
)) {

202 
	`GC_îr_¥ötf
(

204 (
±r_t
)
p
, 
sour˚
);

205 
	`GC_¥öt_sour˚_±r
(
sour˚
);

206 
	`GC_îr_puts
("\n");

209 
	`£t_pht_íåy_‰om_ödex
(
GC_öcom∂ëe_°ack_bl
, 
ödex
);

211 
	}
}

221 
hblk
 * 
	$GC_is_bœck_li°ed
(
hblk
 *
h
, 
w‹d
 
Àn
)

223 
w‹d
 
ödex
 = 
	`PHT_HASH
((w‹d)
h
);

224 
w‹d
 
i
;

225 
w‹d
 
nblocks
 = 
	`divHBLKSZ
(
Àn
);

227 i‡(!
GC_Æl_öãri‹_poöãrs
) {

228 i‡(
	`gë_pht_íåy_‰om_ödex
(
GC_ﬁd_n‹mÆ_bl
, 
ödex
)

229 || 
	`gë_pht_íåy_‰om_ödex
(
GC_öcom∂ëe_n‹mÆ_bl
, 
ödex
)) {

230 (
h
+1);

234 
i
 = 0; ; ) {

235 i‡(
GC_ﬁd_°ack_bl
[
	`divWORDSZ
(
ödex
)] == 0

236 && 
GC_öcom∂ëe_°ack_bl
[
	`divWORDSZ
(
ödex
)] == 0) {

238 
i
 +
WORDSZ
 - 
	`modWORDSZ
(
ödex
);

240 i‡(
	`gë_pht_íåy_‰om_ödex
(
GC_ﬁd_°ack_bl
, 
ödex
)

241 || 
	`gë_pht_íåy_‰om_ödex
(
GC_öcom∂ëe_°ack_bl
, 
ödex
)) {

242 (
h
+
i
+1);

244 
i
++;

246 i‡(
i
 >
nblocks
) ;

247 
ödex
 = 
	`PHT_HASH
((
w‹d
)(
h
+
i
));

250 
	}
}

256 
w‹d
 
	$GC_numbî_°ack_bœck_li°ed
(
hblk
 *
°¨t
, hblk *
ídp1
)

258 
hblk
 * 
h
;

259 
w‹d
 
ªsu…
 = 0;

261 
h
 = 
°¨t
; h < 
ídp1
; h++) {

262 
w‹d
 
ödex
 = 
	`PHT_HASH
((w‹d)
h
);

264 i‡(
	`gë_pht_íåy_‰om_ödex
(
GC_ﬁd_°ack_bl
, 
ödex
)Ë
ªsu…
++;

266 (
ªsu…
);

267 
	}
}

271 
w‹d
 
	$tŸÆ_°ack_bœck_li°ed
()

273 
i
;

274 
w‹d
 
tŸÆ
 = 0;

276 
i
 = 0; i < 
GC_n_hóp_£˘s
; i++) {

277 
hblk
 * 
°¨t
 = (hblk *Ë
GC_hóp_£˘s
[
i
].
hs_°¨t
;

278 
size_t
 
Àn
 = (
w‹d
Ë
GC_hóp_£˘s
[
i
].
hs_byãs
;

279 
hblk
 * 
ídp1
 = 
°¨t
 + 
Àn
/
HBLKSIZE
;

281 
tŸÆ
 +
	`GC_numbî_°ack_bœck_li°ed
(
°¨t
, 
ídp1
);

283 (
tŸÆ
 * 
HBLKSIZE
);

284 
	}
}

	@checksums.c

14 #ifde‡
CHECKSUMS


16 
	~"¥iv©e/gc_¥iv.h
"

23 
	#NSUMS
 10000

	)

25 
	#OFFSET
 0x10000

	)

28 
GC_boﬁ
 
	m√w_vÆid
;

29 
w‹d
 
	mﬁd_sum
;

30 
w‹d
 
	m√w_sum
;

31 
hblk
 * 
	mblock
;

33 } 
	t∑ge_íåy
;

35 
∑ge_íåy
 
	gGC_sums
 [
NSUMS
];

37 
w‹d
 
	$GC_checksum
(
h
)

38 
hblk
 *
h
;

40 
w‹d
 *
p
 = (w‹d *)
h
;

41 
w‹d
 *
lim
 = (w‹d *)(
h
+1);

42 
w‹d
 
ªsu…
 = 0;

44 
p
 < 
lim
) {

45 
ªsu…
 +*
p
++;

47 (
ªsu…
 | 0x80000000 );

48 
	}
}

50 #ifde‡
STUBBORN_ALLOC


53 
GC_boﬁ
 
	$GC_⁄_‰ì_li°
(
hblk
 *
h
)

54 
hblk
 *
h
;

56 
hdr
 * 
hhdr
 = 
	`HDR
(
h
);

57 
sz
 = 
	`BYTES_TO_WORDS
(
hhdr
 -> 
hb_sz
);

58 
±r_t
 
p
;

60 i‡(
sz
 > 
MAXOBJWORDS
Ë(
FALSE
);

61 
p
 = 
GC_sobj‰ìli°
[
sz
];Ö !0;Ö = 
	`obj_lök
(p)) {

62 i‡(
	`HBLKPTR
(
p
Ë=
h
Ë(
TRUE
);

64 (
FALSE
);

65 
	}
}

68 
	gGC_n_dúty_îr‹s
;

69 
	gGC_n_ch™ged_îr‹s
;

70 
	gGC_n_˛ón
;

71 
	gGC_n_dúty
;

73 
	$GC_upd©e_check_∑ge
(
hblk
 *
h
, 
ödex
)

75 
∑ge_íåy
 *
≥
 = 
GC_sums
 + 
ödex
;

76 
hdr
 * 
hhdr
 = 
	`HDR
(
h
);

77 
hblk
 *
b
;

79 i‡(
≥
 -> 
block
 !0 &&Öê-> block !
h
 + 
OFFSET
Ë
	`ABORT
("goofed");

80 
≥
 -> 
ﬁd_sum
 =Öê-> 
√w_sum
;

81 
≥
 -> 
√w_sum
 = 
	`GC_checksum
(
h
);

82 #i‡!
	`deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

83 i‡(
≥
 -> 
√w_sum
 !0x80000000 && !
	`GC_∑ge_was_evî_dúty
(
h
)) {

84 
	`GC_¥ötf
("GC_∑ge_was_evî_dúty(%pËi†wr⁄g\n", 
h
);

87 i‡(
	`GC_∑ge_was_dúty
(
h
)) {

88 
GC_n_dúty
++;

90 
GC_n_˛ón
++;

92 
b
 = 
h
;

93 
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
) && hhdr != 0) {

94 
b
 -(
w‹d
)
hhdr
;

95 
hhdr
 = 
	`HDR
(
b
);

97 i‡(
≥
 -> 
√w_vÆid


98 && 
hhdr
 !0 && hhd∏-> 
hb_des¸
 != 0

99 && 
≥
 -> 
ﬁd_sum
 !≥ -> 
√w_sum
) {

100 i‡(!
	`GC_∑ge_was_dúty
(
h
Ë|| !
	`GC_∑ge_was_evî_dúty
(h)) {

101  
GC_n_dúty_îr‹s
++;

103 #ifde‡
STUBBORN_ALLOC


104 i‡(!
	`HBLK_IS_FREE
(
hhdr
)

105 && 
hhdr
 -> 
hb_obj_köd
 =
STUBBORN


106 && !
	`GC_∑ge_was_ch™ged
(
h
)

107 && !
	`GC_⁄_‰ì_li°
(
h
)) {

110  
GC_n_ch™ged_îr‹s
++;

114 
≥
 -> 
√w_vÆid
 = 
TRUE
;

115 
≥
 -> 
block
 = 
h
 + 
OFFSET
;

116 
	}
}

118 
	gGC_byãs_ö_u£d_blocks
;

120 
	$GC_add_block
(
h
, 
dummy
)

121 
hblk
 *
h
;

122 
w‹d
 
dummy
;

124 
hdr
 * 
hhdr
 = 
	`HDR
(
h
);

125 
byãs
 = 
hhdr
 -> 
hb_sz
;

127 
byãs
 +
HBLKSIZE
-1;

128 
byãs
 &~(
HBLKSIZE
-1);

129 
GC_byãs_ö_u£d_blocks
 +
byãs
;

130 
	}
}

132 
	$GC_check_blocks
()

134 
byãs_ö_‰ì_blocks
 = 
GC_œrge_‰ì_byãs
;

136 
GC_byãs_ö_u£d_blocks
 = 0;

137 
	`GC_≠∂y_to_Æl_blocks
(
GC_add_block
, (
w‹d
)0);

138 
	`GC_¥ötf
("GC_bytes_in_used_blocks = %lu, bytes_in_free_blocks = %lu ",

139 
GC_byãs_ö_u£d_blocks
, 
byãs_ö_‰ì_blocks
);

140 
	`GC_¥ötf
("GC_hópsizê%lu\n", ()
GC_hópsize
);

141 i‡(
GC_byãs_ö_u£d_blocks
 + 
byãs_ö_‰ì_blocks
 !
GC_hópsize
) {

142 
	`GC_¥ötf
("LOST SOME BLOCKS!!\n");

144 
	}
}

147 
	$GC_check_dúty
()

149 
ödex
;

150 
i
;

151 
hblk
 *
h
;

152 
±r_t
 
°¨t
;

154 
	`GC_check_blocks
();

156 
GC_n_dúty_îr‹s
 = 0;

157 
GC_n_ch™ged_îr‹s
 = 0;

158 
GC_n_˛ón
 = 0;

159 
GC_n_dúty
 = 0;

161 
ödex
 = 0;

162 
i
 = 0; i < 
GC_n_hóp_£˘s
; i++) {

163 
°¨t
 = 
GC_hóp_£˘s
[
i
].
hs_°¨t
;

164 
h
 = (
hblk
 *)
°¨t
;

165 
h
 < (
hblk
 *)(
°¨t
 + 
GC_hóp_£˘s
[
i
].
hs_byãs
);

166 
h
++) {

167 
	`GC_upd©e_check_∑ge
(
h
, 
ödex
);

168 
ödex
++;

169 i‡(
ödex
 >
NSUMS
Ë
out
;

172 
out
:

173 
	`GC_¥ötf
("Checked %lu cleanánd %lu dirtyÖages\n",

174 (Ë
GC_n_˛ón
, (Ë
GC_n_dúty
);

175 i‡(
GC_n_dúty_îr‹s
 > 0) {

176 
	`GC_¥ötf
("Found %lu dirty bitÉrrors\n",

177 ()
GC_n_dúty_îr‹s
);

179 i‡(
GC_n_ch™ged_îr‹s
 > 0) {

180 
	`GC_¥ötf
("Found %lu changed bitÉrrors\n",

181 ()
GC_n_ch™ged_îr‹s
);

182 
	`GC_¥ötf
("These may be benign (provoked byÇonpointer changes)\n");

183 #ifde‡
THREADS


184 
	`GC_¥ötf
(

188 
	}
}

192 
GC_quõt
;

	@cord/cordbscs.c

16 
	~"gc.h
"

17 
	~"c‹d.h
"

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<°rög.h
>

30 (* 
	toom_‚
)();

32 
oom_‚
 
CORD_oom_‚
 = (oom_fn) 0;

34 
	#OUT_OF_MEMORY
 { i‡(
CORD_oom_‚
 !(
oom_‚
) 0) (*CORD_oom_fn)(); \

35 
	`ABORT
("Ouào‡mem‹y\n"); 
	}

	)
}

36 
	#ABORT
(
msg
Ë{ 
	`Ârötf
(
°dîr
, "%s\n", msg); 
	`ab‹t
(); }

	)

38 
	tw‹d
;

41 
	sC⁄ˇã«ti⁄
 {

42 
	mnuŒ
;

43 
	mhódî
;

44 
	mdïth
;

45 
	mÀ·_Àn
;

48 
	#MAX_LEFT_LEN
 255

	)

49 
w‹d
 
	mÀn
;

50 
CORD
 
	mÀ·
;

51 
CORD
 
	mright
;

52 } 
	mc⁄ˇã«ti⁄
;

53 
	sFun˘i⁄
 {

54 
	mnuŒ
;

55 
	mhódî
;

56 
	mdïth
;

57 
	mÀ·_Àn
;

58 
w‹d
 
	mÀn
;

59 
CORD_‚
 
	m‚
;

60 * 
	m˛õ¡_d©a
;

61 } 
	mfun˘i⁄
;

62 
	sGíîic
 {

63 
	mnuŒ
;

64 
	mhódî
;

65 
	mdïth
;

66 
	mÀ·_Àn
;

67 
w‹d
 
	mÀn
;

68 } 
	mgíîic
;

69 
	m°rög
[1];

70 } 
	tC‹dRï
;

72 
	#CONCAT_HDR
 1

	)

74 
	#FN_HDR
 4

	)

75 
	#SUBSTR_HDR
 6

	)

82 
	#IS_CONCATENATION
(
s
Ë(((
C‹dRï
 *)s)->
gíîic
.
hódî
 =
CONCAT_HDR
)

	)

84 
	#IS_FUNCTION
(
s
Ë((((
C‹dRï
 *)s)->
gíîic
.
hódî
 & 
FN_HDR
Ë!0)

	)

86 
	#IS_SUBSTR
(
s
Ë(((
C‹dRï
 *)s)->
gíîic
.
hódî
 =
SUBSTR_HDR
)

	)

88 
	#LEN
(
s
Ë(((
C‹dRï
 *)sË-> 
gíîic
.
Àn
)

	)

89 
	#DEPTH
(
s
Ë(((
C‹dRï
 *)sË-> 
gíîic
.
dïth
)

	)

90 
	#GEN_LEN
(
s
Ë(
	`CORD_IS_STRING
(sË? 
	`°æí
(sË: 
	`LEN
(s))

	)

92 
	#LEFT_LEN
(
c
Ë((cË-> 
À·_Àn
 != 0? \

93 (
c
Ë-> 
À·_Àn
 \

94 : (
	`CORD_IS_STRING
((
c
Ë-> 
À·
) ? \

95 (
c
Ë-> 
Àn
 - 
	`GEN_LEN
((cË-> 
right
) \

96 : 
	`LEN
((
c
Ë-> 
À·
)))

	)

98 
	#SHORT_LIMIT
 ((
C‹dRï
Ë- 1)

	)

104 
	$CORD_dump_ö√r
(
CORD
 
x
, 
n
)

106 
size_t
 
i
;

108 
i
 = 0; i < (
size_t
)
n
; i++) {

109 
	`Âuts
(" ", 
°dout
);

111 i‡(
x
 == 0) {

112 
	`Âuts
("NIL\n", 
°dout
);

113 } i‡(
	`CORD_IS_STRING
(
x
)) {

114 
i
 = 0; i <
SHORT_LIMIT
; i++) {

115 i‡(
x
[
i
] == '\0') ;

116 
	`putch¨
(
x
[
i
]);

118 i‡(
x
[
i
] !'\0'Ë
	`Âuts
("...", 
°dout
);

119 
	`putch¨
('\n');

120 } i‡(
	`IS_CONCATENATION
(
x
)) {

121 
C⁄ˇã«ti⁄
 * 
c⁄c
 =

122 &(((
C‹dRï
 *)
x
Ë-> 
c⁄ˇã«ti⁄
);

123 
	`¥ötf
("Concatenation: %p (len: %d, depth: %d)\n",

124 
x
, ()(
c⁄c
 -> 
Àn
), ()(c⁄¯-> 
dïth
));

125 
	`CORD_dump_ö√r
(
c⁄c
 -> 
À·
, 
n
+1);

126 
	`CORD_dump_ö√r
(
c⁄c
 -> 
right
, 
n
+1);

128 
Fun˘i⁄
 * 
func
 =

129 &(((
C‹dRï
 *)
x
Ë-> 
fun˘i⁄
);

130 i‡(
	`IS_SUBSTR
(
x
)Ë
	`¥ötf
("(Substring) ");

131 
	`¥ötf
("Fun˘i⁄: %∞÷í: %d): ", 
x
, ()(
func
 -> 
Àn
));

132 
i
 = 0; i < 20 && i < 
func
 -> 
Àn
; i++) {

133 
	`putch¨
((*(
func
 -> 
‚
))(
i
, fun¯-> 
˛õ¡_d©a
));

135 i‡(
i
 < 
func
 -> 
Àn
Ë
	`Âuts
("...", 
°dout
);

136 
	`putch¨
('\n');

138 
	}
}

141 
	$CORD_dump
(
CORD
 
x
)

143 
	`CORD_dump_ö√r
(
x
, 0);

144 
	`fÊush
(
°dout
);

145 
	}
}

147 
CORD
 
	$CORD_ˇt_ch¨_°¨
(
CORD
 
x
, c⁄° * 
y
, 
size_t
 
Àny
)

149 
size_t
 
ªsu…_Àn
;

150 
size_t
 
Ànx
;

151 
dïth
;

153 i‡(
x
 =
CORD_EMPTY
Ë(
y
);

154 i‡(
Àny
 =0Ë(
x
);

155 i‡(
	`CORD_IS_STRING
(
x
)) {

156 
Ànx
 = 
	`°æí
(
x
);

157 
ªsu…_Àn
 = 
Ànx
 + 
Àny
;

158 i‡(
ªsu…_Àn
 <
SHORT_LIMIT
) {

159 * 
ªsu…
 = 
	`GC_MALLOC_ATOMIC
(
ªsu…_Àn
+1);

161 i‡(
ªsu…
 =0Ë
OUT_OF_MEMORY
;

162 
	`mem˝y
(
ªsu…
, 
x
, 
Ànx
);

163 
	`mem˝y
(
ªsu…
 + 
Ànx
, 
y
, 
Àny
);

164 
ªsu…
[
ªsu…_Àn
] = '\0';

165 ((
CORD
Ë
ªsu…
);

167 
dïth
 = 1;

170 
CORD
 
right
;

171 
CORD
 
À·
;

172 * 
√w_right
;

173 
size_t
 
right_Àn
;

175 
Ànx
 = 
	`LEN
(
x
);

177 i‡(
Àny
 <
SHORT_LIMIT
/2

178 && 
	`IS_CONCATENATION
(
x
)

179 && 
	`CORD_IS_STRING
(
right
 = ((
C‹dRï
 *)
x
Ë-> 
c⁄ˇã«ti⁄
.right)) {

181 i‡(!
	`CORD_IS_STRING
(
À·
 = ((
C‹dRï
 *)
x
Ë-> 
c⁄ˇã«ti⁄
.left)) {

182 
right_Àn
 = 
Ànx
 - 
	`LEN
(
À·
);

183 } i‡(((
C‹dRï
 *)
x
Ë-> 
c⁄ˇã«ti⁄
.
À·_Àn
 != 0) {

184 
right_Àn
 = 
Ànx
 - ((
C‹dRï
 *)
x
Ë-> 
c⁄ˇã«ti⁄
.
À·_Àn
;

186 
right_Àn
 = 
	`°æí
(
right
);

188 
ªsu…_Àn
 = 
right_Àn
 + 
Àny
;

189 i‡(
ªsu…_Àn
 <
SHORT_LIMIT
) {

190 
√w_right
 = 
	`GC_MALLOC_ATOMIC
(
ªsu…_Àn
 + 1);

191 
	`mem˝y
(
√w_right
, 
right
, 
right_Àn
);

192 
	`mem˝y
(
√w_right
 + 
right_Àn
, 
y
, 
Àny
);

193 
√w_right
[
ªsu…_Àn
] = '\0';

194 
y
 = 
√w_right
;

195 
Àny
 = 
ªsu…_Àn
;

196 
x
 = 
À·
;

197 
Ànx
 -
right_Àn
;

200 i‡(
	`CORD_IS_STRING
(
x
)) {

201 
dïth
 = 1;

203 
dïth
 = 
	`DEPTH
(
x
) + 1;

206 
dïth
 = 
	`DEPTH
(
x
) + 1;

208 
ªsu…_Àn
 = 
Ànx
 + 
Àny
;

212 
C⁄ˇã«ti⁄
 * 
ªsu…
;

214 
ªsu…
 = 
	`GC_NEW
(
C⁄ˇã«ti⁄
);

215 i‡(
ªsu…
 =0Ë
OUT_OF_MEMORY
;

216 
ªsu…
->
hódî
 = 
CONCAT_HDR
;

217 
ªsu…
->
dïth
 = depth;

218 i‡(
Ànx
 <
MAX_LEFT_LEN
Ë
ªsu…
->
À·_Àn
 =Üenx;

219 
ªsu…
->
Àn
 = 
ªsu…_Àn
;

220 
ªsu…
->
À·
 = 
x
;

221 
ªsu…
->
right
 = 
y
;

222 i‡(
dïth
 >
MAX_DEPTH
) {

223 (
	`CORD_bÆ™˚
((
CORD
)
ªsu…
));

225 ((
CORD
Ë
ªsu…
);

228 
	}
}

231 
CORD
 
	$CORD_ˇt
(
CORD
 
x
, CORD 
y
)

233 
size_t
 
ªsu…_Àn
;

234 
dïth
;

235 
size_t
 
Ànx
;

237 i‡(
x
 =
CORD_EMPTY
Ë(
y
);

238 i‡(
y
 =
CORD_EMPTY
Ë(
x
);

239 i‡(
	`CORD_IS_STRING
(
y
)) {

240 (
	`CORD_ˇt_ch¨_°¨
(
x
, 
y
, 
	`°æí
(y)));

241 } i‡(
	`CORD_IS_STRING
(
x
)) {

242 
Ànx
 = 
	`°æí
(
x
);

243 
dïth
 = 
	`DEPTH
(
y
) + 1;

245 
dïthy
 = 
	`DEPTH
(
y
);

247 
Ànx
 = 
	`LEN
(
x
);

248 
dïth
 = 
	`DEPTH
(
x
) + 1;

249 i‡(
dïthy
 >
dïth
) depth = depthy + 1;

251 
ªsu…_Àn
 = 
Ànx
 + 
	`LEN
(
y
);

253 
C⁄ˇã«ti⁄
 * 
ªsu…
;

255 
ªsu…
 = 
	`GC_NEW
(
C⁄ˇã«ti⁄
);

256 i‡(
ªsu…
 =0Ë
OUT_OF_MEMORY
;

257 
ªsu…
->
hódî
 = 
CONCAT_HDR
;

258 
ªsu…
->
dïth
 = depth;

259 i‡(
Ànx
 <
MAX_LEFT_LEN
Ë
ªsu…
->
À·_Àn
 =Üenx;

260 
ªsu…
->
Àn
 = 
ªsu…_Àn
;

261 
ªsu…
->
À·
 = 
x
;

262 
ªsu…
->
right
 = 
y
;

263 i‡(
dïth
 >
MAX_DEPTH
) {

264 (
	`CORD_bÆ™˚
((
CORD
)
ªsu…
));

266 ((
CORD
Ë
ªsu…
);

269 
	}
}

273 
CORD
 
	$CORD_‰om_‚
(
CORD_‚
 
‚
, * 
˛õ¡_d©a
, 
size_t
 
Àn
)

275 i‡(
Àn
 <= 0) (0);

276 i‡(
Àn
 <
SHORT_LIMIT
) {

277 * 
ªsu…
;

278 
size_t
 
i
;

279 
buf
[
SHORT_LIMIT
+1];

280 
c
;

282 
i
 = 0; i < 
Àn
; i++) {

283 
c
 = (*
‚
)(
i
, 
˛õ¡_d©a
);

284 i‡(
c
 ='\0'Ë
gí_ˇ£
;

285 
buf
[
i
] = 
c
;

287 
buf
[
i
] = '\0';

288 
ªsu…
 = 
	`GC_MALLOC_ATOMIC
(
Àn
+1);

289 i‡(
ªsu…
 =0Ë
OUT_OF_MEMORY
;

290 
	`°r˝y
(
ªsu…
, 
buf
);

291 
ªsu…
[
Àn
] = '\0';

292 ((
CORD
Ë
ªsu…
);

294 
gí_ˇ£
:

296 
Fun˘i⁄
 * 
ªsu…
;

298 
ªsu…
 = 
	`GC_NEW
(
Fun˘i⁄
);

299 i‡(
ªsu…
 =0Ë
OUT_OF_MEMORY
;

300 
ªsu…
->
hódî
 = 
FN_HDR
;

302 
ªsu…
->
Àn
 =Üen;

303 
ªsu…
->
‚
 = fn;

304 
ªsu…
->
˛õ¡_d©a
 = client_data;

305 ((
CORD
Ë
ªsu…
);

307 
	}
}

309 
size_t
 
	$CORD_Àn
(
CORD
 
x
)

311 i‡(
x
 == 0) {

314 (
	`GEN_LEN
(
x
));

316 
	}
}

318 
	ssub°r_¨gs
 {

319 
C‹dRï
 * 
	mß_c‹d
;

320 
size_t
 
	mß_ödex
;

323 
	$CORD_ödex_ac˚ss_‚
(
size_t
 
i
, * 
˛õ¡_d©a
)

325 
sub°r_¨gs
 *
des¸
 = (sub°r_¨g†*)
˛õ¡_d©a
;

327 (((*)(
des¸
->
ß_c‹d
))[
i
 + des¸->
ß_ödex
]);

328 
	}
}

330 
	$CORD_≠∂y_ac˚ss_‚
(
size_t
 
i
, * 
˛õ¡_d©a
)

332 
sub°r_¨gs
 *
des¸
 = (sub°r_¨g†*)
˛õ¡_d©a
;

333 
Fun˘i⁄
 * 
‚_c‹d
 = &(
des¸
->
ß_c‹d
->
fun˘i⁄
);

335 ((*(
‚_c‹d
->
‚
))(
i
 + 
des¸
->
ß_ödex
, fn_c‹d->
˛õ¡_d©a
));

336 
	}
}

342 
CORD
 
	$CORD_sub°r_˛osuª
(
CORD
 
x
, 
size_t
 
i
, size_à
n
, 
CORD_‚
 
f
)

344 
sub°r_¨gs
 * 
ß
 = 
	`GC_NEW
(substr_args);

345 
CORD
 
ªsu…
;

347 i‡(
ß
 =0Ë
OUT_OF_MEMORY
;

348 
ß
->
ß_c‹d
 = (
C‹dRï
 *)
x
;

349 
ß
->
ß_ödex
 = 
i
;

350 
ªsu…
 = 
	`CORD_‰om_‚
(
f
, (*)
ß
, 
n
);

351 ((
C‹dRï
 *)
ªsu…
Ë-> 
fun˘i⁄
.
hódî
 = 
SUBSTR_HDR
;

352  (
ªsu…
);

353 
	}
}

355 
	#SUBSTR_LIMIT
 (10 * 
SHORT_LIMIT
)

	)

361 
CORD
 
	$CORD_sub°r_checked
(
CORD
 
x
, 
size_t
 
i
, size_à
n
)

363 i‡(
	`CORD_IS_STRING
(
x
)) {

364 i‡(
n
 > 
SUBSTR_LIMIT
) {

365 (
	`CORD_sub°r_˛osuª
(
x
, 
i
, 
n
, 
CORD_ödex_ac˚ss_‚
));

367 * 
ªsu…
 = 
	`GC_MALLOC_ATOMIC
(
n
+1);

369 i‡(
ªsu…
 =0Ë
OUT_OF_MEMORY
;

370 
	`°∫˝y
(
ªsu…
, 
x
+
i
, 
n
);

371 
ªsu…
[
n
] = '\0';

372 (
ªsu…
);

374 } i‡(
	`IS_CONCATENATION
(
x
)) {

375 
C⁄ˇã«ti⁄
 * 
c⁄c


376 &(((
C‹dRï
 *)
x
Ë-> 
c⁄ˇã«ti⁄
);

377 
size_t
 
À·_Àn
;

378 
size_t
 
right_Àn
;

380 
À·_Àn
 = 
	`LEFT_LEN
(
c⁄c
);

381 
right_Àn
 = 
c⁄c
 -> 
Àn
 - 
À·_Àn
;

382 i‡(
i
 >
À·_Àn
) {

383 i‡(
n
 =
right_Àn
Ë(
c⁄c
 -> 
right
);

384 (
	`CORD_sub°r_checked
(
c⁄c
 -> 
right
, 
i
 - 
À·_Àn
, 
n
));

385 } i‡(
i
+
n
 <
À·_Àn
) {

386 i‡(
n
 =
À·_Àn
Ë(
c⁄c
 -> 
À·
);

387 (
	`CORD_sub°r_checked
(
c⁄c
 -> 
À·
, 
i
, 
n
));

390 
CORD
 
À·_∑π
;

391 
CORD
 
right_∑π
;

392 
size_t
 
À·_∑π_Àn
 = 
À·_Àn
 - 
i
;

394 i‡(
i
 == 0) {

395 
À·_∑π
 = 
c⁄c
 -> 
À·
;

397 
À·_∑π
 = 
	`CORD_sub°r_checked
(
c⁄c
 -> 
À·
, 
i
, 
À·_∑π_Àn
);

399 i‡(
i
 + 
n
 =
right_Àn
 + 
À·_Àn
) {

400 
right_∑π
 = 
c⁄c
 -> 
right
;

402 
right_∑π
 = 
	`CORD_sub°r_checked
(
c⁄c
 -> 
right
, 0,

403 
n
 - 
À·_∑π_Àn
);

405 (
	`CORD_ˇt
(
À·_∑π
, 
right_∑π
));

408 i‡(
n
 > 
SUBSTR_LIMIT
) {

409 i‡(
	`IS_SUBSTR
(
x
)) {

411 
Fun˘i⁄
 * 
f
 = &(((
C‹dRï
 *)
x
Ë-> 
fun˘i⁄
);

412 
sub°r_¨gs
 *
des¸
 =

413 (
sub°r_¨gs
 *)(
f
 -> 
˛õ¡_d©a
);

415 (
	`CORD_sub°r_˛osuª
((
CORD
)
des¸
->
ß_c‹d
,

416 
i
 + 
des¸
->
ß_ödex
,

417 
n
, 
f
 -> 
‚
));

419 (
	`CORD_sub°r_˛osuª
(
x
, 
i
, 
n
, 
CORD_≠∂y_ac˚ss_‚
));

422 * 
ªsu…
;

423 
Fun˘i⁄
 * 
f
 = &(((
C‹dRï
 *)
x
Ë-> 
fun˘i⁄
);

424 
buf
[
SUBSTR_LIMIT
+1];

425 * 
p
 = 
buf
;

426 
c
;

427 
j
;

428 
lim
 = 
i
 + 
n
;

430 
j
 = 
i
; j < 
lim
; j++) {

431 
c
 = (*(
f
 -> 
‚
))(
j
, f -> 
˛õ¡_d©a
);

432 i‡(
c
 == '\0') {

433 (
	`CORD_sub°r_˛osuª
(
x
, 
i
, 
n
, 
CORD_≠∂y_ac˚ss_‚
));

435 *
p
++ = 
c
;

437 *
p
 = '\0';

438 
ªsu…
 = 
	`GC_MALLOC_ATOMIC
(
n
+1);

439 i‡(
ªsu…
 =0Ë
OUT_OF_MEMORY
;

440 
	`°r˝y
(
ªsu…
, 
buf
);

441 (
ªsu…
);

444 
	}
}

446 
CORD
 
	$CORD_sub°r
(
CORD
 
x
, 
size_t
 
i
, size_à
n
)

448 
size_t
 
Àn
 = 
	`CORD_Àn
(
x
);

450 i‡(
i
 >
Àn
 || 
n
 <= 0) (0);

453 i‡(
i
 + 
n
 > 
Àn
)Ç =Üen - i;

454 #i‚de‡
__STDC__


455 i‡(
i
 < 0Ë
	`ABORT
("CORD_substr: secondárg.Çegative");

459 (
	`CORD_sub°r_checked
(
x
, 
i
, 
n
));

460 
	}
}

463 
	$CORD_ôî5
(
CORD
 
x
, 
size_t
 
i
, 
CORD_ôî_‚
 
f1
,

464 
CORD_b©ched_ôî_‚
 
f2
, * 
˛õ¡_d©a
)

466 i‡(
x
 == 0) (0);

467 i‡(
	`CORD_IS_STRING
(
x
)) {

468 c⁄° *
p
 = 
x
+
i
;

470 i‡(*
p
 ='\0'Ë
	`ABORT
("2ndárgÅo CORD_iter5Åoo big");

471 i‡(
f2
 !
CORD_NO_FN
) {

472 ((*
f2
)(
p
, 
˛õ¡_d©a
));

474 *
p
) {

475 i‡((*
f1
)(*
p
, 
˛õ¡_d©a
)) (1);

476 
p
++;

480 } i‡(
	`IS_CONCATENATION
(
x
)) {

481 
C⁄ˇã«ti⁄
 * 
c⁄c


482 &(((
C‹dRï
 *)
x
Ë-> 
c⁄ˇã«ti⁄
);

485 i‡(
i
 > 0) {

486 
size_t
 
À·_Àn
 = 
	`LEFT_LEN
(
c⁄c
);

488 i‡(
i
 >
À·_Àn
) {

489 (
	`CORD_ôî5
(
c⁄c
 -> 
right
, 
i
 - 
À·_Àn
, 
f1
, 
f2
,

490 
˛õ¡_d©a
));

493 i‡(
	`CORD_ôî5
(
c⁄c
 -> 
À·
, 
i
, 
f1
, 
f2
, 
˛õ¡_d©a
)) {

496 (
	`CORD_ôî5
(
c⁄c
 -> 
right
, 0, 
f1
, 
f2
, 
˛õ¡_d©a
));

498 
Fun˘i⁄
 * 
f
 = &(((
C‹dRï
 *)
x
Ë-> 
fun˘i⁄
);

499 
size_t
 
j
;

500 
size_t
 
lim
 = 
f
 -> 
Àn
;

502 
j
 = 
i
; j < 
lim
; j++) {

503 i‡((*
f1
)((*(
f
 -> 
‚
))(
j
, f -> 
˛õ¡_d©a
), client_data)) {

509 
	}
}

511 #unde‡
CORD_ôî


512 
	$CORD_ôî
(
CORD
 
x
, 
CORD_ôî_‚
 
f1
, * 
˛õ¡_d©a
)

514 (
	`CORD_ôî5
(
x
, 0, 
f1
, 
CORD_NO_FN
, 
˛õ¡_d©a
));

515 
	}
}

517 
	$CORD_rôî4
(
CORD
 
x
, 
size_t
 
i
, 
CORD_ôî_‚
 
f1
, * 
˛õ¡_d©a
)

519 i‡(
x
 == 0) (0);

520 i‡(
	`CORD_IS_STRING
(
x
)) {

521 c⁄° *
p
 = 
x
 + 
i
;

522 
c
;

525 
c
 = *
p
;

526 i‡(
c
 ='\0'Ë
	`ABORT
("2ndárgÅo CORD_riter4Åoo big");

527 i‡((*
f1
)(
c
, 
˛õ¡_d©a
)) (1);

528 i‡(
p
 =
x
) ;

529 
p
--;

532 } i‡(
	`IS_CONCATENATION
(
x
)) {

533 
C⁄ˇã«ti⁄
 * 
c⁄c


534 &(((
C‹dRï
 *)
x
Ë-> 
c⁄ˇã«ti⁄
);

535 
CORD
 
À·_∑π
 = 
c⁄c
 -> 
À·
;

536 
size_t
 
À·_Àn
;

538 
À·_Àn
 = 
	`LEFT_LEN
(
c⁄c
);

539 i‡(
i
 >
À·_Àn
) {

540 i‡(
	`CORD_rôî4
(
c⁄c
 -> 
right
, 
i
 - 
À·_Àn
, 
f1
, 
˛õ¡_d©a
)) {

543 (
	`CORD_rôî4
(
À·_∑π
, 
À·_Àn
 - 1, 
f1
, 
˛õ¡_d©a
));

545 (
	`CORD_rôî4
(
À·_∑π
, 
i
, 
f1
, 
˛õ¡_d©a
));

548 
Fun˘i⁄
 * 
f
 = &(((
C‹dRï
 *)
x
Ë-> 
fun˘i⁄
);

549 
size_t
 
j
;

551 
j
 = 
i
; ; j--) {

552 i‡((*
f1
)((*(
f
 -> 
‚
))(
j
, f -> 
˛õ¡_d©a
), client_data)) {

555 i‡(
j
 == 0) (0);

558 
	}
}

560 
	$CORD_rôî
(
CORD
 
x
, 
CORD_ôî_‚
 
f1
, * 
˛õ¡_d©a
)

562 (
	`CORD_rôî4
(
x
, 
	`CORD_Àn
(xË- 1, 
f1
, 
˛õ¡_d©a
));

563 
	}
}

581 
CORD
 
	mc
;

582 
size_t
 
	mÀn
;

583 } 
	tF‹e°EÀmít
;

585 
size_t
 
	gmö_Àn
 [ 
MAX_DEPTH
 ];

587 
	gmö_Àn_öô
 = 0;

589 
	gCORD_max_Àn
;

591 
F‹e°EÀmít
 
	tF‹e°
 [ 
MAX_DEPTH
 ];

597 
	$CORD_öô_mö_Àn
()

599 
i
;

600 
size_t
 
œ°
, 
¥evious
, 
cuºít
;

602 
mö_Àn
[0] = 
¥evious
 = 1;

603 
mö_Àn
[1] = 
œ°
 = 2;

604 
i
 = 2; i < 
MAX_DEPTH
; i++) {

605 
cuºít
 = 
œ°
 + 
¥evious
;

606 i‡(
cuºít
 < 
œ°
) current =Üast;

607 
mö_Àn
[
i
] = 
cuºít
;

608 
¥evious
 = 
œ°
;

609 
œ°
 = 
cuºít
;

611 
CORD_max_Àn
 = 
œ°
 - 1;

612 
mö_Àn_öô
 = 1;

613 
	}
}

616 
	$CORD_öô_f‹e°
(
F‹e°EÀmít
 * 
f‹e°
, 
size_t
 
max_Àn
)

618 
i
;

620 
i
 = 0; i < 
MAX_DEPTH
; i++) {

621 
f‹e°
[
i
].
c
 = 0;

622 i‡(
mö_Àn
[
i
] > 
max_Àn
) ;

624 
	`ABORT
("CordÅooÜong");

625 
	}
}

632 
	$CORD_add_f‹e°
(
F‹e°EÀmít
 * 
f‹e°
, 
CORD
 
x
, 
size_t
 
Àn
)

634 
i
 = 0;

635 
CORD
 
sum
 = 
CORD_EMPTY
;

636 
size_t
 
sum_Àn
 = 0;

638 
Àn
 > 
mö_Àn
[
i
 + 1]) {

639 i‡(
f‹e°
[
i
].
c
 != 0) {

640 
sum
 = 
	`CORD_ˇt
(
f‹e°
[
i
].
c
, sum);

641 
sum_Àn
 +
f‹e°
[
i
].
Àn
;

642 
f‹e°
[
i
].
c
 = 0;

644 
i
++;

648 
sum
 = 
	`CORD_ˇt
(sum, 
x
);

649 
sum_Àn
 +
Àn
;

653 
sum_Àn
 >
mö_Àn
[
i
]) {

654 i‡(
f‹e°
[
i
].
c
 != 0) {

655 
sum
 = 
	`CORD_ˇt
(
f‹e°
[
i
].
c
, sum);

656 
sum_Àn
 +
f‹e°
[
i
].
Àn
;

659 
f‹e°
[
i
].
c
 = 0;

661 
i
++;

663 
i
--;

664 
f‹e°
[
i
].
c
 = 
sum
;

665 
f‹e°
[
i
].
Àn
 = 
sum_Àn
;

666 
	}
}

668 
CORD
 
	$CORD_c⁄ˇt_f‹e°
(
F‹e°EÀmít
 * 
f‹e°
, 
size_t
 
ex≥˘ed_Àn
)

670 
i
 = 0;

671 
CORD
 
sum
 = 0;

672 
size_t
 
sum_Àn
 = 0;

674 
sum_Àn
 !
ex≥˘ed_Àn
) {

675 i‡(
f‹e°
[
i
].
c
 != 0) {

676 
sum
 = 
	`CORD_ˇt
(
f‹e°
[
i
].
c
, sum);

677 
sum_Àn
 +
f‹e°
[
i
].
Àn
;

679 
i
++;

681 (
sum
);

682 
	}
}

687 
	$CORD_bÆ™˚_ö£π
(
CORD
 
x
, 
size_t
 
Àn
, 
F‹e°EÀmít
 * 
f‹e°
)

689 
dïth
;

691 i‡(
	`CORD_IS_STRING
(
x
)) {

692 
	`CORD_add_f‹e°
(
f‹e°
, 
x
, 
Àn
);

693 } i‡(
	`IS_CONCATENATION
(
x
)

694 && ((
dïth
 = 
	`DEPTH
(
x
)Ë>
MAX_DEPTH


695 || 
Àn
 < 
mö_Àn
[
dïth
])) {

696 
C⁄ˇã«ti⁄
 * 
c⁄c


697 &(((
C‹dRï
 *)
x
Ë-> 
c⁄ˇã«ti⁄
);

698 
size_t
 
À·_Àn
 = 
	`LEFT_LEN
(
c⁄c
);

700 
	`CORD_bÆ™˚_ö£π
(
c⁄c
 -> 
À·
, 
À·_Àn
, 
f‹e°
);

701 
	`CORD_bÆ™˚_ö£π
(
c⁄c
 -> 
right
, 
Àn
 - 
À·_Àn
, 
f‹e°
);

703 
	`CORD_add_f‹e°
(
f‹e°
, 
x
, 
Àn
);

705 
	}
}

708 
CORD
 
	$CORD_bÆ™˚
(
CORD
 
x
)

710 
F‹e°
 
f‹e°
;

711 
size_t
 
Àn
;

713 i‡(
x
 == 0) (0);

714 i‡(
	`CORD_IS_STRING
(
x
)) (x);

715 i‡(!
mö_Àn_öô
Ë
	`CORD_öô_mö_Àn
();

716 
Àn
 = 
	`LEN
(
x
);

717 
	`CORD_öô_f‹e°
(
f‹e°
, 
Àn
);

718 
	`CORD_bÆ™˚_ö£π
(
x
, 
Àn
, 
f‹e°
);

719 (
	`CORD_c⁄ˇt_f‹e°
(
f‹e°
, 
Àn
));

720 
	}
}

730 
	$CORD__exãnd_∑th
(
CORD_pos
 
p
)

732 
CORD_≥
 * 
cuºít_≥
 = &(
p
[0].
∑th
[p[0].
∑th_Àn
]);

733 
CORD
 
t›
 = 
cuºít_≥
 -> 
≥_c‹d
;

734 
size_t
 
pos
 = 
p
[0].
cur_pos
;

735 
size_t
 
t›_pos
 = 
cuºít_≥
 -> 
≥_°¨t_pos
;

736 
size_t
 
t›_Àn
 = 
	`GEN_LEN
(
t›
);

739 !
	`CORD_IS_STRING
(
t›
Ë&& 
	`IS_CONCATENATION
(top)) {

740 
C⁄ˇã«ti⁄
 * 
c⁄c
 =

741 &(((
C‹dRï
 *)
t›
Ë-> 
c⁄ˇã«ti⁄
);

742 
size_t
 
À·_Àn
;

744 
À·_Àn
 = 
	`LEFT_LEN
(
c⁄c
);

745 
cuºít_≥
++;

746 i‡(
pos
 >
t›_pos
 + 
À·_Àn
) {

747 
cuºít_≥
 -> 
≥_c‹d
 = 
t›
 = 
c⁄c
 -> 
right
;

748 
cuºít_≥
 -> 
≥_°¨t_pos
 = 
t›_pos
 =Å›_po†+ 
À·_Àn
;

749 
t›_Àn
 -
À·_Àn
;

751 
cuºít_≥
 -> 
≥_c‹d
 = 
t›
 = 
c⁄c
 -> 
À·
;

752 
cuºít_≥
 -> 
≥_°¨t_pos
 = 
t›_pos
;

753 
t›_Àn
 = 
À·_Àn
;

755 
p
[0].
∑th_Àn
++;

758 i‡(
	`CORD_IS_STRING
(
t›
)) {

759 
p
[0].
cur_Àaf
 = 
t›
;

760 
p
[0].
cur_°¨t
 = 
t›_pos
;

761 
p
[0].
cur_íd
 = 
t›_pos
 + 
t›_Àn
;

763 
p
[0].
cur_íd
 = 0;

765 i‡(
pos
 >
t›_pos
 + 
t›_Àn
Ë
p
[0].
∑th_Àn
 = 
CORD_POS_INVALID
;

766 
	}
}

768 
	$CORD__pos_„tch
(
CORD_pos
 
p
)

771 
CORD_≥
 * 
≥
 = &((
p
)[0].
∑th
[’)[0].
∑th_Àn
]);

772 
CORD
 
Àaf
 = 
≥
 -> 
≥_c‹d
;

773 
Fun˘i⁄
 * 
f
 = &(((
C‹dRï
 *)
Àaf
Ë-> 
fun˘i⁄
);

775 i‡(!
	`IS_FUNCTION
(
Àaf
)Ë
	`ABORT
("CORD_pos_fetch: badÜeaf");

776  ((*(
f
 -> 
‚
))(
p
[0].
cur_pos
 - 
≥
 -> 
≥_°¨t_pos
, f -> 
˛õ¡_d©a
));

777 
	}
}

779 
	$CORD__√xt
(
CORD_pos
 
p
)

781 
size_t
 
cur_pos
 = 
p
[0].cur_pos + 1;

782 
CORD_≥
 * 
cuºít_≥
 = &((
p
)[0].
∑th
[’)[0].
∑th_Àn
]);

783 
CORD
 
Àaf
 = 
cuºít_≥
 -> 
≥_c‹d
;

786 
p
[0].
cur_pos
 = cur_pos;

787 i‡(!
	`CORD_IS_STRING
(
Àaf
)) {

789 
Fun˘i⁄
 * 
f
 = &(((
C‹dRï
 *)
Àaf
Ë-> 
fun˘i⁄
);

790 
size_t
 
°¨t_pos
 = 
cuºít_≥
 -> 
≥_°¨t_pos
;

791 
size_t
 
íd_pos
 = 
°¨t_pos
 + 
f
 -> 
Àn
;

793 i‡(
cur_pos
 < 
íd_pos
) {

795 
size_t
 
i
;

796 
size_t
 
limô
 = 
cur_pos
 + 
FUNCTION_BUF_SZ
;

797 
CORD_‚
 
‚
 = 
f
 -> fn;

798 * 
˛õ¡_d©a
 = 
f
 -> client_data;

800 i‡(
limô
 > 
íd_pos
) {

801 
limô
 = 
íd_pos
;

803 
i
 = 
cur_pos
; i < 
limô
; i++) {

804 
p
[0].
fun˘i⁄_buf
[
i
 - 
cur_pos
] =

805 (*
‚
)(
i
 - 
°¨t_pos
, 
˛õ¡_d©a
);

807 
p
[0].
cur_°¨t
 = 
cur_pos
;

808 
p
[0].
cur_Àaf
 =Ö[0].
fun˘i⁄_buf
;

809 
p
[0].
cur_íd
 = 
limô
;

817 
p
[0].
∑th_Àn
 > 0

818 && 
cuºít_≥
[0].
≥_°¨t_pos
 != current_pe[-1].pe_start_pos) {

819 
p
[0].
∑th_Àn
--;

820 
cuºít_≥
--;

822 i‡(
p
[0].
∑th_Àn
 == 0) {

823 
p
[0].
∑th_Àn
 = 
CORD_POS_INVALID
;

827 
p
[0].
∑th_Àn
--;

828 
	`CORD__exãnd_∑th
(
p
);

829 
	}
}

831 
	$CORD__¥ev
(
CORD_pos
 
p
)

833 
CORD_≥
 * 
≥
 = &(
p
[0].
∑th
[p[0].
∑th_Àn
]);

835 i‡(
p
[0].
cur_pos
 == 0) {

836 
p
[0].
∑th_Àn
 = 
CORD_POS_INVALID
;

839 
p
[0].
cur_pos
--;

840 i‡(
p
[0].
cur_pos
 >
≥
 -> 
≥_°¨t_pos
) ;

847 
CORD_≥
 * 
cuºít_≥
 = &((
p
)[0].
∑th
[’)[0].
∑th_Àn
]);

849 
p
[0].
∑th_Àn
 > 0

850 && 
cuºít_≥
[0].
≥_°¨t_pos
 == current_pe[-1].pe_start_pos) {

851 
p
[0].
∑th_Àn
--;

852 
cuºít_≥
--;

855 
p
[0].
∑th_Àn
--;

856 
	`CORD__exãnd_∑th
(
p
);

857 
	}
}

859 #unde‡
CORD_pos_„tch


860 #unde‡
CORD_√xt


861 #unde‡
CORD_¥ev


862 #unde‡
CORD_pos_to_ödex


863 #unde‡
CORD_pos_to_c‹d


864 #unde‡
CORD_pos_vÆid


866 
	$CORD_pos_„tch
(
CORD_pos
 
p
)

868 i‡(
p
[0].
cur_°¨t
 <p[0].
cur_pos
 &&Ö[0].cur_po†<Ö[0].
cur_íd
) {

869 (
p
[0].
cur_Àaf
[p[0].
cur_pos
 -Ö[0].
cur_°¨t
]);

871 (
	`CORD__pos_„tch
(
p
));

873 
	}
}

875 
	$CORD_√xt
(
CORD_pos
 
p
)

877 i‡(
p
[0].
cur_pos
 <Ö[0].
cur_íd
 - 1) {

878 
p
[0].
cur_pos
++;

880 
	`CORD__√xt
(
p
);

882 
	}
}

884 
	$CORD_¥ev
(
CORD_pos
 
p
)

886 i‡(
p
[0].
cur_íd
 !0 &&Ö[0].
cur_pos
 >Ö[0].
cur_°¨t
) {

887 
p
[0].
cur_pos
--;

889 
	`CORD__¥ev
(
p
);

891 
	}
}

893 
size_t
 
	$CORD_pos_to_ödex
(
CORD_pos
 
p
)

895 (
p
[0].
cur_pos
);

896 
	}
}

898 
CORD
 
	$CORD_pos_to_c‹d
(
CORD_pos
 
p
)

900 (
p
[0].
∑th
[0].
≥_c‹d
);

901 
	}
}

903 
	$CORD_pos_vÆid
(
CORD_pos
 
p
)

905 (
p
[0].
∑th_Àn
 !
CORD_POS_INVALID
);

906 
	}
}

908 
	$CORD_£t_pos
(
CORD_pos
 
p
, 
CORD
 
x
, 
size_t
 
i
)

910 i‡(
x
 =
CORD_EMPTY
) {

911 
p
[0].
∑th_Àn
 = 
CORD_POS_INVALID
;

914 
p
[0].
∑th
[0].
≥_c‹d
 = 
x
;

915 
p
[0].
∑th
[0].
≥_°¨t_pos
 = 0;

916 
p
[0].
∑th_Àn
 = 0;

917 
p
[0].
cur_pos
 = 
i
;

918 
	`CORD__exãnd_∑th
(
p
);

919 
	}
}

	@cord/cordprnt.c

25 
	~"c‹d.h
"

26 
	~"ec.h
"

27 
	~<°dio.h
>

28 
	~<°d¨g.h
>

29 
	~<°rög.h
>

30 
	~"gc.h
"

32 
	#CONV_SPEC_LEN
 50

	)

34 
	#CONV_RESULT_LEN
 50

	)

39 
	$ec_Àn
(
CORD_ec
 
x
)

41 (
	`CORD_Àn
(
x
[0].
ec_c‹d
Ë+ (x[0].
ec_buÂå
 - x[0].
ec_buf
));

42 
	}
}

45 
	#NONE
 -1

	)

46 
	#VARIABLE
 -2

	)

56 
	$exåa˘_c⁄v_•ec
(
CORD_pos
 
sour˚
, *
buf
,

57 * 
width
, *
¥ec
, *
À·
, * 
l⁄g_¨g
)

59 
ªsu…
 = 0;

60 
cuºít_numbî
 = 0;

61 
ßw_≥riod
 = 0;

62 
ßw_numbî
 = 0;

63 
ch¨s_so_Ár
 = 0;

64 
cuºít
;

66 *
width
 = 
NONE
;

67 
buf
[
ch¨s_so_Ár
++] = '%';

68 
	`CORD_pos_vÆid
(
sour˚
)) {

69 i‡(
ch¨s_so_Ár
 >
CONV_SPEC_LEN
) (-1);

70 
cuºít
 = 
	`CORD_pos_„tch
(
sour˚
);

71 
buf
[
ch¨s_so_Ár
++] = 
cuºít
;

72 
cuºít
) {

74 
ßw_numbî
 = 1;

75 
cuºít_numbî
 = 
VARIABLE
;

78 i‡(!
ßw_numbî
) {

91 
ßw_numbî
 = 1;

92 
cuºít_numbî
 *= 10;

93 
cuºít_numbî
 +
cuºít
 - '0';

96 
ßw_≥riod
 = 1;

97 if(
ßw_numbî
) {

98 *
width
 = 
cuºít_numbî
;

99 
ßw_numbî
 = 0;

101 
cuºít_numbî
 = 0;

105 *
l⁄g_¨g
 = 1;

106 
cuºít_numbî
 = 0;

109 *
l⁄g_¨g
 = -1;

110 
cuºít_numbî
 = 0;

115 
cuºít_numbî
 = 0;

118 *
À·
 = 1;

119 
cuºít_numbî
 = 0;

139 
d⁄e
;

143 
	`CORD_√xt
(
sour˚
);

146 
d⁄e
:

147 i‡(
ßw_numbî
) {

148 i‡(
ßw_≥riod
) {

149 *
¥ec
 = 
cuºít_numbî
;

151 *
¥ec
 = 
NONE
;

152 *
width
 = 
cuºít_numbî
;

155 *
¥ec
 = 
NONE
;

157 
buf
[
ch¨s_so_Ár
] = '\0';

158 (
ªsu…
);

159 
	}
}

161 
	$CORD_v•rötf
(
CORD
 * 
out
, CORD 
f‹m©
, 
va_li°
 
¨gs
)

163 
CORD_ec
 
ªsu…
;

164 
cou¡
;

165 
cuºít
;

166 
CORD_pos
 
pos
;

167 
c⁄v_•ec
[
CONV_SPEC_LEN
 + 1];

169 
	`CORD_ec_öô
(
ªsu…
);

170 
	`CORD_£t_pos
(
pos
, 
f‹m©
, 0); 
	`CORD_pos_vÆid
’os); 
	`CORD_√xt
(pos)) {

171 
cuºít
 = 
	`CORD_pos_„tch
(
pos
);

172 i‡(
cuºít
 == '%') {

173 
	`CORD_√xt
(
pos
);

174 i‡(!
	`CORD_pos_vÆid
(
pos
)) (-1);

175 
cuºít
 = 
	`CORD_pos_„tch
(
pos
);

176 i‡(
cuºít
 == '%') {

177 
	`CORD_ec_≠≥nd
(
ªsu…
, 
cuºít
);

179 
width
, 
¥ec
;

180 
À·_adj
 = 0;

181 
l⁄g_¨g
 = 0;

182 
CORD
 
¨g
;

183 
size_t
 
Àn
;

185 i‡(
	`exåa˘_c⁄v_•ec
(
pos
, 
c⁄v_•ec
,

186 &
width
, &
¥ec
,

187 &
À·_adj
, &
l⁄g_¨g
) < 0) {

190 
cuºít
 = 
	`CORD_pos_„tch
(
pos
);

191 
cuºít
) {

194 i‡(
l⁄g_¨g
 == 0) {

195 * 
pos_±r
;

196 
pos_±r
 = 
	`va_¨g
(
¨gs
, *);

197 *
pos_±r
 = 
	`ec_Àn
(
ªsu…
);

198 } i‡(
l⁄g_¨g
 > 0) {

199 * 
pos_±r
;

200 
pos_±r
 = 
	`va_¨g
(
¨gs
, *);

201 *
pos_±r
 = 
	`ec_Àn
(
ªsu…
);

203 * 
pos_±r
;

204 
pos_±r
 = 
	`va_¨g
(
¨gs
, *);

205 *
pos_±r
 = 
	`ec_Àn
(
ªsu…
);

207 
d⁄e
;

210 i‡(
width
 =
VARIABLE
Ëwidth = 
	`va_¨g
(
¨gs
, );

211 i‡(
¥ec
 =
VARIABLE
Ë¥e¯
	`va_¨g
(
¨gs
, );

212 
¨g
 = 
	`va_¨g
(
¨gs
, 
CORD
);

213 
Àn
 = 
	`CORD_Àn
(
¨g
);

214 i‡(
¥ec
 !
NONE
 && 
Àn
 >Örec) {

215 i‡(
¥ec
 < 0) (-1);

216 
¨g
 = 
	`CORD_sub°r
◊rg, 0, 
¥ec
);

217 
Àn
 = 
¥ec
;

219 i‡(
width
 !
NONE
 && 
Àn
 < width) {

220 * 
bœnks
 = 
	`GC_MALLOC_ATOMIC
(
width
-
Àn
+1);

222 
	`mem£t
(
bœnks
, ' ', 
width
-
Àn
);

223 
bœnks
[
width
-
Àn
] = '\0';

224 i‡(
À·_adj
) {

225 
¨g
 = 
	`CORD_ˇt
◊rg, 
bœnks
);

227 
¨g
 = 
	`CORD_ˇt
(
bœnks
,árg);

230 
	`CORD_ec_≠≥nd_c‹d
(
ªsu…
, 
¨g
);

231 
d⁄e
;

233 i‡(
width
 =
NONE
 && 
¥ec
 == NONE) {

234 
c
;

236 
c
 = ()
	`va_¨g
(
¨gs
, );

237 
	`CORD_ec_≠≥nd
(
ªsu…
, 
c
);

238 
d⁄e
;

242 i‡(
width
 =
NONE
 && 
¥ec
 == NONE) {

243 * 
°r
 = 
	`va_¨g
(
¨gs
, *);

244 
c
;

246 (
c
 = *
°r
++)) {

247 
	`CORD_ec_≠≥nd
(
ªsu…
, 
c
);

249 
d⁄e
;

257 * 
buf
;

258 
va_li°
 
v•rötf_¨gs
;

259 
max_size
 = 0;

260 
ªs
;

261 #ifde‡
__va_c›y


262 
	`__va_c›y
(
v•rötf_¨gs
, 
¨gs
);

264 #i‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__DJGPP__
)

265 
	`va_c›y
(
v•rötf_¨gs
, 
¨gs
);

267 
v•rötf_¨gs
 = 
¨gs
;

270 i‡(
width
 =
VARIABLE
Ëwidth = 
	`va_¨g
(
¨gs
, );

271 i‡(
¥ec
 =
VARIABLE
Ë¥e¯
	`va_¨g
(
¨gs
, );

272 i‡(
width
 !
NONE
Ë
max_size
 = width;

273 i‡(
¥ec
 !
NONE
 &&Öª¯> 
max_size
) max_size =Örec;

274 
max_size
 +
CONV_RESULT_LEN
;

275 i‡(
max_size
 >
CORD_BUFSZ
) {

276 
buf
 = 
	`GC_MALLOC_ATOMIC
(
max_size
 + 1);

278 i‡(
CORD_BUFSZ
 - (
ªsu…
[0].
ec_buÂå
-ªsu…[0].
ec_buf
)

279 < 
max_size
) {

280 
	`CORD_ec_Êush_buf
(
ªsu…
);

282 
buf
 = 
ªsu…
[0].
ec_buÂå
;

284 
cuºít
) {

292 i‡(
l⁄g_¨g
 <= 0) {

293 (Ë
	`va_¨g
(
¨gs
, );

294 } i‡(
l⁄g_¨g
 > 0) {

295 (Ë
	`va_¨g
(
¨gs
, );

300 (Ë
	`va_¨g
(
¨gs
, *);

307 (Ë
	`va_¨g
(
¨gs
, );

312 
ªs
 = 
	`v•rötf
(
buf
, 
c⁄v_•ec
, 
v•rötf_¨gs
);

313 
Àn
 = (
size_t
)
ªs
;

314 i‡((*)(
GC_w‹d
)
ªs
 =
buf
) {

316 
Àn
 = 
	`°æí
(
buf
);

317 } i‡(
ªs
 < 0) {

320 i‡(
buf
 !
ªsu…
[0].
ec_buÂå
) {

321 
c
;

323 (
c
 = *
buf
++)) {

324 
	`CORD_ec_≠≥nd
(
ªsu…
, 
c
);

327 
ªsu…
[0].
ec_buÂå
 = 
buf
 + 
Àn
;

330 
d⁄e
:;

333 
	`CORD_ec_≠≥nd
(
ªsu…
, 
cuºít
);

336 
cou¡
 = 
	`ec_Àn
(
ªsu…
);

337 *
out
 = 
	`CORD_bÆ™˚
(
	`CORD_ec_to_c‹d
(
ªsu…
));

338 (
cou¡
);

339 
	}
}

341 
	$CORD_•rötf
(
CORD
 * 
out
, CORD 
f‹m©
, ...)

343 
va_li°
 
¨gs
;

344 
ªsu…
;

346 
	`va_°¨t
(
¨gs
, 
f‹m©
);

347 
ªsu…
 = 
	`CORD_v•rötf
(
out
, 
f‹m©
, 
¨gs
);

348 
	`va_íd
(
¨gs
);

349 (
ªsu…
);

350 
	}
}

352 
	$CORD_Ârötf
(
FILE
 * 
f
, 
CORD
 
f‹m©
, ...)

354 
va_li°
 
¨gs
;

355 
ªsu…
;

356 
CORD
 
out
;

358 
	`va_°¨t
(
¨gs
, 
f‹m©
);

359 
ªsu…
 = 
	`CORD_v•rötf
(&
out
, 
f‹m©
, 
¨gs
);

360 
	`va_íd
(
¨gs
);

361 i‡(
ªsu…
 > 0Ë
	`CORD_put
(
out
, 
f
);

362 (
ªsu…
);

363 
	}
}

365 
	$CORD_vÂrötf
(
FILE
 * 
f
, 
CORD
 
f‹m©
, 
va_li°
 
¨gs
)

367 
ªsu…
;

368 
CORD
 
out
;

370 
ªsu…
 = 
	`CORD_v•rötf
(&
out
, 
f‹m©
, 
¨gs
);

371 i‡(
ªsu…
 > 0Ë
	`CORD_put
(
out
, 
f
);

372 (
ªsu…
);

373 
	}
}

375 
	$CORD_¥ötf
(
CORD
 
f‹m©
, ...)

377 
va_li°
 
¨gs
;

378 
ªsu…
;

379 
CORD
 
out
;

381 
	`va_°¨t
(
¨gs
, 
f‹m©
);

382 
ªsu…
 = 
	`CORD_v•rötf
(&
out
, 
f‹m©
, 
¨gs
);

383 
	`va_íd
(
¨gs
);

384 i‡(
ªsu…
 > 0Ë
	`CORD_put
(
out
, 
°dout
);

385 (
ªsu…
);

386 
	}
}

388 
	$CORD_v¥ötf
(
CORD
 
f‹m©
, 
va_li°
 
¨gs
)

390 
ªsu…
;

391 
CORD
 
out
;

393 
ªsu…
 = 
	`CORD_v•rötf
(&
out
, 
f‹m©
, 
¨gs
);

394 i‡(
ªsu…
 > 0Ë
	`CORD_put
(
out
, 
°dout
);

395 (
ªsu…
);

396 
	}
}

	@cord/cordtest.c

14 
	~"gc.h
"

15 
	~"c‹d.h
"

16 
	~<°rög.h
>

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

23 
	#ABORT
(
°rög
) \

24 { 
x
 = 0; 
	`Ârötf
(
°dîr
, "FAILED: %s\n", 
°rög
); x = 1 / x; 
	`ab‹t
(); }

	)

26 
	gcou¡
;

28 
	$ã°_‚
(
c
, * 
˛õ¡_d©a
)

30 i‡(
˛õ¡_d©a
 !(*)13Ë
	`ABORT
("bad client data");

31 i‡(
cou¡
 < 64*1024+1) {

32 i‡((
cou¡
 & 1) == 0) {

33 i‡(
c
 !'b'Ë
	`ABORT
("bad char");

35 i‡(
c
 !'a'Ë
	`ABORT
("bad char");

37 
cou¡
++;

40 i‡(
c
 !'c'Ë
	`ABORT
("bad char");

41 
cou¡
++;

44 
	}
}

46 
	$id_c‹d_‚
(
size_t
 
i
, * 
˛õ¡_d©a
)

48 (()
i
);

49 
	}
}

51 
	$ã°_basics
()

53 
CORD
 
x
 = 
	`CORD_‰om_ch¨_°¨
("ab");

54 
i
;

55 
c
;

56 
CORD
 
y
;

57 
CORD_pos
 
p
;

59 
x
 = 
	`CORD_ˇt
(x,x);

60 i‡(!
	`CORD_IS_STRING
(
x
)Ë
	`ABORT
("short cord should usually beá string");

61 i‡(
	`°rcmp
(
x
, "abab"Ë!0Ë
	`ABORT
("bad CORD_catÑesult");

63 
i
 = 1; i < 16; i++) {

64 
x
 = 
	`CORD_ˇt
(x,x);

66 
x
 = 
	`CORD_ˇt
(x,"c");

67 i‡(
	`CORD_Àn
(
x
Ë!128*1024+1Ë
	`ABORT
("badÜength");

69 
cou¡
 = 0;

70 i‡(
	`CORD_ôî5
(
x
, 64*1024-1, 
ã°_‚
, 
CORD_NO_FN
, (*)13) == 0) {

71 
	`ABORT
("CORD_iter5 failed");

73 i‡(
cou¡
 !64*1024 + 2Ë
	`ABORT
("CORD_iter5 failed");

75 
cou¡
 = 0;

76 
	`CORD_£t_pos
(
p
, 
x
, 64*1024-1);

77 
	`CORD_pos_vÆid
(
p
)) {

78 (Ë
	`ã°_‚
(
	`CORD_pos_„tch
(
p
), (*)13);

79 
	`CORD_√xt
(
p
);

81 i‡(
cou¡
 !64*1024 + 2Ë
	`ABORT
("Position based iteration failed");

83 
y
 = 
	`CORD_sub°r
(
x
, 1023, 5);

84 i‡(!
	`CORD_IS_STRING
(
y
)Ë
	`ABORT
("short cord should usually beá string");

85 i‡(
	`°rcmp
(
y
, "babab"Ë!0Ë
	`ABORT
("bad CORD_substrÑesult");

87 
y
 = 
	`CORD_sub°r
(
x
, 1024, 8);

88 i‡(!
	`CORD_IS_STRING
(
y
)Ë
	`ABORT
("short cord should usually beá string");

89 i‡(
	`°rcmp
(
y
, "abababab"Ë!0Ë
	`ABORT
("bad CORD_substrÑesult");

91 
y
 = 
	`CORD_sub°r
(
x
, 128*1024-1, 8);

92 i‡(!
	`CORD_IS_STRING
(
y
)Ë
	`ABORT
("short cord should usually beá string");

93 i‡(
	`°rcmp
(
y
, "bc"Ë!0Ë
	`ABORT
("bad CORD_substrÑesult");

95 
x
 = 
	`CORD_bÆ™˚
(x);

96 i‡(
	`CORD_Àn
(
x
Ë!128*1024+1Ë
	`ABORT
("badÜength");

98 
cou¡
 = 0;

99 i‡(
	`CORD_ôî5
(
x
, 64*1024-1, 
ã°_‚
, 
CORD_NO_FN
, (*)13) == 0) {

100 
	`ABORT
("CORD_iter5 failed");

102 i‡(
cou¡
 !64*1024 + 2Ë
	`ABORT
("CORD_iter5 failed");

104 
y
 = 
	`CORD_sub°r
(
x
, 1023, 5);

105 i‡(!
	`CORD_IS_STRING
(
y
)Ë
	`ABORT
("short cord should usually beá string");

106 i‡(
	`°rcmp
(
y
, "babab"Ë!0Ë
	`ABORT
("bad CORD_substrÑesult");

107 
y
 = 
	`CORD_‰om_‚
(
id_c‹d_‚
, 0, 13);

108 
i
 = 0;

109 
	`CORD_£t_pos
(
p
, 
y
, 
i
);

110 
	`CORD_pos_vÆid
(
p
)) {

111 
c
 = 
	`CORD_pos_„tch
(
p
);

112 if(
c
 !
i
Ë
	`ABORT
("Traversal of functionÇode failed");

113 
	`CORD_√xt
(
p
); 
i
++;

115 i‡(
i
 !13Ë
	`ABORT
("BadápparentÜength for functionÇode");

116 
	}
}

118 
	$ã°_exåas
()

120 #i‡
	`deföed
(
__OS2__
Ë|| deföed(
__DJGPP__
)

121 
	#FNAME1
 "tmp1"

	)

122 
	#FNAME2
 "tmp2"

	)

123 #ñi‡
	`deföed
(
AMIGA
)

124 
	#FNAME1
 "T:tmp1"

	)

125 
	#FNAME2
 "T:tmp2"

	)

127 
	#FNAME1
 "/tmp/c‹d_ã°"

	)

128 
	#FNAME2
 "/tmp/c‹d_ã°2"

	)

130 
i
;

131 
CORD
 
y
 = "abcdefghijklmnopqrstuvwxyz0123456789";

132 
CORD
 
x
 = "{}";

133 
CORD
 
w
, 
z
;

134 
FILE
 *
f
;

135 
FILE
 *
f1a
, *
f1b
, *
f2
;

137 
w
 = 
	`CORD_ˇt
(CORD_ˇt(
y
,y),y);

138 
z
 = 
	`CORD_ˇä
(3,
y
,y,y);

139 i‡(
	`CORD_cmp
(
w
,
z
Ë!0Ë
	`ABORT
("CORD_catn comparison wrong");

140 
i
 = 1; i < 100; i++) {

141 
x
 = 
	`CORD_ˇt
(x, 
y
);

143 
z
 = 
	`CORD_bÆ™˚
(
x
);

144 i‡(
	`CORD_cmp
(
x
,
z
Ë!0Ë
	`ABORT
("balanced string comparison wrong");

145 i‡(
	`CORD_cmp
(
x
,
	`CORD_ˇt
(
z
, 
	`CORD_nul
(13))Ë>0Ë
	`ABORT
("comparison 2");

146 i‡(
	`CORD_cmp
(
	`CORD_ˇt
(
x
, 
	`CORD_nul
(13)), 
z
Ë<0Ë
	`ABORT
("comparison 3");

147 i‡(
	`CORD_cmp
(
x
,
	`CORD_ˇt
(
z
, "13")Ë>0Ë
	`ABORT
("comparison 4");

148 i‡((
f
 = 
	`f›í
(
FNAME1
, "w")Ë=0Ë
	`ABORT
("open failed");

149 i‡(
	`CORD_put
(
z
,
f
Ë=
EOF
Ë
	`ABORT
("CORD_put failed");

150 i‡(
	`f˛o£
(
f
Ë=
EOF
Ë
	`ABORT
("fclose failed");

151 
w
 = 
	`CORD_‰om_fûe
(
f1a
 = 
	`f›í
(
FNAME1
, "rb"));

152 i‡(
	`CORD_Àn
(
w
Ë!CORD_Àn(
z
)Ë
	`ABORT
("fileÜength wrong");

153 i‡(
	`CORD_cmp
(
w
,
z
Ë!0Ë
	`ABORT
("file comparison wrong");

154 i‡(
	`CORD_cmp
(
	`CORD_sub°r
(
w
, 50*36+2, 36), 
y
) != 0)

155 
	`ABORT
("file substr wrong");

156 
z
 = 
	`CORD_‰om_fûe_œzy
(
f1b
 = 
	`f›í
(
FNAME1
, "rb"));

157 i‡(
	`CORD_cmp
(
w
,
z
Ë!0Ë
	`ABORT
("File conversions differ");

158 i‡(
	`CORD_chr
(
w
, 0, '9'Ë!37Ë
	`ABORT
("CORD_chr failed 1");

159 i‡(
	`CORD_chr
(
w
, 3, 'a'Ë!38Ë
	`ABORT
("CORD_chr failed 2");

160 i‡(
	`CORD_rchr
(
w
, 
	`CORD_Àn
(wË- 1, '}'Ë!1Ë
	`ABORT
("CORD_rchr failed");

161 
x
 = 
y
;

162 
i
 = 1; i < 14; i++) {

163 
x
 = 
	`CORD_ˇt
(x,x);

165 i‡((
f
 = 
	`f›í
(
FNAME2
, "w")Ë=0Ë
	`ABORT
("2nd open failed");

166 #ifde‡
__DJGPP__


168 i‡(
	`fÊush
(
f
Ë!0Ë
	`ABORT
("fflush failed");

170 i‡(
	`CORD_put
(
x
,
f
Ë=
EOF
Ë
	`ABORT
("CORD_put failed");

171 i‡(
	`f˛o£
(
f
Ë=
EOF
Ë
	`ABORT
("fclose failed");

172 
w
 = 
	`CORD_‰om_fûe
(
f2
 = 
	`f›í
(
FNAME2
, "rb"));

173 i‡(
	`CORD_Àn
(
w
Ë!CORD_Àn(
x
)Ë
	`ABORT
("fileÜength wrong");

174 i‡(
	`CORD_cmp
(
w
,
x
Ë!0Ë
	`ABORT
("file comparison wrong");

175 i‡(
	`CORD_cmp
(
	`CORD_sub°r
(
w
, 1000*36, 36), 
y
) != 0)

176 
	`ABORT
("file substr wrong");

177 i‡(
	`°rcmp
(
	`CORD_to_ch¨_°¨
(
	`CORD_sub°r
(
w
, 1000*36, 36)), 
y
) != 0)

178 
	`ABORT
("char * file substr wrong");

179 i‡(
	`°rcmp
(
	`CORD_sub°r
(
w
, 1000*36, 2), "ab") != 0)

180 
	`ABORT
("short file substr wrong");

181 i‡(
	`CORD_°r
(
x
,1,"9a"Ë!35Ë
	`ABORT
("CORD_str failed 1");

182 i‡(
	`CORD_°r
(
x
,0,"9abcdefghijk"Ë!35Ë
	`ABORT
("CORD_str failed 2");

183 i‡(
	`CORD_°r
(
x
,0,"9abcdefghijx"Ë!
CORD_NOT_FOUND
)

184 
	`ABORT
("CORD_str failed 3");

185 i‡(
	`CORD_°r
(
x
,0,"9>"Ë!
CORD_NOT_FOUND
Ë
	`ABORT
("CORD_str failed 4");

186 i‡(
	`ªmove
(
FNAME1
) != 0) {

188 i‡((
	`f˛o£
(
f1a
Ë=
EOF
Ë& (f˛o£(
f1b
) == EOF))

189 
	`ABORT
("fclose(f1) failed");

190 i‡(
	`ªmove
(
FNAME1
Ë!0Ë
	`ABORT
("remove 1 failed");

192 i‡(
	`ªmove
(
FNAME2
) != 0) {

193 i‡(
	`f˛o£
(
f2
Ë=
EOF
Ë
	`ABORT
("fclose(f2) failed");

194 i‡(
	`ªmove
(
FNAME2
Ë!0Ë
	`ABORT
("remove 2 failed");

196 
	}
}

198 
	$ã°_¥ötf
()

200 
CORD
 
ªsu…
;

201 
ªsu…2
[200];

202 
l
;

203 
s
;

204 
CORD
 
x
;

206 i‡(
	`CORD_•rötf
(&
ªsu…
, "%7.2f% ", 3.14159F, &
l
) != 7)

207 
	`ABORT
("CORD_sprintf failed 1");

208 i‡(
	`CORD_cmp
(
ªsu…
, " 3.14"Ë!0)
	`ABORT
("CORD_sprintf goofed 1");

209 i‡(
l
 !7Ë
	`ABORT
("CORD_sprintf goofed 2");

210 i‡(
	`CORD_•rötf
(&
ªsu…
, "%-7.2s%hn%c%s", "abcd", &
s
, 'x', "yz") != 10)

211 
	`ABORT
("CORD_sprintf failed 2");

212 i‡(
	`CORD_cmp
(
ªsu…
, "ab xyz"Ë!0)
	`ABORT
("CORD_sprintf goofed 3");

213 i‡(
s
 !7Ë
	`ABORT
("CORD_sprintf goofed 4");

214 
x
 = "abcdefghij";

215 
x
 = 
	`CORD_ˇt
(x,x);

216 
x
 = 
	`CORD_ˇt
(x,x);

217 
x
 = 
	`CORD_ˇt
(x,x);

218 i‡(
	`CORD_•rötf
(&
ªsu…
, "->%-120.78r!\n", 
x
) != 124)

219 
	`ABORT
("CORD_sprintf failed 3");

220 (Ë
	`•rötf
(
ªsu…2
, "->%-120.78s!\n", 
	`CORD_to_ch¨_°¨
(
x
));

221 i‡(
	`CORD_cmp
(
ªsu…
, 
ªsu…2
Ë!0)
	`ABORT
("CORD_sprintf goofed 5");

222 
	}
}

224 
	$maö
()

226 #ifde‡
THINK_C


227 
	`¥ötf
("cordtest:\n");

229 
	`GC_INIT
();

230 
	`ã°_basics
();

231 
	`ã°_exåas
();

232 
	`ã°_¥ötf
();

233 
	`CORD_Ârötf
(
°dîr
, "SUCCEEDED\n");

235 
	}
}

	@cord/cordxtra.c

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~<°d¨g.h
>

25 
	~"c‹d.h
"

26 
	~"ec.h
"

27 
	#I_HIDE_POINTERS


	)

31 
	~"gc.h
"

38 
	#ATOMIC_WRITE
(
x
,
y
Ë(xË(y)

	)

39 
	#ATOMIC_READ
(
x
Ë(*(x))

	)

42 #i‚de‡
SEEK_SET


43 
	#SEEK_SET
 0

	)

45 #i‚de‡
SEEK_END


46 
	#SEEK_END
 2

	)

49 
	#BUFSZ
 2048

	)

52 (* 
	toom_‚
)();

54 
	#OUT_OF_MEMORY
 { i‡(
CORD_oom_‚
 !(
oom_‚
) 0) (*CORD_oom_fn)(); \

55 
	`ABORT
("Ouào‡mem‹y\n"); 
	}

	)
}

56 
	#ABORT
(
msg
Ë{ 
	`Ârötf
(
°dîr
, "%s\n", msg); 
	`ab‹t
(); }

	)

58 
CORD
 
	$CORD_ˇt_ch¨
(
CORD
 
x
, 
c
)

60 * 
°rög
;

62 i‡(
c
 ='\0'Ë(
	`CORD_ˇt
(
x
, 
	`CORD_nul
(1)));

63 
°rög
 = 
	`GC_MALLOC_ATOMIC
(2);

64 i‡(
°rög
 =0Ë
OUT_OF_MEMORY
;

65 
°rög
[0] = 
c
;

66 
°rög
[1] = '\0';

67 (
	`CORD_ˇt_ch¨_°¨
(
x
, 
°rög
, 1));

68 
	}
}

70 
CORD
 
	$CORD_ˇä
(
«rgs
, ...)

72 
CORD
 
ªsu…
 = 
CORD_EMPTY
;

73 
va_li°
 
¨gs
;

74 
i
;

76 
	`va_°¨t
(
¨gs
, 
«rgs
);

77 
i
 = 0; i < 
«rgs
; i++) {

78 
CORD
 
√xt
 = 
	`va_¨g
(
¨gs
, CORD);

79 
ªsu…
 = 
	`CORD_ˇt
‘esu…, 
√xt
);

81 
	`va_íd
(
¨gs
);

82 (
ªsu…
);

83 
	}
}

86 
size_t
 
	mÀn
;

87 
size_t
 
	mcou¡
;

88 * 
	mbuf
;

89 } 
	tCORD_fûl_d©a
;

91 
	$CORD_fûl_¥oc
(
c
, * 
˛õ¡_d©a
)

93 
CORD_fûl_d©a
 * 
d
 = (CORD_fûl_d©®*)
˛õ¡_d©a
;

94 
size_t
 
cou¡
 = 
d
 -> count;

96 (
d
 -> 
buf
)[
cou¡
] = 
c
;

97 
d
 -> 
cou¡
 = ++count;

98 i‡(
cou¡
 >
d
 -> 
Àn
) {

103 
	}
}

105 
	$CORD_b©ched_fûl_¥oc
(c⁄° * 
s
, * 
˛õ¡_d©a
)

107 
CORD_fûl_d©a
 * 
d
 = (CORD_fûl_d©®*)
˛õ¡_d©a
;

108 
size_t
 
cou¡
 = 
d
 -> count;

109 
size_t
 
max
 = 
d
 -> 
Àn
;

110 * 
buf
 = 
d
 -> buf;

111 c⁄° * 
t
 = 
s
;

113 (
buf
[
cou¡
] = *
t
++) != '\0') {

114 
cou¡
++;

115 i‡(
cou¡
 >
max
) {

116 
d
 -> 
cou¡
 = count;

120 
d
 -> 
cou¡
 = count;

122 
	}
}

126 
	$CORD_fûl_buf
(
CORD
 
x
, 
size_t
 
i
, size_à
Àn
, * 
buf
)

128 
CORD_fûl_d©a
 
fd
;

130 
fd
.
Àn
 =Üen;

131 
fd
.
buf
 = buf;

132 
fd
.
cou¡
 = 0;

133 ()
	`CORD_ôî5
(
x
, 
i
, 
CORD_fûl_¥oc
, 
CORD_b©ched_fûl_¥oc
, &
fd
);

134 
	}
}

136 
	$CORD_cmp
(
CORD
 
x
, CORD 
y
)

138 
CORD_pos
 
xpos
;

139 
CORD_pos
 
ypos
;

140 
size_t
 
avaû
, 
yavaû
;

142 i‡(
y
 =
CORD_EMPTY
Ë(
x
 != CORD_EMPTY);

143 i‡(
x
 =
CORD_EMPTY
) (-1);

144 i‡(
	`CORD_IS_STRING
(
y
Ë&& CORD_IS_STRING(
x
)Ë(
	`°rcmp
(x,y));

145 
	`CORD_£t_pos
(
xpos
, 
x
, 0);

146 
	`CORD_£t_pos
(
ypos
, 
y
, 0);

148 i‡(!
	`CORD_pos_vÆid
(
xpos
)) {

149 i‡(
	`CORD_pos_vÆid
(
ypos
)) {

155 i‡(!
	`CORD_pos_vÆid
(
ypos
)) {

158 i‡((
avaû
 = 
	`CORD_pos_ch¨s_À·
(
xpos
)) <= 0

159 || (
yavaû
 = 
	`CORD_pos_ch¨s_À·
(
ypos
)) <= 0) {

160 
xcuºít
 = 
	`CORD_pos_„tch
(
xpos
);

161 
ycuºít
 = 
	`CORD_pos_„tch
(
ypos
);

162 i‡(
xcuºít
 !
ycuºít
) (xcurrent - ycurrent);

163 
	`CORD_√xt
(
xpos
);

164 
	`CORD_√xt
(
ypos
);

167 
ªsu…
;

169 i‡(
avaû
 > 
yavaû
)ávail = yavail;

170 
ªsu…
 = 
	`°∫cmp
(
	`CORD_pos_cur_ch¨_addr
(
xpos
),

171 
	`CORD_pos_cur_ch¨_addr
(
ypos
), 
avaû
);

172 i‡(
ªsu…
 != 0) (result);

173 
	`CORD_pos_adv™˚
(
xpos
, 
avaû
);

174 
	`CORD_pos_adv™˚
(
ypos
, 
avaû
);

177 
	}
}

179 
	$CORD_ncmp
(
CORD
 
x
, 
size_t
 
x_°¨t
, CORD 
y
, size_à
y_°¨t
, size_à
Àn
)

181 
CORD_pos
 
xpos
;

182 
CORD_pos
 
ypos
;

183 
size_t
 
cou¡
;

184 
avaû
, 
yavaû
;

186 
	`CORD_£t_pos
(
xpos
, 
x
, 
x_°¨t
);

187 
	`CORD_£t_pos
(
ypos
, 
y
, 
y_°¨t
);

188 
cou¡
 = 0; cou¡ < 
Àn
;) {

189 i‡(!
	`CORD_pos_vÆid
(
xpos
)) {

190 i‡(
	`CORD_pos_vÆid
(
ypos
)) {

196 i‡(!
	`CORD_pos_vÆid
(
ypos
)) {

199 i‡((
avaû
 = 
	`CORD_pos_ch¨s_À·
(
xpos
)) <= 0

200 || (
yavaû
 = 
	`CORD_pos_ch¨s_À·
(
ypos
)) <= 0) {

201 
xcuºít
 = 
	`CORD_pos_„tch
(
xpos
);

202 
ycuºít
 = 
	`CORD_pos_„tch
(
ypos
);

203 i‡(
xcuºít
 !
ycuºít
) (xcurrent - ycurrent);

204 
	`CORD_√xt
(
xpos
);

205 
	`CORD_√xt
(
ypos
);

206 
cou¡
++;

209 
ªsu…
;

211 i‡(
avaû
 > 
yavaû
)ávail = yavail;

212 
cou¡
 +
avaû
;

213 i‡(
cou¡
 > 
Àn
Ë
avaû
 -= (count -Üen);

214 
ªsu…
 = 
	`°∫cmp
(
	`CORD_pos_cur_ch¨_addr
(
xpos
),

215 
	`CORD_pos_cur_ch¨_addr
(
ypos
), (
size_t
)
avaû
);

216 i‡(
ªsu…
 != 0) (result);

217 
	`CORD_pos_adv™˚
(
xpos
, (
size_t
)
avaû
);

218 
	`CORD_pos_adv™˚
(
ypos
, (
size_t
)
avaû
);

222 
	}
}

224 * 
	$CORD_to_ch¨_°¨
(
CORD
 
x
)

226 
size_t
 
Àn
 = 
	`CORD_Àn
(
x
);

227 * 
ªsu…
 = 
	`GC_MALLOC_ATOMIC
(
Àn
 + 1);

229 i‡(
ªsu…
 =0Ë
OUT_OF_MEMORY
;

230 
	`CORD_fûl_buf
(
x
, 0, 
Àn
, 
ªsu…
);

231 
ªsu…
[
Àn
] = '\0';

232 (
ªsu…
);

233 
	}
}

235 
CORD
 
	$CORD_‰om_ch¨_°¨
(c⁄° *
s
)

237 * 
ªsu…
;

238 
size_t
 
Àn
 = 
	`°æí
(
s
);

240 i‡(0 =
Àn
Ë(
CORD_EMPTY
);

241 
ªsu…
 = 
	`GC_MALLOC_ATOMIC
(
Àn
 + 1);

242 i‡(
ªsu…
 =0Ë
OUT_OF_MEMORY
;

243 
	`mem˝y
(
ªsu…
, 
s
, 
Àn
+1);

244 (
ªsu…
);

245 
	}
}

247 c⁄° * 
	$CORD_to_c⁄°_ch¨_°¨
(
CORD
 
x
)

249 i‡(
x
 == 0) ("");

250 i‡(
	`CORD_IS_STRING
(
x
)) ((const *)x);

251 (
	`CORD_to_ch¨_°¨
(
x
));

252 
	}
}

254 
	$CORD_„tch
(
CORD
 
x
, 
size_t
 
i
)

256 
CORD_pos
 
xpos
;

258 
	`CORD_£t_pos
(
xpos
, 
x
, 
i
);

259 i‡(!
	`CORD_pos_vÆid
(
xpos
)Ë
	`ABORT
("bad index?");

260 (
	`CORD_pos_„tch
(
xpos
));

261 
	}
}

264 
	$CORD_put_¥oc
(
c
, * 
˛õ¡_d©a
)

266 
FILE
 * 
f
 = (FILE *)
˛õ¡_d©a
;

268 (
	`putc
(
c
, 
f
Ë=
EOF
);

269 
	}
}

271 
	$CORD_b©ched_put_¥oc
(c⁄° * 
s
, * 
˛õ¡_d©a
)

273 
FILE
 * 
f
 = (FILE *)
˛õ¡_d©a
;

275 (
	`Âuts
(
s
, 
f
Ë=
EOF
);

276 
	}
}

279 
	$CORD_put
(
CORD
 
x
, 
FILE
 * 
f
)

281 i‡(
	`CORD_ôî5
(
x
, 0, 
CORD_put_¥oc
, 
CORD_b©ched_put_¥oc
, 
f
)) {

282 (
EOF
);

286 
	}
}

289 
size_t
 
	mpos
;

290 
	mèrgë
;

291 } 
	tchr_d©a
;

293 
	$CORD_chr_¥oc
(
c
, * 
˛õ¡_d©a
)

295 
chr_d©a
 * 
d
 = (chr_d©®*)
˛õ¡_d©a
;

297 i‡(
c
 =
d
 -> 
èrgë
) (1);

298 (
d
 -> 
pos
) ++;

300 
	}
}

302 
	$CORD_rchr_¥oc
(
c
, * 
˛õ¡_d©a
)

304 
chr_d©a
 * 
d
 = (chr_d©®*)
˛õ¡_d©a
;

306 i‡(
c
 =
d
 -> 
èrgë
) (1);

307 (
d
 -> 
pos
) --;

309 
	}
}

311 
	$CORD_b©ched_chr_¥oc
(c⁄° *
s
, * 
˛õ¡_d©a
)

313 
chr_d©a
 * 
d
 = (chr_d©®*)
˛õ¡_d©a
;

314 * 
occ
 = 
	`°rchr
(
s
, 
d
 -> 
èrgë
);

316 i‡(
occ
 == 0) {

317 
d
 -> 
pos
 +
	`°æí
(
s
);

320 
d
 -> 
pos
 +
occ
 - 
s
;

323 
	}
}

325 
size_t
 
	$CORD_chr
(
CORD
 
x
, 
size_t
 
i
, 
c
)

327 
chr_d©a
 
d
;

329 
d
.
pos
 = 
i
;

330 
d
.
èrgë
 = 
c
;

331 i‡(
	`CORD_ôî5
(
x
, 
i
, 
CORD_chr_¥oc
, 
CORD_b©ched_chr_¥oc
, &
d
)) {

332 (
d
.
pos
);

334 (
CORD_NOT_FOUND
);

336 
	}
}

338 
size_t
 
	$CORD_rchr
(
CORD
 
x
, 
size_t
 
i
, 
c
)

340 
chr_d©a
 
d
;

342 
d
.
pos
 = 
i
;

343 
d
.
èrgë
 = 
c
;

344 i‡(
	`CORD_rôî4
(
x
, 
i
, 
CORD_rchr_¥oc
, &
d
)) {

345 (
d
.
pos
);

347 (
CORD_NOT_FOUND
);

349 
	}
}

357 
size_t
 
	$CORD_°r
(
CORD
 
x
, 
size_t
 
°¨t
, CORD 
s
)

359 
CORD_pos
 
xpos
;

360 
size_t
 
xÀn
 = 
	`CORD_Àn
(
x
);

361 
size_t
 
¶í
;

362 
size_t
 
°¨t_Àn
;

363 c⁄° * 
s_°¨t
;

364 
s_buf
 = 0;

365 
x_buf
 = 0;

368 
mask
 = 0;

369 
size_t
 
i
;

370 
size_t
 
m©ch_pos
;

372 i‡(
s
 =
CORD_EMPTY
Ë(
°¨t
);

373 i‡(
	`CORD_IS_STRING
(
s
)) {

374 
s_°¨t
 = 
s
;

375 
¶í
 = 
	`°æí
(
s
);

377 
s_°¨t
 = 
	`CORD_to_ch¨_°¨
(
	`CORD_sub°r
(
s
, 0, ()));

378 
¶í
 = 
	`CORD_Àn
(
s
);

380 i‡(
xÀn
 < 
°¨t
 || xÀ¿- sèπ < 
¶í
Ë(
CORD_NOT_FOUND
);

381 
°¨t_Àn
 = 
¶í
;

382 i‡(
°¨t_Àn
 > ()) start_len = ();

383 
	`CORD_£t_pos
(
xpos
, 
x
, 
°¨t
);

384 
i
 = 0; i < 
°¨t_Àn
; i++) {

385 
mask
 <<= 8;

386 
mask
 |= 0xff;

387 
s_buf
 <<= 8;

388 
s_buf
 |()
s_°¨t
[
i
];

389 
x_buf
 <<= 8;

390 
x_buf
 |()
	`CORD_pos_„tch
(
xpos
);

391 
	`CORD_√xt
(
xpos
);

393 
m©ch_pos
 = 
°¨t
; ; match_pos++) {

394 i‡((
x_buf
 & 
mask
Ë=
s_buf
) {

395 i‡(
¶í
 =
°¨t_Àn
 ||

396 
	`CORD_ncmp
(
x
, 
m©ch_pos
 + 
°¨t_Àn
,

397 
s
, 
°¨t_Àn
, 
¶í
 - start_len) == 0) {

398 (
m©ch_pos
);

401 i‡–
m©ch_pos
 =
xÀn
 - 
¶í
 ) {

402 (
CORD_NOT_FOUND
);

404 
x_buf
 <<= 8;

405 
x_buf
 |()
	`CORD_pos_„tch
(
xpos
);

406 
	`CORD_√xt
(
xpos
);

408 
	}
}

410 
	$CORD_ec_Êush_buf
(
CORD_ec
 
x
)

412 
size_t
 
Àn
 = 
x
[0].
ec_buÂå
 - x[0].
ec_buf
;

413 * 
s
;

415 i‡(
Àn
 == 0) ;

416 
s
 = 
	`GC_MALLOC_ATOMIC
(
Àn
+1);

417 
	`mem˝y
(
s
, 
x
[0].
ec_buf
, 
Àn
);

418 
s
[
Àn
] = '\0';

419 
x
[0].
ec_c‹d
 = 
	`CORD_ˇt_ch¨_°¨
(x[0].ec_c‹d, 
s
, 
Àn
);

420 
x
[0].
ec_buÂå
 = x[0].
ec_buf
;

421 
	}
}

423 
	$CORD_ec_≠≥nd_c‹d
(
CORD_ec
 
x
, 
CORD
 
s
)

425 
	`CORD_ec_Êush_buf
(
x
);

426 
x
[0].
ec_c‹d
 = 
	`CORD_ˇt
(x[0].ec_c‹d, 
s
);

427 
	}
}

430 
	$CORD_nul_func
(
size_t
 
i
, * 
˛õ¡_d©a
)

432 (()()
˛õ¡_d©a
);

433 
	}
}

436 
CORD
 
	$CORD_ch¨s
(
c
, 
size_t
 
i
)

438 (
	`CORD_‰om_‚
(
CORD_nul_func
, (*)()
c
, 
i
));

439 
	}
}

441 
CORD
 
	$CORD_‰om_fûe_ógî
(
FILE
 * 
f
)

443 
c
;

444 
CORD_ec
 
ec‹d
;

446 
	`CORD_ec_öô
(
ec‹d
);

448 
c
 = 
	`gëc
(
f
);

449 i‡(
c
 == 0) {

453 
size_t
 
cou¡
 = 1;

455 
	`CORD_ec_Êush_buf
(
ec‹d
);

456 (
c
 = 
	`gëc
(
f
)Ë=0Ë
cou¡
++;

457 
ec‹d
[0].
ec_c‹d
 = 
	`CORD_ˇt
”c‹d[0].ec_c‹d, 
	`CORD_nul
(
cou¡
));

459 i‡(
c
 =
EOF
) ;

460 
	`CORD_ec_≠≥nd
(
ec‹d
, 
c
);

462 (Ë
	`f˛o£
(
f
);

463 (
	`CORD_bÆ™˚
(
	`CORD_ec_to_c‹d
(
ec‹d
)));

464 
	}
}

479 
	#LOG_CACHE_SZ
 14

	)

480 
	#CACHE_SZ
 (1 << 
LOG_CACHE_SZ
)

	)

481 
	#LOG_LINE_SZ
 9

	)

482 
	#LINE_SZ
 (1 << 
LOG_LINE_SZ
)

	)

485 
size_t
 
	mèg
;

486 
	md©a
[
LINE_SZ
];

488 } 
	tˇche_löe
;

491 
FILE
 * 
	mlf_fûe
;

492 
size_t
 
	mlf_cuºít
;

493 
ˇche_löe
 * vﬁ©ûê
	mlf_ˇche
[
CACHE_SZ
/
LINE_SZ
];

494 } 
	tlf_°©e
;

496 
	#MOD_CACHE_SZ
(
n
Ë(“Ë& (
CACHE_SZ
 - 1))

	)

497 
	#DIV_CACHE_SZ
(
n
Ë(“Ë>> 
LOG_CACHE_SZ
)

	)

498 
	#MOD_LINE_SZ
(
n
Ë(“Ë& (
LINE_SZ
 - 1))

	)

499 
	#DIV_LINE_SZ
(
n
Ë(“Ë>> 
LOG_LINE_SZ
)

	)

500 
	#LINE_START
(
n
Ë(“Ë& ~(
LINE_SZ
 - 1))

	)

503 
lf_°©e
 * 
	m°©e
;

504 
size_t
 
	mfûe_pos
;

505 
ˇche_löe
 * 
	m√w_ˇche
;

506 } 
	tªfûl_d©a
;

509 
	$ªfûl_ˇche
(
˛õ¡_d©a
)

510 
ªfûl_d©a
 * 
˛õ¡_d©a
;

512 
lf_°©e
 * 
°©e
 = 
˛õ¡_d©a
 -> state;

513 
size_t
 
fûe_pos
 = 
˛õ¡_d©a
 -> file_pos;

514 
FILE
 *
f
 = 
°©e
 -> 
lf_fûe
;

515 
size_t
 
löe_°¨t
 = 
	`LINE_START
(
fûe_pos
);

516 
size_t
 
löe_no
 = 
	`DIV_LINE_SZ
(
	`MOD_CACHE_SZ
(
fûe_pos
));

517 
ˇche_löe
 * 
√w_ˇche
 = 
˛õ¡_d©a
 ->Çew_cache;

519 i‡(
löe_°¨t
 !
°©e
 -> 
lf_cuºít


520 && 
	`f£ek
(
f
, 
löe_°¨t
, 
SEEK_SET
) != 0) {

521 
	`ABORT
("fseek failed");

523 i‡(
	`‰ód
(
√w_ˇche
 -> 
d©a
, (), 
LINE_SZ
, 
f
)

524 <
fûe_pos
 - 
löe_°¨t
) {

525 
	`ABORT
("fread failed");

527 
√w_ˇche
 -> 
èg
 = 
	`DIV_LINE_SZ
(
fûe_pos
);

529 
	`ATOMIC_WRITE
(
°©e
 -> 
lf_ˇche
[
löe_no
], 
√w_ˇche
);

530 
°©e
 -> 
lf_cuºít
 = 
löe_°¨t
 + 
LINE_SZ
;

531 (
√w_ˇche
->
d©a
[
	`MOD_LINE_SZ
(
fûe_pos
)]);

532 
	}
}

534 
	$CORD_lf_func
(
size_t
 
i
, * 
˛õ¡_d©a
)

536 
lf_°©e
 * 
°©e
 = (lf_°©ê*)
˛õ¡_d©a
;

537 
ˇche_löe
 * vﬁ©ûê* 
˛_addr
 =

538 &(
°©e
 -> 
lf_ˇche
[
	`DIV_LINE_SZ
(
	`MOD_CACHE_SZ
(
i
))]);

539 
ˇche_löe
 * 
˛
 = (ˇche_löê*)
	`ATOMIC_READ
(
˛_addr
);

541 i‡(
˛
 =0 || c»-> 
èg
 !
	`DIV_LINE_SZ
(
i
)) {

543 
ªfûl_d©a
 
rd
;

545 
rd
.
°©e
 = state;

546 
rd
.
fûe_pos
 = 
i
;

547 
rd
.
√w_ˇche
 = 
	`GC_NEW_ATOMIC
(
ˇche_löe
);

548 i‡(
rd
.
√w_ˇche
 =0Ë
OUT_OF_MEMORY
;

549 (()(
GC_w‹d
)

550 
	`GC_ˇŒ_wôh_Æloc_lock
((
GC_‚_ty≥
Ë
ªfûl_ˇche
, &
rd
));

552 (
˛
 -> 
d©a
[
	`MOD_LINE_SZ
(
i
)]);

553 
	}
}

556 
	$CORD_lf_˛o£_¥oc
(* 
obj
, * 
˛õ¡_d©a
)

558 i‡(
	`f˛o£
(((
lf_°©e
 *)
obj
Ë-> 
lf_fûe
) != 0) {

559 
	`ABORT
("CORD_lf_close_proc: fclose failed");

561 
	}
}

563 
CORD
 
	$CORD_‰om_fûe_œzy_ö√r
(
FILE
 * 
f
, 
size_t
 
Àn
)

565 
lf_°©e
 * 
°©e
 = 
	`GC_NEW
(lf_state);

566 
i
;

568 i‡(
°©e
 =0Ë
OUT_OF_MEMORY
;

569 i‡(
Àn
 != 0) {

575 
buf
[1];

577 (Ë
	`‰ód
(
buf
, 1, 1, 
f
);

578 
	`ªwöd
(
f
);

580 
°©e
 -> 
lf_fûe
 = 
f
;

581 
i
 = 0; i < 
CACHE_SZ
/
LINE_SZ
; i++) {

582 
°©e
 -> 
lf_ˇche
[
i
] = 0;

584 
°©e
 -> 
lf_cuºít
 = 0;

585 
	`GC_REGISTER_FINALIZER
(
°©e
, 
CORD_lf_˛o£_¥oc
, 0, 0, 0);

586 (
	`CORD_‰om_‚
(
CORD_lf_func
, 
°©e
, 
Àn
));

587 
	}
}

589 
CORD
 
	$CORD_‰om_fûe_œzy
(
FILE
 * 
f
)

591 
Àn
;

593 i‡(
	`f£ek
(
f
, 0l, 
SEEK_END
) != 0) {

594 
	`ABORT
("Bad fdárgument - fseek failed");

596 i‡((
Àn
 = 
	`·ñl
(
f
)) < 0) {

597 
	`ABORT
("Bad fdárgument - ftell failed");

599 
	`ªwöd
(
f
);

600 (
	`CORD_‰om_fûe_œzy_ö√r
(
f
, (
size_t
)
Àn
));

601 
	}
}

603 
	#LAZY_THRESHOLD
 (128*1024 + 1)

	)

605 
CORD
 
	$CORD_‰om_fûe
(
FILE
 * 
f
)

607 
Àn
;

609 i‡(
	`f£ek
(
f
, 0l, 
SEEK_END
) != 0) {

610 
	`ABORT
("Bad fdárgument - fseek failed");

612 i‡((
Àn
 = 
	`·ñl
(
f
)) < 0) {

613 
	`ABORT
("Bad fdárgument - ftell failed");

615 
	`ªwöd
(
f
);

616 i‡(
Àn
 < 
LAZY_THRESHOLD
) {

617 (
	`CORD_‰om_fûe_ógî
(
f
));

619 (
	`CORD_‰om_fûe_œzy_ö√r
(
f
, (
size_t
)
Àn
));

621 
	}
}

	@cord/de.c

32 
	~<°dio.h
>

33 
	~"gc.h
"

34 
	~"c‹d.h
"

36 #ifde‡
THINK_C


37 
	#MACINTOSH


	)

38 
	~<˘y≥.h
>

41 #i‡
deföed
(
__BORLANDC__
Ë&& !deföed(
WIN32
)

44 
	#WIN32


	)

47 #i‡
deföed
(
WIN32
)

48 
	~<wödows.h
>

49 
	~"de_wö.h
"

50 #ñi‡
deföed
(
MACINTOSH
)

51 
	~<c⁄sﬁe.h
>

53 
	#öôs¸
()

	)

54 
	#ídwö
()

	)

55 
	#n⁄l
()

	)

56 
	#n€cho
(Ë
	`c£tmode
(
C_NOECHO
, 
°dout
)

	)

57 
	#cbªak
(Ë
	`c£tmode
(
C_CBREAK
, 
°dout
)

	)

58 
	#ª‰esh
()

	)

59 
	#addch
(
c
Ë
	`putch¨
(c)

	)

60 
	#°™dout
(Ë
	`cövî£
(1, 
°dout
)

	)

61 
	#°™díd
(Ë
	`cövî£
(0, 
°dout
)

	)

62 
	#move
(
löe
,
cﬁ
Ë
	`cgŸoxy
(cﬁ + 1,Üöê+ 1, 
°dout
)

	)

63 
	#˛π€ﬁ
(Ë
	`c˛eﬁ
(
°dout
)

	)

64 
	#de_îr‹
(
s
Ë{ 
	`Ârötf
(
°dîr
, s); 
	`gëch¨
(); }

	)

65 
	#LINES
 25

	)

66 
	#COLS
 80

	)

68 
	~<cur£s.h
>

69 
	#de_îr‹
(
s
Ë{ 
	`Ârötf
(
°dîr
, s); 
	`¶ìp
(2); }

	)

71 
	~"de_cmds.h
"

75 
	sLöeM≠Rï
 {

76 
	mlöe
;

77 
size_t
 
	mpos
;

78 
LöeM≠Rï
 * 
	m¥evious
;

79 } * 
	tlöe_m≠
;

82 
	sHi°‹yRï
 {

83 
CORD
 
	mfûe_c⁄ã¡s
;

84 
Hi°‹yRï
 * 
	m¥evious
;

85 
löe_m≠
 
	mm≠
;

86 } * 
	thi°‹y
;

88 
hi°‹y
 
	gnow
 = 0;

89 
CORD
 
	gcuºít
;

90 
size_t
 
	gcuºít_Àn
;

91 
löe_m≠
 
	gcuºít_m≠
 = 0;

92 
size_t
 
	gcuºít_m≠_size
 = 0;

95 
	#MAX_MAP_SIZE
 3000

	)

98 
	gdis_löe
 = 0;

99 
	gdis_cﬁ
 = 0;

101 
	#ALL
 -1

	)

102 
	#NONE
 - 2

	)

103 
	g√ed_ªdi•œy
 = 0;

107 
	glöe
 = 0;

108 
	gcﬁ
 = 0;

109 
size_t
 
	gfûe_pos
 = 0;

112 
	$övÆid©e_m≠
(
i
)

114 
cuºít_m≠
 -> 
löe
 > 
i
) {

115 
cuºít_m≠
 = cuºít_m≠ -> 
¥evious
;

116 
cuºít_m≠_size
--;

118 
	}
}

122 
	$¥u√_m≠
()

124 
löe_m≠
 
m≠
 = 
cuºít_m≠
;

125 
°¨t_löe
 = 
m≠
 -> 
löe
;

127 
cuºít_m≠_size
 = 0;

128 ; 
m≠
 !0; m≠ = m≠ -> 
¥evious
) {

129 
cuºít_m≠_size
++;

130 i‡(
m≠
 -> 
löe
 < 
°¨t_löe
 - 
LINES
 && m≠ -> 
¥evious
 != 0) {

131 
m≠
 -> 
¥evious
 = map ->Örevious ->Örevious;

134 
	}
}

136 
	$add_m≠
(
löe
, 
size_t
 
pos
)

138 
löe_m≠
 
√w_m≠
 = 
	`GC_NEW
(
LöeM≠Rï
);

140 i‡(
cuºít_m≠_size
 >
MAX_MAP_SIZE
Ë
	`¥u√_m≠
();

141 
√w_m≠
 -> 
löe
 =Üine;

142 
√w_m≠
 -> 
pos
 =Öos;

143 
√w_m≠
 -> 
¥evious
 = 
cuºít_m≠
;

144 
cuºít_m≠
 = 
√w_m≠
;

145 
cuºít_m≠_size
++;

146 
	}
}

155 
size_t
 
	$löe_pos
(
i
, *
c
)

157 
j
;

158 
size_t
 
cur
;

159 
size_t
 
√xt
;

160 
löe_m≠
 
m≠
 = 
cuºít_m≠
;

162 
m≠
 -> 
löe
 > 
i
Ëm≠ = m≠ -> 
¥evious
;

163 i‡(
m≠
 -> 
löe
 < 
i
 - 2Ë 
	`övÆid©e_m≠
(i);

164 
j
 = 
m≠
 -> 
löe
, 
cur
 = m≠ -> 
pos
; j < 
i
;) {

165 
cur
 = 
	`CORD_chr
(
cuºít
, cur, '\n');

166 i‡(
cur
 =
cuºít_Àn
-1Ë(
CORD_NOT_FOUND
);

167 
cur
++;

168 i‡(++
j
 > 
cuºít_m≠
 -> 
löe
Ë
	`add_m≠
(j, 
cur
);

170 i‡(
c
 != 0) {

171 
√xt
 = 
	`CORD_chr
(
cuºít
, 
cur
, '\n');

172 i‡(
√xt
 =
CORD_NOT_FOUND
Ë√xà
cuºít_Àn
 - 1;

173 i‡(
√xt
 < 
cur
 + *
c
) {

174 *
c
 = 
√xt
 - 
cur
;

176 
cur
 +*
c
;

178 (
cur
);

179 
	}
}

181 
	$add_hi°
(
CORD
 
s
)

183 
hi°‹y
 
√w_fûe
 = 
	`GC_NEW
(
Hi°‹yRï
);

185 
√w_fûe
 -> 
fûe_c⁄ã¡s
 = 
cuºít
 = 
s
;

186 
cuºít_Àn
 = 
	`CORD_Àn
(
s
);

187 
√w_fûe
 -> 
¥evious
 = 
now
;

188 i‡(
now
 !0Ënow -> 
m≠
 = 
cuºít_m≠
;

189 
now
 = 
√w_fûe
;

190 
	}
}

192 
	$dñ_hi°
()

194 
now
 =Çow -> 
¥evious
;

195 
cuºít
 = 
now
 -> 
fûe_c⁄ã¡s
;

196 
cuºít_m≠
 = 
now
 -> 
m≠
;

197 
cuºít_Àn
 = 
	`CORD_Àn
(
cuºít
);

198 
	}
}

201 
CORD
 * 
	gs¸ìn
 = 0;

202 
	gs¸ìn_size
 = 0;

204 #i‚de‡
WIN32


208 
	$ª∂a˚_löe
(
i
, 
CORD
 
s
)

210 
c
;

211 
CORD_pos
 
p
;

212 
size_t
 
Àn
 = 
	`CORD_Àn
(
s
);

214 i‡(
s¸ìn
 =0 || 
LINES
 > 
s¸ìn_size
) {

215 
s¸ìn_size
 = 
LINES
;

216 
s¸ìn
 = (
CORD
 *)
	`GC_MALLOC
(
s¸ìn_size
 * (CORD));

218 #i‡!
	`deföed
(
MACINTOSH
)

220 i‡(
i
 =
LINES
-1 && 
Àn
 =
COLS
) {

221 
s
 = 
	`CORD_sub°r
(s, 0, 
	`CORD_Àn
(s) - 1);

224 i‡(
	`CORD_cmp
(
s¸ìn
[
i
], 
s
) != 0) {

225 
	`move
(
i
, 0); 
	`˛π€ﬁ
(); move(i,0);

227 
	`CORD_FOR
 (
p
, 
s
) {

228 
c
 = 
	`CORD_pos_„tch
(
p
) & 0x7f;

229 i‡(
	`is˙ål
(
c
)) {

230 
	`°™dout
(); 
	`addch
(
c
 + 0x40); 
	`°™díd
();

232 
	`addch
(
c
);

235 
s¸ìn
[
i
] = 
s
;

237 
	}
}

239 
	#ª∂a˚_löe
(
i
,
s
Ë
	`övÆid©e_löe
(i)

	)

244 
CORD
 
	$ªåõve_löe
(
CORD
 
s
, 
size_t
 
pos
, 
cﬁumn
)

246 
CORD
 
ˇndid©e
 = 
	`CORD_sub°r
(
s
, 
pos
, 
cﬁumn
 + 
COLS
);

248 
eﬁ
 = 
	`CORD_chr
(
ˇndid©e
, 0, '\n');

249 
Àn
;

251 i‡(
eﬁ
 =
CORD_NOT_FOUND
Ëeﬁ = 
	`CORD_Àn
(
ˇndid©e
);

252 
Àn
 = ()
eﬁ
 - ()
cﬁumn
;

253 i‡(
Àn
 < 0)Üen = 0;

254 (
	`CORD_sub°r
(
s
, 
pos
 + 
cﬁumn
, 
Àn
));

255 
	}
}

257 #ifde‡
WIN32


258 
	#ª‰esh
();

	)

260 
CORD
 
	$ªåõve_s¸ìn_löe
(
i
)

262 
size_t
 
pos
;

264 
	`övÆid©e_m≠
(
dis_löe
 + 
LINES
);

265 
pos
 = 
	`löe_pos
(
dis_löe
 + 
i
, 0);

266 i‡(
pos
 =
CORD_NOT_FOUND
Ë(
CORD_EMPTY
);

267 (
	`ªåõve_löe
(
cuºít
, 
pos
, 
dis_cﬁ
));

268 
	}
}

272 
	$ªdi•œy
()

274 
i
;

276 
	`övÆid©e_m≠
(
dis_löe
 + 
LINES
);

277 
i
 = 0; i < 
LINES
; i++) {

278 i‡(
√ed_ªdi•œy
 =
ALL
 ||Çìd_ªdi•œy =
i
) {

279 
size_t
 
pos
 = 
	`löe_pos
(
dis_löe
 + 
i
, 0);

281 i‡(
pos
 =
CORD_NOT_FOUND
) ;

282 
	`ª∂a˚_löe
(
i
, 
	`ªåõve_löe
(
cuºít
, 
pos
, 
dis_cﬁ
));

283 i‡(
√ed_ªdi•œy
 =
i
Ë
d⁄e
;

286 ; 
i
 < 
LINES
; i++Ë
	`ª∂a˚_löe
(i, 
CORD_EMPTY
);

287 
d⁄e
:

288 
	`ª‰esh
();

289 
√ed_ªdi•œy
 = 
NONE
;

290 
	}
}

292 
	gdis_gønuœrôy
;

296 
	$n‹mÆize_di•œy
()

298 
ﬁd_löe
 = 
dis_löe
;

299 
ﬁd_cﬁ
 = 
dis_cﬁ
;

301 
dis_gønuœrôy
 = 1;

302 i‡(
LINES
 > 15 && 
COLS
 > 15Ë
dis_gønuœrôy
 = 2;

303 
dis_löe
 > 
löe
Ëdis_löê-
dis_gønuœrôy
;

304 
dis_cﬁ
 > 
cﬁ
Ëdis_cﬁ -
dis_gønuœrôy
;

305 
löe
 >
dis_löe
 + 
LINES
Ëdis_löê+
dis_gønuœrôy
;

306 
cﬁ
 >
dis_cﬁ
 + 
COLS
Ëdis_cﬁ +
dis_gønuœrôy
;

307 i‡(
ﬁd_löe
 !
dis_löe
 || 
ﬁd_cﬁ
 !
dis_cﬁ
) {

308 
√ed_ªdi•œy
 = 
ALL
;

310 
	}
}

312 #i‡
deföed
(
WIN32
)

313 #ñi‡
deföed
(
MACINTOSH
)

314 
	#move_curs‹
(
x
,
y
Ë
	`cgŸoxy
(x + 1, y + 1, 
°dout
)

	)

316 
	#move_curs‹
(
x
,
y
Ë
	`move
(y,x)

	)

321 
	$fix_curs‹
()

323 
	`n‹mÆize_di•œy
();

324 i‡(
√ed_ªdi•œy
 !
NONE
Ë
	`ªdi•œy
();

325 
	`move_curs‹
(
cﬁ
 - 
dis_cﬁ
, 
löe
 - 
dis_löe
);

326 
	`ª‰esh
();

327 #i‚de‡
WIN32


328 
	`fÊush
(
°dout
);

330 
	}
}

334 
	$fix_pos
()

336 
my_cﬁ
 = 
cﬁ
;

338 i‡((
size_t
)
löe
 > 
cuºít_Àn
)Üine = current_len;

339 
fûe_pos
 = 
	`löe_pos
(
löe
, &
my_cﬁ
);

340 i‡(
fûe_pos
 =
CORD_NOT_FOUND
) {

341 
löe
 = 
cuºít_m≠
 ->Üöe, 
fûe_pos
 = cuºít_m≠ -> 
pos
;

342 
fûe_pos
 < 
cuºít_Àn
;

343 
löe
++, 
fûe_pos
 = 
	`CORD_chr
(
cuºít
, file_pos, '\n') + 1);

344 
löe
--;

345 
fûe_pos
 = 
	`löe_pos
(
löe
, &
cﬁ
);

347 
cﬁ
 = 
my_cﬁ
;

349 
	}
}

351 #i‡
deföed
(
WIN32
)

352 
	#bìp
(Ë
	`Bìp
(1000 , 300 )

	)

353 #ñi‡
deföed
(
MACINTOSH
)

354 
	#bìp
(Ë
	`SysBìp
(1)

	)

360 #ifde‡
__STDC__


361 
	$bìp
()

363 
	$bìp
()

366 
	`putc
('\007', 
°dîr
);

368 
	}
}

371 
	#NO_PREFIX
 -1

	)

372 
	#BARE_PREFIX
 -2

	)

373 
	gª≥©_cou¡
 = 
NO_PREFIX
;

375 
	gloˇã_mode
 = 0;

376 
CORD
 
	gloˇã_°rög
 = 
CORD_EMPTY
;

378 * 
	g¨g_fûe_«me
;

380 #ifde‡
WIN32


383 
	$£t_posôi⁄
(
c
, 
l
)

385 
löe
 = 
l
 + 
dis_löe
;

386 
cﬁ
 = 
c
 + 
dis_cﬁ
;

387 
	`fix_pos
();

388 
	`move_curs‹
(
cﬁ
 - 
dis_cﬁ
, 
löe
 - 
dis_löe
);

389 
	}
}

397 
	$do_comm™d
(
c
)

399 
i
;

400 
√ed_fix_pos
;

401 
FILE
 * 
out
;

403 i‡–
c
 == '\r') c = '\n';

404 i‡(
loˇã_mode
) {

405 
size_t
 
√w_pos
;

407 i‡(
c
 =
LOCATE
) {

408 
loˇã_mode
 = 0;

409 
loˇã_°rög
 = 
CORD_EMPTY
;

412 
loˇã_°rög
 = 
	`CORD_ˇt_ch¨
÷oˇã_°rög, ()
c
);

413 
√w_pos
 = 
	`CORD_°r
(
cuºít
, 
fûe_pos
 - 
	`CORD_Àn
(
loˇã_°rög
) + 1,

414 
loˇã_°rög
);

415 i‡(
√w_pos
 !
CORD_NOT_FOUND
) {

416 
√ed_ªdi•œy
 = 
ALL
;

417 
√w_pos
 +
	`CORD_Àn
(
loˇã_°rög
);

419 
fûe_pos
 = 
	`löe_pos
(
löe
 + 1, 0);

420 i‡(
fûe_pos
 > 
√w_pos
) ;

421 
löe
++;

423 
cﬁ
 = 
√w_pos
 - 
	`löe_pos
(
löe
, 0);

424 
fûe_pos
 = 
√w_pos
;

425 
	`fix_curs‹
();

427 
loˇã_°rög
 = 
	`CORD_sub°r
(locate_string, 0,

428 
	`CORD_Àn
(
loˇã_°rög
) - 1);

429 
	`bìp
();

433 i‡(
c
 =
REPEAT
) {

434 
ª≥©_cou¡
 = 
BARE_PREFIX
; ;

435 } i‡(
c
 < 0x100 && 
	`isdigô
(c)){

436 i‡(
ª≥©_cou¡
 =
BARE_PREFIX
) {

437 
ª≥©_cou¡
 = 
c
 - '0'; ;

438 } i‡(
ª≥©_cou¡
 !
NO_PREFIX
) {

439 
ª≥©_cou¡
 = 10 *Ñïót_cou¡ + 
c
 - '0'; ;

442 i‡(
ª≥©_cou¡
 =
NO_PREFIX
)Ñepeat_count = 1;

443 i‡(
ª≥©_cou¡
 =
BARE_PREFIX
 && (
c
 =
UP
 || c =
DOWN
)) {

444 
ª≥©_cou¡
 = 
LINES
 - 
dis_gønuœrôy
;

446 i‡(
ª≥©_cou¡
 =
BARE_PREFIX
)Ñepeat_count = 8;

447 
√ed_fix_pos
 = 0;

448 
i
 = 0; i < 
ª≥©_cou¡
; i++) {

449 
c
) {

450 
LOCATE
:

451 
loˇã_mode
 = 1;

453 
TOP
:

454 
löe
 = 
cﬁ
 = 
fûe_pos
 = 0;

456 
UP
:

457 i‡(
löe
 != 0) {

458 
löe
--;

459 
√ed_fix_pos
 = 1;

462 
DOWN
:

463 
löe
++;

464 
√ed_fix_pos
 = 1;

466 
LEFT
:

467 i‡(
cﬁ
 != 0) {

468 
cﬁ
--; 
fûe_pos
--;

471 
RIGHT
:

472 i‡(
	`CORD_„tch
(
cuºít
, 
fûe_pos
) == '\n') ;

473 
cﬁ
++; 
fûe_pos
++;

475 
UNDO
:

476 
	`dñ_hi°
();

477 
√ed_ªdi•œy
 = 
ALL
; 
√ed_fix_pos
 = 1;

479 
BS
:

480 i‡(
cﬁ
 == 0) {

481 
	`bìp
();

484 
cﬁ
--; 
fûe_pos
--;

486 
DEL
:

487 i‡(
fûe_pos
 =
cuºít_Àn
-1) ;

489 i‡(
	`CORD_„tch
(
cuºít
, 
fûe_pos
) == '\n') {

490 
√ed_ªdi•œy
 = 
ALL
; 
√ed_fix_pos
 = 1;

492 
√ed_ªdi•œy
 = 
löe
 - 
dis_löe
;

494 
	`add_hi°
(
	`CORD_ˇt
(

495 
	`CORD_sub°r
(
cuºít
, 0, 
fûe_pos
),

496 
	`CORD_sub°r
(
cuºít
, 
fûe_pos
+1, 
cuºít_Àn
)));

497 
	`övÆid©e_m≠
(
löe
);

499 
WRITE
:

501 
CORD
 
«me
 = 
	`CORD_ˇt
(
	`CORD_‰om_ch¨_°¨
(
¨g_fûe_«me
),

504 i‡((
out
 = 
	`f›í
(
	`CORD_to_c⁄°_ch¨_°¨
(
«me
), "wb")Ë=
NULL


505 || 
	`CORD_put
(
cuºít
, 
out
Ë=
EOF
) {

506 
	`de_îr‹
("Write failed\n");

507 
√ed_ªdi•œy
 = 
ALL
;

509 
	`f˛o£
(
out
);

515 
CORD
 
À·_∑π
 = 
	`CORD_sub°r
(
cuºít
, 0, 
fûe_pos
);

516 
CORD
 
right_∑π
 = 
	`CORD_sub°r
(
cuºít
, 
fûe_pos
, 
cuºít_Àn
);

518 
	`add_hi°
(
	`CORD_ˇt
(
	`CORD_ˇt_ch¨
(
À·_∑π
, ()
c
),

519 
right_∑π
));

520 
	`övÆid©e_m≠
(
löe
);

521 i‡(
c
 == '\n') {

522 
cﬁ
 = 0; 
löe
++; 
fûe_pos
++;

523 
√ed_ªdi•œy
 = 
ALL
;

525 
cﬁ
++; 
fûe_pos
++;

526 
√ed_ªdi•œy
 = 
löe
 - 
dis_löe
;

532 i‡(
√ed_fix_pos
Ë
	`fix_pos
();

533 
	`fix_curs‹
();

534 
ª≥©_cou¡
 = 
NO_PREFIX
;

535 
	}
}

539 
	$gíîic_öô
()

541 
FILE
 * 
f
;

542 
CORD
 
öôül
;

544 i‡((
f
 = 
	`f›í
(
¨g_fûe_«me
, "rb")Ë=
NULL
) {

545 
öôül
 = "\n";

547 
öôül
 = 
	`CORD_‰om_fûe
(
f
);

548 i‡(
öôül
 =
CORD_EMPTY


549 || 
	`CORD_„tch
(
öôül
, 
	`CORD_Àn
(initial)-1) != '\n') {

550 
öôül
 = 
	`CORD_ˇt
(initial, "\n");

553 
	`add_m≠
(0,0);

554 
	`add_hi°
(
öôül
);

555 
now
 -> 
m≠
 = 
cuºít_m≠
;

556 
now
 -> 
¥evious
 =Çow;

557 
√ed_ªdi•œy
 = 
ALL
;

558 
	`fix_curs‹
();

559 
	}
}

561 #i‚de‡
WIN32


563 
	$maö
(
¨gc
, 
¨gv
)

564 
¨gc
;

565 ** 
¨gv
;

567 
c
;

569 #i‡
	`deföed
(
MACINTOSH
)

570 
c⁄sﬁe_›ti⁄s
.
tôÀ
 = "\pDumb Editor";

571 
	`cshow
(
°dout
);

572 
¨gc
 = 
	`ccomm™d
(&
¨gv
);

574 
	`GC_INIT
();

576 i‡(
¨gc
 !2Ë
ußge
;

577 
¨g_fûe_«me
 = 
¨gv
[1];

578 
	`£tvbuf
(
°dout
, 
	`GC_MALLOC_ATOMIC
(8192), 
_IOFBF
, 8192);

579 
	`öôs¸
();

580 
	`n€cho
(); 
	`n⁄l
(); 
	`cbªak
();

581 
	`gíîic_öô
();

582 (
c
 = 
	`gëch¨
()Ë!
QUIT
) {

583 i‡(
c
 =
EOF
) ;

584 
	`do_comm™d
(
c
);

586 
d⁄e
:

587 
	`move
(
LINES
-1, 0);

588 
	`˛π€ﬁ
();

589 
	`ª‰esh
();

590 
	`∆
();

591 
	`echo
();

592 
	`ídwö
();

593 
	`exô
(0);

594 
ußge
:

595 
	`Ârötf
(
°dîr
, "Ußge: %†fûe\n", 
¨gv
[0]);

596 
	`Ârötf
(
°dîr
, "Cursor keys: ^B(left) ^F(right) ^P(up) ^N(down)\n");

597 
	`Ârötf
(
°dîr
, "Undo: ^U WriteÅo <file>.new: ^W");

598 
	`Ârötf
(
°dîr
, "Quit:^D Repeat count: ^R[n]\n");

599 
	`Ârötf
(
°dîr
, "Top: ^T Locate (search, find): ^LÅext ^L\n");

600 
	`exô
(1);

601 
	}
}

	@cord/de_cmds.h

15 #i‚de‡
DE_CMDS_H


17 
	#DE_CMDS_H


	)

19 
	#UP
 16

	)

20 
	#DOWN
 14

	)

21 
	#LEFT
 2

	)

22 
	#RIGHT
 6

	)

23 
	#DEL
 127

	)

24 
	#BS
 8

	)

25 
	#UNDO
 21

	)

26 
	#WRITE
 23

	)

27 
	#QUIT
 4

	)

28 
	#REPEAT
 18

	)

29 
	#LOCATE
 12

	)

30 
	#TOP
 20

	)

	@cord/de_win.c

25 
	~"wödows.h
"

26 
	~"gc.h
"

27 
	~"c‹d.h
"

28 
	~"de_cmds.h
"

29 
	~"de_wö.h
"

31 
	gLINES
 = 0;

32 
	gCOLS
 = 0;

34 
	gszAµName
[] = "DE";

35 
	gFuŒAµName
[] = "Demonstration Editor";

37 
HWND
 
	ghwnd
;

39 
	$de_îr‹
(*
s
)

41 
	`MesßgeBox
–
hwnd
, (
LPSTR
Ë
s
,

42 (
LPSTR
Ë
FuŒAµName
,

43 
MB_ICONINFORMATION
 | 
MB_OK
 );

44 
	`InvÆid©eRe˘
(
hwnd
, 
NULL
, 
TRUE
);

45 
	}
}

47 
APIENTRY
 
	$WöMaö
 (
HINSTANCE
 
hIn°™˚
, HINSTANCE 
hPªvIn°™˚
,

48 
LPSTR
 
comm™d_löe
, 
nCmdShow
)

50 
MSG
 
msg
;

51 
WNDCLASS
 
wnd˛ass
;

52 
HANDLE
 
hAc˚l
;

54 #ifde‡
THREAD_LOCAL_ALLOC


55 
	`GC_INIT
();

59 i‡(!
hPªvIn°™˚
)

61 
wnd˛ass
.
°yÀ
 = 
CS_HREDRAW
 | 
CS_VREDRAW
;

62 
wnd˛ass
.
Õ‚WndProc
 = 
WndProc
;

63 
wnd˛ass
.
cbClsExåa
 = 0;

64 
wnd˛ass
.
cbWndExåa
 = 
DLGWINDOWEXTRA
;

65 
wnd˛ass
.
hIn°™˚
 = hInstance;

66 
wnd˛ass
.
hIc⁄
 = 
	`LﬂdIc⁄
 (
hIn°™˚
, 
szAµName
);

67 
wnd˛ass
.
hCurs‹
 = 
	`LﬂdCurs‹
 (
NULL
, 
IDC_ARROW
);

68 
wnd˛ass
.
hbrBackground
 = 
	`GëStockObje˘
(
WHITE_BRUSH
);

69 
wnd˛ass
.
ÕszMíuName
 = "DE";

70 
wnd˛ass
.
ÕszCœssName
 = 
szAµName
;

72 i‡(
	`Regi°îCœss
 (&
wnd˛ass
) == 0) {

73 
buf
[50];

75 
	`•rötf
(
buf
, "Regi°îCœss:Éº‹ code: 0x%X", 
	`GëLa°Eº‹
());

76 
	`de_îr‹
(
buf
);

88 i‡(
comm™d_löe
 == 0 || *command_line == 0) {

89 
	`de_îr‹
("FileÇameárgumentÑequired");

92 *
p
 = 
comm™d_löe
;

94 *
p
 !0 && !
	`is•a˚
(*p))Ö++;

95 
¨g_fûe_«me
 = 
	`CORD_to_ch¨_°¨
(

96 
	`CORD_sub°r
(
comm™d_löe
, 0, 
p
 - command_line));

99 
hwnd
 = 
	`Cª©eWödow
 (
szAµName
,

100 
FuŒAµName
,

101 
WS_OVERLAPPEDWINDOW
 | 
WS_CAPTION
,

102 
CW_USEDEFAULT
, 0,

103 
CW_USEDEFAULT
, 0,

104 
NULL
,

105 
NULL
,

106 
hIn°™˚
, 
NULL
);

107 i‡(
hwnd
 =
NULL
) {

108 
buf
[50];

110 
	`•rötf
(
buf
, "Cª©eWödow:Éº‹ code: 0x%X", 
	`GëLa°Eº‹
());

111 
	`de_îr‹
(
buf
);

115 
	`ShowWödow
 (
hwnd
, 
nCmdShow
);

117 
hAc˚l
 = 
	`LﬂdAc˚Àøt‹s
–
hIn°™˚
, 
szAµName
 );

119 
	`GëMesßge
 (&
msg
, 
NULL
, 0, 0))

121 if–!
	`Tøn¶©eAc˚Àøt‹
–
hwnd
, 
hAc˚l
, &
msg
 ) )

123 
	`Tøn¶©eMesßge
 (&
msg
);

124 
	`Di•©chMesßge
 (&
msg
);

127  
msg
.
wP¨am
;

128 
	}
}

131 * 
	$∂aö_ch¨s
(* 
ãxt
, 
size_t
 
Àn
)

133 * 
ªsu…
 = 
	`GC_MALLOC_ATOMIC
(
Àn
 + 1);

134 
size_t
 
i
;

136 
i
 = 0; i < 
Àn
; i++) {

137 i‡(
	`is˙ål
(
ãxt
[
i
])) {

138 
ªsu…
[
i
] = ' ';

140 
ªsu…
[
i
] = 
ãxt
[i];

143 
ªsu…
[
Àn
] = '\0';

144 (
ªsu…
);

145 
	}
}

149 * 
	$c⁄åﬁ_ch¨s
(* 
ãxt
, 
size_t
 
Àn
)

151 * 
ªsu…
 = 
	`GC_MALLOC_ATOMIC
(
Àn
 + 1);

152 
size_t
 
i
;

154 
i
 = 0; i < 
Àn
; i++) {

155 i‡(
	`is˙ål
(
ãxt
[
i
])) {

156 
ªsu…
[
i
] = 
ãxt
[i] + 0x40;

158 
ªsu…
[
i
] = ' ';

161 
ªsu…
[
Àn
] = '\0';

162 (
ªsu…
);

163 
	}
}

165 
	gch¨_width
;

166 
	gch¨_height
;

168 
	$gë_löe_ª˘
(
löe
, 
wö_width
, 
RECT
 * 
ª˘p
)

170 
ª˘p
 -> 
t›
 = 
löe
 * 
ch¨_height
;

171 
ª˘p
 -> 
bŸtom
 =Ñe˘p->
t›
 + 
ch¨_height
;

172 
ª˘p
 -> 
À·
 = 0;

173 
ª˘p
 -> 
right
 = 
wö_width
;

174 
	}
}

176 
	gˇªt_visibÀ
 = 0;

178 
	gs¸ìn_was_∑öãd
 = 0;

180 
upd©e_curs‹
();

182 
INT_PTR
 
CALLBACK
 
	$AboutBoxCÆlback
–
HWND
 
hDlg
, 
UINT
 
mesßge
,

183 
WPARAM
 
wP¨am
, 
LPARAM
 
lP¨am
 )

185  
mesßge
 )

187 
WM_INITDIALOG
:

188 
	`SëFocus
–
	`GëDlgIãm
–
hDlg
, 
IDOK
 ) );

191 
WM_COMMAND
:

192  
wP¨am
 )

194 
IDOK
:

195 
	`EndDülog
–
hDlg
, 
TRUE
 );

200 
WM_CLOSE
:

201 
	`EndDülog
–
hDlg
, 
TRUE
 );

202  
TRUE
;

205  
FALSE
;

206 
	}
}

208 
LRESULT
 
CALLBACK
 
	$WndProc
 (
HWND
 
hwnd
, 
UINT
 
mesßge
,

209 
WPARAM
 
wP¨am
, 
LPARAM
 
lP¨am
)

211 
HANDLE
 
hIn°™˚
;

212 
HDC
 
dc
;

213 
PAINTSTRUCT
 
ps
;

214 
RECT
 
˛õ¡_¨ó
;

215 
RECT
 
this_löe
;

216 
RECT
 
dummy
;

217 
TEXTMETRIC
 
tm
;

218 
i
;

219 
id
;

221 
mesßge
)

223 
WM_CREATE
:

224 
hIn°™˚
 = ( (
LPCREATESTRUCT
Ë
lP¨am
)->hInstance;

225 
dc
 = 
	`GëDC
(
hwnd
);

226 
	`Sñe˘Obje˘
(
dc
, 
	`GëStockObje˘
(
SYSTEM_FIXED_FONT
));

227 
	`GëTextMërics
(
dc
, &
tm
);

228 
	`Rñó£DC
(
hwnd
, 
dc
);

229 
ch¨_width
 = 
tm
.
tmAveCh¨Width
;

230 
ch¨_height
 = 
tm
.
tmHeight
 +Åm.
tmExã∫ÆLódög
;

231 
	`GëClõ¡Re˘
(
hwnd
, &
˛õ¡_¨ó
);

232 
COLS
 = (
˛õ¡_¨ó
.
right
 - clõ¡_¨ó.
À·
)/
ch¨_width
;

233 
LINES
 = (
˛õ¡_¨ó
.
bŸtom
 - clõ¡_¨ó.
t›
)/
ch¨_height
;

234 
	`gíîic_öô
();

237 
WM_CHAR
:

238 i‡(
wP¨am
 =
QUIT
) {

239 
	`SídMesßge
–
hwnd
, 
WM_CLOSE
, 0, 0L );

241 
	`do_comm™d
(()
wP¨am
);

245 
WM_SETFOCUS
:

246 
	`Cª©eC¨ë
(
hwnd
, 
NULL
, 
ch¨_width
, 
ch¨_height
);

247 
	`ShowC¨ë
(
hwnd
);

248 
ˇªt_visibÀ
 = 1;

249 
	`upd©e_curs‹
();

252 
WM_KILLFOCUS
:

253 
	`HideC¨ë
(
hwnd
);

254 
	`De°royC¨ë
();

255 
ˇªt_visibÀ
 = 0;

258 
WM_LBUTTONUP
:

260 
xpos
 = 
	`LOWORD
(
lP¨am
);

261 
ypos
 = 
	`HIWORD
(
lP¨am
);

263 
	`£t_posôi⁄
–
xpos
/
ch¨_width
, 
ypos
/
ch¨_height
 );

267 
WM_COMMAND
:

268 
id
 = 
	`LOWORD
(
wP¨am
);

269 i‡(
id
 & 
EDIT_CMD_FLAG
) {

270 i‡(
id
 & 
REPEAT_FLAG
Ë
	`do_comm™d
(
REPEAT
);

271 
	`do_comm™d
(
	`CHAR_CMD
(
id
));

274 
id
) {

275 
IDM_FILEEXIT
:

276 
	`SídMesßge
–
hwnd
, 
WM_CLOSE
, 0, 0L );

279 
IDM_HELPABOUT
:

280 if–
	`DülogBox
–
hIn°™˚
, "ABOUTBOX",

281 
hwnd
, 
AboutBoxCÆlback
 ) )

282 
	`InvÆid©eRe˘
–
hwnd
, 
NULL
, 
TRUE
 );

284 
IDM_HELPCONTENTS
:

285 
	`de_îr‹
(

294 
WM_CLOSE
:

295 
	`De°royWödow
–
hwnd
 );

298 
WM_DESTROY
:

299 
	`Po°QuôMesßge
 (0);

300 
	`GC_wö32_‰ì_hóp
();

303 
WM_PAINT
:

304 
dc
 = 
	`BegöPaöt
(
hwnd
, &
ps
);

305 
	`GëClõ¡Re˘
(
hwnd
, &
˛õ¡_¨ó
);

306 
COLS
 = (
˛õ¡_¨ó
.
right
 - clõ¡_¨ó.
À·
)/
ch¨_width
;

307 
LINES
 = (
˛õ¡_¨ó
.
bŸtom
 - clõ¡_¨ó.
t›
)/
ch¨_height
;

308 
	`Sñe˘Obje˘
(
dc
, 
	`GëStockObje˘
(
SYSTEM_FIXED_FONT
));

309 
i
 = 0; i < 
LINES
; i++) {

310 
	`gë_löe_ª˘
(
i
, 
˛õ¡_¨ó
.
right
, &
this_löe
);

311 i‡(
	`I¡î£˘Re˘
(&
dummy
, &
this_löe
, &
ps
.
rcPaöt
)) {

312 
CORD
 
øw_löe
 = 
	`ªåõve_s¸ìn_löe
(
i
);

313 
size_t
 
Àn
 = 
	`CORD_Àn
(
øw_löe
);

314 * 
ãxt
 = 
	`CORD_to_ch¨_°¨
(
øw_löe
);

316 * 
∂aö
 = 
	`∂aö_ch¨s
(
ãxt
, 
Àn
);

317 * 
bœnks
 = 
	`CORD_to_ch¨_°¨
(
	`CORD_ch¨s
(' ',

318 
COLS
 - 
Àn
));

319 * 
c⁄åﬁ
 = 
	`c⁄åﬁ_ch¨s
(
ãxt
, 
Àn
);

320 
	#RED
 
	`RGB
(255,0,0)

	)

322 
	`SëBkMode
(
dc
, 
OPAQUE
);

323 
	`SëTextCﬁ‹
(
dc
, 
	`GëSysCﬁ‹
(
COLOR_WINDOWTEXT
));

325 
	`TextOut
(
dc
, 
this_löe
.
À·
,Åhis_löe.
t›
,

326 
∂aö
, ()
Àn
);

327 
	`TextOut
(
dc
, 
this_löe
.
À·
 + ()
Àn
 * 
ch¨_width
,

328 
this_löe
.
t›
,

329 
bœnks
, ()(
COLS
 - 
Àn
));

330 
	`SëBkMode
(
dc
, 
TRANSPARENT
);

331 
	`SëTextCﬁ‹
(
dc
, 
RED
);

332 
	`TextOut
(
dc
, 
this_löe
.
À·
,Åhis_löe.
t›
,

333 
c⁄åﬁ
, ()
	`°æí
(control));

336 
	`EndPaöt
(
hwnd
, &
ps
);

337 
s¸ìn_was_∑öãd
 = 1;

340  
	`DefWödowProc
 (
hwnd
, 
mesßge
, 
wP¨am
, 
lP¨am
);

341 
	}
}

343 
	gœ°_cﬁ
;

344 
	gœ°_löe
;

346 
	$move_curs‹
(
c
, 
l
)

348 
œ°_cﬁ
 = 
c
;

349 
œ°_löe
 = 
l
;

351 i‡(
ˇªt_visibÀ
Ë
	`upd©e_curs‹
();

352 
	}
}

354 
	$upd©e_curs‹
()

356 
	`SëC¨ëPos
(
œ°_cﬁ
 * 
ch¨_width
, 
œ°_löe
 * 
ch¨_height
);

357 
	`ShowC¨ë
(
hwnd
);

358 
	}
}

360 
	$övÆid©e_löe
(
i
)

362 
RECT
 
löe
;

364 i‡(!
s¸ìn_was_∑öãd
) ;

367 
	`gë_löe_ª˘
(
i
, 
COLS
*
ch¨_width
, &
löe
);

368 
	`InvÆid©eRe˘
(
hwnd
, &
löe
, 
FALSE
);

369 
	}
}

	@cord/de_win.h

18 
	#OTHER_FLAG
 0x100

	)

19 
	#EDIT_CMD_FLAG
 0x200

	)

20 
	#REPEAT_FLAG
 0x400

	)

22 
	#CHAR_CMD
(
i
Ë((iË& 0xff)

	)

25 
	#IDM_FILESAVE
 (
EDIT_CMD_FLAG
 + 
WRITE
)

	)

26 
	#IDM_FILEEXIT
 (
OTHER_FLAG
 + 1)

	)

27 
	#IDM_HELPABOUT
 (
OTHER_FLAG
 + 2)

	)

28 
	#IDM_HELPCONTENTS
 (
OTHER_FLAG
 + 3)

	)

30 
	#IDM_EDITPDOWN
 (
REPEAT_FLAG
 + 
EDIT_CMD_FLAG
 + 
DOWN
)

	)

31 
	#IDM_EDITPUP
 (
REPEAT_FLAG
 + 
EDIT_CMD_FLAG
 + 
UP
)

	)

32 
	#IDM_EDITUNDO
 (
EDIT_CMD_FLAG
 + 
UNDO
)

	)

33 
	#IDM_EDITLOCATE
 (
EDIT_CMD_FLAG
 + 
LOCATE
)

	)

34 
	#IDM_EDITDOWN
 (
EDIT_CMD_FLAG
 + 
DOWN
)

	)

35 
	#IDM_EDITUP
 (
EDIT_CMD_FLAG
 + 
UP
)

	)

36 
	#IDM_EDITLEFT
 (
EDIT_CMD_FLAG
 + 
LEFT
)

	)

37 
	#IDM_EDITRIGHT
 (
EDIT_CMD_FLAG
 + 
RIGHT
)

	)

38 
	#IDM_EDITBS
 (
EDIT_CMD_FLAG
 + 
BS
)

	)

39 
	#IDM_EDITDEL
 (
EDIT_CMD_FLAG
 + 
DEL
)

	)

40 
	#IDM_EDITREPEAT
 (
EDIT_CMD_FLAG
 + 
REPEAT
)

	)

41 
	#IDM_EDITTOP
 (
EDIT_CMD_FLAG
 + 
TOP
)

	)

48 
LRESULT
 
CALLBACK
 
WndProc
 (
HWND
 
hwnd
, 
UINT
 
mesßge
,

49 
UINT
 
wP¨am
, 
LONG
 
lP¨am
);

51 
LRESULT
 
CALLBACK
 
AboutBox
–
HWND
 
hDlg
, 
UINT
 
mesßge
,

52 
UINT
 
wP¨am
, 
LONG
 
lP¨am
 );

56 
LINES
;

57 
COLS
;

60 * 
¨g_fûe_«me
;

63 
dis_löe
;

64 
dis_cﬁ
;

67 
löe
;

68 
cﬁ
;

74 
CORD
 
ªåõve_s¸ìn_löe
(
i
);

78 
£t_posôi⁄
(
x
, 
y
);

81 
do_comm™d
();

86 
gíîic_öô
();

94 
move_curs‹
(
cﬁumn
, 
löe
);

99 
övÆid©e_löe
(
löe
);

102 
de_îr‹
(*
s
);

	@darwin_stop_world.c

1 
	~"¥iv©e/±hªad_suµ‹t.h
"

5 #i‡
deföed
(
GC_DARWIN_THREADS
)

17 #ifde‡
POWERPC


18 #i‡
CPP_WORDSZ
 == 32

19 
	#PPC_RED_ZONE_SIZE
 224

	)

20 #ñi‡
CPP_WORDSZ
 == 64

21 
	#PPC_RED_ZONE_SIZE
 320

	)

25 
	sSèckFøme
 {

26 
	mßvedSP
;

27 
	mßvedCR
;

28 
	mßvedLR
;

29 
	mª£rved
[2];

30 
	mßvedRTOC
;

31 } 
	tSèckFøme
;

33 
	$FödT›OfSèck
(
°ack_°¨t
)

35 
SèckFøme
 *
‰ame
;

37 i‡(
°ack_°¨t
 == 0) {

38 #ifde‡
POWERPC


39 #i‡
CPP_WORDSZ
 == 32

40 
__asm__
 vﬁ©ûe("lwz %0,0‘1)" : "Ù" (
‰ame
));

42 
__asm__
 vﬁ©ûe("ld %0,0‘1)" : "Ù" (
‰ame
));

46 
‰ame
 = (
SèckFøme
 *)
°ack_°¨t
;

49 #ifde‡
DEBUG_THREADS


53 i‡(
‰ame
->
ßvedSP
 == 0)

57 
‰ame
 = (
SèckFøme
*)‰ame->
ßvedSP
;

62 i‡((
‰ame
->
ßvedLR
 & ~3) == 0)

64 i‡((~(
‰ame
->
ßvedLR
) & ~3) == 0)

68 #ifde‡
DEBUG_THREADS


72  ()
‰ame
;

73 
	}
}

75 #ifde‡
DARWIN_DONT_PARSE_STACK


76 
	$GC_push_Æl_°acks
()

78 
i
;

79 
kîn_ªtu∫_t
 
r
;

80 
GC_thªad
 
p
;

81 
±hªad_t
 
me
;

82 
±r_t
 
lo
, 
hi
;

83 
GC_THREAD_STATE_T
 
°©e
;

86 
mach_msg_ty≥_numbî_t
 
thªad_°©e_cou¡
 = 
GC_MACH_THREAD_STATE_COUNT
;

88 
me
 = 
	`±hªad_£lf
();

89 i‡(!
GC_thr_öôülized
)

90 
	`GC_thr_öô
();

92 
i
 = 0; i < 
THREAD_TABLE_SZ
; i++) {

93 
p
 = 
GC_thªads
[
i
];Ö !0;Ö =Ö->
√xt
) {

94 if(
p
->
Êags
 & 
FINISHED
) ;

95 if(
	`±hªad_equÆ
(
p
->
id
, 
me
)) {

96 
lo
 = 
	`GC_≠¥ox_•
();

99 
r
 = 
	`thªad_gë_°©e
(
p
->
°›_öfo
.
mach_thªad
, 
GC_MACH_THREAD_STATE
,

100 (
«tuøl_t
*)&
°©e
, &
thªad_°©e_cou¡
);

102 #ifde‡
DEBUG_THREADS


103 
	`GC_¥ötf
("thªad_gë_°©êªtu∫ vÆuê%d\n", 
r
);

106 if(
r
 !
KERN_SUCCESS
)

107 
	`ABORT
("thread_get_state failed");

109 #i‡
	`deföed
(
I386
)

110 
lo
 = (*)
°©e
 . 
	`THREAD_FLD
 (
e•
);

111 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
óx
));

112 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
ebx
));

113 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
ecx
));

114 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
edx
));

115 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
edi
));

116 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
esi
));

117 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
ebp
));

119 #ñi‡
	`deföed
(
X86_64
)

120 
lo
 = (*)
°©e
 . 
	`THREAD_FLD
 (
r•
);

121 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
øx
));

122 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
rbx
));

123 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
rcx
));

124 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
rdx
));

125 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
rdi
));

126 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
rsi
));

127 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
rbp
));

128 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r•
));

129 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r8
));

130 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r9
));

131 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r10
));

132 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r11
));

133 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r12
));

134 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r13
));

135 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r14
));

136 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r15
));

137 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
rù
));

138 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
rÊags
));

139 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
cs
));

140 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
fs
));

141 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
gs
));

143 #ñi‡
	`deföed
(
POWERPC
)

144 
lo
 = (*)(
°©e
 . 
	`THREAD_FLD
 (
r1
Ë- 
PPC_RED_ZONE_SIZE
);

146 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r0
));

147 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r2
));

148 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r3
));

149 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r4
));

150 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r5
));

151 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r6
));

152 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r7
));

153 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r8
));

154 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r9
));

155 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r10
));

156 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r11
));

157 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r12
));

158 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r13
));

159 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r14
));

160 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r15
));

161 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r16
));

162 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r17
));

163 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r18
));

164 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r19
));

165 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r20
));

166 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r21
));

167 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r22
));

168 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r23
));

169 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r24
));

170 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r25
));

171 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r26
));

172 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r27
));

173 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r28
));

174 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r29
));

175 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r30
));

176 
	`GC_push_⁄e
(
°©e
 . 
	`THREAD_FLD
 (
r31
));

178 #îr‹ 
FIXME
 
n⁄
-
x86
 || 
µc
 
¨chôe˘uªs


181 if(
p
->
Êags
 & 
MAIN_THREAD
)

182 
hi
 = 
GC_°ackbŸtom
;

184 
hi
 = 
p
->
°ack_íd
;

185 #i‡
DEBUG_THREADS


186 
	`GC_¥ötf
("Darwin: Stack forÅhread 0x%lx = [%lx,%lx)\n",

187 (Ë
p
 -> 
id
, (Ë
lo
,

188 (Ë
hi
);

190 
	`GC_push_Æl_°ack
(
lo
, 
hi
);

193 
	}
}

197 
	$GC_push_Æl_°acks
()

199 
i
;

200 
èsk_t
 
my_èsk
;

201 
kîn_ªtu∫_t
 
r
;

202 
mach_p‹t_t
 
me
;

203 
±r_t
 
lo
, 
hi
;

204 
thªad_a˘_¨øy_t
 
a˘_li°
 = 0;

205 
mach_msg_ty≥_numbî_t
 
li°cou¡
 = 0;

207 
me
 = 
	`mach_thªad_£lf
();

208 i‡(!
GC_thr_öôülized
)

209 
	`GC_thr_öô
();

211 
my_èsk
 = 
	`cuºít_èsk
();

212 
r
 = 
	`èsk_thªads
(
my_èsk
, &
a˘_li°
, &
li°cou¡
);

213 if(
r
 !
KERN_SUCCESS
)

214 
	`ABORT
("task_threads failed");

215 
i
 = 0; i < 
li°cou¡
; i++) {

216 
thªad_a˘_t
 
thªad
 = 
a˘_li°
[
i
];

217 i‡(
thªad
 =
me
) {

218 
lo
 = 
	`GC_≠¥ox_•
();

219 
hi
 = (
±r_t
)
	`FödT›OfSèck
(0);

221 #i‡
	`deföed
(
POWERPC
)

222 
GC_THREAD_STATE_T
 
öfo
;

223 
mach_msg_ty≥_numbî_t
 
outCou¡
 = 
THREAD_STATE_MAX
;

224 
r
 = 
	`thªad_gë_°©e
(
thªad
, 
GC_MACH_THREAD_STATE
, (
«tuøl_t
 *)&
öfo
,

225 &
outCou¡
);

226 if(
r
 !
KERN_SUCCESS
)

227 
	`ABORT
("task_get_state failed");

229 
lo
 = (*)(
öfo
 . 
	`THREAD_FLD
 (
r1
Ë- 
PPC_RED_ZONE_SIZE
);

230 
hi
 = (
±r_t
)
	`FödT›OfSèck
(
öfo
 . 
	`THREAD_FLD
 (
r1
));

232 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r0
));

233 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r2
));

234 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r3
));

235 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r4
));

236 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r5
));

237 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r6
));

238 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r7
));

239 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r8
));

240 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r9
));

241 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r10
));

242 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r11
));

243 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r12
));

244 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r13
));

245 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r14
));

246 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r15
));

247 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r16
));

248 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r17
));

249 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r18
));

250 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r19
));

251 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r20
));

252 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r21
));

253 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r22
));

254 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r23
));

255 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r24
));

256 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r25
));

257 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r26
));

258 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r27
));

259 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r28
));

260 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r29
));

261 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r30
));

262 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r31
));

264 #ñi‡
	`deföed
(
I386
)

266 
	`WARN
("This is completely untestedándÜikely willÇot work\n", 0);

267 
GC_THREAD_STATE_T
 
öfo
;

268 
mach_msg_ty≥_numbî_t
 
outCou¡
 = 
THREAD_STATE_MAX
;

269 
r
 = 
	`thªad_gë_°©e
(
thªad
, 
GC_MACH_THREAD_STATE
, (
«tuøl_t
 *)&
öfo
,

270 &
outCou¡
);

271 if(
r
 !
KERN_SUCCESS
)

272 
	`ABORT
("task_get_state failed");

274 
lo
 = (*)
öfo
 . 
	`THREAD_FLD
 (
e•
);

275 
hi
 = (
±r_t
)
	`FödT›OfSèck
(
öfo
 . 
	`THREAD_FLD
 (
e•
));

277 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
óx
));

278 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
ebx
));

279 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
ecx
));

280 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
edx
));

281 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
edi
));

282 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
esi
));

285 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
ss
));

286 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
eù
));

287 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
cs
));

288 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
ds
));

289 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
es
));

290 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
fs
));

291 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
gs
));

293 #ñi‡
	`deföed
(
X86_64
)

294 
GC_THREAD_STATE_T
 
öfo
;

295 
mach_msg_ty≥_numbî_t
 
outCou¡
 = 
THREAD_STATE_MAX
;

296 
r
 = 
	`thªad_gë_°©e
(
thªad
, 
GC_MACH_THREAD_STATE
, (
«tuøl_t
 *)&
öfo
,

297 &
outCou¡
);

298 if(
r
 !
KERN_SUCCESS
)

299 
	`ABORT
("task_get_state failed");

301 
lo
 = (*)
öfo
 . 
	`THREAD_FLD
 (
r•
);

302 
hi
 = (
±r_t
)
	`FödT›OfSèck
(
öfo
 . 
	`THREAD_FLD
 (
r•
));

304 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
øx
));

305 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
rbx
));

306 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
rcx
));

307 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
rdx
));

308 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
rdi
));

309 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
rsi
));

310 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
rbp
));

311 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r•
));

312 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r8
));

313 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r9
));

314 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r10
));

315 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r11
));

316 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r12
));

317 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r13
));

318 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r14
));

319 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
r15
));

320 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
rù
));

321 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
rÊags
));

322 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
cs
));

323 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
fs
));

324 
	`GC_push_⁄e
(
öfo
 . 
	`THREAD_FLD
 (
gs
));

327 #îr‹ 
FIXME
 
n⁄
-
x86
 || 
µc
 
¨chôe˘uªs


330 #i‡
DEBUG_THREADS


331 
	`GC_¥ötf
("Darwin: Stack forÅhread 0x%lx = [%p,%p)\n",

332 (Ë
thªad
, 
lo
, 
hi
);

334 
	`GC_push_Æl_°ack
(
lo
, 
hi
);

335 
	`mach_p‹t_dóŒoˇã
(
my_èsk
, 
thªad
);

337 
	`vm_dóŒoˇã
(
my_èsk
, (
vm_addªss_t
)
a˘_li°
,

338 (
thªad_t
Ë* 
li°cou¡
);

339 
	`mach_p‹t_dóŒoˇã
(
my_èsk
, 
me
);

340 
	}
}

343 
mach_p‹t_t
 
	gGC_mach_h™dÀr_thªad
;

344 
	gGC_u£_mach_h™dÀr_thªad
 = 0;

346 
GC_mach_thªad
 
	gGC_mach_thªads
[
THREAD_TABLE_SZ
];

347 
	gGC_mach_thªads_cou¡
;

349 
	$GC_°›_öô
()

351 
i
;

353 
i
 = 0; i < 
THREAD_TABLE_SZ
; i++) {

354 
GC_mach_thªads
[
i
].
thªad
 = 0;

355 
GC_mach_thªads
[
i
].
Æªady_su•íded
 = 0;

357 
GC_mach_thªads_cou¡
 = 0;

358 
	}
}

361 
	$GC_su•íd_thªad_li°
(
thªad_a˘_¨øy_t
 
a˘_li°
, 
cou¡
,

362 
thªad_a˘_¨øy_t
 
ﬁd_li°
, 
ﬁd_cou¡
)

364 
mach_p‹t_t
 
my_thªad
 = 
	`mach_thªad_£lf
();

365 
i
, 
j
;

367 
ch™ged
 = 0;

369 
i
 = 0; i < 
cou¡
; i++) {

370 
thªad_a˘_t
 
thªad
 = 
a˘_li°
[
i
];

371 #i‡
DEBUG_THREADS


372 
	`GC_¥ötf
("Aâem±ögÅÿsu•ídÅhªad %p\n", 
thªad
);

375 
found
 = 0;

376 
j
 = 0; j < 
ﬁd_cou¡
; j++) {

377 
thªad_a˘_t
 
ﬁd_thªad
 = 
ﬁd_li°
[
j
];

378 i‡(
ﬁd_thªad
 =
thªad
) {

379 
found
 = 1;

383 i‡(!
found
) {

385 
GC_mach_thªads
[
GC_mach_thªads_cou¡
].
thªad
 =Åhread;

387 
GC_mach_thªads
[
GC_mach_thªads_cou¡
].
Æªady_su•íded
 = 0;

388 
ch™ged
 = 1;

391 i‡(
thªad
 !
my_thªad


392 && (!
GC_u£_mach_h™dÀr_thªad


393 || (
GC_u£_mach_h™dÀr_thªad


394 && 
GC_mach_h™dÀr_thªad
 !
thªad
))) {

395 
thªad_basic_öfo
 
öfo
;

396 
mach_msg_ty≥_numbî_t
 
outCou¡
 = 
THREAD_INFO_MAX
;

397 
kîn_ªtu∫_t
 
kîn_ªsu…
 = 
	`thªad_öfo
(
thªad
, 
THREAD_BASIC_INFO
,

398 (
thªad_öfo_t
)&
öfo
, &
outCou¡
);

399 if(
kîn_ªsu…
 !
KERN_SUCCESS
) {

403 i‡(!
found
) {

404 
GC_mach_thªads
[
GC_mach_thªads_cou¡
].
Æªady_su•íded
 = 
TRUE
;

405 
GC_mach_thªads_cou¡
++;

409 #i‡
DEBUG_THREADS


410 
	`GC_¥ötf
("Thªad sèã f‹ 0x%lx = %d\n", ()
thªad
,

411 
öfo
.
run_°©e
);

413 i‡(!
found
) {

414 
GC_mach_thªads
[
GC_mach_thªads_cou¡
].
Æªady_su•íded


415 
öfo
.
su•íd_cou¡
;

417 i‡(
öfo
.
su•íd_cou¡
)

420 #i‡
DEBUG_THREADS


421 
	`GC_¥ötf
("Su•ídög 0x%lx\n", ()
thªad
);

424 
kîn_ªsu…
 = 
	`thªad_su•íd
(
thªad
);

425 if(
kîn_ªsu…
 !
KERN_SUCCESS
) {

429 i‡(!
found
) {

430 
GC_mach_thªads
[
GC_mach_thªads_cou¡
].
Æªady_su•íded
 = 
TRUE
;

431 
GC_mach_thªads_cou¡
++;

436 i‡(!
found
Ë
GC_mach_thªads_cou¡
++;

438 
	`mach_p‹t_dóŒoˇã
(
	`cuºít_èsk
(), 
my_thªad
);

439  
ch™ged
;

440 
	}
}

444 
	$GC_°›_w‹ld
()

446 
i
, 
ch™ges
;

447 
èsk_t
 
my_èsk
 = 
	`cuºít_èsk
();

448 
mach_p‹t_t
 
my_thªad
 = 
	`mach_thªad_£lf
();

449 
kîn_ªtu∫_t
 
kîn_ªsu…
;

450 
thªad_a˘_¨øy_t
 
a˘_li°
, 
¥ev_li°
;

451 
mach_msg_ty≥_numbî_t
 
li°cou¡
, 
¥evcou¡
;

453 #i‡
DEBUG_THREADS


454 
	`GC_¥ötf
("StoppingÅhe world from 0x%lx\n",

455 ()
	`mach_thªad_£lf
());

459 
	`GC_°›_öô
();

465 #ifde‡
PARALLEL_MARK


466 
	`GC_acquúe_m¨k_lock
();

467 
	`GC_ASSERT
(
GC_Ê_buûdî_cou¡
 == 0);

481 
ch™ges
 = 1;

482 
¥ev_li°
 = 
NULL
;

483 
¥evcou¡
 = 0;

485 
ªsu…
;

486 
kîn_ªsu…
 = 
	`èsk_thªads
(
my_èsk
, &
a˘_li°
, &
li°cou¡
);

488 if(
kîn_ªsu…
 =
KERN_SUCCESS
) {

489 
ªsu…
 = 
	`GC_su•íd_thªad_li°
(
a˘_li°
, 
li°cou¡
, 
¥ev_li°
,

490 
¥evcou¡
);

491 
ch™ges
 = 
ªsu…
;

493 if(
¥ev_li°
 !
NULL
) {

494 
i
 = 0; i < 
¥evcou¡
; i++)

495 
	`mach_p‹t_dóŒoˇã
(
my_èsk
, 
¥ev_li°
[
i
]);

497 
	`vm_dóŒoˇã
(
my_èsk
, (
vm_addªss_t
)
¥ev_li°
,

498 (
thªad_t
Ë* 
¥evcou¡
);

500 
¥ev_li°
 = 
a˘_li°
;

501 
¥evcou¡
 = 
li°cou¡
;

503 } 
ch™ges
);

504 
	`GC_ASSERT
(
¥ev_li°
 != 0);

505 
i
 = 0; i < 
¥evcou¡
; i++)

506 
	`mach_p‹t_dóŒoˇã
(
my_èsk
, 
¥ev_li°
[
i
]);

508 
	`vm_dóŒoˇã
(
my_èsk
, (
vm_addªss_t
)
a˘_li°
,

509 (
thªad_t
Ë* 
li°cou¡
);

511 #ifde‡
MPROTECT_VDB


512 if(
GC_ö¸emíèl
) {

513 
	`GC_m¥Ÿe˘_°›
();

514 
	`GC_m¥Ÿe˘_°›
();

518 #ifde‡
PARALLEL_MARK


519 
	`GC_ªÀa£_m¨k_lock
();

521 #i‡
DEBUG_THREADS


522 
	`GC_¥ötf
("W‹ld st›≥d from 0x%lx\n", ()
my_thªad
);

525 
	`mach_p‹t_dóŒoˇã
(
my_èsk
, 
my_thªad
);

526 
	}
}

530 
	$GC_°¨t_w‹ld
()

532 
èsk_t
 
my_èsk
 = 
	`cuºít_èsk
();

533 
mach_p‹t_t
 
my_thªad
 = 
	`mach_thªad_£lf
();

534 
i
;

535 
j
;

536 
kîn_ªtu∫_t
 
kîn_ªsu…
;

537 
thªad_a˘_¨øy_t
 
a˘_li°
;

538 
mach_msg_ty≥_numbî_t
 
li°cou¡
;

539 
thªad_basic_öfo
 
öfo
;

540 
mach_msg_ty≥_numbî_t
 
outCou¡
 = 
THREAD_INFO_MAX
;

542 #i‡
DEBUG_THREADS


543 
	`GC_¥ötf
("World starting\n");

546 #ifde‡
MPROTECT_VDB


547 if(
GC_ö¸emíèl
) {

548 
	`GC_m¥Ÿe˘_ªsume
();

549 
	`GC_m¥Ÿe˘_ªsume
();

553 
kîn_ªsu…
 = 
	`èsk_thªads
(
my_èsk
, &
a˘_li°
, &
li°cou¡
);

554 
i
 = 0; i < 
li°cou¡
; i++) {

555 
thªad_a˘_t
 
thªad
 = 
a˘_li°
[
i
];

556 i‡(
thªad
 !
my_thªad


557 && (!
GC_u£_mach_h™dÀr_thªad


558 || (
GC_u£_mach_h™dÀr_thªad


559 && 
GC_mach_h™dÀr_thªad
 !
thªad
))) {

560 
j
 = 0; j < 
GC_mach_thªads_cou¡
; j++) {

561 i‡(
thªad
 =
GC_mach_thªads
[
j
].thread) {

562 i‡(
GC_mach_thªads
[
j
].
Æªady_su•íded
) {

563 #i‡
DEBUG_THREADS


564 
	`GC_¥ötf
("NŸÑesumögáÃódy su•ídedÅhªad %p\n", 
thªad
);

568 
kîn_ªsu…
 = 
	`thªad_öfo
(
thªad
, 
THREAD_BASIC_INFO
,

569 (
thªad_öfo_t
)&
öfo
, &
outCou¡
);

570 if(
kîn_ªsu…
 !
KERN_SUCCESS
)

571 
	`ABORT
("thread_info failed");

572 #i‡
DEBUG_THREADS


573 
	`GC_¥ötf
("Thªad sèã f‹ 0x%lx = %d\n", ()
thªad
,

574 
öfo
.
run_°©e
);

575 
	`GC_¥ötf
("Resumög 0x%lx\n", ()
thªad
);

578 
kîn_ªsu…
 = 
	`thªad_ªsume
(
thªad
);

579 if(
kîn_ªsu…
 !
KERN_SUCCESS
)

580 
	`ABORT
("thread_resume failed");

584 
	`mach_p‹t_dóŒoˇã
(
my_èsk
, 
thªad
);

586 
	`vm_dóŒoˇã
(
my_èsk
, (
vm_addªss_t
)
a˘_li°
,

587 (
thªad_t
Ë* 
li°cou¡
);

589 
	`mach_p‹t_dóŒoˇã
(
my_èsk
, 
my_thªad
);

590 #i‡
DEBUG_THREADS


591 
	`GC_¥ötf
("World started\n");

593 
	}
}

595 
	$GC_d¨wö_ªgi°î_mach_h™dÀr_thªad
(
mach_p‹t_t
 
thªad
)

597 
GC_mach_h™dÀr_thªad
 = 
thªad
;

598 
GC_u£_mach_h™dÀr_thªad
 = 1;

599 
	}
}

	@dbg_mlc.c

18 
	~<î∫o.h
>

19 
	~<°rög.h
>

20 
	~"¥iv©e/dbg_mlc.h
"

22 
GC_deÁu…_¥öt_hóp_obj_¥oc
();

23 
GC_API
 
	gGC_ªgi°î_föÆizî_no_‹dî


24 (* 
	gobj
, 
GC_föÆiz©i⁄_¥oc
 
	g‚
, * 
	gcd
,

25 
GC_föÆiz©i⁄_¥oc
 *
	go‚
, * *
	gocd
);

28 #i‚de‡
SHORT_DBG_HDRS


38 
GC_boﬁ
 
	$GC_has_Ÿhî_debug_öfo
(
±r_t
 
p
)

40 
oh
 * 
ohdr
 = (oh *)
p
;

41 
±r_t
 
body
 = (±r_t)(
ohdr
 + 1);

42 
w‹d
 
sz
 = 
	`GC_size
((
±r_t
Ë
ohdr
);

44 i‡(
	`HBLKPTR
((
±r_t
)
ohdr
Ë!HBLKPTR(’å_t)
body
)

45 || 
sz
 < 
DEBUG_BYTES
 + 
EXTRA_BYTES
) {

46 (
FALSE
);

48 i‡(
ohdr
 -> 
oh_sz
 =
sz
) {

50 (
FALSE
);

52 i‡(
ohdr
 -> 
oh_sf
 =(
START_FLAG
 ^ (
w‹d
)
body
)Ë(
TRUE
);

53 i‡(((
w‹d
 *)
ohdr
)[
	`BYTES_TO_WORDS
(
sz
)-1] =(
END_FLAG
 ^ (w‹d)
body
)) {

54 (
TRUE
);

56 (
FALSE
);

57 
	}
}

60 #ifde‡
KEEP_BACK_PTRS


62 
	~<°dlib.h
>

64 #i‡
deföed
(
__GLIBC__
Ë|| deföed(
SOLARIS
) \

65 || 
deföed
(
HPUX
Ë|| deföed(
IRIX5
Ë|| 
	$deföed
(
OSF1
)

66 
	#RANDOM
(Ë
	`øndom
()

	)

68 
	#RANDOM
(Ë()
	`ønd
()

	)

77 
	$GC_°‹e_back_poöãr
(
±r_t
 
sour˚
,Öå_à
de°
)

79 i‡(
	`GC_HAS_DEBUG_INFO
(
de°
)) {

80 ((
oh
 *)
de°
Ë-> 
oh_back_±r
 = 
	`HIDE_BACK_PTR
(
sour˚
);

82 
	}
}

84 
	$GC_m¨ked_f‹_föÆiz©i⁄
(
±r_t
 
de°
) {

85 
	`GC_°‹e_back_poöãr
(
MARKED_FOR_FINALIZATION
, 
de°
);

86 
	}
}

94 
GC_ªf_köd
 
	$GC_gë_back_±r_öfo
(*
de°
, **
ba£_p
, 
size_t
 *
off£t_p
)

96 
oh
 * 
hdr
 = (oh *)
	`GC_ba£
(
de°
);

97 
±r_t
 
bp
;

98 
±r_t
 
bp_ba£
;

99 i‡(!
	`GC_HAS_DEBUG_INFO
((
±r_t
Ë
hdr
)Ë 
GC_NO_SPACE
;

100 
bp
 = 
	`REVEAL_POINTER
(
hdr
 -> 
oh_back_±r
);

101 i‡(
MARKED_FOR_FINALIZATION
 =
bp
Ë 
GC_FINALIZER_REFD
;

102 i‡(
MARKED_FROM_REGISTER
 =
bp
Ë 
GC_REFD_FROM_REG
;

103 i‡(
NOT_MARKED
 =
bp
Ë 
GC_UNREFERENCED
;

104 #i‡
ALIGNMENT
 == 1

108 
±r_t
 
Æã∫©e_±r
 = 
bp
 + 1;

109 
±r_t
 
èrgë
 = *’å_à*)
bp
;

110 
±r_t
 
Æã∫©e_èrgë
 = *’å_à*)
Æã∫©e_±r
;

112 i‡(
Æã∫©e_èrgë
 >
GC_Àa°_∂ausibÀ_hóp_addr


113 && 
Æã∫©e_èrgë
 <
GC_gª©e°_∂ausibÀ_hóp_addr


114 && (
èrgë
 < 
GC_Àa°_∂ausibÀ_hóp_addr


115 || 
èrgë
 > 
GC_gª©e°_∂ausibÀ_hóp_addr
)) {

116 
bp
 = 
Æã∫©e_±r
;

120 
bp_ba£
 = 
	`GC_ba£
(
bp
);

121 i‡(0 =
bp_ba£
) {

122 *
ba£_p
 = 
bp
;

123 *
off£t_p
 = 0;

124  
GC_REFD_FROM_ROOT
;

126 i‡(
	`GC_HAS_DEBUG_INFO
(
bp_ba£
)Ëbp_ba£ +(
oh
);

127 *
ba£_p
 = 
bp_ba£
;

128 *
off£t_p
 = 
bp
 - 
bp_ba£
;

129  
GC_REFD_FROM_HEAP
;

131 
	}
}

136 *
	$GC_gíî©e_øndom_hóp_addªss
()

138 
i
;

139 
hóp_off£t
 = 
	`RANDOM
();

140 i‡(
GC_hópsize
 > 
RAND_MAX
) {

141 
hóp_off£t
 *
RAND_MAX
;

142 
hóp_off£t
 +
	`RANDOM
();

144 
hóp_off£t
 %
GC_hópsize
;

148 
i
 = 0; i < 
GC_n_hóp_£˘s
; ++ i) {

149 
size_t
 
size
 = 
GC_hóp_£˘s
[
i
].
hs_byãs
;

150 i‡(
hóp_off£t
 < 
size
) {

151  
GC_hóp_£˘s
[
i
].
hs_°¨t
 + 
hóp_off£t
;

153 
hóp_off£t
 -
size
;

156 
	`ABORT
("GC_generate_random_heap_address: size inconsistency");

159 
	}
}

162 *
	$GC_gíî©e_øndom_vÆid_addªss
()

164 
±r_t
 
ªsu…
;

165 
±r_t
 
ba£
;

167 
ªsu…
 = 
	`GC_gíî©e_øndom_hóp_addªss
();

168 
ba£
 = 
	`GC_ba£
(
ªsu…
);

169 i‡(0 =
ba£
) ;

170 i‡(!
	`GC_is_m¨ked
(
ba£
)) ;

171  
ªsu…
;

173 
	}
}

176 
	$GC_¥öt_backåa˚
(*
p
)

178 *
cuºít
 = 
p
;

179 
i
;

180 
GC_ªf_köd
 
sour˚
;

181 
size_t
 
off£t
;

182 *
ba£
;

184 
	`GC_¥öt_hóp_obj
(
	`GC_ba£
(
cuºít
));

185 
	`GC_îr_¥ötf
("\n");

186 
i
 = 0; ; ++i) {

187 
sour˚
 = 
	`GC_gë_back_±r_öfo
(
cuºít
, &
ba£
, &
off£t
);

188 i‡(
GC_UNREFERENCED
 =
sour˚
) {

189 
	`GC_îr_¥ötf
("Reference couldÇot be found\n");

190 
out
;

192 i‡(
GC_NO_SPACE
 =
sour˚
) {

193 
	`GC_îr_¥ötf
("No debug info in object: Can't findÑeference\n");

194 
out
;

196 
	`GC_îr_¥ötf
("Reachable via %dÜevels ofÖointers from ",

197 ()
i
);

198 
sour˚
) {

199 
GC_REFD_FROM_ROOT
:

200 
	`GC_îr_¥ötf
("roŸáà%p\n\n", 
ba£
);

201 
out
;

202 
GC_REFD_FROM_REG
:

203 
	`GC_îr_¥ötf
("root inÑegister\n\n");

204 
out
;

205 
GC_FINALIZER_REFD
:

206 
	`GC_îr_¥ötf
("list of finalizable objects\n\n");

207 
out
;

208 
GC_REFD_FROM_HEAP
:

209 
	`GC_îr_¥ötf
("off£à%ld i¿obje˘:\n", ()
off£t
);

211 
	`GC_¥öt_hóp_obj
(
	`GC_ba£
(
ba£
));

212 
	`GC_îr_¥ötf
("\n");

215 
cuºít
 = 
ba£
;

217 
out
:;

218 
	}
}

222 
	$GC_gíî©e_øndom_backåa˚_no_gc
()

224 * 
cuºít
;

225 
cuºít
 = 
	`GC_gíî©e_øndom_vÆid_addªss
();

226 
	`GC_¥ötf
("\n****Cho£áddªs†%∞ö obje˘\n", 
cuºít
);

227 
	`GC_¥öt_backåa˚
(
cuºít
);

228 
	}
}

230 
	$GC_gíî©e_øndom_backåa˚
()

232 
	`GC_gcﬁÀ˘
();

233 
	`GC_gíî©e_øndom_backåa˚_no_gc
();

234 
	}
}

238 
	#CROSSES_HBLK
(
p
, 
sz
) \

239 (((
w‹d
)(
p
 + (
oh
Ë+ 
sz
 - 1Ë^ (w‹dÌË>
HBLKSIZE
)

	)

242 
±r_t
 
	$GC_°‹e_debug_öfo
(
±r_t
 
p
, 
w‹d
 
sz
, c⁄° *
°rög
, w‹d 
öãgî
)

244 
w‹d
 * 
ªsu…
 = (w‹d *)((
oh
 *)
p
 + 1);

245 
DCL_LOCK_STATE
;

250 
	`LOCK
();

251 
	`GC_ASSERT
(
	`GC_size
(
p
Ë>(
oh
Ë+ 
sz
);

252 
	`GC_ASSERT
(!(
	`SMALL_OBJ
(
sz
Ë&& 
	`CROSSES_HBLK
(
p
, sz)));

253 #ifde‡
KEEP_BACK_PTRS


254 ((
oh
 *)
p
Ë-> 
oh_back_±r
 = 
	`HIDE_BACK_PTR
(
NOT_MARKED
);

256 #ifde‡
MAKE_BACK_GRAPH


257 ((
oh
 *)
p
Ë-> 
oh_bg_±r
 = 
	`HIDE_BACK_PTR
((
±r_t
)0);

259 ((
oh
 *)
p
Ë-> 
oh_°rög
 = 
°rög
;

260 ((
oh
 *)
p
Ë-> 
oh_öt
 = 
öãgî
;

261 #i‚de‡
SHORT_DBG_HDRS


262 ((
oh
 *)
p
Ë-> 
oh_sz
 = 
sz
;

263 ((
oh
 *)
p
Ë-> 
oh_sf
 = 
START_FLAG
 ^ (
w‹d
)
ªsu…
;

264 ((
w‹d
 *)
p
)[
	`BYTES_TO_WORDS
(
	`GC_size
(p))-1] =

265 
ªsu…
[
	`SIMPLE_ROUNDED_UP_WORDS
(
sz
)] = 
END_FLAG
 ^ (
w‹d
)result;

267 
	`UNLOCK
();

268 ((
±r_t
)
ªsu…
);

269 
	}
}

271 #ifde‡
DBG_HDRS_ALL


274 
±r_t
 
	$GC_°‹e_debug_öfo_ö√r
(
±r_t
 
p
, 
w‹d
 
sz
, *
°rög
, w‹d 
öãgî
)

276 
w‹d
 * 
ªsu…
 = (w‹d *)((
oh
 *)
p
 + 1);

281 
	`GC_ASSERT
(
	`GC_size
(
p
Ë>(
oh
Ë+ 
sz
);

282 
	`GC_ASSERT
(!(
	`SMALL_OBJ
(
sz
Ë&& 
	`CROSSES_HBLK
(
p
, sz)));

283 #ifde‡
KEEP_BACK_PTRS


284 ((
oh
 *)
p
Ë-> 
oh_back_±r
 = 
	`HIDE_BACK_PTR
(
NOT_MARKED
);

286 #ifde‡
MAKE_BACK_GRAPH


287 ((
oh
 *)
p
Ë-> 
oh_bg_±r
 = 
	`HIDE_BACK_PTR
((
±r_t
)0);

289 ((
oh
 *)
p
Ë-> 
oh_°rög
 = 
°rög
;

290 ((
oh
 *)
p
Ë-> 
oh_öt
 = 
öãgî
;

291 #i‚de‡
SHORT_DBG_HDRS


292 ((
oh
 *)
p
Ë-> 
oh_sz
 = 
sz
;

293 ((
oh
 *)
p
Ë-> 
oh_sf
 = 
START_FLAG
 ^ (
w‹d
)
ªsu…
;

294 ((
w‹d
 *)
p
)[
	`BYTES_TO_WORDS
(
	`GC_size
(p))-1] =

295 
ªsu…
[
	`SIMPLE_ROUNDED_UP_WORDS
(
sz
)] = 
END_FLAG
 ^ (
w‹d
)result;

297 ((
±r_t
)
ªsu…
);

298 
	}
}

301 #i‚de‡
SHORT_DBG_HDRS


305 
±r_t
 
	$GC_check_™nŸ©ed_obj
(
oh
 *
ohdr
)

307 
±r_t
 
body
 = (±r_t)(
ohdr
 + 1);

308 
w‹d
 
gc_sz
 = 
	`GC_size
((
±r_t
)
ohdr
);

309 i‡(
ohdr
 -> 
oh_sz
 + 
DEBUG_BYTES
 > 
gc_sz
) {

310 ((
±r_t
)(&(
ohdr
 -> 
oh_sz
)));

312 i‡(
ohdr
 -> 
oh_sf
 !(
START_FLAG
 ^ (
w‹d
)
body
)) {

313 ((
±r_t
)(&(
ohdr
 -> 
oh_sf
)));

315 i‡(((
w‹d
 *)
ohdr
)[
	`BYTES_TO_WORDS
(
gc_sz
)-1] !(
END_FLAG
 ^ (w‹d)
body
)) {

316 ((
±r_t
)((
w‹d
 *)
ohdr
 + 
	`BYTES_TO_WORDS
(
gc_sz
)-1));

318 i‡(((
w‹d
 *)
body
)[
	`SIMPLE_ROUNDED_UP_WORDS
(
ohdr
 -> 
oh_sz
)]

319 !(
END_FLAG
 ^ (
w‹d
)
body
)) {

320 ((
±r_t
)((
w‹d
 *)
body
 + 
	`SIMPLE_ROUNDED_UP_WORDS
(
ohdr
 -> 
oh_sz
)));

323 
	}
}

326 
GC_des¸ibe_ty≥_‚
 
	gGC_des¸ibe_ty≥_‚s
[
MAXOBJKINDS
] = {0};

328 
	$GC_ªgi°î_des¸ibe_ty≥_‚
(
köd
, 
GC_des¸ibe_ty≥_‚
 
‚
)

330 
GC_des¸ibe_ty≥_‚s
[
köd
] = 
‚
;

331 
	}
}

335 
	$GC_¥öt_ty≥
(
±r_t
 
p
)

337 
hdr
 * 
hhdr
 = 
	`GC_föd_hódî
(
p
);

338 
buf„r
[
GC_TYPE_DESCR_LEN
 + 1];

339 
köd
 = 
hhdr
 -> 
hb_obj_köd
;

341 i‡(0 !
GC_des¸ibe_ty≥_‚s
[
köd
] && 
	`GC_is_m¨ked
(
	`GC_ba£
(
p
))) {

344 
buf„r
[
GC_TYPE_DESCR_LEN
] = 0;

345 (
GC_des¸ibe_ty≥_‚s
[
köd
])(
p
, 
buf„r
);

346 
	`GC_ASSERT
(
buf„r
[
GC_TYPE_DESCR_LEN
] == 0);

347 
	`GC_îr_puts
(
buf„r
);

349 
köd
) {

350 
PTRFREE
:

351 
	`GC_îr_puts
("PTRFREE");

353 
NORMAL
:

354 
	`GC_îr_puts
("NORMAL");

356 
UNCOLLECTABLE
:

357 
	`GC_îr_puts
("UNCOLLECTABLE");

359 #ifde‡
ATOMIC_UNCOLLECTABLE


360 
AUNCOLLECTABLE
:

361 
	`GC_îr_puts
("ATOMIC UNCOLLECTABLE");

364 
STUBBORN
:

365 
	`GC_îr_puts
("STUBBORN");

368 
	`GC_îr_¥ötf
("köd %d, des¸ 0x%lx", 
köd
,

369 ()(
hhdr
 -> 
hb_des¸
));

372 
	}
}

376 
	$GC_¥öt_obj
(
±r_t
 
p
)

378 
oh
 * 
ohdr
 = (oh *)
	`GC_ba£
(
p
);

380 
	`GC_ASSERT
(
	`I_DONT_HOLD_LOCK
());

381 
	`GC_îr_¥ötf
("%∞(", ((
±r_t
)
ohdr
 + (
oh
)));

382 
	`GC_îr_puts
(
ohdr
 -> 
oh_°rög
);

383 #ifde‡
SHORT_DBG_HDRS


384 
	`GC_îr_¥ötf
(":%ld, ", ()(
ohdr
 -> 
oh_öt
));

386 
	`GC_îr_¥ötf
(":%ld, sz=%ld, ", ()(
ohdr
 -> 
oh_öt
),

387 ()(
ohdr
 -> 
oh_sz
));

389 
	`GC_¥öt_ty≥
((
±r_t
)(
ohdr
 + 1));

390 
	`GC_îr_puts
(")\n");

391 
	`PRINT_CALL_CHAIN
(
ohdr
);

392 
	}
}

394 
	$GC_debug_¥öt_hóp_obj_¥oc
(
±r_t
 
p
)

396 
	`GC_ASSERT
(
	`I_DONT_HOLD_LOCK
());

397 i‡(
	`GC_HAS_DEBUG_INFO
(
p
)) {

398 
	`GC_¥öt_obj
(
p
);

400 
	`GC_deÁu…_¥öt_hóp_obj_¥oc
(
p
);

402 
	}
}

404 #i‚de‡
SHORT_DBG_HDRS


408 
	$GC_¥öt_smashed_obj
(
±r_t
 
p
,Öå_à
˛obbîed_addr
)

410 
oh
 * 
ohdr
 = (oh *)
	`GC_ba£
(
p
);

412 
	`GC_ASSERT
(
	`I_DONT_HOLD_LOCK
());

413 
	`GC_îr_¥ötf
("%∞ö o∏√¨ obje˘áà%p(", 
˛obbîed_addr
, 
p
);

414 i‡(
˛obbîed_addr
 <(
±r_t
)(&(
ohdr
 -> 
oh_sz
))

415 || 
ohdr
 -> 
oh_°rög
 == 0) {

416 
	`GC_îr_¥ötf
("<smashed>,áppr. sz = %ld)\n",

417 (
	`GC_size
((
±r_t
)
ohdr
Ë- 
DEBUG_BYTES
));

419 i‡(
ohdr
 -> 
oh_°rög
[0] == '\0') {

420 
	`GC_îr_puts
("EMPTY(smashed?)");

422 
	`GC_îr_puts
(
ohdr
 -> 
oh_°rög
);

424 
	`GC_îr_¥ötf
(":%ld, sz=%ld)\n", ()(
ohdr
 -> 
oh_öt
),

425 ()(
ohdr
 -> 
oh_sz
));

426 
	`PRINT_CALL_CHAIN
(
ohdr
);

428 
	}
}

431 
GC_check_hóp_¥oc
 ();

433 
GC_¥öt_Æl_smashed_¥oc
 ();

435 
	$GC_do_nŸhög
(Ë{
	}
}

437 
	$GC_°¨t_debuggög
()

439 #i‚de‡
SHORT_DBG_HDRS


440 
GC_check_hóp
 = 
GC_check_hóp_¥oc
;

441 
GC_¥öt_Æl_smashed
 = 
GC_¥öt_Æl_smashed_¥oc
;

443 
GC_check_hóp
 = 
GC_do_nŸhög
;

444 
GC_¥öt_Æl_smashed
 = 
GC_do_nŸhög
;

446 
GC_¥öt_hóp_obj
 = 
GC_debug_¥öt_hóp_obj_¥oc
;

447 
GC_debuggög_°¨ãd
 = 
TRUE
;

448 
	`GC_ªgi°î_di•œ˚mít
((
w‹d
)(
oh
));

449 
	}
}

451 
size_t
 
	gGC_debug_hódî_size
 = (
oh
);

453 
	$GC_debug_ªgi°î_di•œ˚mít
(
size_t
 
off£t
)

455 
	`GC_ªgi°î_di•œ˚mít
(
off£t
);

456 
	`GC_ªgi°î_di•œ˚mít
((
w‹d
)(
oh
Ë+ 
off£t
);

457 
	}
}

459 * 
	$GC_debug_mÆloc
(
size_t
 
lb
, 
GC_EXTRA_PARAMS
)

461 * 
ªsu…
 = 
	`GC_mÆloc
(
lb
 + 
DEBUG_BYTES
);

463 i‡(
ªsu…
 == 0) {

464 
	`GC_îr_¥ötf
("GC_debug_malloc(%lu)Ñeturning NIL (",

465 (Ë
lb
);

466 
	`GC_îr_puts
(
s
);

467 
	`GC_îr_¥ötf
(":%ld)\n", ()
i
);

470 i‡(!
GC_debuggög_°¨ãd
) {

471 
	`GC_°¨t_debuggög
();

473 
	`ADD_CALL_CHAIN
(
ªsu…
, 
ø
);

474  (
	`GC_°‹e_debug_öfo
(
ªsu…
, (
w‹d
)
lb
, 
s
, (w‹d)
i
));

475 
	}
}

477 * 
	$GC_debug_mÆloc_ign‹e_off_∑ge
(
size_t
 
lb
, 
GC_EXTRA_PARAMS
)

479 * 
ªsu…
 = 
	`GC_mÆloc_ign‹e_off_∑ge
(
lb
 + 
DEBUG_BYTES
);

481 i‡(
ªsu…
 == 0) {

482 
	`GC_îr_¥ötf
("GC_debug_malloc_ignore_off_page(%lu)Ñeturning NIL (",

483 (Ë
lb
);

484 
	`GC_îr_puts
(
s
);

485 
	`GC_îr_¥ötf
(":%lu)\n", ()
i
);

488 i‡(!
GC_debuggög_°¨ãd
) {

489 
	`GC_°¨t_debuggög
();

491 
	`ADD_CALL_CHAIN
(
ªsu…
, 
ø
);

492  (
	`GC_°‹e_debug_öfo
(
ªsu…
, (
w‹d
)
lb
, 
s
, (w‹d)
i
));

493 
	}
}

495 * 
	$GC_debug_mÆloc_©omic_ign‹e_off_∑ge
(
size_t
 
lb
, 
GC_EXTRA_PARAMS
)

497 * 
ªsu…
 = 
	`GC_mÆloc_©omic_ign‹e_off_∑ge
(
lb
 + 
DEBUG_BYTES
);

499 i‡(
ªsu…
 == 0) {

500 
	`GC_îr_¥ötf
("GC_debug_malloc_atomic_ignore_off_page(%lu)"

501 "Ñëu∫ög NIL (", (Ë
lb
);

502 
	`GC_îr_puts
(
s
);

503 
	`GC_îr_¥ötf
(":%lu)\n", ()
i
);

506 i‡(!
GC_debuggög_°¨ãd
) {

507 
	`GC_°¨t_debuggög
();

509 
	`ADD_CALL_CHAIN
(
ªsu…
, 
ø
);

510  (
	`GC_°‹e_debug_öfo
(
ªsu…
, (
w‹d
)
lb
, 
s
, (w‹d)
i
));

511 
	}
}

513 #ifde‡
DBG_HDRS_ALL


522 * 
	$GC_debug_gíîic_mÆloc_ö√r
(
size_t
 
lb
, 
k
)

524 * 
ªsu…
 = 
	`GC_gíîic_mÆloc_ö√r
(
lb
 + 
DEBUG_BYTES
, 
k
);

526 i‡(
ªsu…
 == 0) {

527 
	`GC_îr_¥ötf
("GC internalállocation (%lu bytes)Ñeturning NIL\n",

528 (Ë
lb
);

531 
	`ADD_CALL_CHAIN
(
ªsu…
, 
GC_RETURN_ADDR
);

532  (
	`GC_°‹e_debug_öfo_ö√r
(
ªsu…
, (
w‹d
)
lb
, "INTERNAL", (word)0));

533 
	}
}

535 * 
	$GC_debug_gíîic_mÆloc_ö√r_ign‹e_off_∑ge
(
size_t
 
lb
, 
k
)

537 * 
ªsu…
 = 
	`GC_gíîic_mÆloc_ö√r_ign‹e_off_∑ge
(

538 
lb
 + 
DEBUG_BYTES
, 
k
);

540 i‡(
ªsu…
 == 0) {

541 
	`GC_îr_¥ötf
("GC internalállocation (%lu bytes)Ñeturning NIL\n",

542 (Ë
lb
);

545 
	`ADD_CALL_CHAIN
(
ªsu…
, 
GC_RETURN_ADDR
);

546  (
	`GC_°‹e_debug_öfo_ö√r
(
ªsu…
, (
w‹d
)
lb
, "INTERNAL", (word)0));

547 
	}
}

550 #ifde‡
STUBBORN_ALLOC


551 * 
	$GC_debug_mÆloc_°ubb‹n
(
size_t
 
lb
, 
GC_EXTRA_PARAMS
)

553 * 
ªsu…
 = 
	`GC_mÆloc_°ubb‹n
(
lb
 + 
DEBUG_BYTES
);

555 i‡(
ªsu…
 == 0) {

556 
	`GC_îr_¥ötf
("GC_debug_malloc(%lu)Ñeturning NIL (",

557 (Ë
lb
);

558 
	`GC_îr_puts
(
s
);

559 
	`GC_îr_¥ötf
(":%lu)\n", ()
i
);

562 i‡(!
GC_debuggög_°¨ãd
) {

563 
	`GC_°¨t_debuggög
();

565 
	`ADD_CALL_CHAIN
(
ªsu…
, 
ø
);

566  (
	`GC_°‹e_debug_öfo
(
ªsu…
, (
w‹d
)
lb
, 
s
, (w‹d)
i
));

567 
	}
}

569 
	$GC_debug_ch™ge_°ubb‹n
(*
p
)

571 * 
q
 = 
	`GC_ba£
(
p
);

572 
hdr
 * 
hhdr
;

574 i‡(
q
 == 0) {

575 
	`GC_îr_¥ötf
("Badárgumít: %∞tÿGC_debug_ch™ge_°ubb‹n\n", 
p
);

576 
	`ABORT
("GC_debug_change_stubborn: badárg");

578 
hhdr
 = 
	`HDR
(
q
);

579 i‡(
hhdr
 -> 
hb_obj_köd
 !
STUBBORN
) {

580 
	`GC_îr_¥ötf
("GC_debug_ch™ge_°ubb‹¿¨gÇŸ stubb‹n: %p\n", 
p
);

581 
	`ABORT
("GC_debug_change_stubborn:árgÇot stubborn");

583 
	`GC_ch™ge_°ubb‹n
(
q
);

584 
	}
}

586 
	$GC_debug_íd_°ubb‹n_ch™ge
(*
p
)

588 * 
q
 = 
	`GC_ba£
(
p
);

589 
hdr
 * 
hhdr
;

591 i‡(
q
 == 0) {

592 
	`GC_îr_¥ötf
("Badárgumít: %∞tÿGC_debug_íd_°ubb‹n_ch™ge\n", 
p
);

593 
	`ABORT
("GC_debug_end_stubborn_change: badárg");

595 
hhdr
 = 
	`HDR
(
q
);

596 i‡(
hhdr
 -> 
hb_obj_köd
 !
STUBBORN
) {

597 
	`GC_îr_¥ötf
("debug_íd_°ubb‹n_ch™gê¨gÇŸ stubb‹n: %p\n", 
p
);

598 
	`ABORT
("GC_debug_end_stubborn_change:árgÇot stubborn");

600 
	`GC_íd_°ubb‹n_ch™ge
(
q
);

601 
	}
}

605 * 
	$GC_debug_mÆloc_°ubb‹n
(
size_t
 
lb
, 
GC_EXTRA_PARAMS
)

607  
	`GC_debug_mÆloc
(
lb
, 
OPT_RA
 
s
, 
i
);

608 
	}
}

610 
	$GC_debug_ch™ge_°ubb‹n
(*
p
)

612 
	}
}

614 
	$GC_debug_íd_°ubb‹n_ch™ge
(*
p
)

616 
	}
}

620 * 
	$GC_debug_mÆloc_©omic
(
size_t
 
lb
, 
GC_EXTRA_PARAMS
)

622 * 
ªsu…
 = 
	`GC_mÆloc_©omic
(
lb
 + 
DEBUG_BYTES
);

624 i‡(
ªsu…
 == 0) {

625 
	`GC_îr_¥ötf
("GC_debug_malloc_atomic(%lu)Ñeturning NIL (",

626 (Ë
lb
);

627 
	`GC_îr_puts
(
s
);

628 
	`GC_îr_¥ötf
(":%lu)\n", ()
i
);

631 i‡(!
GC_debuggög_°¨ãd
) {

632 
	`GC_°¨t_debuggög
();

634 
	`ADD_CALL_CHAIN
(
ªsu…
, 
ø
);

635  (
	`GC_°‹e_debug_öfo
(
ªsu…
, (
w‹d
)
lb
, 
s
, (w‹d)
i
));

636 
	}
}

638 *
	$GC_debug_°rdup
(c⁄° *
°r
, 
GC_EXTRA_PARAMS
)

640 *
c›y
;

641 i‡(
°r
 =
NULL
)  NULL;

642 
c›y
 = 
	`GC_debug_mÆloc_©omic
(
	`°æí
(
°r
Ë+ 1, 
OPT_RA
 
s
, 
i
);

643 i‡(
c›y
 =
NULL
) {

644 
î∫o
 = 
ENOMEM
;

645  
NULL
;

647 
	`°r˝y
(
c›y
, 
°r
);

648  
c›y
;

649 
	}
}

651 * 
	$GC_debug_mÆloc_uncﬁÀ˘abÀ
(
size_t
 
lb
, 
GC_EXTRA_PARAMS
)

653 * 
ªsu…
 = 
	`GC_mÆloc_uncﬁÀ˘abÀ
(
lb
 + 
UNCOLLECTABLE_DEBUG_BYTES
);

655 i‡(
ªsu…
 == 0) {

656 
	`GC_îr_¥ötf
("GC_debug_malloc_uncollectable(%lu)Ñeturning NIL (",

657 (Ë
lb
);

658 
	`GC_îr_puts
(
s
);

659 
	`GC_îr_¥ötf
(":%lu)\n", ()
i
);

662 i‡(!
GC_debuggög_°¨ãd
) {

663 
	`GC_°¨t_debuggög
();

665 
	`ADD_CALL_CHAIN
(
ªsu…
, 
ø
);

666  (
	`GC_°‹e_debug_öfo
(
ªsu…
, (
w‹d
)
lb
, 
s
, (w‹d)
i
));

667 
	}
}

669 #ifde‡
ATOMIC_UNCOLLECTABLE


670 * 
	$GC_debug_mÆloc_©omic_uncﬁÀ˘abÀ
(
size_t
 
lb
, 
GC_EXTRA_PARAMS
)

672 * 
ªsu…
 =

673 
	`GC_mÆloc_©omic_uncﬁÀ˘abÀ
(
lb
 + 
UNCOLLECTABLE_DEBUG_BYTES
);

675 i‡(
ªsu…
 == 0) {

676 
	`GC_îr_¥ötf
(

678 (Ë
lb
);

679 
	`GC_îr_puts
(
s
);

680 
	`GC_îr_¥ötf
(":%lu)\n", ()
i
);

683 i‡(!
GC_debuggög_°¨ãd
) {

684 
	`GC_°¨t_debuggög
();

686 
	`ADD_CALL_CHAIN
(
ªsu…
, 
ø
);

687  (
	`GC_°‹e_debug_öfo
(
ªsu…
, (
w‹d
)
lb
, 
s
, (w‹d)
i
));

688 
	}
}

691 
	$GC_debug_‰ì
(* 
p
)

693 
±r_t
 
ba£
;

694 
±r_t
 
˛obbîed
;

696 i‡(0 =
p
) ;

697 
ba£
 = 
	`GC_ba£
(
p
);

698 i‡(
ba£
 == 0) {

699 
	`GC_îr_¥ötf
("Aâem±Åÿ‰ì invÆidÖoöã∏%p\n", 
p
);

700 
	`ABORT
("free(invalidÖointer)");

702 i‡((
±r_t
)
p
 - (±r_t)
ba£
 !(
oh
)) {

703 
	`GC_îr_¥ötf
(

704 "GC_debug_‰ì cÆÀd o¿poöã∏%∞wÿdebuggög info\n", 
p
);

706 #i‚de‡
SHORT_DBG_HDRS


707 
˛obbîed
 = 
	`GC_check_™nŸ©ed_obj
((
oh
 *)
ba£
);

708 i‡(
˛obbîed
 != 0) {

709 i‡(((
oh
 *)
ba£
Ë-> 
oh_sz
 =
	`GC_size
(base)) {

710 
	`GC_îr_¥ötf
(

713 
	`GC_îr_¥ötf
("GC_debug_free: found smashedÜocationát ");

715 
	`GC_¥öt_smashed_obj
(
p
, 
˛obbîed
);

718 ((
oh
 *)
ba£
Ë-> 
oh_sz
 = 
	`GC_size
(base);

721 i‡(
GC_föd_Àak
) {

722 
	`GC_‰ì
(
ba£
);

724 
hdr
 * 
hhdr
 = 
	`HDR
(
p
);

725 
GC_boﬁ
 
uncﬁÀ˘abÀ
 = 
FALSE
;

727 i‡(
hhdr
 -> 
hb_obj_köd
 =
UNCOLLECTABLE
) {

728 
uncﬁÀ˘abÀ
 = 
TRUE
;

730 #ifde‡
ATOMIC_UNCOLLECTABLE


731 i‡(
hhdr
 -> 
hb_obj_köd
 =
AUNCOLLECTABLE
) {

732 
uncﬁÀ˘abÀ
 = 
TRUE
;

735 i‡(
uncﬁÀ˘abÀ
) {

736 
	`GC_‰ì
(
ba£
);

738 
size_t
 
i
;

739 
size_t
 
obj_sz
 = 
	`BYTES_TO_WORDS
(
hhdr
 -> 
hb_sz
 - (
oh
));

741 
i
 = 0; i < 
obj_sz
; ++iË((
w‹d
 *)
p
)[i] = 0xdeadbeef;

742 
	`GC_ASSERT
((
w‹d
 *)
p
 + 
i
 =(w‹d *)(
ba£
 + 
hhdr
 -> 
hb_sz
));

745 
	}
}

747 #ifde‡
THREADS


749 
GC_‰ì_ö√r
(* 
p
);

752 
	$GC_debug_‰ì_ö√r
(* 
p
)

754 
	`GC_‰ì_ö√r
(
	`GC_ba£
(
p
));

755 
	}
}

758 * 
	$GC_debug_ªÆloc
(* 
p
, 
size_t
 
lb
, 
GC_EXTRA_PARAMS
)

760 * 
ba£
 = 
	`GC_ba£
(
p
);

761 
±r_t
 
˛obbîed
;

762 * 
ªsu…
;

763 
size_t
 
c›y_sz
 = 
lb
;

764 
size_t
 
ﬁd_sz
;

765 
hdr
 * 
hhdr
;

767 i‡(
p
 =0Ë(
	`GC_debug_mÆloc
(
lb
, 
OPT_RA
 
s
, 
i
));

768 i‡(
ba£
 == 0) {

769 
	`GC_îr_¥ötf
("Aâem±ÅÿªÆloˇã invÆidÖoöã∏%p\n", 
p
);

770 
	`ABORT
("realloc(invalidÖointer)");

772 i‡((
±r_t
)
p
 - (±r_t)
ba£
 !(
oh
)) {

773 
	`GC_îr_¥ötf
(

774 "GC_debug_ªÆlo¯ˇŒed o¿poöã∏%∞wÿdebuggög info\n", 
p
);

775 (
	`GC_ªÆloc
(
p
, 
lb
));

777 
hhdr
 = 
	`HDR
(
ba£
);

778 
hhdr
 -> 
hb_obj_köd
) {

779 #ifde‡
STUBBORN_ALLOC


780 
STUBBORN
:

781 
ªsu…
 = 
	`GC_debug_mÆloc_°ubb‹n
(
lb
, 
OPT_RA
 
s
, 
i
);

784 
NORMAL
:

785 
ªsu…
 = 
	`GC_debug_mÆloc
(
lb
, 
OPT_RA
 
s
, 
i
);

787 
PTRFREE
:

788 
ªsu…
 = 
	`GC_debug_mÆloc_©omic
(
lb
, 
OPT_RA
 
s
, 
i
);

790 
UNCOLLECTABLE
:

791 
ªsu…
 = 
	`GC_debug_mÆloc_uncﬁÀ˘abÀ
(
lb
, 
OPT_RA
 
s
, 
i
);

793 #ifde‡
ATOMIC_UNCOLLECTABLE


794 
AUNCOLLECTABLE
:

795 
ªsu…
 = 
	`GC_debug_mÆloc_©omic_uncﬁÀ˘abÀ
(
lb
, 
OPT_RA
 
s
, 
i
);

799 
	`GC_îr_¥ötf
("GC_debug_realloc:Éncountered bad kind\n");

800 
	`ABORT
("bad kind");

802 #ifde‡
SHORT_DBG_HDRS


803 
ﬁd_sz
 = 
	`GC_size
(
ba£
Ë- (
oh
);

805 
˛obbîed
 = 
	`GC_check_™nŸ©ed_obj
((
oh
 *)
ba£
);

806 i‡(
˛obbîed
 != 0) {

807 
	`GC_îr_¥ötf
("GC_debug_realloc: found smashedÜocationát ");

808 
	`GC_¥öt_smashed_obj
(
p
, 
˛obbîed
);

810 
ﬁd_sz
 = ((
oh
 *)
ba£
Ë-> 
oh_sz
;

812 i‡(
ﬁd_sz
 < 
c›y_sz
) copy_sz = old_sz;

813 i‡(
ªsu…
 == 0) (0);

814 
	`BCOPY
(
p
, 
ªsu…
, 
c›y_sz
);

815 
	`GC_debug_‰ì
(
p
);

816 (
ªsu…
);

817 
	}
}

819 #i‚de‡
SHORT_DBG_HDRS


825 
	#MAX_SMASHED
 20

	)

826 
±r_t
 
	gGC_smashed
[
MAX_SMASHED
];

827 
	gGC_n_smashed
 = 0;

829 
	$GC_add_smashed
(
±r_t
 
smashed
)

831 
	`GC_ASSERT
(
	`GC_is_m¨ked
(
	`GC_ba£
(
smashed
)));

832 
GC_smashed
[
GC_n_smashed
] = 
smashed
;

833 i‡(
GC_n_smashed
 < 
MAX_SMASHED
 - 1) ++GC_n_smashed;

836 
GC_have_îr‹s
 = 
TRUE
;

837 
	}
}

840 
	$GC_¥öt_Æl_smashed_¥oc
()

842 
i
;

844 
	`GC_ASSERT
(
	`I_DONT_HOLD_LOCK
());

845 i‡(
GC_n_smashed
 == 0) ;

846 
	`GC_îr_¥ötf
("GC_check_heap_block: found smashed heap objects:\n");

847 
i
 = 0; i < 
GC_n_smashed
; ++i) {

848 
	`GC_¥öt_smashed_obj
((
±r_t
)
	`GC_ba£
(
GC_smashed
[
i
]Ë+ (
oh
),

849 
GC_smashed
[
i
]);

850 
GC_smashed
[
i
] = 0;

852 
GC_n_smashed
 = 0;

853 
	}
}

858 
	$GC_check_hóp_block
(
hblk
 *
hbp
, 
w‹d
 
dummy
)

860 
hblkhdr
 * 
hhdr
 = 
	`HDR
(
hbp
);

861 
size_t
 
sz
 = 
hhdr
 -> 
hb_sz
;

862 
size_t
 
bô_no
;

863 *
p
, *
∂im
;

865 
p
 = 
hbp
->
hb_body
;

866 
bô_no
 = 0;

867 i‡(
sz
 > 
MAXOBJBYTES
) {

868 
∂im
 = 
p
;

870 
∂im
 = 
hbp
->
hb_body
 + 
HBLKSIZE
 - 
sz
;

873  
p
 <
∂im
 ) {

874 if–
	`m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
)

875 && 
	`GC_HAS_DEBUG_INFO
((
±r_t
)
p
)) {

876 
±r_t
 
˛obbîed
 = 
	`GC_check_™nŸ©ed_obj
((
oh
 *)
p
);

878 i‡(
˛obbîed
 !0Ë
	`GC_add_smashed
(clobbered);

880 
bô_no
 +
	`MARK_BIT_OFFSET
(
sz
);

881 
p
 +
sz
;

883 
	}
}

888 
	$GC_check_hóp_¥oc
()

890 #i‚de‡
SMALL_CONFIG


892 
	`GC_STATIC_ASSERT
(((
oh
Ë& (
GRANULE_BYTES
 - 1)) == 0);

895 
	`GC_≠∂y_to_Æl_blocks
(
GC_check_hóp_block
, (
w‹d
)0);

896 
	}
}

900 
	s˛osuª
 {

901 
GC_föÆiz©i⁄_¥oc
 
	m˛_‚
;

902 * 
	m˛_d©a
;

905 * 
	$GC_make_˛osuª
(
GC_föÆiz©i⁄_¥oc
 
‚
, * 
d©a
)

907 
˛osuª
 * 
ªsu…
 =

908 #ifde‡
DBG_HDRS_ALL


909 (
˛osuª
 *Ë
	`GC_debug_mÆloc
( (closure),

910 
GC_EXTRAS
);

912 (
˛osuª
 *Ë
	`GC_mÆloc
( (closure));

915 
ªsu…
 -> 
˛_‚
 = 
‚
;

916 
ªsu…
 -> 
˛_d©a
 = 
d©a
;

917 ((*)
ªsu…
);

918 
	}
}

920 
	$GC_debug_övoke_föÆizî
(* 
obj
, * 
d©a
)

922 
˛osuª
 * 
˛
 = (˛osuª *Ë
d©a
;

924 (*(
˛
 -> 
˛_‚
))((*)((*)
obj
 + (
oh
)), c»-> 
˛_d©a
);

925 
	}
}

928 
	$°‹e_ﬁd
 (*
obj
, 
GC_föÆiz©i⁄_¥oc
 
my_ﬁd_‚
,

929 
˛osuª
 *
my_ﬁd_cd
, 
GC_föÆiz©i⁄_¥oc
 *
o‚
,

930 **
ocd
)

932 i‡(0 !
my_ﬁd_‚
) {

933 i‡(
my_ﬁd_‚
 !
GC_debug_övoke_föÆizî
) {

934 
	`GC_îr_¥ötf
("Debuggable objectát %p hadÇon-debug finalizer.\n",

935 
obj
);

938 i‡(
o‚
Ë*o‚ = 
my_ﬁd_cd
 -> 
˛_‚
;

939 i‡(
ocd
Ë*ocd = 
my_ﬁd_cd
 -> 
˛_d©a
;

942 i‡(
o‚
) *ofn = 0;

943 i‡(
ocd
) *ocd = 0;

945 
	}
}

947 
	$GC_debug_ªgi°î_föÆizî
(* 
obj
, 
GC_föÆiz©i⁄_¥oc
 
‚
,

948 * 
cd
, 
GC_föÆiz©i⁄_¥oc
 *
o‚
,

949 * *
ocd
)

951 
GC_föÆiz©i⁄_¥oc
 
my_ﬁd_‚
;

952 * 
my_ﬁd_cd
;

953 
±r_t
 
ba£
 = 
	`GC_ba£
(
obj
);

954 i‡(0 =
ba£
) ;

955 i‡((
±r_t
)
obj
 - 
ba£
 !(
oh
)) {

956 
	`GC_îr_¥ötf
(

958 
obj
);

960 i‡(0 =
‚
) {

961 
	`GC_ªgi°î_föÆizî
(
ba£
, 0, 0, &
my_ﬁd_‚
, &
my_ﬁd_cd
);

963 
	`GC_ªgi°î_föÆizî
(
ba£
, 
GC_debug_övoke_föÆizî
,

964 
	`GC_make_˛osuª
(
‚
,
cd
), &
my_ﬁd_‚
, &
my_ﬁd_cd
);

966 
	`°‹e_ﬁd
(
obj
, 
my_ﬁd_‚
, (
˛osuª
 *)
my_ﬁd_cd
, 
o‚
, 
ocd
);

967 
	}
}

969 
	gGC_debug_ªgi°î_föÆizî_no_‹dî


970 (* 
	gobj
, 
GC_föÆiz©i⁄_¥oc
 
	g‚
,

971 * 
	gcd
, 
GC_föÆiz©i⁄_¥oc
 *
	go‚
,

972 * *
	gocd
)

974 
GC_föÆiz©i⁄_¥oc
 
	gmy_ﬁd_‚
;

975 * 
	gmy_ﬁd_cd
;

976 
±r_t
 
	gba£
 = 
GC_ba£
(
obj
);

977 i‡(0 =
ba£
) ;

978 i‡((
	g±r_t
)
	gobj
 - 
	gba£
 !(
oh
)) {

979 
GC_îr_¥ötf
(

982 
obj
);

984 i‡(0 =
‚
) {

985 
GC_ªgi°î_föÆizî_no_‹dî
(
ba£
, 0, 0, &
my_ﬁd_‚
, &
my_ﬁd_cd
);

987 
GC_ªgi°î_föÆizî_no_‹dî
(
ba£
, 
GC_debug_övoke_föÆizî
,

988 
GC_make_˛osuª
(
‚
,
cd
), &
my_ﬁd_‚
,

989 &
my_ﬁd_cd
);

991 
°‹e_ﬁd
(
obj
, 
my_ﬁd_‚
, (
˛osuª
 *)
my_ﬁd_cd
, 
o‚
, 
ocd
);

994 
	gGC_debug_ªgi°î_föÆizî_uƒóchabÀ


995 (* 
	gobj
, 
GC_föÆiz©i⁄_¥oc
 
	g‚
,

996 * 
	gcd
, 
GC_föÆiz©i⁄_¥oc
 *
	go‚
,

997 * *
	gocd
)

999 
GC_föÆiz©i⁄_¥oc
 
	gmy_ﬁd_‚
;

1000 * 
	gmy_ﬁd_cd
;

1001 
±r_t
 
	gba£
 = 
GC_ba£
(
obj
);

1002 i‡(0 =
ba£
) ;

1003 i‡((
	g±r_t
)
	gobj
 - 
	gba£
 !(
oh
)) {

1004 
GC_îr_¥ötf
(

1007 
obj
);

1009 i‡(0 =
‚
) {

1010 
GC_ªgi°î_föÆizî_uƒóchabÀ
(
ba£
, 0, 0, &
my_ﬁd_‚
, &
my_ﬁd_cd
);

1012 
GC_ªgi°î_föÆizî_uƒóchabÀ
(
ba£
, 
GC_debug_övoke_föÆizî
,

1013 
GC_make_˛osuª
(
‚
,
cd
), &
my_ﬁd_‚
,

1014 &
my_ﬁd_cd
);

1016 
°‹e_ﬁd
(
obj
, 
my_ﬁd_‚
, (
˛osuª
 *)
my_ﬁd_cd
, 
o‚
, 
ocd
);

1019 
	gGC_debug_ªgi°î_föÆizî_ign‹e_£lf


1020 (* 
	gobj
, 
GC_föÆiz©i⁄_¥oc
 
	g‚
,

1021 * 
	gcd
, 
GC_föÆiz©i⁄_¥oc
 *
	go‚
,

1022 * *
	gocd
)

1024 
GC_föÆiz©i⁄_¥oc
 
	gmy_ﬁd_‚
;

1025 * 
	gmy_ﬁd_cd
;

1026 
±r_t
 
	gba£
 = 
GC_ba£
(
obj
);

1027 i‡(0 =
ba£
) ;

1028 i‡((
	g±r_t
)
	gobj
 - 
	gba£
 !(
oh
)) {

1029 
GC_îr_¥ötf
(

1031 "n⁄-ba£-poöã∏%p\n", 
obj
);

1033 i‡(0 =
‚
) {

1034 
GC_ªgi°î_föÆizî_ign‹e_£lf
(
ba£
, 0, 0, &
my_ﬁd_‚
, &
my_ﬁd_cd
);

1036 
GC_ªgi°î_föÆizî_ign‹e_£lf
(
ba£
, 
GC_debug_övoke_föÆizî
,

1037 
GC_make_˛osuª
(
‚
,
cd
), &
my_ﬁd_‚
,

1038 &
my_ﬁd_cd
);

1040 
°‹e_ﬁd
(
obj
, 
my_ﬁd_‚
, (
˛osuª
 *)
my_ﬁd_cd
, 
o‚
, 
ocd
);

1043 #ifde‡
GC_ADD_CALLER


1044 
	#RA
 
GC_RETURN_ADDR
,

	)

1046 
	#RA


	)

1049 * 
	$GC_debug_mÆloc_ª∂a˚mít
(
size_t
 
lb
)

1051  
	`GC_debug_mÆloc
(
lb
, 
RA
 "unknown", 0);

1052 
	}
}

1054 * 
	$GC_debug_ªÆloc_ª∂a˚mít
(*
p
, 
size_t
 
lb
)

1056  
	`GC_debug_ªÆloc
(
p
, 
lb
, 
RA
 "unknown", 0);

1057 
	}
}

	@dyn_load.c

29 #i‡(
deföed
(
__löux__
Ë|| deföed(
__GLIBC__
Ë|| deföed(
__GNU__
)) \

30 && !
	$deföed
(
_GNU_SOURCE
)

32 
	#_GNU_SOURCE


	)

34 #i‡!
	`deföed
(
MACOS
Ë&& !deföed(
_WIN32_WCE
)

35 
	~<sys/ty≥s.h
>

37 
	~"¥iv©e/gc_¥iv.h
"

40 #i‡(
	`deföed
(
GC_PTHREADS
Ë|| deföed(
GC_SOLARIS_THREADS
)) \

41 && 
	`deföed
(
dl›í
Ë&& !
	$deföed
(
GC_USE_LD_WRAP
)

47 #unde‡
dl›í


48 
	#GC_mu°_ª°‹e_ªdeföed_dl›í


	)

50 #unde‡
GC_mu°_ª°‹e_ªdeföed_dl›í


55 (*
GC_has_°©ic_roŸs
)(c⁄° *, *, 
size_t
);

58 #i‡(
	`deföed
(
DYNAMIC_LOADING
Ë|| deföed(
MSWIN32
Ë|| deföed(
MSWINCE
)) \

59 && !
	$deföed
(
PCR
)

60 #i‡!
	`deföed
(
SOLARISDL
Ë&& !deföed(
IRIX5
) && \

61 !
	`deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
) && \

62 !(
	`deföed
(
ALPHA
Ë&& deföed(
OSF1
)) && \

63 !
	`deföed
(
HPUX
Ë&& !(deföed(
LINUX
Ë&& deföed(
__ELF__
)) && \

64 !
	`deföed
(
AIX
Ë&& !deföed(
SCO_ELF
Ë&& !deföed(
DGUX
) && \

65 !(
	`deföed
(
FREEBSD
Ë&& deföed(
__ELF__
)) && \

66 !(
	`deföed
(
NETBSD
Ë&& deföed(
__ELF__
)Ë&& !deföed(
HURD
) && \

67 !
	`deföed
(
DARWIN
Ë&& !deföed(
CYGWIN32
)

68 --> 
We
 
⁄ly
 
know
 
how
 
to
 
föd
 
d©a
 
£gmíts
 
of
 
dy«mic
 
libørõs
 
the


69 --> 
above
. 
Addôi⁄Æ
 
SVR4
 
v¨ü¡s
 
might
 
nŸ
 
be
 
too


70 --> 
h¨d
 
to
 
add
.

73 
	~<°dio.h
>

74 #ifde‡
SOLARISDL


75 
	~<sys/ñf.h
>

76 
	~<dlf˙.h
>

77 
	~<lök.h
>

80 #i‡
	`deföed
(
NETBSD
)

81 
	~<machöe/ñf_machdï.h
>

82 
	#ELFSIZE
 
ARCH_ELFSIZE


	)

85 #i‡
	`deföed
(
LINUX
Ë&& deföed(
__ELF__
Ë|| deföed(
SCO_ELF
) || \

86 (
	`deföed
(
FREEBSD
Ë&& deföed(
__ELF__
)Ë|| deföed(
DGUX
) || \

87 (
	`deföed
(
NETBSD
Ë&& deföed(
__ELF__
)Ë|| 
	$deföed
(
HURD
)

88 
	~<°ddef.h
>

89 
	~<ñf.h
>

90 
	~<lök.h
>

95 #i‚de‡
ElfW


96 #i‡
	`deföed
(
FREEBSD
)

97 #i‡
__ELF_WORD_SIZE
 == 32

98 
	#ElfW
(
ty≥
Ë
Elf32_
##
	)
type

100 
	#ElfW
(
ty≥
Ë
Elf64_
##
	)
type

102 #ñi‡
	`deföed
(
NETBSD
)

103 #i‡
ELFSIZE
 == 32

104 
	#ElfW
(
ty≥
Ë
Elf32_
##
	)
type

106 
	#ElfW
(
ty≥
Ë
Elf64_
##
	)
type

109 #i‡!
	`deföed
(
ELF_CLASS
Ë|| ELF_CLASS =
ELFCLASS32


110 
	#ElfW
(
ty≥
Ë
Elf32_
##
	)
type

112 
	#ElfW
(
ty≥
Ë
Elf64_
##
	)
type

117 #i‡
	`deföed
(
SOLARISDL
Ë&& !deföed(
USE_PROC_FOR_LIBRARIES
)

119 #ifde‡
LINT


120 
Elf32_Dyn
 
_DYNAMIC
;

123 
lök_m≠
 *

124 
	$GC_Fú°DLO≥√dLökM≠
()

126 
	`ElfW
(
Dyn
Ë
_DYNAMIC
;

127 
	`ElfW
(
Dyn
Ë*
dp
;

128 
r_debug
 *
r
;

129 
lök_m≠
 * 
ˇchedResu…
 = 0;

130 
	`ElfW
(
Dyn
Ë*
dynSåu˘uªAddr
 = 0;

133 #ifde‡
SUNOS53_SHARED_LIB


138 if–
dynSåu˘uªAddr
 == 0 ) {

139 * 
°¨tupSyms
 = 
	`dl›í
(0, 
RTLD_LAZY
);

140 
dynSåu˘uªAddr
 = (
	`ElfW
(
Dyn
)*)
	`dlsym
(
°¨tupSyms
, "_DYNAMIC");

143 
dynSåu˘uªAddr
 = &
_DYNAMIC
;

146 if–
dynSåu˘uªAddr
 == 0) {

149 if–
ˇchedResu…
 == 0 ) {

150 
èg
;

151  
dp
 = ((
	`ElfW
(
Dyn
Ë*)(&
_DYNAMIC
)); (
èg
 = dp->
d_èg
) != 0; dp++ ) {

152 if–
èg
 =
DT_DEBUG
 ) {

153 
lök_m≠
 *
lm


154 ((
r_debug
 *)(
dp
->
d_un
.
d_±r
))->
r_m≠
;

155 if–
lm
 !0 ) 
ˇchedResu…
 =Üm->
l_√xt
;

160  
ˇchedResu…
;

161 
	}
}

166 #i‡
deföed
(
GC_mu°_ª°‹e_ªdeföed_dl›í
)

167 
	#dl›í
 
GC_dl›í


	)

170 #i‡
deföed
(
SOLARISDL
)

172 #i‡!
deföed
(
PCR
Ë&& !deföed(
GC_SOLARIS_THREADS
Ë&& deföed(
THREADS
)

173 --> 
fix
 
mutuÆ
 
ex˛usi⁄
 
wôh
 
	gdl›í


176 #i‚de‡
USE_PROC_FOR_LIBRARIES


177 
	$GC_ªgi°î_dy«mic_libørõs
()

179 
lök_m≠
 *
lm
 = 
	`GC_Fú°DLO≥√dLökM≠
();

182 
lm
 = 
	`GC_Fú°DLO≥√dLökM≠
();

183 
lm
 !(
lök_m≠
 *Ë0;Üm =Üm->
l_√xt
)

185 
	`ElfW
(
Ehdr
Ë* 
e
;

186 
	`ElfW
(
Phdr
Ë* 
p
;

187 
off£t
;

188 * 
°¨t
;

189 
i
;

191 
e
 = (
	`ElfW
(
Ehdr
Ë*Ë
lm
->
l_addr
;

192 
p
 = ((
	`ElfW
(
Phdr
Ë*)(((*)(
e
)Ë+É->
e_phoff
));

193 
off£t
 = (()(
lm
->
l_addr
));

194  
i
 = 0; i < ()(
e
->
e_phnum
); ((i++),(
p
++)) ) {

195  
p
->
p_ty≥
 ) {

196 
PT_LOAD
:

198 if–!(
p
->
p_Êags
 & 
PF_W
) ) ;

199 
°¨t
 = ((*)(
p
->
p_vaddr
)Ë+ 
off£t
;

200 
	`GC_add_roŸs_ö√r
(

201 
°¨t
,

202 
°¨t
 + 
p
->
p_memsz
,

203 
TRUE


212 
	}
}

217 #i‡
deföed
(
LINUX
Ë&& deföed(
__ELF__
Ë|| deföed(
SCO_ELF
) || \

218 (
deföed
(
FREEBSD
Ë&& deföed(
__ELF__
)Ë|| deföed(
DGUX
) || \

219 (
deföed
(
NETBSD
Ë&& deföed(
__ELF__
)Ë|| 
	$deföed
(
HURD
)

222 #ifde‡
USE_PROC_FOR_LIBRARIES


224 
	~<°rög.h
>

226 
	~<sys/°©.h
>

227 
	~<f˙é.h
>

228 
	~<uni°d.h
>

230 
	#MAPS_BUF_SIZE
 (32*1024)

	)

232 
ssize_t
 
	`GC_ª≥©_ªad
(
fd
, *
buf
, 
size_t
 
cou¡
);

236 *
	`GC_∑r£_m≠_íåy
(*
buf_±r
, 
±r_t
 *
°¨t
,Öå_à*
íd
,

237 **
¥Ÿ
, *
maj_dev
,

238 **
m≠pög_«me
);

239 *
	`GC_gë_m≠s
();

248 
	$s‹t_hóp_£˘s
(
HópSe˘
 *
ba£
, 
size_t
 
numbî_of_ñemíts
)

250 
sig√d_w‹d
 
n
 = (sig√d_w‹d)
numbî_of_ñemíts
;

251 
sig√d_w‹d
 
ns‹ãd
 = 1;

252 
sig√d_w‹d
 
i
;

254 
ns‹ãd
 < 
n
) {

255 
ns‹ãd
 < 
n
 &&

256 
ba£
[
ns‹ãd
-1].
hs_°¨t
 < base[nsorted].hs_start)

257 ++
ns‹ãd
;

258 i‡(
ns‹ãd
 =
n
) ;

259 
	`GC_ASSERT
(
ba£
[
ns‹ãd
-1].
hs_°¨t
 > base[nsorted].hs_start);

260 
i
 = 
ns‹ãd
 - 1;

261 
i
 >0 && 
ba£
[i].
hs_°¨t
 > base[i+1].hs_start) {

262 
HópSe˘
 
tmp
 = 
ba£
[
i
];

263 
ba£
[
i
] = base[i+1];

264 
ba£
[
i
+1] = 
tmp
;

265 --
i
;

267 
	`GC_ASSERT
(
ba£
[
ns‹ãd
-1].
hs_°¨t
 < base[nsorted].hs_start);

268 ++
ns‹ãd
;

270 
	}
}

272 
w‹d
 
	$GC_ªgi°î_m≠_íåõs
(*
m≠s
)

274 *
¥Ÿ
;

275 *
buf_±r
 = 
m≠s
;

276 
cou¡
;

277 
±r_t
 
°¨t
, 
íd
;

278 
maj_dev
;

279 
±r_t
 
Àa°_ha
, 
gª©e°_ha
;

280 
i
;

281 
±r_t
 
d©a°¨t
 = (±r_t)(
DATASTART
);

283 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

284 
	`s‹t_hóp_£˘s
(
GC_our_mem‹y
, 
GC_n_mem‹y
);

285 
Àa°_ha
 = 
GC_our_mem‹y
[0].
hs_°¨t
;

286 
gª©e°_ha
 = 
GC_our_mem‹y
[
GC_n_mem‹y
-1].
hs_°¨t


287 + 
GC_our_mem‹y
[
GC_n_mem‹y
-1].
hs_byãs
;

290 
buf_±r
 = 
	`GC_∑r£_m≠_íåy
(buf_±r, &
°¨t
, &
íd
, &
¥Ÿ
, &
maj_dev
, 0);

291 i‡(
buf_±r
 =
NULL
)  1;

292 i‡(
¥Ÿ
[1] == 'w') {

296 i‡(
°¨t
 <
GC_°ackbŸtom
 && 
íd
 >= GC_stackbottom) {

300 #ifde‡
THREADS


307 i‡(
	`GC_£gmít_is_thªad_°ack
(
°¨t
, 
íd
)) ;

326 i‡(
íd
 <
Àa°_ha
 || 
°¨t
 >
gª©e°_ha
) {

328 
	`GC_add_roŸs_ö√r
((*)
°¨t
, (*)
íd
, 
TRUE
);

332 
i
 = 0;

333 
GC_our_mem‹y
[
i
].
hs_°¨t
 + GC_our_mem‹y[i].
hs_byãs


334 < 
°¨t
)

335 ++
i
;

336 
	`GC_ASSERT
(
i
 < 
GC_n_mem‹y
);

337 i‡(
GC_our_mem‹y
[
i
].
hs_°¨t
 <
°¨t
) {

338 
°¨t
 = 
GC_our_mem‹y
[
i
].
hs_°¨t


339 + 
GC_our_mem‹y
[
i
].
hs_byãs
;

340 ++
i
;

342 
i
 < 
GC_n_mem‹y
 && 
GC_our_mem‹y
[i].
hs_°¨t
 < 
íd


343 && 
°¨t
 < 
íd
) {

344 i‡((*)
°¨t
 < 
GC_our_mem‹y
[
i
].
hs_°¨t
)

345 
	`GC_add_roŸs_ö√r
((*)
°¨t
,

346 
GC_our_mem‹y
[
i
].
hs_°¨t
, 
TRUE
);

347 
°¨t
 = 
GC_our_mem‹y
[
i
].
hs_°¨t


348 + 
GC_our_mem‹y
[
i
].
hs_byãs
;

349 ++
i
;

351 i‡(
°¨t
 < 
íd
)

352 
	`GC_add_roŸs_ö√r
((*)
°¨t
, (*)
íd
, 
TRUE
);

356 
	}
}

358 
	$GC_ªgi°î_dy«mic_libørõs
()

360 i‡(!
	`GC_ªgi°î_m≠_íåõs
(
	`GC_gë_m≠s
()))

361 
	`ABORT
("FailedÅoÑead /proc forÜibraryÑegistration.");

362 
	}
}

365 
GC_boﬁ
 
	$GC_ªgi°î_maö_°©ic_d©a
()

367  
FALSE
;

368 
	}
}

370 
	#HAVE_REGISTER_MAIN_STATIC_DATA


	)

374 #i‡!
deföed
(
USE_PROC_FOR_LIBRARIES
)

379 #i‡(
deföed
(
LINUX
Ë|| deföed (
__GLIBC__
)) \

380 && (
	g__GLIBC__
 > 2 || (__GLIBC__ =2 && 
__GLIBC_MINOR__
 > 2) \

381 || (
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 =2 && 
	$deföed
(
DT_CONFIG
)))

386 
	#HAVE_DL_ITERATE_PHDR


	)

388 
	$GC_ªgi°î_dy∆ib_ˇŒback
(
öfo
, 
size
, 
±r
)

389 
dl_phdr_öfo
 * 
öfo
;

390 
size_t
 
size
;

391 * 
±r
;

393 c⁄° 
	`ElfW
(
Phdr
Ë* 
p
;

394 * 
°¨t
;

395 
i
;

398 i‡(
size
 < 
	`off£tof
 (
dl_phdr_öfo
, 
dÕi_phnum
)

399 +  (
öfo
->
dÕi_phnum
))

402 
p
 = 
öfo
->
dÕi_phdr
;

403  
i
 = 0; i < ()(
öfo
->
dÕi_phnum
); ((i++),(
p
++)) ) {

404  
p
->
p_ty≥
 ) {

405 
PT_LOAD
:

407 if–!(
p
->
p_Êags
 & 
PF_W
) ) ;

408 
°¨t
 = ((*)(
p
->
p_vaddr
)Ë+ 
öfo
->
dÕi_addr
;

410 i‡(
GC_has_°©ic_roŸs


411 && !
	`GC_has_°©ic_roŸs
(
öfo
->
dÕi_«me
, 
°¨t
, 
p
->
p_memsz
))

414 
	`GC_add_roŸs_ö√r
(
°¨t
, sèπ + 
p
->
p_memsz
, 
TRUE
);

422 * (*)
±r
 = 1;

424 
	}
}

428 #¥agm®
wók
 
dl_ôî©e_phdr


430 
GC_boﬁ
 
	$GC_ªgi°î_dy«mic_libørõs_dl_ôî©e_phdr
()

432 i‡(
dl_ôî©e_phdr
) {

433 
did_somëhög
 = 0;

434 
	`dl_ôî©e_phdr
(
GC_ªgi°î_dy∆ib_ˇŒback
, &
did_somëhög
);

435 i‡(!
did_somëhög
) {

438 
	`GC_add_roŸs_ö√r
(
DATASTART
, (*)(
DATAEND
), 
TRUE
);

439 #i‡
	`deföed
(
DATASTART2
)

440 
	`GC_add_roŸs_ö√r
(
DATASTART2
, (*)(
DATAEND2
), 
TRUE
);

444  
TRUE
;

446  
FALSE
;

448 
	}
}

451 
GC_boﬁ
 
	$GC_ªgi°î_maö_°©ic_d©a
()

453  (
dl_ôî©e_phdr
 == 0);

454 
	}
}

456 
	#HAVE_REGISTER_MAIN_STATIC_DATA


	)

468 #i‡
deföed
(
NETBSD
)

469 
	~<sys/exec_ñf.h
>

471 #i‚de‡
DT_DEBUG


472 
	#DT_DEBUG
 21

	)

474 #i‚de‡
PT_LOAD


475 
	#PT_LOAD
 1

	)

477 #i‚de‡
PF_W


478 
	#PF_W
 2

	)

481 
	~<ñf.h
>

483 
	~<lök.h
>

487 #ifde‡
__GNUC__


488 #¥agm®
wók
 
_DYNAMIC


490 
	$ElfW
(
Dyn
Ë
_DYNAMIC
[];

492 
lök_m≠
 *

493 
	$GC_Fú°DLO≥√dLökM≠
()

495 
	`ElfW
(
Dyn
Ë*
dp
;

496 
lök_m≠
 *
ˇchedResu…
 = 0;

498 if–
_DYNAMIC
 == 0) {

501 if–
ˇchedResu…
 == 0 ) {

502 
èg
;

503  
dp
 = 
_DYNAMIC
; (
èg
 = dp->
d_èg
) != 0; dp++ ) {

504 if–
èg
 =
DT_DEBUG
 ) {

505 
lök_m≠
 *
lm


506 ((
r_debug
 *)(
dp
->
d_un
.
d_±r
))->
r_m≠
;

507 if–
lm
 !0 ) 
ˇchedResu…
 =Üm->
l_√xt
;

512  
ˇchedResu…
;

513 
	}
}

516 
	$GC_ªgi°î_dy«mic_libørõs
()

518 
lök_m≠
 *
lm
;

521 #ifde‡
HAVE_DL_ITERATE_PHDR


522 i‡(
	`GC_ªgi°î_dy«mic_libørõs_dl_ôî©e_phdr
()) {

526 
lm
 = 
	`GC_Fú°DLO≥√dLökM≠
();

527 
lm
 = 
	`GC_Fú°DLO≥√dLökM≠
();

528 
lm
 !(
lök_m≠
 *Ë0;Üm =Üm->
l_√xt
)

530 
	`ElfW
(
Ehdr
Ë* 
e
;

531 
	`ElfW
(
Phdr
Ë* 
p
;

532 
off£t
;

533 * 
°¨t
;

534 
i
;

536 
e
 = (
	`ElfW
(
Ehdr
Ë*Ë
lm
->
l_addr
;

537 
p
 = ((
	`ElfW
(
Phdr
Ë*)(((*)(
e
)Ë+É->
e_phoff
));

538 
off£t
 = (()(
lm
->
l_addr
));

539  
i
 = 0; i < ()(
e
->
e_phnum
); ((i++),(
p
++)) ) {

540  
p
->
p_ty≥
 ) {

541 
PT_LOAD
:

543 if–!(
p
->
p_Êags
 & 
PF_W
) ) ;

544 
°¨t
 = ((*)(
p
->
p_vaddr
)Ë+ 
off£t
;

545 
	`GC_add_roŸs_ö√r
(
°¨t
, sèπ + 
p
->
p_memsz
, 
TRUE
);

553 
	}
}

559 #i‡
deföed
(
IRIX5
Ë|| (deföed(
USE_PROC_FOR_LIBRARIES
Ë&& !deföed(
LINUX
))

561 
	~<sys/¥ocfs.h
>

562 
	~<sys/°©.h
>

563 
	~<f˙é.h
>

564 
	~<ñf.h
>

565 
	~<î∫o.h
>

566 
	~<sig«l.h
>

567 #i‚de‡
_sig¨gs


568 
	#IRIX6


	)

571 * 
GC_roŸs_¥e£¡
();

579 
	$GC_ªgi°î_dy«mic_libørõs
()

581 
fd
 = -1;

582 
buf
[30];

583 
¥m≠_t
 * 
addr_m≠
 = 0;

584 
cuºít_sz
 = 0;

585 
√eded_sz
;

586 
i
;

587 
Êags
;

588 
±r_t
 
°¨t
;

589 
±r_t
 
limô
;

590 
±r_t
 
hóp_°¨t
 = (±r_t)
HEAP_START
;

591 
±r_t
 
hóp_íd
 = 
hóp_°¨t
;

593 #ifde‡
SOLARISDL


594 
	#MA_PHYS
 0

	)

597 i‡(
fd
 < 0) {

598 
	`•rötf
(
buf
, "/¥oc/%d", 
	`gëpid
());

601 
fd
 = 
	`›í
(
buf
, 
O_RDONLY
);

602 i‡(
fd
 < 0) {

603 
	`ABORT
("/proc open failed");

606 i‡(
	`io˘l
(
fd
, 
PIOCNMAP
, &
√eded_sz
) < 0) {

607 
	`GC_îr_¥ötf
("fd = %d,Éºnÿ%d\n", 
fd
, 
î∫o
);

608 
	`ABORT
("/proc PIOCNMAP ioctl failed");

610 i‡(
√eded_sz
 >
cuºít_sz
) {

611 
cuºít_sz
 = 
√eded_sz
 * 2 + 1;

613 
addr_m≠
 = (
¥m≠_t
 *)
	`GC_s¸©ch_Æloc
((
w‹d
)

614 (
cuºít_sz
 * (
¥m≠_t
)));

616 i‡(
	`io˘l
(
fd
, 
PIOCMAP
, 
addr_m≠
) < 0) {

617 
	`GC_îr_¥ötf
("fd = %d,Érrno = %d,Çeeded_sz = %d,áddr_map = 0x%X\n",

618 
fd
, 
î∫o
, 
√eded_sz
, 
addr_m≠
);

619 
	`ABORT
("/proc PIOCMAP ioctl failed");

621 i‡(
GC_n_hóp_£˘s
 > 0) {

622 
hóp_íd
 = 
GC_hóp_£˘s
[
GC_n_hóp_£˘s
-1].
hs_°¨t


623 + 
GC_hóp_£˘s
[
GC_n_hóp_£˘s
-1].
hs_byãs
;

624 i‡(
hóp_íd
 < 
GC_s¸©ch_œ°_íd_±r
) heap_end = GC_scratch_last_end_ptr;

626 
i
 = 0; i < 
√eded_sz
; i++) {

627 
Êags
 = 
addr_m≠
[
i
].
¥_mÊags
;

628 i‡((
Êags
 & (
MA_BREAK
 | 
MA_STACK
 | 
MA_PHYS


629 | 
MA_FETCHOP
 | 
MA_NOTCACHED
)Ë!0Ë
úªÀv™t
;

630 i‡((
Êags
 & (
MA_READ
 | 
MA_WRITE
)) != (MA_READ | MA_WRITE))

631 
úªÀv™t
;

637 
°¨t
 = (
±r_t
)(
addr_m≠
[
i
].
¥_vaddr
);

638 i‡(
	`GC_roŸs_¥e£¡
(
°¨t
)Ë
úªÀv™t
;

639 i‡(
°¨t
 < 
hóp_íd
 && sèπ >
hóp_°¨t
)

640 
úªÀv™t
;

641 #ifde‡
MMAP_STACKS


642 i‡(
	`GC_is_thªad_°ack
(
°¨t
)Ë
úªÀv™t
;

645 
limô
 = 
°¨t
 + 
addr_m≠
[
i
].
¥_size
;

649 #i‚de‡
IRIX6


650 i‡(
addr_m≠
[
i
].
¥_off
 =0 && 
	`°∫cmp
(
°¨t
, 
ELFMAG
, 4) == 0) {

653 
ˇddr_t
 
¨g
;

654 
obj
;

655 
	#MAP_IRR_SZ
 10

	)

656 
±r_t
 
m≠_úr
[
MAP_IRR_SZ
];

658 
n_úr
 = 0;

659 
°©
 
buf
;

660 
i
;

662 
i
 = 0; i < 
n_úr
; i++) {

663 i‡(
m≠_úr
[
i
] =
°¨t
Ë
úªÀv™t
;

665 
¨g
 = (
ˇddr_t
)
°¨t
;

666 
obj
 = 
	`io˘l
(
fd
, 
PIOCOPENM
, &
¨g
);

667 i‡(
obj
 >= 0) {

668 
	`f°©
(
obj
, &
buf
);

669 
	`˛o£
(
obj
);

670 i‡((
buf
.
°_mode
 & 0111) != 0) {

671 i‡(
n_úr
 < 
MAP_IRR_SZ
) {

672 
m≠_úr
[
n_úr
++] = 
°¨t
;

674 
úªÀv™t
;

679 
	`GC_add_roŸs_ö√r
(
°¨t
, 
limô
, 
TRUE
);

680 
úªÀv™t
: ;

684 i‡(
	`˛o£
(
fd
Ë< 0Ë
	`ABORT
("Couldnt close /proc file");

685 
fd
 = -1;

686 
	}
}

690 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
Ë|| deföed(
CYGWIN32
)

692 
	#WIN32_LEAN_AND_MEAN


	)

693 
	#NOSERVICE


	)

694 
	~<wödows.h
>

695 
	~<°dlib.h
>

700 
GC_boﬁ
 
GC_is_hóp_ba£
 (
±r_t
 
p
);

702 #ifde‡
GC_WIN32_THREADS


703 
GC_gë_√xt_°ack
(*
°¨t
, **
lo
, **
hi
);

704 
	$GC_c⁄d_add_roŸs
(*
ba£
, * 
limô
)

706 * 
cuº_ba£
 = 
ba£
;

707 * 
√xt_°ack_lo
;

708 * 
√xt_°ack_hi
;

710 i‡(
ba£
 =
limô
) ;

712 
	`GC_gë_√xt_°ack
(
cuº_ba£
, &
√xt_°ack_lo
, &
√xt_°ack_hi
);

713 i‡(
√xt_°ack_lo
 >
limô
) ;

714 
	`GC_add_roŸs_ö√r
(
cuº_ba£
, 
√xt_°ack_lo
, 
TRUE
);

715 
cuº_ba£
 = 
√xt_°ack_hi
;

717 i‡(
cuº_ba£
 < 
limô
Ë
	`GC_add_roŸs_ö√r
(cuº_ba£,Üimô, 
TRUE
);

718 
	}
}

720 
	$GC_c⁄d_add_roŸs
(*
ba£
, * 
limô
)

722 
dummy
;

723 * 
°ack_t›


724 (*Ë((
w‹d
)(&
dummy
Ë& ~(
GC_sysöfo
.
dwAŒoˇti⁄Gønuœrôy
-1));

725 i‡(
ba£
 =
limô
) ;

726 i‡(
limô
 > 
°ack_t›
 && 
ba£
 < 
GC_°ackbŸtom
) {

730 
	`GC_add_roŸs_ö√r
(
ba£
, 
limô
, 
TRUE
);

731 
	}
}

734 #ifde‡
MSWINCE


736 
GC_boﬁ
 
	$GC_ªgi°î_maö_°©ic_d©a
()

738  
FALSE
;

739 
	}
}

741 
GC_boﬁ
 
GC_no_wö32_dŒs
;

743 
GC_boﬁ
 
	$GC_ªgi°î_maö_°©ic_d©a
()

745  
GC_no_wö32_dŒs
;

746 
	}
}

749 
	#HAVE_REGISTER_MAIN_STATIC_DATA


	)

751 #ifde‡
DEBUG_VIRTUALQUERY


752 
	$GC_dump_memöfo
(
MEMORY_BASIC_INFORMATION
 *
buf
)

754 
	`GC_¥ötf
("BaseAddress = %lx, AllocationBase = %lx, RegionSize = %lx(%lu)\n",

755 
buf
 -> 
Ba£Addªss
, bu‡-> 
AŒoˇti⁄Ba£
, bu‡-> 
Regi⁄Size
,

756 
buf
 -> 
Regi⁄Size
);

757 
	`GC_¥ötf
("\tAllocationProtect = %lx, State = %lx, Protect = %lx, "

759 
buf
 -> 
AŒoˇti⁄PrŸe˘
, bu‡-> 
Sèã
, bu‡-> 
PrŸe˘
,

760 
buf
 -> 
Ty≥
);

761 
	}
}

764 
GC_boﬁ
 
GC_w¡
;

767 
	$GC_ªgi°î_dy«mic_libørõs
()

769 
MEMORY_BASIC_INFORMATION
 
buf
;

770 
size_t
 
ªsu…
;

771 
DWORD
 
¥Ÿe˘
;

772 
LPVOID
 
p
;

773 * 
ba£
;

774 * 
limô
, * 
√w_limô
;

776 #ifde‡
MSWIN32


777 i‡(
GC_no_wö32_dŒs
) ;

779 
ba£
 = 
limô
 = 
p
 = 
GC_sysöfo
.
ÕMöimumAµliˇti⁄Addªss
;

780 #i‡
	`deföed
(
MSWINCE
Ë&& !deföed(
_WIN32_WCE_EMULATION
)

782 
p
 < (
LPVOID
)0x02000000) {

783 
ªsu…
 = 
	`VútuÆQuîy
(
p
, &
buf
, (buf));

784 i‡(
ªsu…
 == 0) {

786 
√w_limô
 = (*)

787 (((
DWORD
Ë
p
 + 
GC_sysöfo
.
dwAŒoˇti⁄Gønuœrôy
)

788 & ~(
GC_sysöfo
.
dwAŒoˇti⁄Gønuœrôy
-1));

791 
p
 < 
GC_sysöfo
.
ÕMaximumAµliˇti⁄Addªss
) {

792 
ªsu…
 = 
	`VútuÆQuîy
(
p
, &
buf
, (buf));

795 i‡(
ªsu…
 !(
buf
)) {

796 
	`ABORT
("Weird VirtualQueryÑesult");

798 
√w_limô
 = (*)
p
 + 
buf
.
Regi⁄Size
;

799 
¥Ÿe˘
 = 
buf
.
PrŸe˘
;

800 i‡(
buf
.
Sèã
 =
MEM_COMMIT


801 && (
¥Ÿe˘
 =
PAGE_EXECUTE_READWRITE


802 || 
¥Ÿe˘
 =
PAGE_READWRITE
)

803 && !
	`GC_is_hóp_ba£
(
buf
.
AŒoˇti⁄Ba£
)

808 && (
buf
.
Ty≥
 =
MEM_IMAGE
 ||

809 !
GC_w¡
 && 
buf
.
Ty≥
 =
MEM_PRIVATE
)) {

810 #ifde‡
DEBUG_VIRTUALQUERY


811 
	`GC_dump_memöfo
(&
buf
);

813 i‡((*)
p
 !
limô
) {

814 
	`GC_c⁄d_add_roŸs
(
ba£
, 
limô
);

815 
ba£
 = 
p
;

817 
limô
 = 
√w_limô
;

820 i‡(
p
 > (
LPVOID
)
√w_limô
 ) ;

821 
p
 = (
LPVOID
)
√w_limô
;

823 
	`GC_c⁄d_add_roŸs
(
ba£
, 
limô
);

824 
	}
}

828 #i‡
deföed
(
ALPHA
Ë&& deföed(
OSF1
)

830 
	~<lﬂdî.h
>

832 
	$GC_ªgi°î_dy«mic_libørõs
()

834 
°©us
;

835 
ldr_¥o˚ss_t
 
mypid
;

838 
ldr_moduÀ_t
 
moduÀid
 = 
LDR_NULL_MODULE
;

839 
ldr_moduÀ_öfo_t
 
moduÀöfo
;

840 
size_t
 
moduÀöfosize
 = (
moduÀöfo
);

841 
size_t
 
moduÀªtu∫size
;

844 
ldr_ªgi⁄_t
 
ªgi⁄
;

845 
ldr_ªgi⁄_öfo_t
 
ªgi⁄öfo
;

846 
size_t
 
ªgi⁄öfosize
 = (
ªgi⁄öfo
);

847 
size_t
 
ªgi⁄ªtu∫size
;

850 
mypid
 = 
	`ldr_my_¥o˚ss
();

853 
TRUE
) {

856 
°©us
 = 
	`ldr_√xt_moduÀ
(
mypid
, &
moduÀid
);

859 i‡(
moduÀid
 =
LDR_NULL_MODULE
)

864 i‡(
°©us
 != 0 ) {

865 
	`GC_¥ötf
("dy«mic_lﬂd: sètu†%d\n", 
°©us
);

867 *
sys_îæi°
[];

868 
sys_√º
;

869 
î∫o
;

870 i‡(
î∫o
 <
sys_√º
) {

871 
	`GC_¥ötf
("dy«mic_lﬂd: %s\n", 
sys_îæi°
[
î∫o
]);

873 
	`GC_¥ötf
("dy«mic_lﬂd: %d\n", 
î∫o
);

876 
	`ABORT
("ldr_next_module failed");

880 
°©us
 = 
	`ldr_öq_moduÀ
(
mypid
, 
moduÀid
, &
moduÀöfo
,

881 
moduÀöfosize
, &
moduÀªtu∫size
);

882 i‡(
°©us
 != 0 )

883 
	`ABORT
("ldr_inq_module failed");

886 i‡(
moduÀöfo
.
lmi_Êags
 & 
LDR_MAIN
)

889 #ifde‡
DL_VERBOSE


890 
	`GC_¥ötf
("---Module---\n");

891 
	`GC_¥ötf
("ModuÀ ID = %16ld\n", 
moduÀöfo
.
lmi_modid
);

892 
	`GC_¥ötf
("Cou¡ o‡ªgi⁄† = %16d\n", 
moduÀöfo
.
lmi_ƒegi⁄
);

893 
	`GC_¥ötf
("Êag†f‹ moduÀ = %16lx\n", 
moduÀöfo
.
lmi_Êags
);

894 
	`GC_¥ötf
("∑th«mêo‡moduÀ = \"%s\"\n", 
moduÀöfo
.
lmi_«me
);

898 
ªgi⁄
 = 0;Ñegi⁄ < 
moduÀöfo
.
lmi_ƒegi⁄
;Ñegion++) {

901 
°©us
 = 
	`ldr_öq_ªgi⁄
(
mypid
, 
moduÀid
, 
ªgi⁄
, &
ªgi⁄öfo
,

902 
ªgi⁄öfosize
, &
ªgi⁄ªtu∫size
);

903 i‡(
°©us
 != 0 )

904 
	`ABORT
("ldr_inq_region failed");

907 i‡(! (
ªgi⁄öfo
.
Ãi_¥Ÿ
 & 
LDR_W
))

910 #ifde‡
DL_VERBOSE


911 
	`GC_¥ötf
("--- Region ---\n");

912 
	`GC_¥ötf
("RegionÇumber = %16ld\n",

913 
ªgi⁄öfo
.
Ãi_ªgi⁄_no
);

914 
	`GC_¥ötf
("PrŸe˘i⁄ fœg†%016x\n", 
ªgi⁄öfo
.
Ãi_¥Ÿ
);

915 
	`GC_¥ötf
("VútuÆáddªs† = %16p\n", 
ªgi⁄öfo
.
Ãi_vaddr
);

916 
	`GC_¥ötf
("M≠≥dáddªs† = %16p\n", 
ªgi⁄öfo
.
Ãi_m≠addr
);

917 
	`GC_¥ötf
("Regi⁄ sizê = %16ld\n", 
ªgi⁄öfo
.
Ãi_size
);

918 
	`GC_¥ötf
("Regi⁄Çamê = \"%s\"\n", 
ªgi⁄öfo
.
Ãi_«me
);

922 
	`GC_add_roŸs_ö√r
 (

923 (*)
ªgi⁄öfo
.
Ãi_m≠addr
,

924 (*)
ªgi⁄öfo
.
Ãi_m≠addr
 +Ñegi⁄öfo.
Ãi_size
,

925 
TRUE
);

929 
	}
}

932 #i‡
deföed
(
HPUX
)

934 
	~<î∫o.h
>

935 
	~<dl.h
>

937 *
sys_îæi°
[];

938 
sys_√º
;

940 
	$GC_ªgi°î_dy«mic_libørõs
()

942 
°©us
;

943 
ödex
 = 1;

944 
shl_des¸ùt‹
 *
shl_desc
;

947 
TRUE
) {

950 
°©us
 = 
	`shl_gë
(
ödex
, &
shl_desc
);

953 i‡(
°©us
 != 0) {

954 #ifde‡
GC_HPUX_THREADS


959 i‡(
î∫o
 =
EINVAL
) {

962 i‡(
î∫o
 <
sys_√º
) {

963 
	`GC_¥ötf
("dy«mic_lﬂd: %s\n", 
sys_îæi°
[
î∫o
]);

965 
	`GC_¥ötf
("dy«mic_lﬂd: %d\n", 
î∫o
);

967 
	`ABORT
("shl_get failed");

972 #ifde‡
DL_VERBOSE


973 
	`GC_¥ötf
("---SharedÜibrary---\n");

974 
	`GC_¥ötf
("\tfûíamê = \"%s\"\n", 
shl_desc
->
fûíame
);

975 
	`GC_¥ötf
("\tödex = %d\n", 
ödex
);

976 
	`GC_¥ötf
("\thandle = %08x\n",

977 (Ë
shl_desc
->
h™dÀ
);

978 
	`GC_¥ötf
("\âexà£g. sèπ = %08x\n", 
shl_desc
->
t°¨t
);

979 
	`GC_¥ötf
("\âexà£g.Énd = %08x\n", 
shl_desc
->
ãnd
);

980 
	`GC_¥ötf
("\td©®£g. sèπ = %08x\n", 
shl_desc
->
d°¨t
);

981 
	`GC_¥ötf
("\td©®£g.Énd = %08x\n", 
shl_desc
->
díd
);

982 
	`GC_¥ötf
("\åef. cou¡ = %lu\n", 
shl_desc
->
ªf_cou¡
);

986 
	`GC_add_roŸs_ö√r
((*Ë
shl_desc
->
d°¨t
,

987 (*Ë
shl_desc
->
díd
, 
TRUE
);

989 
ödex
++;

991 
	}
}

994 #ifde‡
AIX


995 #¥agm®
Æloˇ


996 
	~<sys/ldr.h
>

997 
	~<sys/î∫o.h
>

998 
	$GC_ªgi°î_dy«mic_libørõs
()

1000 
Àn
;

1001 *
ldibuf
;

1002 
ldibuÊí
;

1003 
ld_öfo
 *
ldi
;

1005 
ldibuf
 = 
	`Æloˇ
(
ldibuÊí
 = 8192);

1007  (
Àn
 = 
	`lﬂdquîy
(
L_GETINFO
,
ldibuf
,
ldibuÊí
)) < 0) {

1008 i‡(
î∫o
 !
ENOMEM
) {

1009 
	`ABORT
("loadquery failed");

1011 
ldibuf
 = 
	`Æloˇ
(
ldibuÊí
 *= 2);

1014 
ldi
 = (
ld_öfo
 *)
ldibuf
;

1015 
ldi
) {

1016 
Àn
 = 
ldi
->
ldöfo_√xt
;

1017 
	`GC_add_roŸs_ö√r
(

1018 
ldi
->
ldöfo_d©a‹g
,

1019 (
±r_t
)()
ldi
->
ldöfo_d©a‹g


1020 + 
ldi
->
ldöfo_d©asize
,

1021 
TRUE
);

1022 
ldi
 = 
Àn
 ? (
ld_öfo
 *)((*)ldi +Üen) : 0;

1024 
	}
}

1027 #ifde‡
DARWIN


1030 #i‚de‡
__¥iv©e_exã∫__


1031 
	#__¥iv©e_exã∫__
 

	)

1032 
	~<mach-o/dyld.h
>

1033 #unde‡
__¥iv©e_exã∫__


1035 
	~<mach-o/dyld.h
>

1037 
	~<mach-o/gë£˘.h
>

1042 c⁄° *
£g
;

1043 c⁄° *
£˘
;

1044 } 
GC_dyld_£˘i⁄s
[] = {

1045 { 
SEG_DATA
, 
SECT_DATA
 },

1046 { 
SEG_DATA
, 
SECT_BSS
 },

1047 { 
SEG_DATA
, 
SECT_COMMON
 }

1050 #ifde‡
DARWIN_DEBUG


1051 c⁄° *
	$GC_dyld_«me_f‹_hdr
(c⁄° 
GC_MACH_HEADER
 *
hdr
) {

1052 
i
,
c
;

1053 
c
 = 
	`_dyld_image_cou¡
();

1054 
i
=0;i<
c
;i++Ëif(
	`_dyld_gë_image_hódî
(iË=
hdr
)

1055  
	`_dyld_gë_image_«me
(
i
);

1056  
NULL
;

1057 
	}
}

1061 
	$GC_dyld_image_add
(c⁄° 
GC_MACH_HEADER
 *
hdr
, 
öçå_t
 
¶ide
)

1063 
°¨t
,
íd
,
i
;

1064 c⁄° 
GC_MACH_SECTION
 *
£c
;

1065 i‡(
GC_no_dls
) ;

1066 
i
=0;i<(
GC_dyld_£˘i⁄s
)/(GC_dyld_sections[0]);i++) {

1067 
£c
 = 
	`GC_GETSECTBYNAME
(
hdr
, 
GC_dyld_£˘i⁄s
[
i
].
£g
,

1068 
GC_dyld_£˘i⁄s
[
i
].
£˘
);

1069 if(
£c
 =
NULL
 || sec->
size
 == 0) ;

1070 
°¨t
 = 
¶ide
 + 
£c
->
addr
;

1071 
íd
 = 
°¨t
 + 
£c
->
size
;

1072 #ifde‡
DARWIN_DEBUG


1073 
	`GC_¥ötf
("Adding sectionát %p-%p (%lu bytes) from image %s\n",

1074 
°¨t
,
íd
,
£c
->
size
,
	`GC_dyld_«me_f‹_hdr
(
hdr
));

1076 
	`GC_add_roŸs
((*)
°¨t
,(*)
íd
);

1078 #ifde‡
DARWIN_DEBUG


1079 
	`GC_¥öt_°©ic_roŸs
();

1081 
	}
}

1084 
	$GC_dyld_image_ªmove
(c⁄° 
GC_MACH_HEADER
 *
hdr
,

1085 
öçå_t
 
¶ide
)

1087 
°¨t
,
íd
,
i
;

1088 c⁄° 
GC_MACH_SECTION
 *
£c
;

1089 
i
=0;i<(
GC_dyld_£˘i⁄s
)/(GC_dyld_sections[0]);i++) {

1090 
£c
 = 
	`GC_GETSECTBYNAME
(
hdr
, 
GC_dyld_£˘i⁄s
[
i
].
£g
,

1091 
GC_dyld_£˘i⁄s
[
i
].
£˘
);

1092 if(
£c
 =
NULL
 || sec->
size
 == 0) ;

1093 
°¨t
 = 
¶ide
 + 
£c
->
addr
;

1094 
íd
 = 
°¨t
 + 
£c
->
size
;

1095 #ifde‡
DARWIN_DEBUG


1096 
	`GC_¥ötf
("Removing sectionát %p-%p (%lu bytes) from image %s\n",

1097 
°¨t
,
íd
,
£c
->
size
,
	`GC_dyld_«me_f‹_hdr
(
hdr
));

1099 
	`GC_ªmove_roŸs
((*)
°¨t
,(*)
íd
);

1101 #ifde‡
DARWIN_DEBUG


1102 
	`GC_¥öt_°©ic_roŸs
();

1104 
	}
}

1106 
	$GC_ªgi°î_dy«mic_libørõs
() {

1109 
	}
}

1117 
	$GC_öô_dyld
() {

1118 
GC_boﬁ
 
öôülized
 = 
FALSE
;

1119 *
böd_fuŒy_ív
 = 
NULL
;

1121 if(
öôülized
) ;

1123 #ifde‡
DARWIN_DEBUG


1124 
	`GC_¥ötf
("Registering dyld callbacks...\n");

1138 
	`_dyld_ªgi°î_func_f‹_add_image
(
GC_dyld_image_add
);

1139 
	`_dyld_ªgi°î_func_f‹_ªmove_image
(
GC_dyld_image_ªmove
);

1142 
öôülized
 = 
TRUE
;

1144 
böd_fuŒy_ív
 = 
	`gëív
("DYLD_BIND_AT_LAUNCH");

1146 i‡(
böd_fuŒy_ív
 =
NULL
) {

1147 #ifde‡
DARWIN_DEBUG


1148 
	`GC_¥ötf
("Forcing full bind of GC code...\n");

1151 if(!
	`_dyld_böd_fuŒy_image_c⁄èöög_addªss
((*)
GC_mÆloc
))

1152 
	`GC_ab‹t
("_dyld_bind_fully_image_containing_address failed");

1155 
	}
}

1157 
	#HAVE_REGISTER_MAIN_STATIC_DATA


	)

1158 
GC_boﬁ
 
	$GC_ªgi°î_maö_°©ic_d©a
()

1161  
FALSE
;

1162 
	}
}

1168 #ifde‡
PCR


1170 
	~"û/PCR_IL.h
"

1171 
	~"th/PCR_ThCé.h
"

1172 
	~"mm/PCR_MM.h
"

1174 
	$GC_ªgi°î_dy«mic_libørõs
()

1178 
PCR_IL_LﬂdedFûe
 * 
p
 = 
	`PCR_IL_GëLa°LﬂdedFûe
();

1179 
PCR_IL_LﬂdedSegmít
 * 
q
;

1182 
p
 !
NIL
 && !’ -> 
lf_commôPoöt
)) {

1188 
p
 =Ö -> 
lf_¥ev
;

1190 ; 
p
 !
NIL
;Ö =Ö -> 
lf_¥ev
) {

1191 
q
 = 
p
 -> 
lf_ls
; q !
NIL
; q = q -> 
ls_√xt
) {

1192 i‡((
q
 -> 
ls_Êags
 & 
PCR_IL_SegFœgs_Tø˚d_MASK
)

1193 =
PCR_IL_SegFœgs_Tø˚d_⁄
) {

1194 
GC_add_roŸs_ö√r


1195 ((*)(
q
 -> 
ls_addr
),

1196 (*)(
q
 -> 
ls_addr
Ë+ q -> 
ls_byãs
,

1197 
TRUE
);

1202 
	}
}

1207 
	$GC_ªgi°î_dy«mic_libørõs
(){
	}
}

1209 
	gGC_no_dy«mic_lﬂdög
;

1215 #i‚de‡
HAVE_REGISTER_MAIN_STATIC_DATA


1218 
GC_boﬁ
 
	$GC_ªgi°î_maö_°©ic_d©a
()

1220  
TRUE
;

1221 
	}
}

1225 
	gGC_ªgi°î_has_°©ic_roŸs_ˇŒback


1226 ((*
ˇŒback
)(c⁄° *, *, 
size_t
)) {

1227 
GC_has_°©ic_roŸs
 = 
ˇŒback
;

1228 
	}
}

	@finalize.c

17 
	#I_HIDE_POINTERS


	)

18 
	~"¥iv©e/gc_pm¨k.h
"

20 #ifde‡
FINALIZE_ON_DEMAND


21 
	gGC_föÆize_⁄_dem™d
 = 1;

23 
	gGC_föÆize_⁄_dem™d
 = 0;

26 #ifde‡
JAVA_FINALIZATION


27 
	gGC_java_föÆiz©i⁄
 = 1;

29 
	gGC_java_föÆiz©i⁄
 = 0;

35 
	tföÆiz©i⁄_m¨k_¥oc
( );

37 
	#HASH3
(
addr
,
size
,
log_size
) \

38 ((((
w‹d
)(
addr
Ë>> 3Ë^ ((w‹d)◊ddrË>> (3+(
log_size
)))) \

39 & ((
size
Ë- 1))

	)

40 
	#HASH2
(
addr
,
log_size
Ë
	`HASH3
◊ddr, 1 <<Üog_size,Üog_size)

	)

42 
	shash_chaö_íåy
 {

43 
w‹d
 
	mhiddí_key
;

44 
hash_chaö_íåy
 * 
	m√xt
;

47 
	gGC_föÆiz©i⁄_Áûuªs
 = 0;

50 
	sdißµórög_lök
 {

51 
hash_chaö_íåy
 
	m¥ﬁog
;

52 
	#dl_hiddí_lök
 
¥ﬁog
.
hiddí_key


	)

54 
	#dl_√xt
(
x
Ë(
dißµórög_lök
 *)((xË-> 
¥ﬁog
.
√xt
)

	)

55 
	#dl_£t_√xt
(
x
,
y
Ë(xË-> 
¥ﬁog
.
√xt
 = (
hash_chaö_íåy
 *)(y)

	)

57 
w‹d
 
	mdl_hiddí_obj
;

58 } **
	gdl_hód
 = 0;

60 
sig√d_w‹d
 
	glog_dl_èbÀ_size
 = -1;

65 
w‹d
 
	gGC_dl_íåõs
 = 0;

68 
	sföÆizabÀ_obje˘
 {

69 
hash_chaö_íåy
 
	m¥ﬁog
;

70 
	#fo_hiddí_ba£
 
¥ﬁog
.
hiddí_key


	)

74 
	#fo_√xt
(
x
Ë(
föÆizabÀ_obje˘
 *)((xË-> 
¥ﬁog
.
√xt
)

	)

75 
	#fo_£t_√xt
(
x
,
y
Ë(xË-> 
¥ﬁog
.
√xt
 = (
hash_chaö_íåy
 *)(y)

	)

76 
GC_föÆiz©i⁄_¥oc
 
	mfo_‚
;

77 
±r_t
 
	mfo_˛õ¡_d©a
;

78 
w‹d
 
	mfo_obje˘_size
;

79 
föÆiz©i⁄_m¨k_¥oc
 * 
	mfo_m¨k_¥oc
;

80 } **
	gfo_hód
 = 0;

82 
föÆizabÀ_obje˘
 * 
	gGC_föÆize_now
 = 0;

85 
sig√d_w‹d
 
	glog_fo_èbÀ_size
 = -1;

87 
w‹d
 
	gGC_fo_íåõs
 = 0;

89 
	$GC_push_föÆizî_°ru˘uªs
()

91 
	`GC_push_Æl
((
±r_t
)(&
dl_hód
), (±r_t)(&dl_hódË+ (
w‹d
));

92 
	`GC_push_Æl
((
±r_t
)(&
fo_hód
), (±r_t)(&fo_hódË+ (
w‹d
));

93 
	`GC_push_Æl
((
±r_t
)(&
GC_föÆize_now
),

94 (
±r_t
)(&
GC_föÆize_now
Ë+ (
w‹d
));

95 
	}
}

102 
	$GC_grow_èbÀ
(
hash_chaö_íåy
 ***
èbÀ
,

103 
sig√d_w‹d
 *
log_size_±r
)

105 
w‹d
 
i
;

106 
hash_chaö_íåy
 *
p
;

107 
sig√d_w‹d
 
log_ﬁd_size
 = *
log_size_±r
;

108 
sig√d_w‹d
 
log_√w_size
 = 
log_ﬁd_size
 + 1;

109 
w‹d
 
ﬁd_size
 = ((
log_ﬁd_size
 == -1)? 0: (1 <<Üog_old_size));

110 
w‹d
 
√w_size
 = (w‹d)1 << 
log_√w_size
;

112 
hash_chaö_íåy
 **
√w_èbÀ
 = (hash_chain_entry **)

113 
	`GC_INTERNAL_MALLOC_IGNORE_OFF_PAGE
(

114 (
size_t
)
√w_size
 * (
hash_chaö_íåy
 *), 
NORMAL
);

116 i‡(
√w_èbÀ
 == 0) {

117 i‡(*
èbÀ
 == 0) {

118 
	`ABORT
("Insufficient space for initialÅableállocation");

123 
i
 = 0; i < 
ﬁd_size
; i++) {

124 
p
 = (*
èbÀ
)[
i
];

125 
p
 != 0) {

126 
±r_t
 
ªÆ_key
 = (±r_t)
	`REVEAL_POINTER
(
p
 -> 
hiddí_key
);

127 
hash_chaö_íåy
 *
√xt
 = 
p
 ->Çext;

128 
size_t
 
√w_hash
 = 
	`HASH3
(
ªÆ_key
, 
√w_size
, 
log_√w_size
);

130 
p
 -> 
√xt
 = 
√w_èbÀ
[
√w_hash
];

131 
√w_èbÀ
[
√w_hash
] = 
p
;

132 
p
 = 
√xt
;

135 *
log_size_±r
 = 
log_√w_size
;

136 *
èbÀ
 = 
√w_èbÀ
;

137 
	}
}

139 
	$GC_ªgi°î_dißµórög_lök
(* * 
lök
)

141 
±r_t
 
ba£
;

143 
ba£
 = (
±r_t
)
	`GC_ba£
((*)
lök
);

144 i‡(
ba£
 == 0)

145 
	`ABORT
("BadárgÅo GC_register_disappearing_link");

146 (
	`GC_gíîÆ_ªgi°î_dißµórög_lök
(
lök
, 
ba£
));

147 
	}
}

149 
	$GC_gíîÆ_ªgi°î_dißµórög_lök
(* * 
lök
, * 
obj
)

151 
dißµórög_lök
 *
cuº_dl
;

152 
size_t
 
ödex
;

153 
dißµórög_lök
 * 
√w_dl
;

154 
DCL_LOCK_STATE
;

156 i‡((
w‹d
)
lök
 & (
ALIGNMENT
-1))

157 
	`ABORT
("BadárgÅo GC_general_register_disappearing_link");

158 #ifde‡
THREADS


159 
	`LOCK
();

161 i‡(
log_dl_èbÀ_size
 == -1

162 || 
GC_dl_íåõs
 > ((
w‹d
)1 << 
log_dl_èbÀ_size
)) {

163 
	`GC_grow_èbÀ
((
hash_chaö_íåy
 ***)(&
dl_hód
),

164 &
log_dl_èbÀ_size
);

165 i‡(
GC_¥öt_°©s
) {

166 
	`GC_log_¥ötf
("Grew dlÅableÅo %uÉntries\n",

167 (1 << 
log_dl_èbÀ_size
));

170 
ödex
 = 
	`HASH2
(
lök
, 
log_dl_èbÀ_size
);

171 
cuº_dl
 = 
dl_hód
[
ödex
];

172 
cuº_dl
 = 
dl_hód
[
ödex
]; cuº_d»!0; cuº_d»
	`dl_√xt
(curr_dl)) {

173 i‡(
cuº_dl
 -> 
dl_hiddí_lök
 =
	`HIDE_POINTER
(
lök
)) {

174 
cuº_dl
 -> 
dl_hiddí_obj
 = 
	`HIDE_POINTER
(
obj
);

175 #ifde‡
THREADS


176 
	`UNLOCK
();

181 
√w_dl
 = (
dißµórög_lök
 *)

182 
	`GC_INTERNAL_MALLOC
((
dißµórög_lök
),
NORMAL
);

183 i‡(0 =
√w_dl
) {

184 #ifde‡
THREADS


185 
	`UNLOCK
();

187 
√w_dl
 = (
dißµórög_lök
 *)

188 
	`GC_oom_‚
((
dißµórög_lök
));

189 i‡(0 =
√w_dl
) {

190 
GC_föÆiz©i⁄_Áûuªs
++;

194 #ifde‡
THREADS


195 
	`LOCK
();

198 
√w_dl
 -> 
dl_hiddí_obj
 = 
	`HIDE_POINTER
(
obj
);

199 
√w_dl
 -> 
dl_hiddí_lök
 = 
	`HIDE_POINTER
(
lök
);

200 
	`dl_£t_√xt
(
√w_dl
, 
dl_hód
[
ödex
]);

201 
dl_hód
[
ödex
] = 
√w_dl
;

202 
GC_dl_íåõs
++;

203 #ifde‡
THREADS


204 
	`UNLOCK
();

207 
	}
}

209 
	$GC_uƒegi°î_dißµórög_lök
(* * 
lök
)

211 
dißµórög_lök
 *
cuº_dl
, *
¥ev_dl
;

212 
size_t
 
ödex
;

213 
DCL_LOCK_STATE
;

215 
	`LOCK
();

216 
ödex
 = 
	`HASH2
(
lök
, 
log_dl_èbÀ_size
);

217 i‡(((
w‹d
)
lök
 & (
ALIGNMENT
-1))Ë
out
;

218 
¥ev_dl
 = 0; 
cuº_dl
 = 
dl_hód
[
ödex
];

219 
cuº_dl
 != 0) {

220 i‡(
cuº_dl
 -> 
dl_hiddí_lök
 =
	`HIDE_POINTER
(
lök
)) {

221 i‡(
¥ev_dl
 == 0) {

222 
dl_hód
[
ödex
] = 
	`dl_√xt
(
cuº_dl
);

224 
	`dl_£t_√xt
(
¥ev_dl
, 
	`dl_√xt
(
cuº_dl
));

226 
GC_dl_íåõs
--;

227 
	`UNLOCK
();

228 #ifde‡
DBG_HDRS_ALL


229 
	`dl_£t_√xt
(
cuº_dl
, 0);

231 
	`GC_‰ì
((*)
cuº_dl
);

235 
¥ev_dl
 = 
cuº_dl
;

236 
cuº_dl
 = 
	`dl_√xt
(curr_dl);

238 
out
:

239 
	`UNLOCK
();

241 
	}
}

245 
GC_API
 
	$GC_n‹mÆ_föÆize_m¨k_¥oc
(
±r_t
 
p
)

247 
hdr
 * 
hhdr
 = 
	`HDR
(
p
);

249 
	`PUSH_OBJ
(
p
, 
hhdr
, 
GC_m¨k_°ack_t›
,

250 &(
GC_m¨k_°ack
[
GC_m¨k_°ack_size
]));

251 
	}
}

256 
GC_API
 
	$GC_ign‹e_£lf_föÆize_m¨k_¥oc
(
±r_t
 
p
)

258 
hdr
 * 
hhdr
 = 
	`HDR
(
p
);

259 
w‹d
 
des¸
 = 
hhdr
 -> 
hb_des¸
;

260 
±r_t
 
q
, 
r
;

261 
±r_t
 
sˇn_limô
;

262 
±r_t
 
èrgë_limô
 = 
p
 + 
hhdr
 -> 
hb_sz
 - 1;

264 i‡((
des¸
 & 
GC_DS_TAGS
Ë=
GC_DS_LENGTH
) {

265 
sˇn_limô
 = 
p
 + 
des¸
 - (
w‹d
);

267 
sˇn_limô
 = 
èrgë_limô
 + 1 - (
w‹d
);

269 
q
 = 
p
; q <
sˇn_limô
; q +
ALIGNMENT
) {

270 
r
 = *(
±r_t
 *)
q
;

271 i‡(
r
 < 
p
 ||Ñ > 
èrgë_limô
) {

272 
	`GC_PUSH_ONE_HEAP
(
r
, 
q
);

275 
	}
}

278 
GC_API
 
	$GC_nuŒ_föÆize_m¨k_¥oc
(
±r_t
 
p
)

280 
	}
}

290 
GC_API
 
	$GC_uƒóchabÀ_föÆize_m¨k_¥oc
(
±r_t
 
p
)

292 
	`GC_n‹mÆ_föÆize_m¨k_¥oc
(
p
);

293 
	}
}

305 
GC_API
 
	$GC_ªgi°î_föÆizî_ö√r
(* 
obj
,

306 
GC_föÆiz©i⁄_¥oc
 
‚
, *
cd
,

307 
GC_föÆiz©i⁄_¥oc
 *
o‚
, **
ocd
,

308 
föÆiz©i⁄_m¨k_¥oc
 
mp
)

310 
±r_t
 
ba£
;

311 
föÆizabÀ_obje˘
 * 
cuº_fo
, * 
¥ev_fo
;

312 
size_t
 
ödex
;

313 
föÆizabÀ_obje˘
 *
√w_fo
;

314 
hdr
 *
hhdr
;

315 
DCL_LOCK_STATE
;

317 #ifde‡
THREADS


318 
	`LOCK
();

320 i‡(
log_fo_èbÀ_size
 == -1

321 || 
GC_fo_íåõs
 > ((
w‹d
)1 << 
log_fo_èbÀ_size
)) {

322 
	`GC_grow_èbÀ
((
hash_chaö_íåy
 ***)(&
fo_hód
),

323 &
log_fo_èbÀ_size
);

324 i‡(
GC_¥öt_°©s
) {

325 
	`GC_log_¥ötf
("Grew foÅableÅo %uÉntries\n",

326 (1 << 
log_fo_èbÀ_size
));

331 
ba£
 = (
±r_t
)
obj
;

332 
ödex
 = 
	`HASH2
(
ba£
, 
log_fo_èbÀ_size
);

333 
¥ev_fo
 = 0; 
cuº_fo
 = 
fo_hód
[
ödex
];

334 
cuº_fo
 != 0) {

335 
	`GC_ASSERT
(
	`GC_size
(
cuº_fo
Ë>(
föÆizabÀ_obje˘
));

336 i‡(
cuº_fo
 -> 
fo_hiddí_ba£
 =
	`HIDE_POINTER
(
ba£
)) {

341 i‡(
ocd
Ë*ocd = (*Ë(
cuº_fo
 -> 
fo_˛õ¡_d©a
);

342 i‡(
o‚
Ë*o‚ = 
cuº_fo
 -> 
fo_‚
;

344 i‡(
¥ev_fo
 == 0) {

345 
fo_hód
[
ödex
] = 
	`fo_√xt
(
cuº_fo
);

347 
	`fo_£t_√xt
(
¥ev_fo
, 
	`fo_√xt
(
cuº_fo
));

349 i‡(
‚
 == 0) {

350 
GC_fo_íåõs
--;

354 #i‡!
	`deföed
(
THREADS
Ë&& !deföed(
DBG_HDRS_ALL
)

355 
	`GC_‰ì
((*)
cuº_fo
);

358 
cuº_fo
 -> 
fo_‚
 = 
‚
;

359 
cuº_fo
 -> 
fo_˛õ¡_d©a
 = (
±r_t
)
cd
;

360 
cuº_fo
 -> 
fo_m¨k_¥oc
 = 
mp
;

363 i‡(
¥ev_fo
 == 0) {

364 
fo_hód
[
ödex
] = 
cuº_fo
;

366 
	`fo_£t_√xt
(
¥ev_fo
, 
cuº_fo
);

369 #ifde‡
THREADS


370 
	`UNLOCK
();

374 
¥ev_fo
 = 
cuº_fo
;

375 
cuº_fo
 = 
	`fo_√xt
(curr_fo);

377 i‡(
o‚
) *ofn = 0;

378 i‡(
ocd
) *ocd = 0;

379 i‡(
‚
 == 0) {

380 #ifde‡
THREADS


381 
	`UNLOCK
();

385 
	`GET_HDR
(
ba£
, 
hhdr
);

386 i‡(0 =
hhdr
) {

388 #ifde‡
THREADS


389 
	`UNLOCK
();

393 
√w_fo
 = (
föÆizabÀ_obje˘
 *)

394 
	`GC_INTERNAL_MALLOC
((
föÆizabÀ_obje˘
),
NORMAL
);

395 i‡(
	`EXPECT
(0 =
√w_fo
, 
FALSE
)) {

396 #ifde‡
THREADS


397 
	`UNLOCK
();

399 
√w_fo
 = (
föÆizabÀ_obje˘
 *)

400 
	`GC_oom_‚
((
föÆizabÀ_obje˘
));

401 i‡(0 =
√w_fo
) {

402 
GC_föÆiz©i⁄_Áûuªs
++;

406 #ifde‡
THREADS


407 
	`LOCK
();

410 
	`GC_ASSERT
(
	`GC_size
(
√w_fo
Ë>(
föÆizabÀ_obje˘
));

411 
√w_fo
 -> 
fo_hiddí_ba£
 = (
w‹d
)
	`HIDE_POINTER
(
ba£
);

412 
√w_fo
 -> 
fo_‚
 = 
‚
;

413 
√w_fo
 -> 
fo_˛õ¡_d©a
 = (
±r_t
)
cd
;

414 
√w_fo
 -> 
fo_obje˘_size
 = 
hhdr
 -> 
hb_sz
;

415 
√w_fo
 -> 
fo_m¨k_¥oc
 = 
mp
;

416 
	`fo_£t_√xt
(
√w_fo
, 
fo_hód
[
ödex
]);

417 
GC_fo_íåõs
++;

418 
fo_hód
[
ödex
] = 
√w_fo
;

419 #ifde‡
THREADS


420 
	`UNLOCK
();

422 
	}
}

424 
	$GC_ªgi°î_föÆizî
(* 
obj
,

425 
GC_föÆiz©i⁄_¥oc
 
‚
, * 
cd
,

426 
GC_föÆiz©i⁄_¥oc
 *
o‚
, ** 
ocd
)

428 
	`GC_ªgi°î_föÆizî_ö√r
(
obj
, 
‚
, 
cd
, 
o‚
,

429 
ocd
, 
GC_n‹mÆ_föÆize_m¨k_¥oc
);

430 
	}
}

432 
	$GC_ªgi°î_föÆizî_ign‹e_£lf
(* 
obj
,

433 
GC_föÆiz©i⁄_¥oc
 
‚
, * 
cd
,

434 
GC_föÆiz©i⁄_¥oc
 *
o‚
, ** 
ocd
)

436 
	`GC_ªgi°î_föÆizî_ö√r
(
obj
, 
‚
, 
cd
, 
o‚
,

437 
ocd
, 
GC_ign‹e_£lf_föÆize_m¨k_¥oc
);

438 
	}
}

440 
	$GC_ªgi°î_föÆizî_no_‹dî
(* 
obj
,

441 
GC_föÆiz©i⁄_¥oc
 
‚
, * 
cd
,

442 
GC_föÆiz©i⁄_¥oc
 *
o‚
, ** 
ocd
)

444 
	`GC_ªgi°î_föÆizî_ö√r
(
obj
, 
‚
, 
cd
, 
o‚
,

445 
ocd
, 
GC_nuŒ_föÆize_m¨k_¥oc
);

446 
	}
}

448 
GC_boﬁ
 
	g√ed_uƒóchabÀ_föÆiz©i⁄
 = 
FALSE
;

451 
	$GC_ªgi°î_föÆizî_uƒóchabÀ
(* 
obj
,

452 
GC_föÆiz©i⁄_¥oc
 
‚
, * 
cd
,

453 
GC_föÆiz©i⁄_¥oc
 *
o‚
, ** 
ocd
)

455 
√ed_uƒóchabÀ_föÆiz©i⁄
 = 
TRUE
;

456 
	`GC_ASSERT
(
GC_java_föÆiz©i⁄
);

457 
	`GC_ªgi°î_föÆizî_ö√r
(
obj
, 
‚
, 
cd
, 
o‚
,

458 
ocd
, 
GC_uƒóchabÀ_föÆize_m¨k_¥oc
);

459 
	}
}

461 #i‚de‡
NO_DEBUGGING


462 
	$GC_dump_föÆiz©i⁄
()

464 
dißµórög_lök
 * 
cuº_dl
;

465 
föÆizabÀ_obje˘
 * 
cuº_fo
;

466 
±r_t
 
ªÆ_±r
, 
ªÆ_lök
;

467 
dl_size
 = (
log_dl_èbÀ_size
 == -1 ) ? 0 : (1 <<Üog_dl_table_size);

468 
fo_size
 = (
log_fo_èbÀ_size
 == -1 ) ? 0 : (1 <<Üog_fo_table_size);

469 
i
;

471 
	`GC_¥ötf
("DisappearingÜinks:\n");

472 
i
 = 0; i < 
dl_size
; i++) {

473 
cuº_dl
 = 
dl_hód
[
i
]; cuº_d»!0; cuº_d»
	`dl_√xt
(curr_dl)) {

474 
ªÆ_±r
 = (
±r_t
)
	`REVEAL_POINTER
(
cuº_dl
 -> 
dl_hiddí_obj
);

475 
ªÆ_lök
 = (
±r_t
)
	`REVEAL_POINTER
(
cuº_dl
 -> 
dl_hiddí_lök
);

476 
	`GC_¥ötf
("Obje˘: %p, Lök:%p\n", 
ªÆ_±r
, 
ªÆ_lök
);

479 
	`GC_¥ötf
("Finalizers:\n");

480 
i
 = 0; i < 
fo_size
; i++) {

481 
cuº_fo
 = 
fo_hód
[
i
]; cuº_fÿ!0; cuº_fÿ
	`fo_√xt
(curr_fo)) {

482 
ªÆ_±r
 = (
±r_t
)
	`REVEAL_POINTER
(
cuº_fo
 -> 
fo_hiddí_ba£
);

483 
	`GC_¥ötf
("FöÆizabÀ obje˘: %p\n", 
ªÆ_±r
);

486 
	}
}

491 
	$GC_föÆize
()

493 
dißµórög_lök
 * 
cuº_dl
, * 
¥ev_dl
, * 
√xt_dl
;

494 
föÆizabÀ_obje˘
 * 
cuº_fo
, * 
¥ev_fo
, * 
√xt_fo
;

495 
±r_t
 
ªÆ_±r
, 
ªÆ_lök
;

496 
size_t
 
i
;

497 
size_t
 
dl_size
 = (
log_dl_èbÀ_size
 == -1 ) ? 0 : (1 <<Üog_dl_table_size);

498 
size_t
 
fo_size
 = (
log_fo_èbÀ_size
 == -1 ) ? 0 : (1 <<Üog_fo_table_size);

501 
i
 = 0; i < 
dl_size
; i++) {

502 
cuº_dl
 = 
dl_hód
[
i
];

503 
¥ev_dl
 = 0;

504 
cuº_dl
 != 0) {

505 
ªÆ_±r
 = (
±r_t
)
	`REVEAL_POINTER
(
cuº_dl
 -> 
dl_hiddí_obj
);

506 
ªÆ_lök
 = (
±r_t
)
	`REVEAL_POINTER
(
cuº_dl
 -> 
dl_hiddí_lök
);

507 i‡(!
	`GC_is_m¨ked
(
ªÆ_±r
)) {

508 *(
w‹d
 *)
ªÆ_lök
 = 0;

509 
√xt_dl
 = 
	`dl_√xt
(
cuº_dl
);

510 i‡(
¥ev_dl
 == 0) {

511 
dl_hód
[
i
] = 
√xt_dl
;

513 
	`dl_£t_√xt
(
¥ev_dl
, 
√xt_dl
);

515 
	`GC_˛ór_m¨k_bô
((
±r_t
)
cuº_dl
);

516 
GC_dl_íåõs
--;

517 
cuº_dl
 = 
√xt_dl
;

519 
¥ev_dl
 = 
cuº_dl
;

520 
cuº_dl
 = 
	`dl_√xt
(curr_dl);

526 
	`GC_ASSERT
(
GC_m¨k_°©e
 =
MS_NONE
);

527 
i
 = 0; i < 
fo_size
; i++) {

528 
cuº_fo
 = 
fo_hód
[
i
]; cuº_fÿ!0; cuº_fÿ
	`fo_√xt
(curr_fo)) {

529 
	`GC_ASSERT
(
	`GC_size
(
cuº_fo
Ë>(
föÆizabÀ_obje˘
));

530 
ªÆ_±r
 = (
±r_t
)
	`REVEAL_POINTER
(
cuº_fo
 -> 
fo_hiddí_ba£
);

531 i‡(!
	`GC_is_m¨ked
(
ªÆ_±r
)) {

532 
	`GC_MARKED_FOR_FINALIZATION
(
ªÆ_±r
);

533 
	`GC_MARK_FO
(
ªÆ_±r
, 
cuº_fo
 -> 
fo_m¨k_¥oc
);

534 i‡(
	`GC_is_m¨ked
(
ªÆ_±r
)) {

535 
	`WARN
("FöÆiz©i⁄ cy˛êövﬁvög %lx\n", 
ªÆ_±r
);

542 
GC_byãs_föÆized
 = 0;

543 
i
 = 0; i < 
fo_size
; i++) {

544 
cuº_fo
 = 
fo_hód
[
i
];

545 
¥ev_fo
 = 0;

546 
cuº_fo
 != 0) {

547 
ªÆ_±r
 = (
±r_t
)
	`REVEAL_POINTER
(
cuº_fo
 -> 
fo_hiddí_ba£
);

548 i‡(!
	`GC_is_m¨ked
(
ªÆ_±r
)) {

549 i‡(!
GC_java_föÆiz©i⁄
) {

550 
	`GC_£t_m¨k_bô
(
ªÆ_±r
);

553 
√xt_fo
 = 
	`fo_√xt
(
cuº_fo
);

554 i‡(
¥ev_fo
 == 0) {

555 
fo_hód
[
i
] = 
√xt_fo
;

557 
	`fo_£t_√xt
(
¥ev_fo
, 
√xt_fo
);

559 
GC_fo_íåõs
--;

561 
	`fo_£t_√xt
(
cuº_fo
, 
GC_föÆize_now
);

562 
GC_föÆize_now
 = 
cuº_fo
;

565 
cuº_fo
 -> 
fo_hiddí_ba£
 =

566 (
w‹d
Ë
	`REVEAL_POINTER
(
cuº_fo
 -> 
fo_hiddí_ba£
);

567 
GC_byãs_föÆized
 +=

568 
cuº_fo
 -> 
fo_obje˘_size


569 + (
föÆizabÀ_obje˘
);

570 
	`GC_ASSERT
(
	`GC_is_m¨ked
(
	`GC_ba£
((
±r_t
)
cuº_fo
)));

571 
cuº_fo
 = 
√xt_fo
;

573 
¥ev_fo
 = 
cuº_fo
;

574 
cuº_fo
 = 
	`fo_√xt
(curr_fo);

579 i‡(
GC_java_föÆiz©i⁄
) {

582 
cuº_fo
 = 
GC_föÆize_now
;

583 
cuº_fo
 !
NULL
; cuº_fÿ
	`fo_√xt
(curr_fo)) {

584 
ªÆ_±r
 = (
±r_t
)
cuº_fo
 -> 
fo_hiddí_ba£
;

585 i‡(!
	`GC_is_m¨ked
(
ªÆ_±r
)) {

586 i‡(
cuº_fo
 -> 
fo_m¨k_¥oc
 =
GC_nuŒ_föÆize_m¨k_¥oc
) {

587 
	`GC_MARK_FO
(
ªÆ_±r
, 
GC_n‹mÆ_föÆize_m¨k_¥oc
);

589 i‡(
cuº_fo
 -> 
fo_m¨k_¥oc
 !
GC_uƒóchabÀ_föÆize_m¨k_¥oc
) {

590 
	`GC_£t_m¨k_bô
(
ªÆ_±r
);

597 i‡(
√ed_uƒóchabÀ_föÆiz©i⁄
) {

598 
cuº_fo
 = 
GC_föÆize_now
;

599 
¥ev_fo
 = 0;

600 
cuº_fo
 != 0) {

601 
√xt_fo
 = 
	`fo_√xt
(
cuº_fo
);

602 i‡(
cuº_fo
 -> 
fo_m¨k_¥oc
 =
GC_uƒóchabÀ_föÆize_m¨k_¥oc
) {

603 
ªÆ_±r
 = (
±r_t
)
cuº_fo
 -> 
fo_hiddí_ba£
;

604 i‡(!
	`GC_is_m¨ked
(
ªÆ_±r
)) {

605 
	`GC_£t_m¨k_bô
(
ªÆ_±r
);

607 i‡(
¥ev_fo
 == 0)

608 
GC_föÆize_now
 = 
√xt_fo
;

610 
	`fo_£t_√xt
(
¥ev_fo
, 
√xt_fo
);

612 
cuº_fo
 -> 
fo_hiddí_ba£
 =

613 (
w‹d
Ë
	`HIDE_POINTER
(
cuº_fo
 -> 
fo_hiddí_ba£
);

614 
GC_byãs_föÆized
 -=

615 
cuº_fo
 -> 
fo_obje˘_size
 + (
föÆizabÀ_obje˘
);

617 
i
 = 
	`HASH2
(
ªÆ_±r
, 
log_fo_èbÀ_size
);

618 
	`fo_£t_√xt
 (
cuº_fo
, 
fo_hód
[
i
]);

619 
GC_fo_íåõs
++;

620 
fo_hód
[
i
] = 
cuº_fo
;

621 
cuº_fo
 = 
¥ev_fo
;

624 
¥ev_fo
 = 
cuº_fo
;

625 
cuº_fo
 = 
√xt_fo
;

631 
i
 = 0; i < 
dl_size
; i++) {

632 
cuº_dl
 = 
dl_hód
[
i
];

633 
¥ev_dl
 = 0;

634 
cuº_dl
 != 0) {

635 
ªÆ_lök
 = 
	`GC_ba£
((
±r_t
)
	`REVEAL_POINTER
(
cuº_dl
 -> 
dl_hiddí_lök
));

636 i‡(
ªÆ_lök
 !0 && !
	`GC_is_m¨ked
(real_link)) {

637 
√xt_dl
 = 
	`dl_√xt
(
cuº_dl
);

638 i‡(
¥ev_dl
 == 0) {

639 
dl_hód
[
i
] = 
√xt_dl
;

641 
	`dl_£t_√xt
(
¥ev_dl
, 
√xt_dl
);

643 
	`GC_˛ór_m¨k_bô
((
±r_t
)
cuº_dl
);

644 
GC_dl_íåõs
--;

645 
cuº_dl
 = 
√xt_dl
;

647 
¥ev_dl
 = 
cuº_dl
;

648 
cuº_dl
 = 
	`dl_√xt
(curr_dl);

652 
	}
}

654 #i‚de‡
JAVA_FINALIZATION_NOT_NEEDED


658 
	$GC_íqueue_Æl_föÆizîs
()

660 
föÆizabÀ_obje˘
 * 
cuº_fo
, * 
¥ev_fo
, * 
√xt_fo
;

661 
±r_t
 
ªÆ_±r
;

662 
i
;

663 
fo_size
;

665 
fo_size
 = (
log_fo_èbÀ_size
 == -1 ) ? 0 : (1 <<Üog_fo_table_size);

666 
GC_byãs_föÆized
 = 0;

667 
i
 = 0; i < 
fo_size
; i++) {

668 
cuº_fo
 = 
fo_hód
[
i
];

669 
¥ev_fo
 = 0;

670 
cuº_fo
 != 0) {

671 
ªÆ_±r
 = (
±r_t
)
	`REVEAL_POINTER
(
cuº_fo
 -> 
fo_hiddí_ba£
);

672 
	`GC_MARK_FO
(
ªÆ_±r
, 
GC_n‹mÆ_föÆize_m¨k_¥oc
);

673 
	`GC_£t_m¨k_bô
(
ªÆ_±r
);

676 
√xt_fo
 = 
	`fo_√xt
(
cuº_fo
);

677 i‡(
¥ev_fo
 == 0) {

678 
fo_hód
[
i
] = 
√xt_fo
;

680 
	`fo_£t_√xt
(
¥ev_fo
, 
√xt_fo
);

682 
GC_fo_íåõs
--;

685 
	`fo_£t_√xt
(
cuº_fo
, 
GC_föÆize_now
);

686 
GC_föÆize_now
 = 
cuº_fo
;

690 
cuº_fo
 -> 
fo_hiddí_ba£
 =

691 (
w‹d
Ë
	`REVEAL_POINTER
(
cuº_fo
 -> 
fo_hiddí_ba£
);

693 
GC_byãs_föÆized
 +=

694 
cuº_fo
 -> 
fo_obje˘_size
 + (
föÆizabÀ_obje˘
);

695 
cuº_fo
 = 
√xt_fo
;

700 
	}
}

716 
GC_API
 
	$GC_föÆize_Æl
()

718 
DCL_LOCK_STATE
;

720 
	`LOCK
();

721 
GC_fo_íåõs
 > 0) {

722 
	`GC_íqueue_Æl_föÆizîs
();

723 
	`UNLOCK
();

724 
	`GC_INVOKE_FINALIZERS
();

725 
	`LOCK
();

727 
	`UNLOCK
();

728 
	}
}

734 
	$GC_should_övoke_föÆizîs
()

736  
GC_föÆize_now
 != 0;

737 
	}
}

741 
	$GC_övoke_föÆizîs
()

743 
föÆizabÀ_obje˘
 * 
cuº_fo
;

744 
cou¡
 = 0;

745 
w‹d
 
byãs_‰ìd_bef‹e
;

746 
DCL_LOCK_STATE
;

748 
GC_föÆize_now
 != 0) {

749 #ifde‡
THREADS


750 
	`LOCK
();

752 i‡(
cou¡
 == 0) {

753 
byãs_‰ìd_bef‹e
 = 
GC_byãs_‰ìd
;

756 
cuº_fo
 = 
GC_föÆize_now
;

757 #ifde‡
THREADS


758 i‡(
cuº_fo
 !0Ë
GC_föÆize_now
 = 
	`fo_√xt
(curr_fo);

759 
	`UNLOCK
();

760 i‡(
cuº_fo
 == 0) ;

762 
GC_föÆize_now
 = 
	`fo_√xt
(
cuº_fo
);

764 
	`fo_£t_√xt
(
cuº_fo
, 0);

765 (*(
cuº_fo
 -> 
fo_‚
))((
±r_t
)(cuº_fÿ-> 
fo_hiddí_ba£
),

766 
cuº_fo
 -> 
fo_˛õ¡_d©a
);

767 
cuº_fo
 -> 
fo_˛õ¡_d©a
 = 0;

768 ++
cou¡
;

769 #ifde‡
UNDEFINED


773 
	`GC_‰ì
((*)
cuº_fo
);

777 i‡(
cou¡
 !0 && 
byãs_‰ìd_bef‹e
 !
GC_byãs_‰ìd
) {

778 
	`LOCK
();

779 
GC_föÆizî_byãs_‰ìd
 +(
GC_byãs_‰ìd
 - 
byãs_‰ìd_bef‹e
);

780 
	`UNLOCK
();

782  
cou¡
;

783 
	}
}

785 (* 
	gGC_föÆizî_nŸifõr
)() = ((*) ())0;

787 
GC_w‹d
 
œ°_föÆizî_nŸifiˇti⁄
 = 0;

789 
	$GC_nŸify_‹_övoke_föÆizîs
()

793 #i‡
	`deföed
(
KEEP_BACK_PTRS
Ë|| deföed(
MAKE_BACK_GRAPH
)

794 
w‹d
 
œ°_back_åa˚_gc_no
 = 1;

796 i‡(
GC_gc_no
 > 
œ°_back_åa˚_gc_no
) {

797 
w‹d
 
i
;

799 #ifde‡
KEEP_BACK_PTRS


800 
	`LOCK
();

802 
œ°_back_åa˚_gc_no
 = (
w‹d
)(-1);

803 
i
 = 0; i < 
GC_backåa˚s
; ++i) {

808 
	`UNLOCK
();

809 
	`GC_gíî©e_øndom_backåa˚_no_gc
();

810 
	`LOCK
();

812 
œ°_back_åa˚_gc_no
 = 
GC_gc_no
;

813 
	`UNLOCK
();

815 #ifde‡
MAKE_BACK_GRAPH


816 i‡(
GC_¥öt_back_height
)

817 
	`GC_¥öt_back_gøph_°©s
();

821 i‡(
GC_föÆize_now
 == 0) ;

822 i‡(!
GC_föÆize_⁄_dem™d
) {

823 (Ë
	`GC_övoke_föÆizîs
();

824 #i‚de‡
THREADS


825 
	`GC_ASSERT
(
GC_föÆize_now
 == 0);

829 i‡(
GC_föÆizî_nŸifõr
 != ((*) ())0

830 && 
œ°_föÆizî_nŸifiˇti⁄
 !
GC_gc_no
) {

831 
œ°_föÆizî_nŸifiˇti⁄
 = 
GC_gc_no
;

832 
	`GC_föÆizî_nŸifõr
();

834 
	}
}

836 * 
	$GC_ˇŒ_wôh_Æloc_lock
(
GC_‚_ty≥
 
‚
, * 
˛õ¡_d©a
)

838 * 
ªsu…
;

839 
DCL_LOCK_STATE
;

841 #ifde‡
THREADS


842 
	`LOCK
();

844 
	`SET_LOCK_HOLDER
();

846 
ªsu…
 = (*
‚
)(
˛õ¡_d©a
);

847 #ifde‡
THREADS


848 #i‚de‡
GC_ASSERTIONS


849 
	`UNSET_LOCK_HOLDER
();

851 
	`UNLOCK
();

853 (
ªsu…
);

854 
	}
}

856 #i‡!
deföed
(
NO_DEBUGGING
)

858 
	$GC_¥öt_föÆiz©i⁄_°©s
()

860 
föÆizabÀ_obje˘
 *
fo
 = 
GC_föÆize_now
;

861 
size_t
 
ªady
 = 0;

863 
	`GC_¥ötf
("%u finalizationÅableÉntries; %u disappearingÜinks\n",

864 
GC_fo_íåõs
, 
GC_dl_íåõs
);

865 ; 0 !
fo
; fÿ
	`fo_√xt
(fo)Ë++
ªady
;

866 
	`GC_¥ötf
("%u obje˘†¨êñigibÀ f‹ immedüã föÆiz©i⁄\n", 
ªady
);

867 
	}
}

	@gc_cpp.cc

26 
	~<gc_˝p.h
>

28 * 
›î©‹
 
	$√w
–
size_t
 
size
 ) {

29  
	`GC_MALLOC_UNCOLLECTABLE
–
size
 );
	}
}

31 
›î©‹
 
	$dñëe
–* 
obj
 ) {

32 
	`GC_FREE
–
obj
 );
	}
}

34 #ifde‡
GC_OPERATOR_NEW_ARRAY


36 * 
›î©‹
 
	g√w
[]–
size_t
 
	gsize
 ) {

37  
GC_MALLOC_UNCOLLECTABLE
–
size
 );}

39 
›î©‹
 
	gdñëe
[]–* 
	gobj
 ) {

40 
GC_FREE
–
obj
 );}

44 #ifde‡
_MSC_VER


47 * 
›î©‹
 
	$√w
–
size_t
 
size
,

49 c⁄° * 
szFûeName
,

50 
nLöe
 )

52 #i‚de‡
GC_DEBUG


53  
	`GC_mÆloc_uncﬁÀ˘abÀ
–
size
 );

55  
	`GC_debug_mÆloc_uncﬁÀ˘abÀ
(
size
, 
szFûeName
, 
nLöe
);

57 
	}
}

60 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
, 
	gnBlockU£
, c⁄° * 
	gszFûeName
, 
	gnLöe
)

62  
›î©‹
 
√w
(
size
, 
nBlockU£
, 
szFûeName
, 
nLöe
);

	@gc_cpp.cpp

2 
	~"gc_˝p.cc
"

	@gc_dlopen.c

26 
	~"¥iv©e/gc_¥iv.h
"

28 #i‡(
deföed
(
GC_PTHREADS
Ë&& !deföed(
GC_DARWIN_THREADS
)Ë&& !deföed(
GC_WIN32_PTHREADS
)\

29 || 
	$deföed
(
GC_SOLARIS_THREADS
)

31 #i‡
	`deföed
(
dl›í
Ë&& !deföed(
GC_USE_LD_WRAP
)

37 #unde‡
dl›í


49 
	$dißbÀ_gc_f‹_dl›í
()

51 
	`LOCK
();

52 
GC_ö¸emíèl
 && 
	`GC_cﬁÀ˘i⁄_ö_¥ogªss
()) {

53 
	`GC_cﬁÀ˘_a_lôée_ö√r
(1000);

55 ++
GC_d⁄t_gc
;

56 
	`UNLOCK
();

57 
	}
}

63 
	~<dlf˙.h
>

65 #ifde‡
GC_USE_LD_WRAP


66 * 
	$__wøp_dl›í
(c⁄° *
∑th
, 
mode
)

68 * 
	$GC_dl›í
(c⁄° *
∑th
, 
mode
)

71 * 
ªsu…
;

73 #i‚de‡
USE_PROC_FOR_LIBRARIES


74 
	`dißbÀ_gc_f‹_dl›í
();

76 #ifde‡
GC_USE_LD_WRAP


77 
ªsu…
 = (*)
	`__ªÆ_dl›í
(
∑th
, 
mode
);

79 
ªsu…
 = 
	`dl›í
(
∑th
, 
mode
);

81 #i‚de‡
USE_PROC_FOR_LIBRARIES


82 
	`GC_íabÀ
();

84 (
ªsu…
);

85 
	}
}

	@gcj_mlc.c

17 #ifde‡
GC_GCJ_SUPPORT


39 
	~"¥iv©e/gc_pm¨k.h
"

40 
	~"gc_gcj.h
"

41 
	~"¥iv©e/dbg_mlc.h
"

43 
GC_boﬁ
 
	gGC_gcj_mÆloc_öôülized
 = 
FALSE
;

45 
	gGC_gcj_köd
;

47 
	gGC_gcj_debug_köd
;

50 
±r_t
 * 
	gGC_gcjobj‰ìli°
;

51 
±r_t
 * 
	gGC_gcjdebugobj‰ìli°
;

54 
	$GC_öô_gcj_mÆloc
(
mp_ödex
, * 
mp
)

56 
i
;

57 
GC_boﬁ
 
ign‹e_gcj_öfo
;

58 
DCL_LOCK_STATE
;

60 
	`GC_öô
();

61 
	`LOCK
();

62 i‡(
GC_gcj_mÆloc_öôülized
) {

63 
	`UNLOCK
();

66 
GC_gcj_mÆloc_öôülized
 = 
TRUE
;

67 
ign‹e_gcj_öfo
 = (0 !
	`GETENV
("GC_IGNORE_GCJ_INFO"));

68 i‡(
GC_¥öt_°©s
 && 
ign‹e_gcj_öfo
) {

69 
	`GC_log_¥ötf
("Gcj-styleÅype information is disabled!\n");

71 
	`GC_ASSERT
(
GC_m¨k_¥ocs
[
mp_ödex
] =(
GC_m¨k_¥oc
)0);

72 
GC_m¨k_¥ocs
[
mp_ödex
] = (
GC_m¨k_¥oc
)
mp
;

73 i‡(
mp_ödex
 >
GC_n_m¨k_¥ocs
Ë
	`ABORT
("GC_init_gcj_malloc: bad index");

75 
GC_gcjobj‰ìli°
 = (
±r_t
 *)
	`GC_√w_‰ì_li°_ö√r
();

76 i‡(
ign‹e_gcj_öfo
) {

79 
GC_gcj_köd
 = 
	`GC_√w_köd_ö√r
((**)
GC_gcjobj‰ìli°
,

80 (0 | 
GC_DS_LENGTH
),

81 
TRUE
, TRUE);

83 
GC_gcj_köd
 = 
	`GC_√w_köd_ö√r
(

84 (**)
GC_gcjobj‰ìli°
,

85 (((
w‹d
)(-
MARK_DESCR_OFFSET
 - 
GC_INDIR_PER_OBJ_BIAS
))

86 | 
GC_DS_PER_OBJECT
),

87 
FALSE
, 
TRUE
);

90 i‡(
ign‹e_gcj_öfo
) {

91 
GC_gcj_debug_köd
 = 
GC_gcj_köd
;

92 
GC_gcjdebugobj‰ìli°
 = 
GC_gcjobj‰ìli°
;

94 
GC_gcjdebugobj‰ìli°
 = (
±r_t
 *)
	`GC_√w_‰ì_li°_ö√r
();

95 
GC_gcj_debug_köd
 = 
	`GC_√w_köd_ö√r
(

96 (**)
GC_gcjdebugobj‰ìli°
,

97 
	`GC_MAKE_PROC
(
mp_ödex
,

99 
FALSE
, 
TRUE
);

101 
	`UNLOCK
();

102 
	}
}

104 * 
GC_˛ór_°ack
(*);

106 
	#GENERAL_MALLOC
(
lb
,
k
) \

107 
	`GC_˛ór_°ack
(
	`GC_gíîic_mÆloc_ö√r
((
w‹d
)
lb
, 
k
))

	)

109 
	#GENERAL_MALLOC_IOP
(
lb
,
k
) \

110 
	`GC_˛ór_°ack
(
	`GC_gíîic_mÆloc_ö√r_ign‹e_off_∑ge
(
lb
, 
k
))

	)

119 
	$maybe_föÆize
()

121 
œ°_föÆized_no
 = 0;

123 i‡(
GC_gc_no
 =
œ°_föÆized_no
) ;

124 i‡(!
GC_is_öôülized
) ;

125 
	`UNLOCK
();

126 
	`GC_INVOKE_FINALIZERS
();

127 
œ°_föÆized_no
 = 
GC_gc_no
;

128 
	`LOCK
();

129 
	}
}

134 #ifde‡
THREAD_LOCAL_ALLOC


135 * 
	$GC_c‹e_gcj_mÆloc
(
size_t
 
lb
, * 
±r_to_°ru˘_c⁄èöög_des¸
)

137 * 
	$GC_gcj_mÆloc
(
size_t
 
lb
, * 
±r_to_°ru˘_c⁄èöög_des¸
)

140 
±r_t
 
›
;

141 
±r_t
 * 
›p
;

142 
w‹d
 
lg
;

143 
DCL_LOCK_STATE
;

145 if(
	`SMALL_OBJ
(
lb
)) {

146 
lg
 = 
GC_size_m≠
[
lb
];

147 
›p
 = &(
GC_gcjobj‰ìli°
[
lg
]);

148 
	`LOCK
();

149 
›
 = *
›p
;

150 if(
	`EXPECT
(
›
 == 0, 0)) {

151 
	`maybe_föÆize
();

152 
›
 = (
±r_t
)
	`GENERAL_MALLOC
((
w‹d
)
lb
, 
GC_gcj_köd
);

153 i‡(0 =
›
) {

154 
	`UNLOCK
();

155 (
	`GC_oom_‚
(
lb
));

158 *
›p
 = 
	`obj_lök
(
›
);

159 
GC_byãs_Ælocd
 +
	`GRANULES_TO_BYTES
(
lg
);

161 *(**)
›
 = 
±r_to_°ru˘_c⁄èöög_des¸
;

162 
	`GC_ASSERT
(((**)
›
)[1] == 0);

163 
	`UNLOCK
();

165 
	`LOCK
();

166 
	`maybe_föÆize
();

167 
›
 = (
±r_t
)
	`GENERAL_MALLOC
((
w‹d
)
lb
, 
GC_gcj_köd
);

168 i‡(0 =
›
) {

169 
	`UNLOCK
();

170 (
	`GC_oom_‚
(
lb
));

172 *(**)
›
 = 
±r_to_°ru˘_c⁄èöög_des¸
;

173 
	`UNLOCK
();

175 ((*Ë
›
);

176 
	}
}

180 * 
	$GC_debug_gcj_mÆloc
(
size_t
 
lb
, * 
±r_to_°ru˘_c⁄èöög_des¸
,

181 
GC_EXTRA_PARAMS
)

183 * 
ªsu…
;

187 
	`LOCK
();

188 
	`maybe_föÆize
();

189 
ªsu…
 = 
	`GC_gíîic_mÆloc_ö√r
(
lb
 + 
DEBUG_BYTES
, 
GC_gcj_debug_köd
);

190 i‡(
ªsu…
 == 0) {

191 
	`UNLOCK
();

192 
	`GC_îr_¥ötf
("GC_debug_gcj_malloc(%ld, %p)Ñeturning NIL (",

193 ()
lb
, 
±r_to_°ru˘_c⁄èöög_des¸
);

194 
	`GC_îr_puts
(
s
);

195 
	`GC_îr_¥ötf
(":%d)\n", 
i
);

196 (
	`GC_oom_‚
(
lb
));

198 *((**)((
±r_t
)
ªsu…
 + (
oh
))Ë
±r_to_°ru˘_c⁄èöög_des¸
;

199 
	`UNLOCK
();

200 i‡(!
GC_debuggög_°¨ãd
) {

201 
	`GC_°¨t_debuggög
();

203 
	`ADD_CALL_CHAIN
(
ªsu…
, 
ø
);

204  (
	`GC_°‹e_debug_öfo
(
ªsu…
, (
w‹d
)
lb
, 
s
, (w‹d)
i
));

205 
	}
}

207 * 
	$GC_gcj_mÆloc_ign‹e_off_∑ge
(
size_t
 
lb
,

208 * 
±r_to_°ru˘_c⁄èöög_des¸
)

210 
±r_t
 
›
;

211 
±r_t
 * 
›p
;

212 
w‹d
 
lg
;

213 
DCL_LOCK_STATE
;

215 if(
	`SMALL_OBJ
(
lb
)) {

216 
lg
 = 
GC_size_m≠
[
lb
];

217 
›p
 = &(
GC_gcjobj‰ìli°
[
lg
]);

218 
	`LOCK
();

219 if–(
›
 = *
›p
) == 0 ) {

220 
	`maybe_föÆize
();

221 
›
 = (
±r_t
)
	`GENERAL_MALLOC_IOP
(
lb
, 
GC_gcj_köd
);

222 
lg
 = 
GC_size_m≠
[
lb
];

224 *
›p
 = 
	`obj_lök
(
›
);

225 
GC_byãs_Ælocd
 +
	`GRANULES_TO_BYTES
(
lg
);

227 *(**)
›
 = 
±r_to_°ru˘_c⁄èöög_des¸
;

228 
	`UNLOCK
();

230 
	`LOCK
();

231 
	`maybe_föÆize
();

232 
›
 = (
±r_t
)
	`GENERAL_MALLOC_IOP
(
lb
, 
GC_gcj_köd
);

233 i‡(0 !
›
) {

234 *(**)
›
 = 
±r_to_°ru˘_c⁄èöög_des¸
;

236 
	`UNLOCK
();

238 ((*Ë
›
);

239 
	}
}

243 
	gGC_no_gcj_suµ‹t
;

	@gcname.c

1 
	~<°dio.h
>

2 
	~<gc.h
>

4 
	$maö
()

6 i‡(
GC_ALPHA_VERSION
 =
GC_NOT_ALPHA
) {

7 
	`¥ötf
("gc%d.%d", 
GC_VERSION_MAJOR
, 
GC_VERSION_MINOR
);

9 
	`¥ötf
("gc%d.%dÆpha%d", 
GC_VERSION_MAJOR
,

10 
GC_VERSION_MINOR
, 
GC_ALPHA_VERSION
);

13 
	}
}

	@headers.c

25 
	~"¥iv©e/gc_¥iv.h
"

27 
bŸtom_ödex
 * 
	gGC_Æl_bŸtom_ödi˚s
 = 0;

31 
bŸtom_ödex
 * 
	gGC_Æl_bŸtom_ödi˚s_íd
 = 0;

36 
hdr
 * 
	$GC_föd_hódî
(
±r_t
 
h
)

38 #ifde‡
HASH_TL


39 
hdr
 * 
ªsu…
;

40 
	`GET_HDR
(
h
, 
ªsu…
);

41 (
ªsu…
);

43 (
	`HDR_INNER
(
h
));

45 
	}
}

53 #ifde‡
PRINT_BLACK_LIST


54 
hdr
 * 
	$GC_hódî_ˇche_miss
(
±r_t
 
p
, 
hdr_ˇche_íåy
 *
h˚
,Öå_à
sour˚
)

56 
hdr
 * 
	$GC_hódî_ˇche_miss
(
±r_t
 
p
, 
hdr_ˇche_íåy
 *
h˚
)

59 
hdr
 *
hhdr
;

60 
	`HC_MISS
();

61 
	`GET_HDR
(
p
, 
hhdr
);

62 i‡(
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
)) {

63 i‡(
GC_Æl_öãri‹_poöãrs
) {

64 i‡(
hhdr
 != 0) {

65 
±r_t
 
cuºít
 = 
p
;

67 
cuºít
 = (
±r_t
)
	`HBLKPTR
(current);

69 
cuºít
 = cuºíà- 
HBLKSIZE
*(
w‹d
)
hhdr
;

70 
hhdr
 = 
	`HDR
(
cuºít
);

71 } 
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
));

73 i‡(
hhdr
 -> 
hb_Êags
 & 
IGNORE_OFF_PAGE


74 || 
	`HBLK_IS_FREE
(
hhdr
))

76 i‡(
p
 - 
cuºít
 >(
±rdiff_t
)(
hhdr
->
hb_sz
)) {

77 
	`GC_ADD_TO_BLACK_LIST_NORMAL
(
p
, 
sour˚
);

82 
	`GC_ADD_TO_BLACK_LIST_NORMAL
(
p
, 
sour˚
);

84  
hhdr
;

89 i‡(
hhdr
 == 0) {

90 
	`GC_ADD_TO_BLACK_LIST_NORMAL
(
p
, 
sour˚
);

95 i‡(
	`HBLK_IS_FREE
(
hhdr
)) {

96 
	`GC_ADD_TO_BLACK_LIST_NORMAL
(
p
, 
sour˚
);

99 
h˚
 -> 
block_addr
 = (
w‹d
)(
p
Ë>> 
LOG_HBLKSIZE
;

100 
h˚
 -> 
h˚_hdr
 = 
hhdr
;

101  
hhdr
;

104 
	}
}

109 
±r_t
 
	gs¸©ch_‰ì_±r
 = 0;

114 
±r_t
 
	$GC_s¸©ch_Æloc
(
size_t
 
byãs
)

116 
±r_t
 
ªsu…
 = 
s¸©ch_‰ì_±r
;

118 
byãs
 +
GRANULE_BYTES
-1;

119 
byãs
 &~(
GRANULE_BYTES
-1);

120 
s¸©ch_‰ì_±r
 +
byãs
;

121 i‡(
s¸©ch_‰ì_±r
 <
GC_s¸©ch_íd_±r
) {

122 (
ªsu…
);

125 
w‹d
 
byãs_to_gë
 = 
MINHINCR
 * 
HBLKSIZE
;

127 i‡(
byãs_to_gë
 <
byãs
) {

129 
byãs_to_gë
 = 
byãs
;

130 #ifde‡
USE_MMAP


131 
byãs_to_gë
 +
GC_∑ge_size
 - 1;

132 
byãs_to_gë
 &~(
GC_∑ge_size
 - 1);

134 
ªsu…
 = (
±r_t
)
	`GET_MEM
(
byãs_to_gë
);

135 
	`GC_add_to_our_mem‹y
(
ªsu…
, 
byãs_to_gë
);

136 
s¸©ch_‰ì_±r
 -
byãs
;

137 
GC_s¸©ch_œ°_íd_±r
 = 
ªsu…
 + 
byãs
;

138 (
ªsu…
);

140 
ªsu…
 = (
±r_t
)
	`GET_MEM
(
byãs_to_gë
);

141 
	`GC_add_to_our_mem‹y
(
ªsu…
, 
byãs_to_gë
);

142 i‡(
ªsu…
 == 0) {

143 i‡(
GC_¥öt_°©s
)

144 
	`GC_¥ötf
("Out of memory -ÅryingÅoállocateÜess\n");

145 
s¸©ch_‰ì_±r
 -
byãs
;

146 
byãs_to_gë
 = 
byãs
;

147 #ifde‡
USE_MMAP


148 
byãs_to_gë
 +
GC_∑ge_size
 - 1;

149 
byãs_to_gë
 &~(
GC_∑ge_size
 - 1);

151 
ªsu…
 = (
±r_t
)
	`GET_MEM
(
byãs_to_gë
);

152 
	`GC_add_to_our_mem‹y
(
ªsu…
, 
byãs_to_gë
);

153  
ªsu…
;

155 
s¸©ch_‰ì_±r
 = 
ªsu…
;

156 
GC_s¸©ch_íd_±r
 = 
s¸©ch_‰ì_±r
 + 
byãs_to_gë
;

157 
GC_s¸©ch_œ°_íd_±r
 = 
GC_s¸©ch_íd_±r
;

158 (
	`GC_s¸©ch_Æloc
(
byãs
));

160 
	}
}

162 
hdr
 * 
	ghdr_‰ì_li°
 = 0;

165 
hdr
 * 
	$Æloc_hdr
()

167 
hdr
 * 
ªsu…
;

169 i‡(
hdr_‰ì_li°
 == 0) {

170 
ªsu…
 = (
hdr
 *Ë
	`GC_s¸©ch_Æloc
((
w‹d
)((hdr)));

172 
ªsu…
 = 
hdr_‰ì_li°
;

173 
hdr_‰ì_li°
 = (
hdr
 *Ë(
ªsu…
 -> 
hb_√xt
);

175 (
ªsu…
);

176 
	}
}

178 
	$‰ì_hdr
(
hdr
 * 
hhdr
)

180 
hhdr
 -> 
hb_√xt
 = (
hblk
 *Ë
hdr_‰ì_li°
;

181 
hdr_‰ì_li°
 = 
hhdr
;

182 
	}
}

184 #ifde‡
USE_HDR_CACHE


185 
w‹d
 
	gGC_hdr_ˇche_hôs
 = 0;

186 
w‹d
 
	gGC_hdr_ˇche_mis£s
 = 0;

189 
	$GC_öô_hódîs
()

191 
i
;

193 
GC_Æl_nûs
 = (
bŸtom_ödex
 *)
	`GC_s¸©ch_Æloc
((
w‹d
)(bottom_index));

194 
	`BZERO
(
GC_Æl_nûs
, (
bŸtom_ödex
));

195 
i
 = 0; i < 
TOP_SZ
; i++) {

196 
GC_t›_ödex
[
i
] = 
GC_Æl_nûs
;

198 
	}
}

202 
GC_boﬁ
 
	$gë_ödex
(
w‹d
 
addr
)

204 
w‹d
 
hi
 = (w‹d)(
addr
Ë>> (
LOG_BOTTOM_SZ
 + 
LOG_HBLKSIZE
);

205 
bŸtom_ödex
 * 
r
;

206 
bŸtom_ödex
 * 
p
;

207 
bŸtom_ödex
 ** 
¥ev
;

208 
bŸtom_ödex
 *
pi
;

210 #ifde‡
HASH_TL


211 
w‹d
 
i
 = 
	`TL_HASH
(
hi
);

212 
bŸtom_ödex
 * 
ﬁd
;

214 
ﬁd
 = 
p
 = 
GC_t›_ödex
[
i
];

215 
p
 !
GC_Æl_nûs
) {

216 i‡(
p
 -> 
key
 =
hi
Ë(
TRUE
);

217 
p
 =Ö -> 
hash_lök
;

219 
r
 = (
bŸtom_ödex
*)
	`GC_s¸©ch_Æloc
((
w‹d
)( (bottom_index)));

220 i‡(
r
 =0Ë(
FALSE
);

221 
	`BZERO
(
r
,  (
bŸtom_ödex
));

222 
r
 -> 
hash_lök
 = 
ﬁd
;

223 
GC_t›_ödex
[
i
] = 
r
;

225 i‡(
GC_t›_ödex
[
hi
] !
GC_Æl_nûs
Ë(
TRUE
);

226 
r
 = (
bŸtom_ödex
*)
	`GC_s¸©ch_Æloc
((
w‹d
)( (bottom_index)));

227 i‡(
r
 =0Ë(
FALSE
);

228 
GC_t›_ödex
[
hi
] = 
r
;

229 
	`BZERO
(
r
,  (
bŸtom_ödex
));

231 
r
 -> 
key
 = 
hi
;

233 
¥ev
 = &
GC_Æl_bŸtom_ödi˚s
;

234 
pi
 = 0;

235 (
p
 = *
¥ev
Ë!0 &&Ö -> 
key
 < 
hi
) {

236 
pi
 = 
p
;

237 
¥ev
 = &(
p
 -> 
asc_lök
);

239 
r
 -> 
desc_lök
 = 
pi
;

240 i‡(0 =
p
) {

241 
GC_Æl_bŸtom_ödi˚s_íd
 = 
r
;

243 
p
 -> 
desc_lök
 = 
r
;

245 
r
 -> 
asc_lök
 = 
p
;

246 *
¥ev
 = 
r
;

247 (
TRUE
);

248 
	}
}

253 
hblkhdr
 * 
	$GC_ö°Æl_hódî
(
hblk
 *
h
)

255 
hdr
 * 
ªsu…
;

257 i‡(!
	`gë_ödex
((
w‹d
Ë
h
)) (0);

258 
ªsu…
 = 
	`Æloc_hdr
();

259 
	`SET_HDR
(
h
, 
ªsu…
);

260 #ifde‡
USE_MUNMAP


261 
ªsu…
 -> 
hb_œ°_ª˛aimed
 = ()
GC_gc_no
;

263 (
ªsu…
);

264 
	}
}

267 
GC_boﬁ
 
	$GC_ö°Æl_cou¡s
(
hblk
 *
h
, 
size_t
 
sz
 )

269 
hblk
 * 
hbp
;

270 
w‹d
 
i
;

272 
hbp
 = 
h
; (*)hb∞< (*)h + 
sz
; hb∞+
BOTTOM_SZ
) {

273 i‡(!
	`gë_ödex
((
w‹d
Ë
hbp
)Ë(
FALSE
);

275 i‡(!
	`gë_ödex
((
w‹d
)
h
 + 
sz
 - 1)Ë(
FALSE
);

276 
hbp
 = 
h
 + 1; (*)hb∞< (*)h + 
sz
; hbp += 1) {

277 
i
 = 
	`HBLK_PTR_DIFF
(
hbp
, 
h
);

278 
	`SET_HDR
(
hbp
, (
hdr
 *)(
i
 > 
MAX_JUMP
? MAX_JUMP : i));

280 (
TRUE
);

281 
	}
}

284 
	$GC_ªmove_hódî
(
hblk
 *
h
)

286 
hdr
 ** 
ha
;

288 
	`GET_HDR_ADDR
(
h
, 
ha
);

289 
	`‰ì_hdr
(*
ha
);

290 *
ha
 = 0;

291 
	}
}

294 
	$GC_ªmove_cou¡s
(
hblk
 *
h
, 
size_t
 
sz
 )

296 
hblk
 * 
hbp
;

298 
hbp
 = 
h
+1; (*)hb∞< (*)h + 
sz
; hbp += 1) {

299 
	`SET_HDR
(
hbp
, 0);

301 
	}
}

305 
GC_≠∂y_to_Æl_blocks
((*
‚
)(
hblk
 *
h
, 
w‹d
 
˛õ¡_d©a
),

306 
w‹d
 
˛õ¡_d©a
)

308 
sig√d_w‹d
 
j
;

309 
bŸtom_ödex
 * 
ödex_p
;

311 
ödex_p
 = 
GC_Æl_bŸtom_ödi˚s
; index_p != 0;

312 
ödex_p
 = index_∞-> 
asc_lök
) {

313 
j
 = 
BOTTOM_SZ
-1; j >= 0;) {

314 i‡(!
	`IS_FORWARDING_ADDR_OR_NIL
(
ödex_p
->
ödex
[
j
])) {

315 i‡(!
	`HBLK_IS_FREE
(
ödex_p
->
ödex
[
j
])) {

316 (*
‚
)(((
hblk
 *)

317 (((
ödex_p
->
key
 << 
LOG_BOTTOM_SZ
Ë+ (
w‹d
)
j
)

318 << 
LOG_HBLKSIZE
)),

319 
˛õ¡_d©a
);

321 
j
--;

322 } i‡(
ödex_p
->
ödex
[
j
] == 0) {

323 
j
--;

325 
j
 -(
sig√d_w‹d
)(
ödex_p
->
ödex
[j]);

329 
	}
}

333 
hblk
 * 
	$GC_√xt_u£d_block
(
hblk
 *
h
)

335 
bŸtom_ödex
 * 
bi
;

336 
w‹d
 
j
 = ((w‹d)
h
 >> 
LOG_HBLKSIZE
Ë& (
BOTTOM_SZ
-1);

338 
	`GET_BI
(
h
, 
bi
);

339 i‡(
bi
 =
GC_Æl_nûs
) {

340 
w‹d
 
hi
 = (w‹d)
h
 >> (
LOG_BOTTOM_SZ
 + 
LOG_HBLKSIZE
);

341 
bi
 = 
GC_Æl_bŸtom_ödi˚s
;

342 
bi
 !0 && bò-> 
key
 < 
hi
Ëbòbò-> 
asc_lök
;

343 
j
 = 0;

345 
bi
 != 0) {

346 
j
 < 
BOTTOM_SZ
) {

347 
hdr
 * 
hhdr
 = 
bi
 -> 
ödex
[
j
];

348 i‡(
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
)) {

349 
j
++;

351 i‡(!
	`HBLK_IS_FREE
(
hhdr
)) {

352 ((
hblk
 *)

353 (((
bi
 -> 
key
 << 
LOG_BOTTOM_SZ
Ë+ 
j
)

354 << 
LOG_HBLKSIZE
));

356 
j
 +
	`divHBLKSZ
(
hhdr
 -> 
hb_sz
);

360 
j
 = 0;

361 
bi
 = bò-> 
asc_lök
;

364 
	}
}

369 
hblk
 * 
	$GC_¥ev_block
(
hblk
 *
h
)

371 
bŸtom_ödex
 * 
bi
;

372 
sig√d_w‹d
 
j
 = ((
w‹d
)
h
 >> 
LOG_HBLKSIZE
Ë& (
BOTTOM_SZ
-1);

374 
	`GET_BI
(
h
, 
bi
);

375 i‡(
bi
 =
GC_Æl_nûs
) {

376 
w‹d
 
hi
 = (w‹d)
h
 >> (
LOG_BOTTOM_SZ
 + 
LOG_HBLKSIZE
);

377 
bi
 = 
GC_Æl_bŸtom_ödi˚s_íd
;

378 
bi
 !0 && bò-> 
key
 > 
hi
Ëbòbò-> 
desc_lök
;

379 
j
 = 
BOTTOM_SZ
 - 1;

381 
bi
 != 0) {

382 
j
 >= 0) {

383 
hdr
 * 
hhdr
 = 
bi
 -> 
ödex
[
j
];

384 i‡(0 =
hhdr
) {

385 --
j
;

386 } i‡(
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
)) {

387 
j
 -(
sig√d_w‹d
)
hhdr
;

389 ((
hblk
 *)

390 (((
bi
 -> 
key
 << 
LOG_BOTTOM_SZ
Ë+ 
j
)

391 << 
LOG_HBLKSIZE
));

394 
j
 = 
BOTTOM_SZ
 - 1;

395 
bi
 = bò-> 
desc_lök
;

398 
	}
}

	@if_mach.c

3 
	~"¥iv©e/gcc⁄fig.h
"

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<uni°d.h
>

8 
	$maö
(
¨gc
, **
¨gv
, **
ívp
)

10 i‡(
¨gc
 < 4Ë
Ußge
;

11 i‡(
	`°rcmp
(
MACH_TYPE
, 
¨gv
[1]) != 0) (0);

12 i‡(
	`°rcmp
(
OS_TYPE
, ""Ë!0 && såcmp(
¨gv
[2], "") != 0

13 && 
	`°rcmp
(
OS_TYPE
, 
¨gv
[2]) != 0) (0);

14 
	`Ârötf
(
°dîr
, "^^^^Starting command^^^^\n");

15 
	`fÊush
(
°dout
);

16 
	`execvp
(
¨gv
[3],árgv+3);

17 
	`≥º‹
("Couldn'tÉxecute");

19 
Ußge
:

20 
	`Ârötf
(
°dîr
, "Ußge: %†mach_ty≥ os_ty≥ comm™d\n", 
¨gv
[0]);

21 
	`Ârötf
(
°dîr
, "Currently mach_type = %s, os_type = %s\n",

22 
MACH_TYPE
, 
OS_TYPE
);

24 
	}
}

	@if_not_there.c

3 
	~"¥iv©e/gcc⁄fig.h
"

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<uni°d.h
>

7 #ifde‡
__DJGPP__


8 
	~<dúít.h
>

11 
	$maö
(
¨gc
, **
¨gv
, **
ívp
)

13 
FILE
 * 
f
;

14 #ifde‡
__DJGPP__


15 
DIR
 * 
d
;

17 i‡(
¨gc
 < 3Ë
Ußge
;

18 i‡((
f
 = 
	`f›í
(
¨gv
[1], "rb")) != 0

19 || (
f
 = 
	`f›í
(
¨gv
[1], "r")) != 0) {

20 
	`f˛o£
(
f
);

23 #ifde‡
__DJGPP__


24 i‡((
d
 = 
	`›ídú
(
¨gv
[1])) != 0) {

25 
	`˛o£dú
(
d
);

29 
	`¥ötf
("^^^^Starting command^^^^\n");

30 
	`fÊush
(
°dout
);

31 
	`execvp
(
¨gv
[2],árgv+2);

32 
	`exô
(1);

34 
Ußge
:

35 
	`Ârötf
(
°dîr
, "Ußge: %†fûe_«mêcomm™d\n", 
¨gv
[0]);

37 
	}
}

	@include/cord.h

58 #i‚de‡
CORD_H


60 
	#CORD_H


	)

61 
	~<°ddef.h
>

62 
	~<°dio.h
>

69 c⁄° * 
	tCORD
;

72 
	#CORD_EMPTY
 0

	)

75 
	#CORD_IS_STRING
(
s
Ë(*(sË!'\0')

	)

79 
CORD
 
CORD_ˇt
(CORD 
x
, CORD 
y
);

86 
CORD
 
CORD_ˇt_ch¨_°¨
(CORD 
x
, c⁄° * 
y
, 
size_t
 
Àny
);

89 
size_t
 
CORD_Àn
(
CORD
 
x
);

92 (* 
	tCORD_‚
)(
	tsize_t
 
	ti
, * 
	t˛õ¡_d©a
);

95 
CORD
 
	`CORD_‰om_‚
(
CORD_‚
 
‚
, * 
˛õ¡_d©a
, 
size_t
 
Àn
);

99 
CORD
 
	`CORD_sub°r
(CORD 
x
, 
size_t
 
i
, size_à
n
);

109 
CORD
 
	`CORD_bÆ™˚
(CORD 
x
);

118 (* 
	tCORD_ôî_‚
)(
	tc
, * 
	t˛õ¡_d©a
);

122 (* 
	tCORD_b©ched_ôî_‚
)(c⁄° * 
	ts
, * 
	t˛õ¡_d©a
);

123 
	#CORD_NO_FN
 ((
CORD_b©ched_ôî_‚
)0)

	)

133 
	`CORD_ôî5
(
CORD
 
x
, 
size_t
 
i
, 
CORD_ôî_‚
 
f1
,

134 
CORD_b©ched_ôî_‚
 
f2
, * 
˛õ¡_d©a
);

137 
	`CORD_ôî
(
CORD
 
x
, 
CORD_ôî_‚
 
f1
, * 
˛õ¡_d©a
);

138 
	#CORD_ôî
(
x
, 
f1
, 
cd
Ë
	`CORD_ôî5
(x, 0, f1, 
CORD_NO_FN
, cd)

	)

142 
	`CORD_rôî4
(
CORD
 
x
, 
size_t
 
i
, 
CORD_ôî_‚
 
f1
, * 
˛õ¡_d©a
);

145 
	`CORD_rôî
(
CORD
 
x
, 
CORD_ôî_‚
 
f1
, * 
˛õ¡_d©a
);

157 
	~"¥iv©e/c‹d_pos.h
"

190 
	#CORD_FOR
(
pos
, 
c‹d
) \

191 
	`CORD_£t_pos
(
pos
, 
c‹d
, 0); 
	`CORD_pos_vÆid
’os); 
	`CORD_√xt
’os))

	)

196 (* 
CORD_oom_‚
)();

200 
	`CORD_dump
(
CORD
 
x
);

206 
CORD
 
	`CORD_ˇt_ch¨
(CORD 
x
, 
c
);

209 
CORD
 
	`CORD_ˇä
(
n
, ...);

212 
	`CORD_„tch
(
CORD
 
x
, 
size_t
 
i
);

215 
	`CORD_cmp
(
CORD
 
x
, CORD 
y
);

219 
	`CORD_ncmp
(
CORD
 
x
, 
size_t
 
x_°¨t
, CORD 
y
, size_à
y_°¨t
, size_à
Àn
);

224 
size_t
 
	`CORD_°r
(
CORD
 
x
, size_à
°¨t
, CORD 
s
);

229 
CORD
 
	`CORD_ch¨s
(
c
, 
size_t
 
i
);

230 
	#CORD_nul
(
i
Ë
	`CORD_ch¨s
('\0', (i))

	)

248 
CORD
 
	`CORD_‰om_fûe
(
FILE
 * 
f
);

253 
CORD
 
	`CORD_‰om_fûe_ógî
(
FILE
 * 
f
);

257 
CORD
 
	`CORD_‰om_fûe_œzy
(
FILE
 * 
f
);

261 * 
	`CORD_to_ch¨_°¨
(
CORD
 
x
);

265 
CORD
 
	`CORD_‰om_ch¨_°¨
(c⁄° *
s
);

269 c⁄° * 
	`CORD_to_c⁄°_ch¨_°¨
(
CORD
 
x
);

274 
	`CORD_put
(
CORD
 
x
, 
FILE
 * 
f
);

277 
	#CORD_NOT_FOUND
 ((
size_t
)(-1))

	)

282 
size_t
 
	`CORD_chr
(
CORD
 
x
, size_à
i
, 
c
);

287 
size_t
 
	`CORD_rchr
(
CORD
 
x
, size_à
i
, 
c
);

314 #i‚de‡
CORD_NO_IO


316 
	~<°d¨g.h
>

318 
	`CORD_•rötf
(
CORD
 * 
out
, CORD 
f‹m©
, ...);

319 
	`CORD_v•rötf
(
CORD
 * 
out
, CORD 
f‹m©
, 
va_li°
 
¨gs
);

320 
	`CORD_Ârötf
(
FILE
 * 
f
, 
CORD
 
f‹m©
, ...);

321 
	`CORD_vÂrötf
(
FILE
 * 
f
, 
CORD
 
f‹m©
, 
va_li°
 
¨gs
);

322 
	`CORD_¥ötf
(
CORD
 
f‹m©
, ...);

323 
	`CORD_v¥ötf
(
CORD
 
f‹m©
, 
va_li°
 
¨gs
);

	@include/ec.h

1 #i‚de‡
EC_H


2 
	#EC_H


	)

4 #i‚de‡
CORD_H


5 
	~"c‹d.h
"

33 #i‚de‡
CORD_BUFSZ


34 
	#CORD_BUFSZ
 128

	)

37 
	sCORD_ec_°ru˘
 {

38 
CORD
 
	mec_c‹d
;

39 * 
	mec_buÂå
;

40 
	mec_buf
[
CORD_BUFSZ
+1];

41 } 
	tCORD_ec
[1];

49 
CORD_ec_Êush_buf
(
CORD_ec
 
x
);

52 
	#CORD_ec_to_c‹d
(
x
Ë(
	`CORD_ec_Êush_buf
(x), (x)[0].
ec_c‹d
)

	)

55 
	#CORD_ec_öô
(
x
Ë((x)[0].
ec_c‹d
 = 0, (x)[0].
ec_buÂå
 = (x)[0].
ec_buf
)

	)

58 
	#CORD_ec_≠≥nd
(
x
, 
c
) \

60 i‡((
x
)[0].
ec_buÂå
 =(x)[0].
ec_buf
 + 
CORD_BUFSZ
) { \

61 
	`CORD_ec_Êush_buf
(
x
); \

63 *((
x
)[0].
ec_buÂå
)++ = (
c
); \

64 }

	)

68 
CORD_ec_≠≥nd_c‹d
(
CORD_ec
 
x
, 
CORD
 
s
);

	@include/extra/gc.h

2 
	~<gc/gc.h
>

	@include/extra/gc_cpp.h

2 
	~<gc/gc_˝p.h
>

	@include/gc.h

30 #i‚de‡
_GC_H


32 
	#_GC_H


	)

34 
	~"gc_vîsi⁄.h
"

41 
	~"gc_c⁄fig_ma¸os.h
"

43 #ifde‡
__˝lu•lus


55 #i‚de‡
_WIN64


56 
	tGC_w‹d
;

57 
	tGC_sig√d_w‹d
;

62 
	tGC_w‹d
;

63 
	tGC_sig√d_w‹d
;

68 
GC_API
 
GC_w‹d
 
	gGC_gc_no
;

71 
GC_API
 
	gGC_∑øŒñ
;

84 
GC_API
 * (*
	gGC_oom_‚
Ë(
size_t
 
	gbyãs_ªque°ed
);

93 
GC_API
 
	gGC_föd_Àak
;

99 
GC_API
 
	gGC_Æl_öãri‹_poöãrs
;

111 
GC_API
 
	gGC_föÆize_⁄_dem™d
;

118 
GC_API
 
	gGC_java_föÆiz©i⁄
;

127 
GC_API
 (* 
	gGC_föÆizî_nŸifõr
)();

136 
GC_API
 
	gGC_d⁄t_gc
;

145 
GC_API
 
	gGC_d⁄t_ex∑nd
;

149 
GC_API
 
	gGC_u£_ítúe_hóp
;

160 
GC_API
 
	gGC_fuŒ_‰eq
;

170 
GC_API
 
GC_w‹d
 
	gGC_n⁄_gc_byãs
;

176 
GC_API
 
	gGC_no_dls
;

184 
GC_API
 
GC_w‹d
 
	gGC_‰ì_•a˚_divis‹
;

198 
GC_API
 
GC_w‹d
 
	gGC_max_ªåõs
;

204 
GC_API
 *
	gGC_°ackbŸtom
;

216 
GC_API
 
	gGC_d⁄t_¥ecﬁÀ˘
;

224 
GC_API
 
	gGC_time_limô
;

233 
	#GC_TIME_UNLIMITED
 999999

	)

243 
GC_API
 
GC_öô
();

261 
GC_API
 * 
GC_mÆloc
(
size_t
 
size_ö_byãs
);

262 
GC_API
 * 
GC_mÆloc_©omic
(
size_t
 
size_ö_byãs
);

263 
GC_API
 * 
GC_°rdup
 (c⁄° *
°r
);

264 
GC_API
 * 
GC_mÆloc_uncﬁÀ˘abÀ
(
size_t
 
size_ö_byãs
);

265 
GC_API
 * 
GC_mÆloc_°ubb‹n
(
size_t
 
size_ö_byãs
);

269 
GC_API
 * 
GC_mÆloc_©omic_uncﬁÀ˘abÀ
(
size_t
 
size_ö_byãs
);

277 
GC_API
 
GC_‰ì
(* 
obje˘_addr
);

294 
GC_API
 
GC_ch™ge_°ubb‹n
(*);

295 
GC_API
 
GC_íd_°ubb‹n_ch™ge
(*);

308 
GC_API
 * 
GC_ba£
(* 
di•œ˚d_poöãr
);

313 
GC_API
 
size_t
 
GC_size
(* 
obje˘_addr
);

323 
GC_API
 * 
GC_ªÆloc
(* 
ﬁd_obje˘
, 
size_t
 
√w_size_ö_byãs
);

327 
GC_API
 
GC_ex∑nd_hp
(
size_t
 
numbî_of_byãs
);

332 
GC_API
 
GC_£t_max_hóp_size
(
GC_w‹d
 
n
);

339 
GC_API
 
GC_ex˛ude_°©ic_roŸs
(* 
low_addªss
,

340 * 
high_addªss_∂us_1
);

343 
GC_API
 
GC_˛ór_roŸs
();

346 
GC_API
 
GC_add_roŸs
(* 
low_addªss
, * 
high_addªss_∂us_1
);

349 
GC_API
 
GC_ªmove_roŸs
(* 
low_addªss
, * 
high_addªss_∂us_1
);

363 
GC_API
 
GC_ªgi°î_di•œ˚mít
(
size_t
 
n
);

367 
GC_API
 
GC_debug_ªgi°î_di•œ˚mít
(
size_t
 
n
);

370 
GC_API
 
GC_gcﬁÀ˘
();

381 (* 
	gGC_°›_func
)();

382 
GC_API
 
GC_åy_to_cﬁÀ˘
(
GC_°›_func
 
°›_func
);

387 
GC_API
 
size_t
 
GC_gë_hóp_size
();

390 
GC_API
 
size_t
 
GC_gë_‰ì_byãs
();

393 
GC_API
 
size_t
 
GC_gë_byãs_sö˚_gc
();

397 
GC_API
 
size_t
 
GC_gë_tŸÆ_byãs
();

401 
GC_API
 
GC_dißbÀ
();

406 
GC_API
 
GC_íabÀ
();

423 
GC_API
 
GC_íabÀ_ö¸emíèl
();

427 
	#GC_PROTECTS_POINTER_HEAP
 1

	)

428 
	#GC_PROTECTS_PTRFREE_HEAP
 2

	)

429 
	#GC_PROTECTS_STATIC_DATA
 4

	)

430 
	#GC_PROTECTS_STACK
 8

	)

432 
	#GC_PROTECTS_NONE
 0

	)

433 
GC_API
 
GC_ö¸emíèl_¥Ÿe˘i⁄_√eds
();

442 
GC_API
 
GC_cﬁÀ˘_a_lôée
();

458 
GC_API
 * 
GC_mÆloc_ign‹e_off_∑ge
(
size_t
 
lb
);

459 
GC_API
 * 
GC_mÆloc_©omic_ign‹e_off_∑ge
(
size_t
 
lb
);

461 #i‡
deföed
(
__sgi
Ë&& !deföed(
__GNUC__
Ë&& 
_COMPILER_VERSION
 >= 720

462 
	#GC_ADD_CALLER


	)

463 
	#GC_RETURN_ADDR
 (
GC_w‹d
)
__ªtu∫_addªss


	)

466 #i‡
deföed
(
__löux__
Ë|| deföed(
__GLIBC__
)

467 
	~<„©uªs.h
>

468 #i‡(
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >= 1 || __GLIBC__ > 2) \

469 && !
deföed
(
__ü64__
Ë&& !deföed(
__UCLIBC__
)

470 #i‚de‡
GC_HAVE_BUILTIN_BACKTRACE


471 
	#GC_HAVE_BUILTIN_BACKTRACE


	)

474 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

475 
	#GC_CAN_SAVE_CALL_STACKS


	)

479 #i‡
deföed
(
_MSC_VER
) && _MSC_VER >= 1200 \

480 && !
deföed
(
_AMD64_
)

481 #i‚de‡
GC_HAVE_NO_BUILTIN_BACKTRACE


482 
	#GC_HAVE_BUILTIN_BACKTRACE


	)

486 #i‡
deföed
(
GC_HAVE_BUILTIN_BACKTRACE
Ë&& !deföed(
GC_CAN_SAVE_CALL_STACKS
)

487 
	#GC_CAN_SAVE_CALL_STACKS


	)

490 #i‡
deföed
(
__•¨c__
)

491 
	#GC_CAN_SAVE_CALL_STACKS


	)

501 #i‡(
deföed
(
__löux__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
) \

502 || 
deföed
(
__FªeBSD__
Ë|| deföed(
__Døg⁄Fly__
)Ë& !deföed(
GC_CAN_SAVE_CALL_STACKS
)

503 
	#GC_ADD_CALLER


	)

504 #i‡
__GNUC__
 >3 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 95)

507 
	#GC_RETURN_ADDR
 (
GC_w‹d
)
	`__buûtö_ªtu∫_addªss
(0)

	)

510 
	#GC_RETURN_ADDR
 0

	)

514 #ifde‡
GC_ADD_CALLER


515 
	#GC_EXTRAS
 
GC_RETURN_ADDR
, 
__FILE__
, 
__LINE__


	)

516 
	#GC_EXTRA_PARAMS
 
GC_w‹d
 
ø
, c⁄° * 
s
, 
i


	)

518 
	#GC_EXTRAS
 
__FILE__
, 
__LINE__


	)

519 
	#GC_EXTRA_PARAMS
 c⁄° * 
s
, 
i


	)

524 
GC_API
 * 
GC_debug_mÆloc
(
size_t
 
size_ö_byãs
, 
GC_EXTRA_PARAMS
);

525 
GC_API
 * 
GC_debug_mÆloc_©omic
(
size_t
 
size_ö_byãs
, 
GC_EXTRA_PARAMS
);

526 
GC_API
 * 
GC_debug_°rdup
(c⁄° *
°r
, 
GC_EXTRA_PARAMS
);

527 
GC_API
 * 
	gGC_debug_mÆloc_uncﬁÀ˘abÀ


528 (
size_t
 
	gsize_ö_byãs
, 
	gGC_EXTRA_PARAMS
);

529 
GC_API
 * 
	gGC_debug_mÆloc_°ubb‹n


530 (
size_t
 
	gsize_ö_byãs
, 
	gGC_EXTRA_PARAMS
);

531 
GC_API
 * 
	gGC_debug_mÆloc_ign‹e_off_∑ge


532 (
size_t
 
	gsize_ö_byãs
, 
	gGC_EXTRA_PARAMS
);

533 
GC_API
 * 
	gGC_debug_mÆloc_©omic_ign‹e_off_∑ge


534 (
size_t
 
	gsize_ö_byãs
, 
	gGC_EXTRA_PARAMS
);

535 
GC_API
 
GC_debug_‰ì
 (* 
obje˘_addr
);

536 
GC_API
 * 
	gGC_debug_ªÆloc


537 (* 
	gﬁd_obje˘
, 
size_t
 
	g√w_size_ö_byãs
, 
	gGC_EXTRA_PARAMS
);

538 
GC_API
 
GC_debug_ch™ge_°ubb‹n
(*);

539 
GC_API
 
GC_debug_íd_°ubb‹n_ch™ge
(*);

553 
GC_API
 * 
GC_debug_mÆloc_ª∂a˚mít
 (
size_t
 
size_ö_byãs
);

554 
GC_API
 * 
	gGC_debug_ªÆloc_ª∂a˚mít


555 (* 
	gobje˘_addr
, 
size_t
 
	gsize_ö_byãs
);

557 #ifde‡
GC_DEBUG


558 
	#GC_MALLOC
(
sz
Ë
	`GC_debug_mÆloc
(sz, 
GC_EXTRAS
)

	)

559 
	#GC_MALLOC_ATOMIC
(
sz
Ë
	`GC_debug_mÆloc_©omic
(sz, 
GC_EXTRAS
)

	)

560 
	#GC_STRDUP
(
s
Ë
	`GC_debug_°rdup
((s), 
GC_EXTRAS
)

	)

561 
	#GC_MALLOC_UNCOLLECTABLE
(
sz
) \

562 
	`GC_debug_mÆloc_uncﬁÀ˘abÀ
(
sz
, 
GC_EXTRAS
)

	)

563 
	#GC_MALLOC_IGNORE_OFF_PAGE
(
sz
) \

564 
	`GC_debug_mÆloc_ign‹e_off_∑ge
(
sz
, 
GC_EXTRAS
)

	)

565 
	#GC_MALLOC_ATOMIC_IGNORE_OFF_PAGE
(
sz
) \

566 
	`GC_debug_mÆloc_©omic_ign‹e_off_∑ge
(
sz
, 
GC_EXTRAS
)

	)

567 
	#GC_REALLOC
(
ﬁd
, 
sz
Ë
	`GC_debug_ªÆloc
(ﬁd, sz, 
GC_EXTRAS
)

	)

568 
	#GC_FREE
(
p
Ë
	`GC_debug_‰ì
’)

	)

569 
	#GC_REGISTER_FINALIZER
(
p
, 
f
, 
d
, 
of
, 
od
) \

570 
	`GC_debug_ªgi°î_föÆizî
(
p
, 
f
, 
d
, 
of
, 
od
)

	)

571 
	#GC_REGISTER_FINALIZER_IGNORE_SELF
(
p
, 
f
, 
d
, 
of
, 
od
) \

572 
	`GC_debug_ªgi°î_föÆizî_ign‹e_£lf
(
p
, 
f
, 
d
, 
of
, 
od
)

	)

573 
	#GC_REGISTER_FINALIZER_NO_ORDER
(
p
, 
f
, 
d
, 
of
, 
od
) \

574 
	`GC_debug_ªgi°î_föÆizî_no_‹dî
(
p
, 
f
, 
d
, 
of
, 
od
)

	)

575 
	#GC_REGISTER_FINALIZER_UNREACHABLE
(
p
, 
f
, 
d
, 
of
, 
od
) \

576 
	`GC_debug_ªgi°î_föÆizî_uƒóchabÀ
(
p
, 
f
, 
d
, 
of
, 
od
)

	)

577 
	#GC_MALLOC_STUBBORN
(
sz
Ë
	`GC_debug_mÆloc_°ubb‹n
(sz, 
GC_EXTRAS
);

	)

578 
	#GC_CHANGE_STUBBORN
(
p
Ë
	`GC_debug_ch™ge_°ubb‹n
’)

	)

579 
	#GC_END_STUBBORN_CHANGE
(
p
Ë
	`GC_debug_íd_°ubb‹n_ch™ge
’)

	)

580 
	#GC_GENERAL_REGISTER_DISAPPEARING_LINK
(
lök
, 
obj
) \

581 
	`GC_gíîÆ_ªgi°î_dißµórög_lök
(
lök
, 
	`GC_ba£
(
obj
))

	)

582 
	#GC_REGISTER_DISPLACEMENT
(
n
Ë
	`GC_debug_ªgi°î_di•œ˚mít
“)

	)

584 
	#GC_MALLOC
(
sz
Ë
	`GC_mÆloc
(sz)

	)

585 
	#GC_MALLOC_ATOMIC
(
sz
Ë
	`GC_mÆloc_©omic
(sz)

	)

586 
	#GC_STRDUP
(
s
Ë
	`GC_°rdup
(s)

	)

587 
	#GC_MALLOC_UNCOLLECTABLE
(
sz
Ë
	`GC_mÆloc_uncﬁÀ˘abÀ
(sz)

	)

588 
	#GC_MALLOC_IGNORE_OFF_PAGE
(
sz
) \

589 
	`GC_mÆloc_ign‹e_off_∑ge
(
sz
)

	)

590 
	#GC_MALLOC_ATOMIC_IGNORE_OFF_PAGE
(
sz
) \

591 
	`GC_mÆloc_©omic_ign‹e_off_∑ge
(
sz
)

	)

592 
	#GC_REALLOC
(
ﬁd
, 
sz
Ë
	`GC_ªÆloc
(ﬁd, sz)

	)

593 
	#GC_FREE
(
p
Ë
	`GC_‰ì
’)

	)

594 
	#GC_REGISTER_FINALIZER
(
p
, 
f
, 
d
, 
of
, 
od
) \

595 
	`GC_ªgi°î_föÆizî
(
p
, 
f
, 
d
, 
of
, 
od
)

	)

596 
	#GC_REGISTER_FINALIZER_IGNORE_SELF
(
p
, 
f
, 
d
, 
of
, 
od
) \

597 
	`GC_ªgi°î_föÆizî_ign‹e_£lf
(
p
, 
f
, 
d
, 
of
, 
od
)

	)

598 
	#GC_REGISTER_FINALIZER_NO_ORDER
(
p
, 
f
, 
d
, 
of
, 
od
) \

599 
	`GC_ªgi°î_föÆizî_no_‹dî
(
p
, 
f
, 
d
, 
of
, 
od
)

	)

600 
	#GC_REGISTER_FINALIZER_UNREACHABLE
(
p
, 
f
, 
d
, 
of
, 
od
) \

601 
	`GC_ªgi°î_föÆizî_uƒóchabÀ
(
p
, 
f
, 
d
, 
of
, 
od
)

	)

602 
	#GC_MALLOC_STUBBORN
(
sz
Ë
	`GC_mÆloc_°ubb‹n
(sz)

	)

603 
	#GC_CHANGE_STUBBORN
(
p
Ë
	`GC_ch™ge_°ubb‹n
’)

	)

604 
	#GC_END_STUBBORN_CHANGE
(
p
Ë
	`GC_íd_°ubb‹n_ch™ge
’)

	)

605 
	#GC_GENERAL_REGISTER_DISAPPEARING_LINK
(
lök
, 
obj
) \

606 
	`GC_gíîÆ_ªgi°î_dißµórög_lök
(
lök
, 
obj
)

	)

607 
	#GC_REGISTER_DISPLACEMENT
(
n
Ë
	`GC_ªgi°î_di•œ˚mít
“)

	)

613 
	#GC_NEW
(
t
Ë— *)
	`GC_MALLOC
( (t))

	)

614 
	#GC_NEW_ATOMIC
(
t
Ë— *)
	`GC_MALLOC_ATOMIC
( (t))

	)

615 
	#GC_NEW_STUBBORN
(
t
Ë— *)
	`GC_MALLOC_STUBBORN
( (t))

	)

616 
	#GC_NEW_UNCOLLECTABLE
(
t
Ë— *)
	`GC_MALLOC_UNCOLLECTABLE
( (t))

	)

625 (*
	gGC_föÆiz©i⁄_¥oc
Ë(* 
	tobj
, * 
	t˛õ¡_d©a
);

627 
GC_API
 
GC_ªgi°î_föÆizî
(* 
obj
, 
GC_föÆiz©i⁄_¥oc
 
‚
,

628 * 
cd
, 
GC_föÆiz©i⁄_¥oc
 *
o‚
,

629 * *
ocd
);

630 
GC_API
 
	gGC_debug_ªgi°î_föÆizî


631 (* 
	gobj
, 
GC_föÆiz©i⁄_¥oc
 
	g‚
, * 
	gcd
,

632 
GC_föÆiz©i⁄_¥oc
 *
	go‚
, * *
	gocd
);

675 
GC_API
 
	gGC_ªgi°î_föÆizî_ign‹e_£lf


676 (* 
	gobj
, 
GC_föÆiz©i⁄_¥oc
 
	g‚
, * 
	gcd
,

677 
GC_föÆiz©i⁄_¥oc
 *
	go‚
, * *
	gocd
);

678 
GC_API
 
	gGC_debug_ªgi°î_föÆizî_ign‹e_£lf


679 (* 
	gobj
, 
GC_föÆiz©i⁄_¥oc
 
	g‚
, * 
	gcd
,

680 
GC_föÆiz©i⁄_¥oc
 *
	go‚
, * *
	gocd
);

686 
GC_API
 
	gGC_ªgi°î_föÆizî_no_‹dî


687 (* 
	gobj
, 
GC_föÆiz©i⁄_¥oc
 
	g‚
, * 
	gcd
,

688 
GC_föÆiz©i⁄_¥oc
 *
	go‚
, * *
	gocd
);

689 
GC_API
 
	gGC_debug_ªgi°î_föÆizî_no_‹dî


690 (* 
	gobj
, 
GC_föÆiz©i⁄_¥oc
 
	g‚
, * 
	gcd
,

691 
GC_föÆiz©i⁄_¥oc
 *
	go‚
, * *
	gocd
);

709 
GC_API
 
	gGC_ªgi°î_föÆizî_uƒóchabÀ


710 (* 
	gobj
, 
GC_föÆiz©i⁄_¥oc
 
	g‚
, * 
	gcd
,

711 
GC_föÆiz©i⁄_¥oc
 *
	go‚
, * *
	gocd
);

712 
GC_API
 
	gGC_debug_ªgi°î_föÆizî_uƒóchabÀ


713 (* 
	gobj
, 
GC_föÆiz©i⁄_¥oc
 
	g‚
, * 
	gcd
,

714 
GC_föÆiz©i⁄_¥oc
 *
	go‚
, * *
	gocd
);

723 
GC_API
 
GC_ªgi°î_dißµórög_lök
(* * 
lök
 );

744 
GC_API
 
GC_gíîÆ_ªgi°î_dißµórög_lök
 (* * 
lök
, * 
obj
);

771 
GC_API
 
GC_uƒegi°î_dißµórög_lök
 (* * 
lök
);

777 
GC_API
 
GC_should_övoke_föÆizîs
();

779 
GC_API
 
GC_övoke_föÆizîs
();

796 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

797 
	#GC_ªachabÀ_hîe
(
±r
) \

798 
__asm__
 vﬁ©ûe(" " : : "X"(
±r
Ë: "mem‹y");

	)

800 
GC_API
 
GC_no›1
(
GC_w‹d
 
x
);

801 
	#GC_ªachabÀ_hîe
(
±r
Ë
	`GC_no›1
((
GC_w‹d
)’å));

	)

806 (*
	gGC_w¨n_¥oc
Ë(*
	tmsg
, 
	tGC_w‹d
 
	t¨g
);

807 
GC_API
 
GC_w¨n_¥oc
 
GC_£t_w¨n_¥oc
(GC_w¨n_¥o¯
p
);

810 
GC_API
 
GC_w‹d
 
GC_£t_‰ì_•a˚_divis‹
(GC_w‹d 
vÆue
);

822 #i‡
deföed
(
I_HIDE_POINTERS
Ë|| deföed(
GC_I_HIDE_POINTERS
)

823 
GC_w‹d
 
	tGC_hiddí_poöãr
;

824 
	#HIDE_POINTER
(
p
Ë(~(
GC_hiddí_poöãr
)’))

	)

825 
	#REVEAL_POINTER
(
p
Ë((*)(
	`HIDE_POINTER
’)))

	)

831 * (*
	tGC_‚_ty≥
Ë(* 
	t˛õ¡_d©a
);

832 
GC_API
 * 
GC_ˇŒ_wôh_Æloc_lock
 (
GC_‚_ty≥
 
‚
, * 
˛õ¡_d©a
);

846 
	sGC_°ack_ba£
 {

847 * 
	gmem_ba£
;

848 #i‡
deföed
(
__ü64
Ë|| deföed(
__ü64__
)

849 * 
	gªg_ba£
;

853 * (*
	tGC_°ack_ba£_func
)(
	tGC_°ack_ba£
 *
	tsb
, *
	t¨g
);

859 
GC_API
 * 
GC_ˇŒ_wôh_°ack_ba£
(
GC_°ack_ba£_func
 
‚
, *
¨g
);

868 
	#GC_SUCCESS
 0

	)

869 
	#GC_DUPLICATE
 1

	)

870 
	#GC_NO_THREADS
 2

	)

871 
	#GC_UNIMPLEMENTED
 3

	)

872 
GC_API
 
GC_ªgi°î_my_thªad
(
GC_°ack_ba£
 *);

881 
GC_API
 
GC_uƒegi°î_my_thªad
();

889 
GC_API
 
GC_gë_°ack_ba£
(
GC_°ack_ba£
 *);

900 
GC_API
 * 
GC_ßme_obj
 (* 
p
, * 
q
);

906 
GC_API
 * 
GC_¥e_ö¸
 (* *
p
, 
size_t
 
how_much
);

907 
GC_API
 * 
GC_po°_ö¸
 (* *
p
, 
size_t
 
how_much
);

917 
GC_API
 * 
GC_is_visibÀ
 (* 
p
);

924 
GC_API
 * 
GC_is_vÆid_di•œ˚mít
 (* 
p
);

929 
GC_dump
();

933 #ifde‡
GC_DEBUG


934 
	#GC_PTR_ADD3
(
x
, 
n
, 
ty≥_of_ªsu…
) \

935 ((
ty≥_of_ªsu…
)
	`GC_ßme_obj
((
x
)+(
n
), (x)))

	)

936 
	#GC_PRE_INCR3
(
x
, 
n
, 
ty≥_of_ªsu…
) \

937 ((
ty≥_of_ªsu…
)
	`GC_¥e_ö¸
(&(
x
), (
n
)*(*x))

	)

938 
	#GC_POST_INCR2
(
x
, 
ty≥_of_ªsu…
) \

939 ((
ty≥_of_ªsu…
)
	`GC_po°_ö¸
(&(
x
), (*x))

	)

940 #ifde‡
__GNUC__


941 
	#GC_PTR_ADD
(
x
, 
n
) \

942 
	`GC_PTR_ADD3
(
x
, 
n
, 
	`ty≥of
(x))

	)

943 
	#GC_PRE_INCR
(
x
, 
n
) \

944 
	`GC_PRE_INCR3
(
x
, 
n
, 
	`ty≥of
(x))

	)

945 
	#GC_POST_INCR
(
x
, 
n
) \

946 
	`GC_POST_INCR3
(
x
, 
	`ty≥of
(x))

	)

952 
	#GC_PTR_ADD
(
x
, 
n
Ë((x)+“))

	)

955 
	#GC_PTR_ADD3
(
x
, 
n
, 
ty≥_of_ªsu…
Ë((x)+“))

	)

956 
	#GC_PTR_ADD
(
x
, 
n
Ë((x)+“))

	)

957 
	#GC_PRE_INCR3
(
x
, 
n
, 
ty≥_of_ªsu…
Ë((xË+“))

	)

958 
	#GC_PRE_INCR
(
x
, 
n
Ë((xË+“))

	)

959 
	#GC_POST_INCR2
(
x
, 
n
, 
ty≥_of_ªsu…
Ë((x)++)

	)

960 
	#GC_POST_INCR
(
x
, 
n
Ë((x)++)

	)

964 #ifde‡
GC_DEBUG


965 
	#GC_PTR_STORE
(
p
, 
q
) \

966 (*(**)
	`GC_is_visibÀ
(
p
Ë
	`GC_is_vÆid_di•œ˚mít
(
q
))

	)

968 
	#GC_PTR_STORE
(
p
, 
q
Ë(*’Ë(q))

	)

972 
GC_API
 (*
	gGC_ßme_obj_¥öt_¥oc
Ë(* 
	gp
, * 
	gq
);

974 
GC_API
 (*
	gGC_is_vÆid_di•œ˚mít_¥öt_¥oc
Ë(* 
	gp
);

976 
GC_API
 (*
	gGC_is_visibÀ_¥öt_¥oc
Ë(* 
	gp
);

982 #i‡!
deföed
(
GC_USE_LD_WRAP
Ë&& !deföed(
GC_NO_THREAD_REDIRECTS
) \

983 && 
deföed
(
GC_PTHREADS
)

984 
	~"gc_±hªad_ªdúe˘s.h
"

987 #i‡
deföed
(
PCR
Ë|| deföed(
GC_SOLARIS_THREADS
) || \

988 
deföed
(
GC_PTHREADS
Ë|| deföed(
GC_WIN32_THREADS
)

995 * 
GC_mÆloc_m™y
(
size_t
 
lb
);

996 
	#GC_NEXT
(
p
Ë(*(* *)’)Ë

	)

1006 
GC_API
 

1007 
	gGC_ªgi°î_has_°©ic_roŸs_ˇŒback


1008 ((*
	gˇŒback
)(c⁄° *, *, 
	gsize_t
));

1011 #i‡
deföed
(
GC_WIN32_THREADS
Ë&& !deföed(
__CYGWIN32__
) \

1012 && !
deföed
(
__CYGWIN__
) \

1013 && !
deföed
(
GC_PTHREADS
)

1015 #ifde‡
__˝lu•lus


1019 #i‚de‡
GC_NO_THREAD_DECLS


1020 
	~<wödows.h
>

1022 #ifde‡
__˝lu•lus


1040 
GC_API
 
HANDLE
 
WINAPI
 
GC_Cª©eThªad
(

1041 
LPSECURITY_ATTRIBUTES
 
ÕThªadAâribuãs
,

1042 
DWORD
 
dwSèckSize
, 
LPTHREAD_START_ROUTINE
 
ÕSèπAddªss
,

1043 
LPVOID
 
ÕP¨amëî
, 
DWORD
 
dwCª©i⁄Fœgs
, 
LPDWORD
 
ÕThªadId
 );

1045 #i‡
deföed
(
_MSC_VER
Ë&& _MSC_VER >1200 && !deföed(
_UINTPTR_T_DEFINED
)

1046 
	tuöçå_t
;

1049 
GC_API
 
uöçå_t
 
GC_begöthªadex
(

1050 *
£curôy
, 
°ack_size
,

1051 –
__°dˇŒ
 *
°¨t_addªss
 )( * ),

1052 *
¨gli°
, 
öôÊag
, *
thrdaddr
);

1054 
GC_API
 
GC_ídthªadex
(
ªtvÆ
);

1056 
GC_API
 
WINAPI
 
GC_ExôThªad
(
DWORD
 
dwExôCode
);

1058 #i‡
deföed
(
_WIN32_WCE
)

1063 
GC_API
 
WINAPI
 
GC_WöMaö
(

1064 
HINSTANCE
 
hIn°™˚
,

1065 
HINSTANCE
 
hPªvIn°™˚
,

1066 
LPWSTR
 
ÕCmdLöe
,

1067 
nCmdShow
 );

1068 #i‚de‡
GC_BUILD


1069 
	#WöMaö
 
GC_WöMaö


	)

1080 
GC_API
 
GC_u£_DŒMaö
();

1082 #i‚de‡
GC_NO_THREAD_REDIRECTS


1083 
	#Cª©eThªad
 
GC_Cª©eThªad


	)

1084 
	#ExôThªad
 
GC_ExôThªad


	)

1085 
	#_begöthªadex
 
GC_begöthªadex


	)

1086 
	#_ídthªadex
 
GC_ídthªadex


	)

1087 
	#_begöthªad
 { > "PÀa£ u£ _begöthªadex in°ód o‡_begöthªad" < }

	)

1101 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed (
_AIX
)

1106 #ifde‡
__CYGWIN32__


1107 
_d©a_°¨t__
[];

1108 
_d©a_íd__
[];

1109 
_bss_°¨t__
[];

1110 
_bss_íd__
[];

1111 
	#GC_MAX
(
x
,
y
Ë((xË> (yË? (xË: (y))

	)

1112 
	#GC_MIN
(
x
,
y
Ë((xË< (yË? (xË: (y))

	)

1113 
	#GC_DATASTART
 ((*Ë
	`GC_MIN
(
_d©a_°¨t__
, 
_bss_°¨t__
))

	)

1114 
	#GC_DATAEND
 ((*Ë
	`GC_MAX
(
_d©a_íd__
, 
_bss_íd__
))

	)

1115 
	#GC_INIT
(Ë{ 
	`GC_add_roŸs
(
GC_DATASTART
, 
GC_DATAEND
); \

1116 
	`GC_gcﬁÀ˘
(); }

	)

1119 #i‡
deföed
(
_AIX
)

1120 
_d©a
[], 
_íd
[];

1121 
	#GC_DATASTART
 ((*)((
ul⁄g
)
_d©a
))

	)

1122 
	#GC_DATAEND
 ((*)((
ul⁄g
)
_íd
))

	)

1123 
	#GC_INIT
(Ë{ 
	`GC_add_roŸs
(
GC_DATASTART
, 
GC_DATAEND
); }

	)

1126 
	#GC_INIT
(Ë{ 
	`GC_öô
(); }

	)

1129 #i‡!
deföed
(
_WIN32_WCE
) \

1130 && ((
deföed
(
_MSDOS
Ë|| deföed(
_MSC_VER
)Ë&& (
	g_M_IX86
 >= 300) \

1131 || 
deföed
(
_WIN32
Ë&& !deföed(
__CYGWIN32__
Ë&& !deföed(
__CYGWIN__
))

1134 
GC_API
 
GC_wö32_‰ì_hóp
 ();

1137 #i‡–
deföed
(
_AMIGA
Ë&& !deföed(
GC_AMIGA_MAKINGLIB
) )

1139 
	~"gc_amiga_ªdúe˘s.h
"

1142 #i‡
deföed
(
GC_REDIRECT_TO_LOCAL
)

1146 #ifde‡
__˝lu•lus


	@include/gc_allocator.h

38 #i‚de‡
GC_ALLOCATOR_H


40 
	#GC_ALLOCATOR_H


	)

42 
	~"gc.h
"

43 
	~<√w
>

45 #i‡
deföed
(
__GNUC__
)

46 
	#GC_ATTR_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

48 
	#GC_ATTR_UNUSED


	)

57 
	sGC_åue_ty≥
 {};

58 
	sGC_Ál£_ty≥
 {};

60 
	gãm∂©e
 <
˛ass
 
	gGC_ç
>

61 
	sGC_ty≥_åaôs
 {

62 
GC_Ál£_ty≥
 
	mGC_is_±r_‰ì
;

65 
	#GC_DECLARE_PTRFREE
(
T
) \

66 
ãm∂©e
<> 
GC_ty≥_åaôs
<
T
> { 
GC_åue_ty≥
 
GC_is_±r_‰ì
; }

	)

68 
GC_DECLARE_PTRFREE
();

69 
GC_DECLARE_PTRFREE
(signed );

70 
GC_DECLARE_PTRFREE
();

71 
GC_DECLARE_PTRFREE
(signed );

72 
GC_DECLARE_PTRFREE
();

73 
GC_DECLARE_PTRFREE
(signed );

74 
GC_DECLARE_PTRFREE
();

75 
GC_DECLARE_PTRFREE
(signed );

76 
GC_DECLARE_PTRFREE
();

77 
GC_DECLARE_PTRFREE
();

78 
GC_DECLARE_PTRFREE
();

79 
GC_DECLARE_PTRFREE
();

84 
	gãm∂©e
 <
˛ass
 
	gGC_Tp
>

85 
ölöe
 * 
	$GC_£À˘ive_Æloc
(
size_t
 
n
, 
GC_Tp
) {

86  
	`GC_MALLOC
(
n
);

87 
	}
}

89 
	gãm∂©e
 <>

90 
ölöe
 * 
	gGC_£À˘ive_Æloc
<
	gGC_åue_ty≥
>(
size_t
 
	gn
, GC_true_type) {

91  
GC_MALLOC_ATOMIC
(
n
);

96 
	gãm∂©e
 <
˛ass
 
	gGC_Tp
>

97 ˛as†
	cgc_Æloˇt‹
 {

98 
	mpublic
:

99 
size_t
 
	tsize_ty≥
;

100 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

101 
GC_Tp
* 
	tpoöãr
;

102 c⁄° 
	tGC_Tp
* 
	tc⁄°_poöãr
;

103 
	mGC_Tp
& 
	tª„ªn˚
;

104 c⁄° 
	tGC_Tp
& 
	tc⁄°_ª„ªn˚
;

105 
GC_Tp
 
	tvÆue_ty≥
;

107 
	mãm∂©e
 <
˛ass
 
	mGC_Tp1
> 
	sªböd
 {

108 
	mgc_Æloˇt‹
<
	tGC_Tp1
> 
	tŸhî
;

111 
	$gc_Æloˇt‹
(Ë{
	}
}

112 
	$gc_Æloˇt‹
(c⁄° 
gc_Æloˇt‹
&Ë
	$throw
(Ë{
	}
}

113 #i‡!(
GC_NO_MEMBER_TEMPLATES
 || 0 < 
_MSC_VER
 && _MSC_VER <= 1200)

115 
	gãm∂©e
 <
˛ass
 
	gGC_Tp1
> 
gc_Æloˇt‹
(c⁄° gc_Æloˇt‹<
GC_Tp1
>&Ë
	$throw
(Ë{
	}
}

117 ~
	$gc_Æloˇt‹
(Ë
	$throw
(Ë{
	}
}

119 
poöãr
 
	$addªss
(
ª„ªn˚
 
GC_x
Ëc⁄° {  &GC_x; 
	}
}

120 
c⁄°_poöãr
 
	$addªss
(
c⁄°_ª„ªn˚
 
GC_x
Ëc⁄° {  &GC_x; 
	}
}

124 
GC_Tp
* 
	$Æloˇã
(
size_ty≥
 
GC_n
, const * = 0) {

125 
GC_ty≥_åaôs
<
GC_Tp
> 
åaôs
;

126  
°©ic_ˇ°
<
GC_Tp
 *>

127 (
	`GC_£À˘ive_Æloc
(
GC_n
 * (
GC_Tp
),

128 
åaôs
.
GC_is_±r_‰ì
));

129 
	}
}

132 
	$dóŒoˇã
(
poöãr
 
__p
, 
size_ty≥
 
GC_ATTR_UNUSED
 
GC_n
)

133 { 
	`GC_FREE
(
__p
); 
	}
}

135 
size_ty≥
 
	$max_size
(Ëc⁄° 
	$throw
()

136 {  
	`size_t
(-1Ë/ (
GC_Tp
); 
	}
}

138 
	$c⁄°ru˘
(
poöãr
 
__p
, c⁄° 
GC_Tp
& 
__vÆ
Ë{ 
	`√w
(__pË
	`GC_Tp
(__vÆ); 
	}
}

139 
	$de°roy
(
poöãr
 
__p
Ë{ __p->~
	`GC_Tp
(); 
	}
}

142 
	gãm∂©e
<>

143 
˛ass
 
	ggc_Æloˇt‹
<> {

144 
size_t
 
	tsize_ty≥
;

145 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

146 * 
	tpoöãr
;

147 c⁄° * 
	tc⁄°_poöãr
;

148 
	tvÆue_ty≥
;

150 
	gãm∂©e
 <
˛ass
 
	gGC_Tp1
> 
	sªböd
 {

151 
	ggc_Æloˇt‹
<
	tGC_Tp1
> 
	tŸhî
;

156 
	gãm∂©e
 <
˛ass
 
	gGC_T1
, cœs†
	gGC_T2
>

157 
ölöe
 
boﬁ
 
	g›î©‹
==(c⁄° 
gc_Æloˇt‹
<
GC_T1
>&, c⁄° 
	ggc_Æloˇt‹
<
	gGC_T2
>&)

159  
	gåue
;

162 
	gãm∂©e
 <
˛ass
 
	gGC_T1
, cœs†
	gGC_T2
>

163 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
gc_Æloˇt‹
<
GC_T1
>&, c⁄° 
	ggc_Æloˇt‹
<
	gGC_T2
>&)

165  
	gÁl£
;

175 
	gãm∂©e
 <
˛ass
 
	gGC_Tp
>

176 ˛as†
	cåa˚abÀ_Æloˇt‹
 {

177 
	mpublic
:

178 
size_t
 
	tsize_ty≥
;

179 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

180 
GC_Tp
* 
	tpoöãr
;

181 c⁄° 
	tGC_Tp
* 
	tc⁄°_poöãr
;

182 
	mGC_Tp
& 
	tª„ªn˚
;

183 c⁄° 
	tGC_Tp
& 
	tc⁄°_ª„ªn˚
;

184 
GC_Tp
 
	tvÆue_ty≥
;

186 
	mãm∂©e
 <
˛ass
 
	mGC_Tp1
> 
	sªböd
 {

187 
	måa˚abÀ_Æloˇt‹
<
	tGC_Tp1
> 
	tŸhî
;

190 
	$åa˚abÀ_Æloˇt‹
(Ë
	$throw
(Ë{
	}
}

191 
	$åa˚abÀ_Æloˇt‹
(c⁄° 
åa˚abÀ_Æloˇt‹
&Ë
	$throw
(Ë{
	}
}

192 #i‡!(
GC_NO_MEMBER_TEMPLATES
 || 0 < 
_MSC_VER
 && _MSC_VER <= 1200)

194 
	gãm∂©e
 <
˛ass
 
	gGC_Tp1
> 
	gåa˚abÀ_Æloˇt‹


195 (c⁄° 
	gåa˚abÀ_Æloˇt‹
<
	gGC_Tp1
>&Ë
	$throw
(Ë{
	}
}

197 ~
	$åa˚abÀ_Æloˇt‹
(Ë
	$throw
(Ë{
	}
}

199 
poöãr
 
	$addªss
(
ª„ªn˚
 
GC_x
Ëc⁄° {  &GC_x; 
	}
}

200 
c⁄°_poöãr
 
	$addªss
(
c⁄°_ª„ªn˚
 
GC_x
Ëc⁄° {  &GC_x; 
	}
}

204 
GC_Tp
* 
	$Æloˇã
(
size_ty≥
 
GC_n
, const * = 0) {

205  
°©ic_ˇ°
<
GC_Tp
*>(
	`GC_MALLOC_UNCOLLECTABLE
(
GC_n
 * (GC_Tp)));

206 
	}
}

209 
	$dóŒoˇã
(
poöãr
 
__p
, 
size_ty≥
 
GC_ATTR_UNUSED
 
GC_n
)

210 { 
	`GC_FREE
(
__p
); 
	}
}

212 
size_ty≥
 
	$max_size
(Ëc⁄° 
	$throw
()

213 {  
	`size_t
(-1Ë/ (
GC_Tp
); 
	}
}

215 
	$c⁄°ru˘
(
poöãr
 
__p
, c⁄° 
GC_Tp
& 
__vÆ
Ë{ 
	`√w
(__pË
	`GC_Tp
(__vÆ); 
	}
}

216 
	$de°roy
(
poöãr
 
__p
Ë{ __p->~
	`GC_Tp
(); 
	}
}

219 
	gãm∂©e
<>

220 
˛ass
 
	gåa˚abÀ_Æloˇt‹
<> {

221 
size_t
 
	tsize_ty≥
;

222 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

223 * 
	tpoöãr
;

224 c⁄° * 
	tc⁄°_poöãr
;

225 
	tvÆue_ty≥
;

227 
	gãm∂©e
 <
˛ass
 
	gGC_Tp1
> 
	sªböd
 {

228 
	gåa˚abÀ_Æloˇt‹
<
	tGC_Tp1
> 
	tŸhî
;

233 
	gãm∂©e
 <
˛ass
 
	gGC_T1
, cœs†
	gGC_T2
>

234 
ölöe
 
boﬁ
 
	g›î©‹
==(c⁄° 
åa˚abÀ_Æloˇt‹
<
GC_T1
>&, c⁄° 
	gåa˚abÀ_Æloˇt‹
<
	gGC_T2
>&)

236  
	gåue
;

239 
	gãm∂©e
 <
˛ass
 
	gGC_T1
, cœs†
	gGC_T2
>

240 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
åa˚abÀ_Æloˇt‹
<
GC_T1
>&, c⁄° 
	gåa˚abÀ_Æloˇt‹
<
	gGC_T2
>&)

242  
	gÁl£
;

	@include/gc_amiga_redirects.h

1 #i‚de‡
GC_AMIGA_REDIRECTS_H


3 
	#GC_AMIGA_REDIRECTS_H


	)

5 #i‡–
deföed
(
_AMIGA
Ë&& !deföed(
GC_AMIGA_MAKINGLIB
) )

6 *
GC_amiga_ªÆloc
(*
ﬁd_obje˘
,
size_t
 
√w_size_ö_byãs
);

7 
	#GC_ªÆloc
(
a
,
b
Ë
	`GC_amiga_ªÆloc
◊,b)

	)

8 
GC_amiga_£t_tﬂny
((*
func
)());

9 
GC_amiga_‰ì_•a˚_divis‹_öc
;

10 *(*
GC_amiga_Ælocwøµî_do
) \

11 (
size_t
 
size
,*(*
AŒocFun˘i⁄
)(size_à
size2
));

12 
	#GC_mÆloc
(
a
) \

13 (*
GC_amiga_Ælocwøµî_do
)(
a
,
GC_mÆloc
)

	)

14 
	#GC_mÆloc_©omic
(
a
) \

15 (*
GC_amiga_Ælocwøµî_do
)(
a
,
GC_mÆloc_©omic
)

	)

16 
	#GC_mÆloc_uncﬁÀ˘abÀ
(
a
) \

17 (*
GC_amiga_Ælocwøµî_do
)(
a
,
GC_mÆloc_uncﬁÀ˘abÀ
)

	)

18 
	#GC_mÆloc_°ubb‹n
(
a
) \

19 (*
GC_amiga_Ælocwøµî_do
)(
a
,
GC_mÆloc_°ubb‹n
)

	)

20 
	#GC_mÆloc_©omic_uncﬁÀ˘abÀ
(
a
) \

21 (*
GC_amiga_Ælocwøµî_do
)(
a
,
GC_mÆloc_©omic_uncﬁÀ˘abÀ
)

	)

22 
	#GC_mÆloc_ign‹e_off_∑ge
(
a
) \

23 (*
GC_amiga_Ælocwøµî_do
)(
a
,
GC_mÆloc_ign‹e_off_∑ge
)

	)

24 
	#GC_mÆloc_©omic_ign‹e_off_∑ge
(
a
) \

25 (*
GC_amiga_Ælocwøµî_do
)(
a
,
GC_mÆloc_©omic_ign‹e_off_∑ge
)

	)

	@include/gc_backptr.h

23 #i‚de‡
GC_BACKPTR_H


24 
	#GC_BACKPTR_H


	)

34 íum { 
	mGC_UNREFERENCED
,

35 
	mGC_NO_SPACE
,

36 
	mGC_REFD_FROM_ROOT
,

37 
	mGC_REFD_FROM_REG
,

39 
	mGC_REFD_FROM_HEAP
,

40 
	mGC_FINALIZER_REFD


41 } 
	tGC_ªf_köd
;

43 
GC_ªf_köd
 
GC_gë_back_±r_öfo
(*
de°
, **
ba£_p
, 
size_t
 *
off£t_p
);

48 * 
GC_gíî©e_øndom_hóp_addªss
();

51 * 
GC_gíî©e_øndom_vÆid_addªss
();

58 
GC_gíî©e_øndom_backåa˚
();

63 
GC_¥öt_backåa˚
(*);

	@include/gc_config_macros.h

8 #i‡
deföed
(
SOLARIS_THREADS
Ë|| deföed(
_SOLARIS_THREADS
) \

9 || 
deföed
(
_SOLARIS_PTHREADS
Ë|| 
	$deföed
(
GC_SOLARIS_PTHREADS
)

12 #i‚de‡
GC_SOLARIS_THREADS


13 
	#GC_SOLARIS_THREADS


	)

16 #i‡
	`deföed
(
IRIX_THREADS
)

17 
	#GC_IRIX_THREADS


	)

19 #i‡
	`deföed
(
DGUX_THREADS
)

20 #i‡!
	`deföed
(
GC_DGUX386_THREADS
)

21 
	#GC_DGUX386_THREADS


	)

24 #i‡
	`deföed
(
AIX_THREADS
)

25 
	#GC_AIX_THREADS


	)

27 #i‡
	`deföed
(
HPUX_THREADS
)

28 
	#GC_HPUX_THREADS


	)

30 #i‡
	`deföed
(
OSF1_THREADS
)

31 
	#GC_OSF1_THREADS


	)

33 #i‡
	`deföed
(
LINUX_THREADS
)

34 
	#GC_LINUX_THREADS


	)

36 #i‡
	`deföed
(
WIN32_THREADS
)

37 
	#GC_WIN32_THREADS


	)

39 #i‡
	`deföed
(
USE_LD_WRAP
)

40 
	#GC_USE_LD_WRAP


	)

43 #i‡!
	`deföed
(
_REENTRANT
Ë&& (deföed(
GC_SOLARIS_THREADS
) \

44 || 
	`deföed
(
GC_HPUX_THREADS
) \

45 || 
	`deföed
(
GC_AIX_THREADS
) \

46 || 
	`deföed
(
GC_LINUX_THREADS
) \

47 || 
	`deföed
(
GC_NETBSD_THREADS
) \

48 || 
	$deföed
(
GC_GNU_THREADS
))

49 
	#_REENTRANT


	)

54 #i‡!
	`deföed
(
_PTHREADS
Ë&& deföed(
GC_NETBSD_THREADS
)

55 
	#_PTHREADS


	)

58 #i‡
	`deföed
(
GC_DGUX386_THREADS
Ë&& !deföed(
_POSIX4A_DRAFT10_SOURCE
)

59 
	#_POSIX4A_DRAFT10_SOURCE
 1

	)

62 #i‡
	`deföed
(
GC_SOLARIS_THREADS
Ë|| deföed(
GC_FREEBSD_THREADS
) || \

63 
	`deföed
(
GC_IRIX_THREADS
Ë|| deföed(
GC_LINUX_THREADS
) || \

64 
	`deföed
(
GC_HPUX_THREADS
Ë|| deföed(
GC_OSF1_THREADS
) || \

65 
	`deföed
(
GC_DGUX386_THREADS
Ë|| deföed(
GC_DARWIN_THREADS
) || \

66 
	`deföed
(
GC_AIX_THREADS
Ë|| deföed(
GC_NETBSD_THREADS
) || \

67 (
	`deföed
(
GC_WIN32_THREADS
Ë&& deföed(
__CYGWIN32__
)) || \

68 
	$deföed
(
GC_GNU_THREADS
)

69 
	#GC_PTHREADS


	)

72 #i‡
	`deföed
(
GC_WIN32_PTHREADS
)

73 
	#GC_WIN32_THREADS


	)

74 
	#GC_PTHREADS


	)

77 #i‡
	`deföed
(
GC_THREADS
Ë&& !deföed(
GC_PTHREADS
)

78 #i‡
	`deföed
(
__löux__
)

79 
	#GC_LINUX_THREADS


	)

80 
	#GC_PTHREADS


	)

82 #i‡!
	`deföed
(
__löux__
Ë&& (deföed(
_PA_RISC1_1
Ë|| deföed(
_PA_RISC2_0
) \

83 || 
	`deföed
(
hµa
Ë|| deföed(
__HPPA
)) \

84 || (
	`deföed
(
__ü64
Ë&& 
	$deföed
(
_HPUX_SOURCE
))

85 
	#GC_HPUX_THREADS


	)

86 
	#GC_PTHREADS


	)

88 #i‡!
	`deföed
(
__löux__
Ë&& (deföed(
__Æpha
Ë|| deföed(
__Æpha__
))

89 
	#GC_OSF1_THREADS


	)

90 
	#GC_PTHREADS


	)

92 #i‡
	`deföed
(
__mùs
Ë&& !deföed(
__löux__
)

93 
	#GC_IRIX_THREADS


	)

94 
	#GC_PTHREADS


	)

96 #i‡
	`deföed
(
__•¨c
Ë&& !deföed(
__löux__
) \

97 || 
	`deföed
(
sun
Ë&& (deföed(
i386
Ë|| 
	$deföed
(
__i386__
))

98 
	#GC_SOLARIS_THREADS


	)

99 
	#GC_PTHREADS


	)

101 #i‡
	`deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)

102 
	#GC_DARWIN_THREADS


	)

103 
	#GC_PTHREADS


	)

105 #i‡!
	`deföed
(
GC_PTHREADS
Ë&& (deföed(
__FªeBSD__
Ë|| deföed(
__Døg⁄Fly__
))

106 
	#GC_FREEBSD_THREADS


	)

107 
	#GC_PTHREADS


	)

109 #i‡!
	`deföed
(
GC_PTHREADS
Ë&& deföed(
__NëBSD__
)

110 
	#GC_NETBSD_THREADS


	)

111 
	#GC_PTHREADS


	)

113 #i‡
	`deföed
(
DGUX
Ë&& (deföed(
i386
Ë|| deföed(
__i386__
))

114 
	#GC_DGUX386_THREADS


	)

115 
	#GC_PTHREADS


	)

117 #i‡
	`deföed
(
_AIX
)

118 
	#GC_AIX_THREADS


	)

119 
	#GC_PTHREADS


	)

123 #i‡
	`deföed
(
GC_THREADS
Ë&& !deföed(
GC_PTHREADS
Ë&& !deföed(
GC_WIN32_THREADS
) \

124 && (
	`deföed
(
_WIN32
Ë|| deföed(
_MSC_VER
Ë|| deföed(
__CYGWIN__
) \

125 || 
	`deföed
(
__MINGW32__
Ë|| deföed(
__BORLANDC__
) \

126 || 
	$deföed
(
_WIN32_WCE
))

127 
	#GC_WIN32_THREADS


	)

128 #i‡
	`deföed
(
__CYGWIN__
)

129 
	#GC_PTHREADS


	)

133 
	#__GC


	)

134 #i‚de‡
_WIN32_WCE


135 
	~<°ddef.h
>

136 #i‡
	`deföed
(
__MINGW32__
)

137 
	~<°döt.h
>

144 
	~<°dlib.h
>

145 
	t±rdiff_t
;

148 #i‡
	`deföed
(
_DLL
Ë&& !deföed(
GC_NOT_DLL
Ë&& !deföed(
GC_DLL
)

149 
	#GC_DLL


	)

152 #i‡
	`deföed
(
__MINGW32__
Ë&& deföed(
GC_DLL
)

153 #ifde‡
GC_BUILD


154 
	#GC_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

156 
	#GC_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

160 #i‡(
	`deföed
(
__DMC__
Ë|| deföed(
_MSC_VER
)Ë&& deföed(
GC_DLL
)

161 #ifde‡
GC_BUILD


162 
	#GC_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

164 
	#GC_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

168 #i‡
	`deföed
(
__WATCOMC__
Ë&& deföed(
GC_DLL
)

169 #ifde‡
GC_BUILD


170 
	#GC_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

172 
	#GC_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

176 #i‚de‡
GC_API


177 
	#GC_API
 

	)

	@include/gc_cpp.h

1 #i‚de‡
GC_CPP_H


2 
	#GC_CPP_H


	)

141 
	~"gc.h
"

143 #i‚de‡
THINK_CPLUS


144 
	#GC_cde˛


	)

146 
	#GC_cde˛
 
_cde˛


	)

149 #i‡! 
deföed
–
GC_NO_OPERATOR_NEW_ARRAY
 ) \

150 && !
deföed
(
_ENABLE_ARRAYNEW
) \

151 && (
deföed
(
__BORLANDC__
Ë&& (
	g__BORLANDC__
 < 0x450) \

152 || (
deföed
(
__GNUC__
) && \

153 (
	g__GNUC__
 < 2 || __GNUC__ =2 && 
__GNUC_MINOR__
 < 6)) \

154 || (
deföed
(
__WATCOMC__
) && __WATCOMC__ < 1050))

155 
	#GC_NO_OPERATOR_NEW_ARRAY


	)

158 #i‡!
deföed
(
GC_NO_OPERATOR_NEW_ARRAY
Ë&& !deföed(
GC_OPERATOR_NEW_ARRAY
)

159 
	#GC_OPERATOR_NEW_ARRAY


	)

162 #i‡ ! 
deföed
 ( 
__BORLANDC__
 ) \

163 && ! 
	$deföed
 ( 
__sgi
 )

164 
	#GC_PLACEMENT_DELETE


	)

167 
	eGCPœ˚mít
 {
U£GC
,

168 #i‚de‡
GC_NAME_CONFLICT


169 
GC
=
U£GC
,

171 
NoGC
, 
PoöãrFªeGC
};

173 ˛as†
	cgc
 {
public
:

174 
ölöe
 * 
›î©‹
 
	`√w
–
size_t
 
size
 );

175 
ölöe
 * 
›î©‹
 
	`√w
–
size_t
 
size
, 
GCPœ˚mít
 
g˝
 );

176 
ölöe
 * 
›î©‹
 
	`√w
–
size_t
 
size
, *
p
 );

179 
ölöe
 
›î©‹
 
	`dñëe
–* 
obj
 );

180 #ifde‡
GC_PLACEMENT_DELETE


181 
ölöe
 
›î©‹
 
	`dñëe
–*, 
GCPœ˚mít
 );

183 
ölöe
 
›î©‹
 
	`dñëe
( *, * );

186 #ifde‡
GC_OPERATOR_NEW_ARRAY


187 
ölöe
 * 
›î©‹
 
√w
[]–
size_t
 
size
 );

188 
ölöe
 * 
›î©‹
 
√w
[]–
size_t
 
size
, 
GCPœ˚mít
 
g˝
 );

189 
ölöe
 * 
›î©‹
 
√w
[]–
size_t
 
size
, *
p
 );

190 
ölöe
 
›î©‹
 
dñëe
[]–* 
obj
 );

191 #ifde‡
GC_PLACEMENT_DELETE


192 
ölöe
 
›î©‹
 
dñëe
[]–*, 
GCPœ˚mít
 );

193 
ölöe
 
›î©‹
 
dñëe
[]( *, * );

202 ˛as†
	cgc_˛ónup
: 
vútuÆ
 
public
 
gc
 {public:

203 
ölöe
 
	`gc_˛ónup
();

204 
ölöe
 
vútuÆ
 ~
	`gc_˛ónup
();

205 
¥iv©e
:

206 
ölöe
 
GC_cde˛
 
	`˛ónup
–* 
obj
, * 
˛õ¡D©a
 );};

214 "C" {(*
	tGCCÀ™UpFunc
)–* 
	tobj
, * 
	t˛õ¡D©a
 );
	}
}

216 #ifde‡
_MSC_VER


219 #¥agm®
w¨nög
(
dißbÀ
:4291)

222 
ölöe
 * 
›î©‹
 
√w
(

223 
size_t
 
size
,

224 
GCPœ˚mít
 
g˝
,

225 
GCCÀ™UpFunc
 
˛ónup
 = 0,

226 * 
˛õ¡D©a
 = 0 );

241 #ifde‡
GC_PLACEMENT_DELETE


242 
ölöe
 
›î©‹
 
dñëe
–*, 
GCPœ˚mít
, 
GCCÀ™UpFunc
, * );

245 #ifde‡
_MSC_VER


252 *
›î©‹
 
	g√w
[]–
size_t
 
	gsize
 );

254 
›î©‹
 
	gdñëe
[](* 
	gobj
);

256 * 
›î©‹
 
√w
–
size_t
 
size
);

258 
›î©‹
 
dñëe
(* 
obj
);

261 * 
›î©‹
 
√w
–
size_t
 
size
,

263 c⁄° * 
szFûeName
,

264 
nLöe
 );

268 #ifde‡
GC_OPERATOR_NEW_ARRAY


270 
ölöe
 * 
›î©‹
 
	g√w
[](

271 
size_t
 
	gsize
,

272 
GCPœ˚mít
 
	gg˝
,

273 
GCCÀ™UpFunc
 
	g˛ónup
 = 0,

274 * 
	g˛õ¡D©a
 = 0 );

286 
ölöe
 * 
	ggc
::
›î©‹
 
	$√w
–
size_t
 
size
 ) {

287  
	`GC_MALLOC
–
size
 );
	}
}

289 
ölöe
 * 
	ggc
::
›î©‹
 
	$√w
–
size_t
 
size
, 
GCPœ˚mít
 
g˝
 ) {

290 i‡(
g˝
 =
U£GC
)

291  
	`GC_MALLOC
–
size
 );

292 i‡(
g˝
 =
PoöãrFªeGC
)

293  
	`GC_MALLOC_ATOMIC
–
size
 );

295  
	`GC_MALLOC_UNCOLLECTABLE
–
size
 );
	}
}

297 
ölöe
 * 
	ggc
::
›î©‹
 
	$√w
–
size_t
 
size
, *
p
 ) {

298  
p
;
	}
}

300 
ölöe
 
	ggc
::
›î©‹
 
	$dñëe
–* 
obj
 ) {

301 
	`GC_FREE
–
obj
 );
	}
}

303 #ifde‡
GC_PLACEMENT_DELETE


304 
ölöe
 
	ggc
::
›î©‹
 
	$dñëe
–*, * ) {
	}
}

306 
ölöe
 
	ggc
::
›î©‹
 
	$dñëe
–* 
p
, 
GCPœ˚mít
 
g˝
 ) {

307 
	`GC_FREE
(
p
);

308 
	}
}

311 #ifde‡
GC_OPERATOR_NEW_ARRAY


313 
ölöe
 * 
	ggc
::
›î©‹
 
√w
[]–
size_t
 
size
 ) {

314  
gc
::
›î©‹
 
√w
–
size
 );}

316 
ölöe
 * 
	ggc
::
›î©‹
 
√w
[]–
size_t
 
size
, 
GCPœ˚mít
 
	gg˝
 ) {

317  
	ggc
::
›î©‹
 
√w
–
size
, 
g˝
 );}

319 
ölöe
 * 
	ggc
::
›î©‹
 
√w
[]–
size_t
 
size
, *
	gp
 ) {

320  
	gp
;}

322 
ölöe
 
	ggc
::
›î©‹
 
dñëe
[]–* 
obj
 ) {

323 
gc
::
›î©‹
 
dñëe
–
obj
 );}

325 #ifde‡
GC_PLACEMENT_DELETE


326 
ölöe
 
	ggc
::
›î©‹
 
dñëe
[]( *, * ) {}

328 
ölöe
 
	ggc
::
›î©‹
 
dñëe
[]–* 
p
, 
GCPœ˚mít
 
	gg˝
 ) {

329 
	ggc
::
›î©‹
 
dñëe
(
p
); }

336 
ölöe
 
	ggc_˛ónup
::~
	$gc_˛ónup
() {

337 
	`GC_ªgi°î_föÆizî_ign‹e_£lf
–
	`GC_ba£
(
this
), 0, 0, 0, 0 );
	}
}

339 
ölöe
 
	ggc_˛ónup
::
	$˛ónup
–* 
obj
, * 
di•l
 ) {

340 ((
gc_˛ónup
*Ë((*Ë
obj
 + (
±rdiff_t
Ë
di•l
))->~
	`gc_˛ónup
();
	}
}

342 
ölöe
 
	ggc_˛ónup
::
	$gc_˛ónup
() {

343 
GC_föÆiz©i⁄_¥oc
 
ﬁdProc
;

344 * 
ﬁdD©a
;

345 * 
ba£
 = 
	`GC_ba£
–(*Ë
this
 );

346 i‡(0 !
ba£
) {

348 
	`GC_ªgi°î_föÆizî_ign‹e_£lf
(

349 
ba£
, (
GC_föÆiz©i⁄_¥oc
)
˛ónup
, (*Ë((*Ë
this
 - (*) base),

350 &
ﬁdProc
, &
ﬁdD©a
 );

351 i‡(0 !
ﬁdProc
) {

352 
	`GC_ªgi°î_föÆizî_ign‹e_£lf
–
ba£
, 
ﬁdProc
, 
ﬁdD©a
, 0, 0 );}}
	}
}

354 
ölöe
 * 
›î©‹
 
	$√w
(

355 
size_t
 
size
,

356 
GCPœ˚mít
 
g˝
,

357 
GCCÀ™UpFunc
 
˛ónup
,

358 * 
˛õ¡D©a
 )

360 * 
obj
;

362 i‡(
g˝
 =
U£GC
) {

363 
obj
 = 
	`GC_MALLOC
–
size
 );

364 i‡(
˛ónup
 != 0)

365 
	`GC_REGISTER_FINALIZER_IGNORE_SELF
(

366 
obj
, 
˛ónup
, 
˛õ¡D©a
, 0, 0 );}

367 i‡(
g˝
 =
PoöãrFªeGC
) {

368 
obj
 = 
	`GC_MALLOC_ATOMIC
–
size
 );}

370 
obj
 = 
	`GC_MALLOC_UNCOLLECTABLE
–
size
 );};

371  
obj
;
	}
}

373 #ifde‡
GC_PLACEMENT_DELETE


374 
ölöe
 
›î©‹
 
	$dñëe
 (

375 *
p
,

376 
GCPœ˚mít
 
g˝
,

377 
GCCÀ™UpFunc
 
˛ónup
,

378 * 
˛õ¡D©a
 )

380 
	`GC_FREE
(
p
);

381 
	}
}

384 #ifde‡
GC_OPERATOR_NEW_ARRAY


386 
ölöe
 * 
›î©‹
 
	g√w
[](

387 
size_t
 
	gsize
,

388 
GCPœ˚mít
 
	gg˝
,

389 
GCCÀ™UpFunc
 
	g˛ónup
,

390 * 
	g˛õ¡D©a
 )

392  ::
›î©‹
 
√w
–
size
, 
g˝
, 
˛ónup
, 
˛õ¡D©a
 );}

	@include/gc_gcj.h

27 #i‚de‡
GC_GCJ_H


29 
	#GC_GCJ_H


	)

31 #i‚de‡
MARK_DESCR_OFFSET


32 
	#MARK_DESCR_OFFSET
 (
w‹d
)

	)

43 #i‚de‡
_GC_H


44 
	~"gc.h
"

62 
GC_öô_gcj_mÆloc
(
mp_ödex
, * 
mp
);

67 * 
GC_gcj_mÆloc
(
size_t
 
lb
, * 
±r_to_°ru˘_c⁄èöög_des¸
);

70 * 
GC_debug_gcj_mÆloc
(
size_t
 
lb
,

71 * 
±r_to_°ru˘_c⁄èöög_des¸
,

72 
GC_EXTRA_PARAMS
);

76 * 
GC_gcj_mÆloc_ign‹e_off_∑ge
(
size_t
 
lb
,

77 * 
±r_to_°ru˘_c⁄èöög_des¸
);

81 
GC_gcj_köd
;

83 
GC_gcj_debug_köd
;

85 #ifde‡
GC_DEBUG


86 
	#GC_GCJ_MALLOC
(
s
,
d
Ë
	`GC_debug_gcj_mÆloc
(s,d,
GC_EXTRAS
)

	)

87 
	#GC_GCJ_MALLOC_IGNORE_OFF_PAGE
(
s
,
d
Ë
	`GC_debug_gcj_mÆloc
(s,d,
GC_EXTRAS
)

	)

89 
	#GC_GCJ_MALLOC
(
s
,
d
Ë
	`GC_gcj_mÆloc
(s,d)

	)

90 
	#GC_GCJ_MALLOC_IGNORE_OFF_PAGE
(
s
,
d
) \

91 
	`GC_gcj_mÆloc_ign‹e_off_∑ge
(
s
,
d
)

	)

	@include/gc_inline.h

26 
	~"gc.h
"

27 
	~"gc_töy_Ê.h
"

29 #i‡
__GNUC__
 >= 3

30 
	#GC_EXPECT
(
ex¥
, 
outcome
Ë
	`__buûtö_ex≥˘
”x¥,outcome)

	)

33 
	#GC_EXPECT
(
ex¥
, 
outcome
Ë”x¥)

	)

52 
	#GC_FAST_MALLOC_GRANS
(
ªsu…
,
gønuÀs
,
töy_Ê
,
num_dúe˘
,\

53 
köd
,
deÁu…_ex¥
,
öô
) \

55 i‡(
	`GC_EXPECT
(
gønuÀs
 >
GC_TINY_FREELISTS
,0)) { \

56 
ªsu…
 = 
deÁu…_ex¥
; \

58 **
my_Ê
 = 
töy_Ê
 + 
gønuÀs
; \

59 *
my_íåy
=*
my_Ê
; \

60 *
√xt
; \

62 
	`GC_EXPECT
((
GC_w‹d
)
my_íåy
 \

63 <
num_dúe˘
 + 
GC_TINY_FREELISTS
 + 1, 0)) { \

65 i‡((
GC_w‹d
)
my_íåy
 - 1 < 
num_dúe˘
) { \

67 *
my_Ê
 = (*)
my_íåy
 + 
gønuÀs
 + 1; \

68 
ªsu…
 = 
deÁu…_ex¥
; \

69 
out
; \

72 
	`GC_gíîic_mÆloc_m™y
(((
gønuÀs
Ë=0? 
GC_GRANULE_BYTES
 : \

73 
	`GC_RAW_BYTES_FROM_INDEX
(
gønuÀs
)), \

74 
köd
, 
my_Ê
); \

75 
my_íåy
 = *
my_Ê
; \

76 i‡(
my_íåy
 == 0) { \

77 
ªsu…
 = 
	`GC_oom_‚
(
gønuÀs
*
GC_GRANULE_BYTES
); \

78 
out
; \

82 
√xt
 = *(**)(
my_íåy
); \

83 
ªsu…
 = (*)
my_íåy
; \

84 *
my_Ê
 = 
√xt
; \

85 
öô
; \

86 
	`PREFETCH_FOR_WRITE
(
√xt
); \

87 
	`GC_ASSERT
(
	`GC_size
(
ªsu…
Ë>
gønuÀs
*
GC_GRANULE_BYTES
); \

88 
	`GC_ASSERT
((
köd
Ë=
PTRFREE
 || ((
GC_w‹d
 *)
ªsu…
)[1] == 0); \

89 
out
: ; \

91 }

	)

93 
	#GC_WORDS_TO_WHOLE_GRANULES
(
n
) \

94 
	`GC_WORDS_TO_GRANULES
((
n
Ë+ 
GC_GRANULE_WORDS
 - 1)

	)

103 
	#GC_MALLOC_WORDS
(
ªsu…
,
n
,
töy_Ê
) \

105 
size_t
 
gøns
 = 
	`GC_WORDS_TO_WHOLE_GRANULES
(
n
); \

106 
	`GC_FAST_MALLOC_GRANS
(
ªsu…
, 
gøns
, 
töy_Ê
, 0, \

107 
NORMAL
, 
	`GC_mÆloc
(
gøns
*
GC_GRANULE_BYTES
), \

108 *(**)
ªsu…
 = 0); \

109 }

	)

111 
	#GC_MALLOC_ATOMIC_WORDS
(
ªsu…
,
n
,
töy_Ê
) \

113 
size_t
 
gøns
 = 
	`GC_WORDS_TO_WHOLE_GRANULES
(
n
); \

114 
	`GC_FAST_MALLOC_GRANS
(
ªsu…
, 
gøns
, 
töy_Ê
, 0, \

115 
PTRFREE
, 
	`GC_mÆloc_©omic
(
gøns
*
GC_GRANULE_BYTES
), \

117 }

	)

121 
	#GC_CONS
(
ªsu…
, 
fú°
, 
£c⁄d
, 
töy_Ê
) \

123 
size_t
 
gøns
 = 
	`GC_WORDS_TO_WHOLE_GRANULES
(2); \

124 
	`GC_FAST_MALLOC_GRANS
(
ªsu…
, 
gøns
, 
töy_Ê
, 0, \

125 
NORMAL
, 
	`GC_mÆloc
(
gøns
*
GC_GRANULE_BYTES
), \

126 *(**)
ªsu…
 = (*)(
fú°
)); \

127 ((**)(
ªsu…
))[1] = (*)(
£c⁄d
); \

128 }

	)

	@include/gc_mark.h

25 #i‚de‡
GC_MARK_H


26 
	#GC_MARK_H


	)

28 #i‚de‡
GC_H


29 
	~"gc.h
"

54 
	#GC_PROC_BYTES
 100

	)

55 
	gGC_ms_íåy
;

56 
	gGC_ms_íåy
 * (*
	tGC_m¨k_¥oc
) (

57 
	tGC_w‹d
 * 
	taddr
, 
	tGC_ms_íåy
 * 
	tm¨k_°ack_±r
,

58 
	tGC_ms_íåy
 * 
	tm¨k_°ack_limô
, 
	tGC_w‹d
 
	tív
);

60 
	#GC_LOG_MAX_MARK_PROCS
 6

	)

61 
	#GC_MAX_MARK_PROCS
 (1 << 
GC_LOG_MAX_MARK_PROCS
)

	)

66 
	#GC_RESERVED_MARK_PROCS
 8

	)

67 
	#GC_GCJ_RESERVED_MARK_PROC_INDEX
 0

	)

72 
	#GC_DS_TAG_BITS
 2

	)

73 
	#GC_DS_TAGS
 ((1 << 
GC_DS_TAG_BITS
Ë- 1)

	)

74 
	#GC_DS_LENGTH
 0

	)

76 
	#GC_DS_BITMAP
 1

	)

84 
	#GC_DS_PROC
 2

	)

89 
	#GC_MAKE_PROC
(
¥oc_ödex
, 
ív
) \

90 (((((
ív
Ë<< 
GC_LOG_MAX_MARK_PROCS
) \

91 | (
¥oc_ödex
)Ë<< 
GC_DS_TAG_BITS
Ë| 
GC_DS_PROC
)

	)

92 
	#GC_DS_PER_OBJECT
 3

	)

107 
	#GC_INDIR_PER_OBJ_BIAS
 0x10

	)

109 * 
GC_Àa°_∂ausibÀ_hóp_addr
;

110 * 
GC_gª©e°_∂ausibÀ_hóp_addr
;

133 
GC_ms_íåy
 *
GC_m¨k_™d_push
(* 
obj
,

134 
GC_ms_íåy
 * 
m¨k_°ack_±r
,

135 
GC_ms_íåy
 * 
m¨k_°ack_limô
,

136 * *
§c
);

138 
	#GC_MARK_AND_PUSH
(
obj
, 
m•
, 
lim
, 
§c
) \

139 (((
GC_w‹d
)
obj
 >(GC_w‹d)
GC_Àa°_∂ausibÀ_hóp_addr
 && \

140 (
GC_w‹d
)
obj
 <(GC_w‹d)
GC_gª©e°_∂ausibÀ_hóp_addr
)? \

141 
	`GC_m¨k_™d_push
(
obj
, 
m•
, 
lim
, 
§c
) : \

142 
m•
)

	)

144 
size_t
 
GC_debug_hódî_size
;

149 
	#GC_USR_PTR_FROM_BASE
(
p
Ë((*)((*)’Ë+ 
GC_debug_hódî_size
))

	)

156 ** 
GC_√w_‰ì_li°
();

157 ** 
GC_√w_‰ì_li°_ö√r
();

160 
GC_√w_köd
(**
‰ì_li°
, 
GC_w‹d
 
m¨k_des¸ùt‹_ãm∂©e
,

161 
add_size_to_des¸ùt‹
, 
˛ór_√w_obje˘s
);

163 
GC_√w_köd_ö√r
(**
‰ì_li°
,

164 
GC_w‹d
 
m¨k_des¸ùt‹_ãm∂©e
,

165 
add_size_to_des¸ùt‹
,

166 
˛ór_√w_obje˘s
);

170 
GC_√w_¥oc
(
GC_m¨k_¥oc
);

171 
GC_√w_¥oc_ö√r
(
GC_m¨k_¥oc
);

179 * 
GC_gíîic_mÆloc
(
size_t
 
lb
, 
k
);

181 (*
	tGC_des¸ibe_ty≥_‚
Ë(*
	tp
, *
	tout_buf
);

193 
	#GC_TYPE_DESCR_LEN
 40

	)

195 
	`GC_ªgi°î_des¸ibe_ty≥_‚
(
köd
, 
GC_des¸ibe_ty≥_‚
 
knd
);

	@include/gc_pthread_redirects.h

4 #i‚de‡
GC_PTHREAD_REDIRECTS_H


6 
	#GC_PTHREAD_REDIRECTS_H


	)

8 #i‡!
deföed
(
GC_USE_LD_WRAP
Ë&& deföed(
GC_PTHREADS
)

18 
	~<±hªad.h
>

19 
	~<sig«l.h
>

21 
GC_±hªad_¸óã
(
±hªad_t
 *
√w_thªad
,

22 c⁄° 
±hªad_©å_t
 *
©å
,

23 *(*
°¨t_routöe
)(*), *
¨g
);

24 #i‚de‡
GC_DARWIN_THREADS


25 
GC_±hªad_sigmask
(
how
, c⁄° 
sig£t_t
 *
£t
, sig£t_à*
o£t
);

27 
GC_±hªad_joö
(
±hªad_t
 
thªad
, **
ªtvÆ
);

28 
GC_±hªad_dëach
(
±hªad_t
 
thªad
);

30 #i‡
deföed
(
GC_OSF1_THREADS
) \

31 && 
deföed
(
_PTHREAD_USE_MANGLED_NAMES_
Ë&& !
	$deföed
(
_PTHREAD_USE_PTDNAM_
)

35 #unde‡
±hªad_¸óã


36 #unde‡
±hªad_joö


37 #unde‡
±hªad_dëach


40 
	#±hªad_¸óã
 
GC_±hªad_¸óã


	)

41 
	#±hªad_joö
 
GC_±hªad_joö


	)

42 
	#±hªad_dëach
 
GC_±hªad_dëach


	)

44 #i‚de‡
GC_DARWIN_THREADS


45 #ifde‡
±hªad_sigmask


46 #unde‡
±hªad_sigmask


48 
	#±hªad_sigmask
 
GC_±hªad_sigmask


	)

49 
	#dl›í
 
GC_dl›í


	)

	@include/gc_tiny_fl.h

14 #i‚de‡
GC_TINY_FL_H


15 
	#GC_TINY_FL_H


	)

45 #i‚de‡
GC_GRANULE_BYTES


49 #i‡
deföed
(
__LP64__
Ë|| deföed (
_LP64
Ë|| deföed(
_WIN64
) \

50 || 
deföed
(
__s390x__
Ë|| deföed(
__x86_64__
) \

51 || 
deföed
(
__Æpha__
Ë|| deföed(
__powîpc64__
) \

52 || 
	$deföed
(
__¨ch64__
)

53 
	#GC_GRANULE_BYTES
 16

	)

54 
	#GC_GRANULE_WORDS
 2

	)

56 
	#GC_GRANULE_BYTES
 8

	)

57 
	#GC_GRANULE_WORDS
 2

	)

61 #i‡
GC_GRANULE_WORDS
 == 2

62 
	#GC_WORDS_TO_GRANULES
(
n
Ë(“)>>1)

	)

64 
	#GC_WORDS_TO_GRANULES
(
n
Ë(“)*(*)/
GC_GRANULE_BYTES
)

	)

71 #i‚de‡
GC_TINY_FREELISTS


72 #i‡
GC_GRANULE_BYTES
 == 16

73 
	#GC_TINY_FREELISTS
 25

	)

75 
	#GC_TINY_FREELISTS
 33

	)

87 
	#GC_RAW_BYTES_FROM_INDEX
(
i
Ë((iË* 
GC_GRANULE_BYTES
)

	)

	@include/gc_typed.h

26 #i‚de‡
_GC_TYPED_H


27 
	#_GC_TYPED_H


	)

28 #i‚de‡
_GC_H


29 
	~"gc.h
"

32 #ifde‡
__˝lu•lus


35 
GC_w‹d
 * 
	tGC_bôm≠
;

39 
	#GC_WORDSZ
 (8*(
GC_w‹d
))

	)

40 
	#GC_gë_bô
(
bm
, 
ödex
) \

41 (((
bm
)[
ödex
/
GC_WORDSZ
] >> (ödex%GC_WORDSZ)Ë& 1)

	)

42 
	#GC_£t_bô
(
bm
, 
ödex
) \

43 (
bm
)[
ödex
/
GC_WORDSZ
] |((
GC_w‹d
)1 << (ödex%GC_WORDSZ))

	)

44 
	#GC_WORD_OFFSET
(
t
, 
f
Ë(
	`off£tof
—,f)/(
GC_w‹d
))

	)

45 
	#GC_WORD_LEN
(
t
Ë(—)/ (
GC_w‹d
))

	)

46 
	#GC_BITMAP_SIZE
(
t
Ë((
	`GC_WORD_LEN
—Ë+ 
GC_WORDSZ
-1)/GC_WORDSZ)

	)

48 
GC_w‹d
 
	tGC_des¸
;

50 
GC_API
 
GC_des¸
 
GC_make_des¸ùt‹
(
GC_bôm≠
 
bm
, 
size_t
 
Àn
);

77 
GC_API
 * 
GC_mÆloc_ex∂icôly_ty≥d
(
size_t
 
size_ö_byãs
, 
GC_des¸
 
d
);

82 
GC_API
 * 
GC_mÆloc_ex∂icôly_ty≥d_ign‹e_off_∑ge


83 (
size_t
 
size_ö_byãs
, 
GC_des¸
 
d
);

85 
GC_API
 * 
GC_ˇŒoc_ex∂icôly_ty≥d
(
size_t
 
√Àmíts
,

86 
size_t
 
ñemít_size_ö_byãs
,

87 
GC_des¸
 
d
);

96 #ifde‡
GC_DEBUG


97 
	#GC_MALLOC_EXPLICITLY_TYPED
(
byãs
, 
d
Ë
	`GC_MALLOC
(byãs)

	)

98 
	#GC_CALLOC_EXPLICITLY_TYPED
(
n
, 
byãs
, 
d
Ë
	`GC_MALLOC
“*byãs)

	)

100 
	#GC_MALLOC_EXPLICITLY_TYPED
(
byãs
, 
d
) \

101 
	`GC_mÆloc_ex∂icôly_ty≥d
(
byãs
, 
d
)

	)

102 
	#GC_CALLOC_EXPLICITLY_TYPED
(
n
, 
byãs
, 
d
) \

103 
	`GC_ˇŒoc_ex∂icôly_ty≥d
(
n
, 
byãs
, 
d
)

	)

106 #ifde‡
__˝lu•lus


	@include/gc_version.h

4 
	#GC_TMP_VERSION_MAJOR
 7

	)

5 
	#GC_TMP_VERSION_MINOR
 1

	)

6 
	#GC_TMP_ALPHA_VERSION
 
GC_NOT_ALPHA


	)

8 #i‚de‡
GC_NOT_ALPHA


9 
	#GC_NOT_ALPHA
 0xff

	)

12 #i‡
deföed
(
GC_VERSION_MAJOR
)

13 #i‡
GC_TMP_VERSION_MAJOR
 !
GC_VERSION_MAJOR
 || \

14 
	gGC_TMP_VERSION_MINOR
 !
GC_VERSION_MINOR
 || \

15 
deföed
(
GC_ALPHA_VERSION
Ë!(
GC_TMP_ALPHA_VERSION
 !
GC_NOT_ALPHA
) || \

16 
deföed
(
GC_ALPHA_VERSION
Ë&& 
GC_TMP_ALPHA_VERSION
 != GC_ALPHA_VERSION

17 #îr‹ 
Inc⁄si°ít
 
vîsi⁄
 
öfo
. 
Check
 
README
, vîsi⁄.
h
, 
™d
 
c⁄figuª
.
ac
.

20 
	#GC_VERSION_MAJOR
 
GC_TMP_VERSION_MAJOR


	)

21 
	#GC_VERSION_MINOR
 
GC_TMP_VERSION_MINOR


	)

22 
	#GC_ALPHA_VERSION
 
GC_TMP_ALPHA_VERSION


	)

	@include/javaxfc.h

1 #i‚de‡
GC_H


2 
	~"gc.h
"

19 
GC_föÆize_Æl
();

	@include/leak_detector.h

1 
	#GC_DEBUG


	)

2 
	~"gc.h
"

3 
	#mÆloc
(
n
Ë
	`GC_MALLOC
“)

	)

4 
	#ˇŒoc
(
m
,
n
Ë
	`GC_MALLOC
((m)*“))

	)

5 
	#‰ì
(
p
Ë
	`GC_FREE
’)

	)

6 
	#ªÆloc
(
p
,
n
Ë
	`GC_REALLOC
(’),“))

	)

7 #unde‡
°rdup


8 
	#°rdup
(
s
Ë
	`GC_STRDUP
((s))

	)

9 
	#CHECK_LEAKS
(Ë
	`GC_gcﬁÀ˘
()

	)

	@include/new_gc_alloc.h

50 #i‚de‡
GC_ALLOC_H


52 
	~"gc.h
"

54 #i‡(
__GNUC__
 < 3)

55 
	~<°ack
>

57 
	~<bôs/°l_Æloc.h
>

58 #i‚de‡
__STL_BEGIN_NAMESPACE


59 
	#__STL_BEGIN_NAMESPACE
 
«me•a˚
 
°d
 {

	)

60 
	#__STL_END_NAMESPACE
 };

	)

62 #i‚de‡
__STL_USE_STD_ALLOCATORS


63 
	#__STL_USE_STD_ALLOCATORS


	)

69 #i‡
deföed
 (
__GNUC__
) && \

70 (
	g__GNUC__
 > 3 || (__GNUC__ =3 && (
__GNUC_MINOR__
 >= 1)))

71 
	#sim∂e_Æloc
 
__sim∂e_Æloc


	)

76 
	#GC_ALLOC_H


	)

78 
	~<°ddef.h
>

79 
	~<°rög.h
>

86 ** c⁄° 
GC_obj‰ìli°_±r
;

87 ** c⁄° 
GC_aobj‰ìli°_±r
;

88 ** c⁄° 
GC_uobj‰ìli°_±r
;

89 ** c⁄° 
GC_auobj‰ìli°_±r
;

91 
GC_ö¸_byãs_Ælocd
(
size_t
 
byãs
);

92 
GC_ö¸_mem_‰ìd
(
size_t
 
w‹ds
);

94 * 
GC_gíîic_mÆloc_w‹ds_smÆl
(
size_t
 
w‹d
, 
köd
);

101 íum { 
	mGC_PTRFREE
 = 0, 
	mGC_NORMAL
 = 1, 
	mGC_UNCOLLECTABLE
 = 2,

102 
	mGC_AUNCOLLECTABLE
 = 3 };

104 íum { 
	mGC_max_Á°_byãs
 = 255 };

106 íum { 
	mGC_byãs_≥r_w‹d
 = (*) };

108 íum { 
	mGC_byã_Æignmít
 = 8 };

110 íum { 
	mGC_w‹d_Æignmít
 = 
GC_byã_Æignmít
/
GC_byãs_≥r_w‹d
 };

112 
ölöe
 * &
	$GC_obj_lök
(* 
p
)

113 {  *
ªöãΩªt_ˇ°
<**>(
p
); 
	}
}

117 
ölöe
 
size_t
 
	$GC_round_up
(
size_t
 
n
)

119  ((
n
 + 
GC_byã_Æignmít
)/GC_byã_Æignmít)*
GC_w‹d_Æignmít
;

120 
	}
}

123 
ölöe
 
size_t
 
	$GC_round_up_uncﬁÀ˘abÀ
(
size_t
 
n
)

125  ((
n
 + 
GC_byã_Æignmít
 - 1)/GC_byã_Æignmít)*
GC_w‹d_Æignmít
;

126 
	}
}

128 
	gãm∂©e
 <
	gdummy
>

129 ˛as†
	cGC_aux_ãm∂©e
 {

130 
	mpublic
:

134 
size_t
 
GC_byãs_ª˚¡ly_Ælocd
;

138 
size_t
 
	mGC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_Ælocd
;

141 
size_t
 
	mGC_byãs_ª˚¡ly_‰ìd
;

144 
size_t
 
	mGC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_‰ìd
;

146 * 
GC_out_of_löe_mÆloc
(
size_t
 
nw‹ds
, 
köd
);

149 
	gãm∂©e
 <
	gdummy
>

150 
size_t
 
	gGC_aux_ãm∂©e
<
	gdummy
>::
GC_byãs_ª˚¡ly_Ælocd
 = 0;

152 
	gãm∂©e
 <
	gdummy
>

153 
size_t
 
	gGC_aux_ãm∂©e
<
	gdummy
>::
GC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_Ælocd
 = 0;

155 
	gãm∂©e
 <
	gdummy
>

156 
size_t
 
	gGC_aux_ãm∂©e
<
	gdummy
>::
GC_byãs_ª˚¡ly_‰ìd
 = 0;

158 
	gãm∂©e
 <
	gdummy
>

159 
size_t
 
	gGC_aux_ãm∂©e
<
	gdummy
>::
GC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_‰ìd
 = 0;

161 
	gãm∂©e
 <
	gdummy
>

162 * 
	gGC_aux_ãm∂©e
<
	gdummy
>::
	$GC_out_of_löe_mÆloc
(
size_t
 
nw‹ds
, 
köd
)

164 
GC_byãs_ª˚¡ly_Ælocd
 +
GC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_Ælocd
;

165 
GC_n⁄_gc_byãs
 +=

166 
GC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_Ælocd
;

167 
GC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_Ælocd
 = 0;

169 
GC_byãs_ª˚¡ly_‰ìd
 +
GC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_‰ìd
;

170 
GC_n⁄_gc_byãs
 -
GC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_‰ìd
;

171 
GC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_‰ìd
 = 0;

173 
	`GC_ö¸_byãs_Ælocd
(
GC_byãs_ª˚¡ly_Ælocd
);

174 
GC_byãs_ª˚¡ly_Ælocd
 = 0;

176 
	`GC_ö¸_mem_‰ìd
(
	`GC_byãs_≥r_w‹d
(
GC_byãs_ª˚¡ly_‰ìd
));

177 
GC_byãs_ª˚¡ly_‰ìd
 = 0;

179  
	`GC_gíîic_mÆloc_w‹ds_smÆl
(
nw‹ds
, 
köd
);

180 
	}
}

182 
	gGC_aux_ãm∂©e
<0> 
	tGC_aux
;

188 
	gãm∂©e
 <
	gdummy
>

189 ˛as†
	csögÀ_˛õ¡_gc_Æloc_ãm∂©e
 {

190 
	mpublic
:

191 * 
	$Æloˇã
(
size_t
 
n
)

193 
size_t
 
nw‹ds
 = 
	`GC_round_up
(
n
);

194 ** 
Êh
;

195 * 
›
;

197 i‡(
n
 > 
GC_max_Á°_byãs
Ë 
	`GC_mÆloc
(n);

198 
Êh
 = 
GC_obj‰ìli°_±r
 + 
nw‹ds
;

199 i‡(0 =(
›
 = *
Êh
)) {

200  
GC_aux
::
	`GC_out_of_löe_mÆloc
(
nw‹ds
, 
GC_NORMAL
);

202 *
Êh
 = 
	`GC_obj_lök
(
›
);

203 
GC_aux
::
GC_byãs_ª˚¡ly_Ælocd
 +
nw‹ds
 * 
GC_byãs_≥r_w‹d
;

204  
›
;

206 * 
	$±r_‰ì_Æloˇã
(
size_t
 
n
)

208 
size_t
 
nw‹ds
 = 
	`GC_round_up
(
n
);

209 ** 
Êh
;

210 * 
›
;

212 i‡(
n
 > 
GC_max_Á°_byãs
Ë 
	`GC_mÆloc_©omic
(n);

213 
Êh
 = 
GC_aobj‰ìli°_±r
 + 
nw‹ds
;

214 i‡(0 =(
›
 = *
Êh
)) {

215  
GC_aux
::
	`GC_out_of_löe_mÆloc
(
nw‹ds
, 
GC_PTRFREE
);

217 *
Êh
 = 
	`GC_obj_lök
(
›
);

218 
GC_aux
::
GC_byãs_ª˚¡ly_Ælocd
 +
nw‹ds
 * 
GC_byãs_≥r_w‹d
;

219  
›
;

220 
	}
}

221 
	$dóŒoˇã
(*
p
, 
size_t
 
n
)

223 
size_t
 
nw‹ds
 = 
	`GC_round_up
(
n
);

224 ** 
Êh
;

226 i‡(
n
 > 
GC_max_Á°_byãs
) {

227 
	`GC_‰ì
(
p
);

229 
Êh
 = 
GC_obj‰ìli°_±r
 + 
nw‹ds
;

230 
	`GC_obj_lök
(
p
Ë*
Êh
;

231 
	`mem£t
(
ªöãΩªt_ˇ°
<*>(
p
Ë+ 
GC_byãs_≥r_w‹d
, 0,

232 
GC_byãs_≥r_w‹d
 * (
nw‹ds
 - 1));

233 *
Êh
 = 
p
;

234 
GC_aux
::
GC_byãs_ª˚¡ly_‰ìd
 +
nw‹ds
 * 
GC_byãs_≥r_w‹d
;

236 
	}
}

237 
	$±r_‰ì_dóŒoˇã
(*
p
, 
size_t
 
n
)

239 
size_t
 
nw‹ds
 = 
	`GC_round_up
(
n
);

240 ** 
Êh
;

242 i‡(
n
 > 
GC_max_Á°_byãs
) {

243 
	`GC_‰ì
(
p
);

245 
Êh
 = 
GC_aobj‰ìli°_±r
 + 
nw‹ds
;

246 
	`GC_obj_lök
(
p
Ë*
Êh
;

247 *
Êh
 = 
p
;

248 
GC_aux
::
GC_byãs_ª˚¡ly_‰ìd
 +
nw‹ds
 * 
GC_byãs_≥r_w‹d
;

250 
	}
}

253 
	gsögÀ_˛õ¡_gc_Æloc_ãm∂©e
<0> 
	tsögÀ_˛õ¡_gc_Æloc
;

256 
	gãm∂©e
 <
	gdummy
>

257 ˛as†
	csögÀ_˛õ¡_åa˚abÀ_Æloc_ãm∂©e
 {

258 
	mpublic
:

259 * 
	$Æloˇã
(
size_t
 
n
)

261 
size_t
 
nw‹ds
 = 
	`GC_round_up_uncﬁÀ˘abÀ
(
n
);

262 ** 
Êh
;

263 * 
›
;

265 i‡(
n
 > 
GC_max_Á°_byãs
Ë 
	`GC_mÆloc_uncﬁÀ˘abÀ
(n);

266 
Êh
 = 
GC_uobj‰ìli°_±r
 + 
nw‹ds
;

267 i‡(0 =(
›
 = *
Êh
)) {

268  
GC_aux
::
	`GC_out_of_löe_mÆloc
(
nw‹ds
, 
GC_UNCOLLECTABLE
);

270 *
Êh
 = 
	`GC_obj_lök
(
›
);

271 
GC_aux
::
GC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_Ælocd
 +=

272 
nw‹ds
 * 
GC_byãs_≥r_w‹d
;

273  
›
;

275 * 
	$±r_‰ì_Æloˇã
(
size_t
 
n
)

277 
size_t
 
nw‹ds
 = 
	`GC_round_up_uncﬁÀ˘abÀ
(
n
);

278 ** 
Êh
;

279 * 
›
;

281 i‡(
n
 > 
GC_max_Á°_byãs
Ë 
	`GC_mÆloc_©omic_uncﬁÀ˘abÀ
(n);

282 
Êh
 = 
GC_auobj‰ìli°_±r
 + 
nw‹ds
;

283 i‡(0 =(
›
 = *
Êh
)) {

284  
GC_aux
::
	`GC_out_of_löe_mÆloc
(
nw‹ds
, 
GC_AUNCOLLECTABLE
);

286 *
Êh
 = 
	`GC_obj_lök
(
›
);

287 
GC_aux
::
GC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_Ælocd
 +=

288 
nw‹ds
 * 
GC_byãs_≥r_w‹d
;

289  
›
;

290 
	}
}

291 
	$dóŒoˇã
(*
p
, 
size_t
 
n
)

293 
size_t
 
nw‹ds
 = 
	`GC_round_up_uncﬁÀ˘abÀ
(
n
);

294 ** 
Êh
;

296 i‡(
n
 > 
GC_max_Á°_byãs
) {

297 
	`GC_‰ì
(
p
);

299 
Êh
 = 
GC_uobj‰ìli°_±r
 + 
nw‹ds
;

300 
	`GC_obj_lök
(
p
Ë*
Êh
;

301 *
Êh
 = 
p
;

302 
GC_aux
::
GC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_‰ìd
 +=

303 
nw‹ds
 * 
GC_byãs_≥r_w‹d
;

305 
	}
}

306 
	$±r_‰ì_dóŒoˇã
(*
p
, 
size_t
 
n
)

308 
size_t
 
nw‹ds
 = 
	`GC_round_up_uncﬁÀ˘abÀ
(
n
);

309 ** 
Êh
;

311 i‡(
n
 > 
GC_max_Á°_byãs
) {

312 
	`GC_‰ì
(
p
);

314 
Êh
 = 
GC_auobj‰ìli°_±r
 + 
nw‹ds
;

315 
	`GC_obj_lök
(
p
Ë*
Êh
;

316 *
Êh
 = 
p
;

317 
GC_aux
::
GC_uncﬁÀ˘abÀ_byãs_ª˚¡ly_‰ìd
 +=

318 
nw‹ds
 * 
GC_byãs_≥r_w‹d
;

320 
	}
}

323 
	gsögÀ_˛õ¡_åa˚abÀ_Æloc_ãm∂©e
<0> 
	tsögÀ_˛õ¡_åa˚abÀ_Æloc
;

325 
	gãm∂©e
 < 
	gdummy
 >

326 ˛as†
	cgc_Æloc_ãm∂©e
 {

327 
	mpublic
:

328 * 
	$Æloˇã
(
size_t
 
n
Ë{  
	`GC_mÆloc
(n); }

329 * 
	$±r_‰ì_Æloˇã
(
size_t
 
n
)

330 {  
	`GC_mÆloc_©omic
(
n
); 
	}
}

331 
	$dóŒoˇã
(*, 
size_t
Ë{ 
	}
}

332 
	$±r_‰ì_dóŒoˇã
(*, 
size_t
Ë{ 
	}
}

335 
	ggc_Æloc_ãm∂©e
 < 0 > 
	tgc_Æloc
;

337 
	gãm∂©e
 < 
	gdummy
 >

338 ˛as†
	cåa˚abÀ_Æloc_ãm∂©e
 {

339 
	mpublic
:

340 * 
	$Æloˇã
(
size_t
 
n
Ë{  
	`GC_mÆloc_uncﬁÀ˘abÀ
(n); }

341 * 
	$±r_‰ì_Æloˇã
(
size_t
 
n
)

342 {  
	`GC_mÆloc_©omic_uncﬁÀ˘abÀ
(
n
); 
	}
}

343 
	$dóŒoˇã
(*
p
, 
size_t
Ë{ 
	`GC_‰ì
’); 
	}
}

344 
	$±r_‰ì_dóŒoˇã
(*
p
, 
size_t
Ë{ 
	`GC_‰ì
’); 
	}
}

347 
	gåa˚abÀ_Æloc_ãm∂©e
 < 0 > 
	tåa˚abÀ_Æloc
;

354 
	#__GC_SPECIALIZE
(
T
,
Æloc
) \

355 
˛ass
 
sim∂e_Æloc
<
T
, 
Æloc
> { \

356 
public
: \

357 
T
 *
	`Æloˇã
(
size_t
 
n
) \

358 {  0 =
n
? 0 : \

359 
ªöãΩªt_ˇ°
<
T
*>(
Æloc
::
	`±r_‰ì_Æloˇã
(
n
 *  (T))); } \

360 
T
 *
	`Æloˇã
() \

361 {  
ªöãΩªt_ˇ°
<
T
*>(
Æloc
::
	`±r_‰ì_Æloˇã
( (T))); } \

362 
	`dóŒoˇã
(
T
 *
p
, 
size_t
 
n
) \

363 { i‡(0 !
n
Ë
Æloc
::
	`±r_‰ì_dóŒoˇã
(
p
,Ç *  (
T
)); } \

364 
	`dóŒoˇã
(
T
 *
p
) \

365 { 
Æloc
::
	`±r_‰ì_dóŒoˇã
(
p
,  (
T
)); } \

366 };

	)

368 
__STL_BEGIN_NAMESPACE


370 
	$__GC_SPECIALIZE
(, 
gc_Æloc
)

371 
	$__GC_SPECIALIZE
(, 
gc_Æloc
)

372 
	$__GC_SPECIALIZE
(, 
gc_Æloc
)

373 
	$__GC_SPECIALIZE
(, 
gc_Æloc
)

374 
	$__GC_SPECIALIZE
(, 
gc_Æloc
)

376 
	$__GC_SPECIALIZE
(, 
åa˚abÀ_Æloc
)

377 
	$__GC_SPECIALIZE
(, 
åa˚abÀ_Æloc
)

378 
	$__GC_SPECIALIZE
(, 
åa˚abÀ_Æloc
)

379 
	$__GC_SPECIALIZE
(, 
åa˚abÀ_Æloc
)

380 
	$__GC_SPECIALIZE
(, 
åa˚abÀ_Æloc
)

382 
	$__GC_SPECIALIZE
(, 
sögÀ_˛õ¡_gc_Æloc
)

383 
	$__GC_SPECIALIZE
(, 
sögÀ_˛õ¡_gc_Æloc
)

384 
	$__GC_SPECIALIZE
(, 
sögÀ_˛õ¡_gc_Æloc
)

385 
	$__GC_SPECIALIZE
(, 
sögÀ_˛õ¡_gc_Æloc
)

386 
	$__GC_SPECIALIZE
(, 
sögÀ_˛õ¡_gc_Æloc
)

388 
	$__GC_SPECIALIZE
(, 
sögÀ_˛õ¡_åa˚abÀ_Æloc
)

389 
	$__GC_SPECIALIZE
(, 
sögÀ_˛õ¡_åa˚abÀ_Æloc
)

390 
	$__GC_SPECIALIZE
(, 
sögÀ_˛õ¡_åa˚abÀ_Æloc
)

391 
	$__GC_SPECIALIZE
(, 
sögÀ_˛õ¡_åa˚abÀ_Æloc
)

392 
	$__GC_SPECIALIZE
(, 
sögÀ_˛õ¡_åa˚abÀ_Æloc
)

394 
__STL_END_NAMESPACE


396 #ifde‡
__STL_USE_STD_ALLOCATORS


398 
__STL_BEGIN_NAMESPACE


400 
ãm∂©e
 <
˛ass
 
_Tp
>

401 
_AŒoc_åaôs
<
_Tp
, 
gc_Æloc
 >

403 c⁄° 
boﬁ
 
_S_ö°™˚Àss
 = 
åue
;

404 
sim∂e_Æloc
<
	t_Tp
, 
	tgc_Æloc
 > 
	t_AŒoc_ty≥
;

405 
__Æloˇt‹
<
	t_Tp
, 
	tgc_Æloc
 > 
	tÆloˇt‹_ty≥
;

406 
	}
};

408 
ölöe
 
boﬁ
 
	g›î©‹
==(c⁄° 
gc_Æloc
&,

409 c⁄° 
	ggc_Æloc
&)

411  
	gåue
;

414 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
gc_Æloc
&,

415 c⁄° 
	ggc_Æloc
&)

417  
	gÁl£
;

420 
	gãm∂©e
 <
˛ass
 
	g_Tp
>

421 
	g_AŒoc_åaôs
<
	g_Tp
, 
	gsögÀ_˛õ¡_gc_Æloc
 >

423 c⁄° 
boﬁ
 
	g_S_ö°™˚Àss
 = 
åue
;

424 
	gsim∂e_Æloc
<
	t_Tp
, 
	tsögÀ_˛õ¡_gc_Æloc
 > 
	t_AŒoc_ty≥
;

425 
	g__Æloˇt‹
<
	t_Tp
, 
	tsögÀ_˛õ¡_gc_Æloc
 > 
	tÆloˇt‹_ty≥
;

428 
ölöe
 
boﬁ
 
	g›î©‹
==(c⁄° 
sögÀ_˛õ¡_gc_Æloc
&,

429 c⁄° 
	gsögÀ_˛õ¡_gc_Æloc
&)

431  
	gåue
;

434 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
sögÀ_˛õ¡_gc_Æloc
&,

435 c⁄° 
	gsögÀ_˛õ¡_gc_Æloc
&)

437  
	gÁl£
;

440 
	gãm∂©e
 <
˛ass
 
	g_Tp
>

441 
	g_AŒoc_åaôs
<
	g_Tp
, 
	gåa˚abÀ_Æloc
 >

443 c⁄° 
boﬁ
 
	g_S_ö°™˚Àss
 = 
åue
;

444 
	gsim∂e_Æloc
<
	t_Tp
, 
	tåa˚abÀ_Æloc
 > 
	t_AŒoc_ty≥
;

445 
	g__Æloˇt‹
<
	t_Tp
, 
	tåa˚abÀ_Æloc
 > 
	tÆloˇt‹_ty≥
;

448 
ölöe
 
boﬁ
 
	g›î©‹
==(c⁄° 
åa˚abÀ_Æloc
&,

449 c⁄° 
	gåa˚abÀ_Æloc
&)

451  
	gåue
;

454 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
åa˚abÀ_Æloc
&,

455 c⁄° 
	gåa˚abÀ_Æloc
&)

457  
	gÁl£
;

460 
	gãm∂©e
 <
˛ass
 
	g_Tp
>

461 
	g_AŒoc_åaôs
<
	g_Tp
, 
	gsögÀ_˛õ¡_åa˚abÀ_Æloc
 >

463 c⁄° 
boﬁ
 
	g_S_ö°™˚Àss
 = 
åue
;

464 
	gsim∂e_Æloc
<
	t_Tp
, 
	tsögÀ_˛õ¡_åa˚abÀ_Æloc
 > 
	t_AŒoc_ty≥
;

465 
	g__Æloˇt‹
<
	t_Tp
, 
	tsögÀ_˛õ¡_åa˚abÀ_Æloc
 > 
	tÆloˇt‹_ty≥
;

468 
ölöe
 
boﬁ
 
	g›î©‹
==(c⁄° 
sögÀ_˛õ¡_åa˚abÀ_Æloc
&,

469 c⁄° 
	gsögÀ_˛õ¡_åa˚abÀ_Æloc
&)

471  
	gåue
;

474 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
sögÀ_˛õ¡_åa˚abÀ_Æloc
&,

475 c⁄° 
	gsögÀ_˛õ¡_åa˚abÀ_Æloc
&)

477  
	gÁl£
;

480 
	g__STL_END_NAMESPACE


	@include/private/cord_pos.h

14 #i‚de‡
CORD_POSITION_H


21 
	#MAX_DEPTH
 48

	)

25 
	sCORD_≥
 {

26 
CORD
 
	m≥_c‹d
;

27 
size_t
 
	m≥_°¨t_pos
;

32 
	sCORD_Pos
 {

33 
size_t
 
	mcur_pos
;

34 
	m∑th_Àn
;

35 
	#CORD_POS_INVALID
 (0x55555555)

	)

37 c⁄° *
	mcur_Àaf
;

44 
size_t
 
	mcur_°¨t
;

45 
size_t
 
	mcur_íd
;

47 
CORD_≥
 
	m∑th
[
MAX_DEPTH
 + 1];

50 
	#FUNCTION_BUF_SZ
 8

	)

51 
	mfun˘i⁄_buf
[
FUNCTION_BUF_SZ
];

53 } 
	tCORD_pos
[1];

56 
CORD
 
CORD_pos_to_c‹d
(
CORD_pos
 
p
);

59 
size_t
 
CORD_pos_to_ödex
(
CORD_pos
 
p
);

62 
CORD_pos_„tch
(
CORD_pos
 
p
);

66 
CORD_£t_pos
(
CORD_pos
 
p
, 
CORD
 
x
, 
size_t
 
i
);

71 
CORD_√xt
(
CORD_pos
 
p
);

76 
CORD_¥ev
(
CORD_pos
 
p
);

79 
CORD_pos_vÆid
(
CORD_pos
 
p
);

81 
CORD__pos_„tch
(
CORD_pos
);

82 
CORD__√xt
(
CORD_pos
);

83 
CORD__¥ev
(
CORD_pos
);

85 
	#CORD_pos_„tch
(
p
) \

86 (((
p
)[0].
cur_íd
 != 0)? \

87 (
p
)[0].
cur_Àaf
[’)[0].
cur_pos
 - (p)[0].
cur_°¨t
] \

88 : 
	`CORD__pos_„tch
(
p
))

	)

90 
	#CORD_√xt
(
p
) \

91 (((
p
)[0].
cur_pos
 + 1 < (p)[0].
cur_íd
)? \

92 (
p
)[0].
cur_pos
++ \

93 : (
	`CORD__√xt
(
p
), 0))

	)

95 
	#CORD_¥ev
(
p
) \

96 (((
p
)[0].
cur_íd
 !0 && (p)[0].
cur_pos
 > (p)[0].
cur_°¨t
)? \

97 (
p
)[0].
cur_pos
-- \

98 : (
	`CORD__¥ev
(
p
), 0))

	)

100 
	#CORD_pos_to_ödex
(
p
Ë(’)[0].
cur_pos
)

	)

102 
	#CORD_pos_to_c‹d
(
p
Ë(’)[0].
∑th
[0].
≥_c‹d
)

	)

104 
	#CORD_pos_vÆid
(
p
Ë(’)[0].
∑th_Àn
 !
CORD_POS_INVALID
)

	)

107 
	#CORD_pos_ch¨s_À·
(
p
Ë(()(’)[0].
cur_íd
Ë- ()(’)[0].
cur_pos
))

	)

110 
	#CORD_pos_adv™˚
(
p
,
n
Ë(’)[0].
cur_pos
 +“Ë- 1, 
	`CORD_√xt
’))

	)

114 
	#CORD_pos_cur_ch¨_addr
(
p
) \

115 (
p
)[0].
cur_Àaf
 + (’)[0].
cur_pos
 - (p)[0].
cur_°¨t
)

	)

	@include/private/darwin_semaphore.h

1 #i‚de‡
GC_DARWIN_SEMAPHORE_H


2 
	#GC_DARWIN_SEMAPHORE_H


	)

4 #i‡!
deföed
(
GC_DARWIN_THREADS
)

5 #îr‹ 
d¨wö_£m≠h‹e
.
h
 
ö˛uded
 
wôh
 
GC_DARWIN_THREADS
 
nŸ
 
deföed


16 
±hªad_muãx_t
 
	mmuãx
;

17 
±hªad_c⁄d_t
 
	mc⁄d
;

18 
	mvÆue
;

19 } 
	t£m_t
;

21 
	$£m_öô
(
£m_t
 *
£m
, 
psh¨ed
, 
vÆue
) {

22 
ªt
;

23 if(
psh¨ed
)

24 
	`GC_ab‹t
("sem_init withÖshared set");

25 
£m
->
vÆue
 = value;

27 
ªt
 = 
	`±hªad_muãx_öô
(&
£m
->
muãx
,
NULL
);

28 if(
ªt
 < 0)  -1;

29 
ªt
 = 
	`±hªad_c⁄d_öô
(&
£m
->
c⁄d
,
NULL
);

30 if(
ªt
 < 0)  -1;

32 
	}
}

34 
	$£m_po°
(
£m_t
 *
£m
) {

35 if(
	`±hªad_muãx_lock
(&
£m
->
muãx
) < 0)

37 
£m
->
vÆue
++;

38 if(
	`±hªad_c⁄d_sig«l
(&
£m
->
c⁄d
) < 0) {

39 
	`±hªad_muãx_u∆ock
(&
£m
->
muãx
);

42 if(
	`±hªad_muãx_u∆ock
(&
£m
->
muãx
) < 0)

45 
	}
}

47 
	$£m_waô
(
£m_t
 *
£m
) {

48 if(
	`±hªad_muãx_lock
(&
£m
->
muãx
) < 0)

50 
£m
->
vÆue
 == 0) {

51 
	`±hªad_c⁄d_waô
(&
£m
->
c⁄d
,&£m->
muãx
);

53 
£m
->
vÆue
--;

54 if(
	`±hªad_muãx_u∆ock
(&
£m
->
muãx
) < 0)

57 
	}
}

59 
	$£m_de°roy
(
£m_t
 *
£m
) {

60 
ªt
;

61 
ªt
 = 
	`±hªad_c⁄d_de°roy
(&
£m
->
c⁄d
);

62 if(
ªt
 < 0)  -1;

63 
ªt
 = 
	`±hªad_muãx_de°roy
(&
£m
->
muãx
);

64 if(
ªt
 < 0)  -1;

66 
	}
}

	@include/private/darwin_stop_world.h

1 #i‚de‡
GC_DARWIN_STOP_WORLD_H


2 
	#GC_DARWIN_STOP_WORLD_H


	)

4 #i‡!
deföed
(
GC_DARWIN_THREADS
)

5 #îr‹ 
d¨wö_°›_w‹ld
.
h
 
ö˛uded
 
wôhout
 
GC_DARWIN_THREADS
 
deföed


8 
	~<mach/mach.h
>

9 
	~<mach/thªad_a˘.h
>

11 
	sthªad_°›_öfo
 {

12 
mach_p‹t_t
 
	mmach_thªad
;

15 
	sGC_mach_thªad
 {

16 
thªad_a˘_t
 
	mthªad
;

17 
	mÆªady_su•íded
;

20 
GC_d¨wö_ªgi°î_mach_h™dÀr_thªad
(
mach_p‹t_t
 
thªad
);

	@include/private/dbg_mlc.h

25 #i‚de‡
_DBG_MLC_H


27 
	#_DBG_MLC_H


	)

29 
	#I_HIDE_POINTERS


	)

30 
	~"gc_¥iv.h
"

31 #ifde‡
KEEP_BACK_PTRS


32 
	~"gc_back±r.h
"

35 #i‚de‡
HIDE_POINTER


39 
GC_w‹d
 
	tGC_hiddí_poöãr
;

40 
	#HIDE_POINTER
(
p
Ë(~(
GC_hiddí_poöãr
)’))

	)

41 
	#REVEAL_POINTER
(
p
Ë((*)(
	`HIDE_POINTER
’)))

	)

44 
	#START_FLAG
 ((
w‹d
)0x„d˚dcb)

	)

45 
	#END_FLAG
 ((
w‹d
)0xbcdecdef)

	)

49 #i‡
deföed
(
KEEP_BACK_PTRS
Ë|| deföed(
PRINT_BLACK_LIST
) \

50 || 
	$deföed
(
MAKE_BACK_GRAPH
)

54 
	#NOT_MARKED
 (
±r_t
)(0)

	)

55 
	#MARKED_FOR_FINALIZATION
 (
±r_t
)(2)

	)

57 
	#MARKED_FROM_REGISTER
 (
±r_t
)(4)

	)

64 #i‡
	`deföed
(
KEEP_BACK_PTRS
Ë|| deföed(
MAKE_BACK_GRAPH
)

85 #i‡
ALIGNMENT
 == 1

87 
	#HIDE_BACK_PTR
(
p
Ë
	`HIDE_POINTER
(~1 & (
GC_w‹d
)’))

	)

89 
	#HIDE_BACK_PTR
(
p
Ë
	`HIDE_POINTER
’)

	)

92 #ifde‡
KEEP_BACK_PTRS


93 
GC_hiddí_poöãr
 
oh_back_±r
;

95 #ifde‡
MAKE_BACK_GRAPH


96 
GC_hiddí_poöãr
 
oh_bg_±r
;

98 #i‡
	`deföed
(
KEEP_BACK_PTRS
Ë!deföed(
MAKE_BACK_GRAPH
)

100 
w‹d
 
oh_dummy
;

103 c⁄° * 
oh_°rög
;

104 
w‹d
 
oh_öt
;

105 #ifde‡
NEED_CALLINFO


106 
ˇŒöfo
 
oh_ci
[
NFRAMES
];

108 #i‚de‡
SHORT_DBG_HDRS


109 
w‹d
 
oh_sz
;

110 
w‹d
 
oh_sf
;

112 } 
	toh
;

116 #ifde‡
SHORT_DBG_HDRS


117 
	#DEBUG_BYTES
 ( (
oh
))

	)

118 
	#UNCOLLECTABLE_DEBUG_BYTES
 
DEBUG_BYTES


	)

123 
	#UNCOLLECTABLE_DEBUG_BYTES
 ( (
oh
Ë+  (
w‹d
))

	)

124 
	#DEBUG_BYTES
 (
UNCOLLECTABLE_DEBUG_BYTES
 - 
EXTRA_BYTES
)

	)

128 
	#SIMPLE_ROUNDED_UP_WORDS
(
n
Ë
	`BYTES_TO_WORDS
(“Ë+ 
	`WORDS_TO_BYTES
(1Ë- 1)

	)

135 #i‡
	`deföed
(
SAVE_CALL_CHAIN
)

136 
ˇŒöfo
;

137 
	`GC_ßve_ˇŒîs
(
ˇŒöfo
 
öfo
[
NFRAMES
]);

138 
	`GC_¥öt_ˇŒîs
(
ˇŒöfo
 
öfo
[
NFRAMES
]);

139 
	#ADD_CALL_CHAIN
(
ba£
, 
ø
Ë
	`GC_ßve_ˇŒîs
(((
oh
 *)(ba£)Ë-> 
oh_ci
)

	)

140 
	#PRINT_CALL_CHAIN
(
ba£
Ë
	`GC_¥öt_ˇŒîs
(((
oh
 *)(ba£)Ë-> 
oh_ci
)

	)

141 #ñi‡
	`deföed
(
GC_ADD_CALLER
)

142 
ˇŒöfo
;

143 
	`GC_¥öt_ˇŒîs
(
ˇŒöfo
 
öfo
[
NFRAMES
]);

144 
	#ADD_CALL_CHAIN
(
ba£
, 
ø
Ë((
oh
 *)(ba£)Ë-> 
oh_ci
[0].
ci_pc
 = (ø)

	)

145 
	#PRINT_CALL_CHAIN
(
ba£
Ë
	`GC_¥öt_ˇŒîs
(((
oh
 *)(ba£)Ë-> 
oh_ci
)

	)

147 
	#ADD_CALL_CHAIN
(
ba£
, 
ø
)

	)

148 
	#PRINT_CALL_CHAIN
(
ba£
)

	)

151 #ifde‡
GC_ADD_CALLER


152 
	#OPT_RA
 
ø
,

	)

154 
	#OPT_RA


	)

161 #ifde‡
SHORT_DBG_HDRS


162 
	#GC_has_Ÿhî_debug_öfo
(
p
Ë
TRUE


	)

164 
GC_boﬁ
 
	`GC_has_Ÿhî_debug_öfo
( );

167 #i‡
	`deföed
(
KEEP_BACK_PTRS
Ë|| deföed(
MAKE_BACK_GRAPH
)

168 
	#GC_HAS_DEBUG_INFO
(
p
) \

169 ((*((
w‹d
 *)
p
Ë& 1Ë&& 
	`GC_has_Ÿhî_debug_öfo
’))

	)

171 
	#GC_HAS_DEBUG_INFO
(
p
Ë
	`GC_has_Ÿhî_debug_öfo
’)

	)

176 
±r_t
 
	`GC_°‹e_debug_öfo
( );

	@include/private/gc_hdrs.h

15 #i‚de‡
GC_HEADERS_H


16 
	#GC_HEADERS_H


	)

17 
hblkhdr
 
	thdr
;

19 #i‡
CPP_WORDSZ
 != 32 && CPP_WORDSZ < 36

20 --> 
Gë
 
a
 
ªÆ
 
	gmachöe
.

38 #i‡
CPP_WORDSZ
 > 32

39 
	#HASH_TL


	)

43 #ifde‡
SMALL_CONFIG


44 
	#LOG_BOTTOM_SZ
 11

	)

47 
	#LOG_BOTTOM_SZ
 10

	)

49 #i‚de‡
HASH_TL


50 
	#LOG_TOP_SZ
 (
WORDSZ
 - 
LOG_BOTTOM_SZ
 - 
LOG_HBLKSIZE
)

	)

52 
	#LOG_TOP_SZ
 11

	)

54 
	#TOP_SZ
 (1 << 
LOG_TOP_SZ
)

	)

55 
	#BOTTOM_SZ
 (1 << 
LOG_BOTTOM_SZ
)

	)

57 #i‚de‡
SMALL_CONFIG


58 
	#USE_HDR_CACHE


	)

63 #ifde‡
COUNT_HDR_CACHE_HITS


64 
w‹d
 
GC_hdr_ˇche_hôs
;

65 
w‹d
 
GC_hdr_ˇche_mis£s
;

66 
	#HC_HIT
(Ë++
GC_hdr_ˇche_hôs


	)

67 
	#HC_MISS
(Ë++
GC_hdr_ˇche_mis£s


	)

69 
	#HC_HIT
()

	)

70 
	#HC_MISS
()

	)

73 
	sh˚
 {

74 
w‹d
 
	mblock_addr
;

75 
hdr
 * 
	mh˚_hdr
;

76 } 
	thdr_ˇche_íåy
;

78 
	#HDR_CACHE_SIZE
 8

	)

80 
	#DECLARE_HDR_CACHE
 \

81 
hdr_ˇche_íåy
 
hdr_ˇche
[
HDR_CACHE_SIZE
]

	)

83 
	#INIT_HDR_CACHE
 
	`BZERO
(
hdr_ˇche
, (hdr_ˇche))

	)

85 
	#HCE
(
h
Ë
hdr_ˇche
 + (((
w‹d
)(hË>> 
LOG_HBLKSIZE
Ë& (
HDR_CACHE_SIZE
-1))

	)

87 
	#HCE_VALID_FOR
(
h˚
,
h
Ë((h˚Ë-> 
block_addr
 == \

88 ((
w‹d
)(
h
Ë>> 
LOG_HBLKSIZE
))

	)

90 
	#HCE_HDR
(
h
Ë((
h˚
Ë-> 
h˚_hdr
)

	)

92 #ifde‡
PRINT_BLACK_LIST


93 
hdr
 * 
GC_hódî_ˇche_miss
(
±r_t
 
p
, 
hdr_ˇche_íåy
 *
h˚
,Öå_à
sour˚
);

94 
	#HEADER_CACHE_MISS
(
p
, 
h˚
, 
sour˚
) \

95 
	`GC_hódî_ˇche_miss
(
p
, 
h˚
, 
sour˚
)

	)

97 
hdr
 * 
GC_hódî_ˇche_miss
(
±r_t
 
p
, 
hdr_ˇche_íåy
 *
h˚
);

98 
	#HEADER_CACHE_MISS
(
p
, 
h˚
, 
sour˚
Ë
	`GC_hódî_ˇche_miss
’, h˚)

	)

107 
	#HC_GET_HDR
(
p
, 
hhdr
, 
sour˚
, 
exô_œbñ
) \

109 
hdr_ˇche_íåy
 * 
h˚
 = 
	`HCE
(
p
); \

110 i‡(
	`EXPECT
(
	`HCE_VALID_FOR
(
h˚
, 
p
), 1)) { \

111 
	`HC_HIT
(); \

112 
hhdr
 = 
h˚
 -> 
h˚_hdr
; \

114 
hhdr
 = 
	`HEADER_CACHE_MISS
(
p
, 
h˚
, 
sour˚
); \

115 i‡(0 =
hhdr
Ë
exô_œbñ
; \

117 }

	)

119 
	sbi
 {

120 
hdr
 * 
	mödex
[
BOTTOM_SZ
];

130 
bi
 * 
	masc_lök
;

132 
bi
 * 
	mdesc_lök
;

133 
w‹d
 
	mkey
;

134 #ifde‡
HASH_TL


135 
bi
 * 
	mhash_lök
;

137 } 
	tbŸtom_ödex
;

154 
	#MAX_JUMP
 (
HBLKSIZE
 - 1)

	)

156 
	#HDR_FROM_BI
(
bi
, 
p
) \

157 ((
bi
)->
ödex
[((
w‹d
)(
p
Ë>> 
LOG_HBLKSIZE
Ë& (
BOTTOM_SZ
 - 1)])

	)

158 #i‚de‡
HASH_TL


159 
	#BI
(
p
Ë(
GC_t›_ödex
 \

160 [(
w‹d
)(
p
Ë>> (
LOG_BOTTOM_SZ
 + 
LOG_HBLKSIZE
)])

	)

161 
	#HDR_INNER
(
p
Ë
	`HDR_FROM_BI
(
	`BI
’),p)

	)

162 #ifde‡
SMALL_CONFIG


163 
	#HDR
(
p
Ë
	`GC_föd_hódî
((
±r_t
)’))

	)

165 
	#HDR
(
p
Ë
	`HDR_INNER
’)

	)

167 
	#GET_BI
(
p
, 
bŸtom_ödx
Ë(bŸtom_ödxË
	`BI
’)

	)

168 
	#GET_HDR
(
p
, 
hhdr
Ë(hhdrË
	`HDR
’)

	)

169 
	#SET_HDR
(
p
, 
hhdr
Ë
	`HDR_INNER
’Ë(hhdr)

	)

170 
	#GET_HDR_ADDR
(
p
, 
ha
Ë(haË&(
	`HDR_INNER
’))

	)

173 
	#TL_HASH
(
hi
Ë((hiË& (
TOP_SZ
 - 1))

	)

175 
	#GET_BI
(
p
, 
bŸtom_ödx
) \

177 
w‹d
 
hi
 = \

178 (
w‹d
)(
p
Ë>> (
LOG_BOTTOM_SZ
 + 
LOG_HBLKSIZE
); \

179 
bŸtom_ödex
 * 
_bi
 = 
GC_t›_ödex
[
	`TL_HASH
(
hi
)]; \

181 
_bi
 -> 
key
 !
hi
 && _bò!
GC_Æl_nûs
) \

182 
_bi
 = _bò-> 
hash_lök
; \

183 (
bŸtom_ödx
Ë
_bi
; \

184 }

	)

185 
	#GET_HDR_ADDR
(
p
, 
ha
) \

187 
bŸtom_ödex
 * 
bi
; \

189 
	`GET_BI
(
p
, 
bi
); \

190 (
ha
Ë&(
	`HDR_FROM_BI
(
bi
, 
p
)); \

191 }

	)

192 
	#GET_HDR
(
p
, 
hhdr
Ë{ 
hdr
 ** 
_ha
; 
	`GET_HDR_ADDR
(p, _ha); \

193 (
hhdr
Ë*
_ha
; }

	)

194 
	#SET_HDR
(
p
, 
hhdr
Ë{ 
hdr
 ** 
_ha
; 
	`GET_HDR_ADDR
(p, _ha); \

195 *
_ha
 = (
hhdr
); }

	)

196 
	#HDR
(
p
Ë
	`GC_föd_hódî
((
±r_t
)’))

	)

201 
	#IS_FORWARDING_ADDR_OR_NIL
(
hhdr
Ë((
size_t
Ë(hhdrË<
MAX_JUMP
)

	)

205 
	#FORWARDED_ADDR
(
h
, 
hhdr
Ë((
hblk
 *)(hË- (
size_t
)(hhdr))

	)

	@include/private/gc_locks.h

18 #i‚de‡
GC_LOCKS_H


19 
	#GC_LOCKS_H


	)

29 #ifde‡
THREADS


30 
	~<©omic_›s.h
>

32 
GC_no›1
(
w‹d
);

33 #ifde‡
PCR


34 
	~<ba£/PCR_Ba£.h
>

35 
	~<th/PCR_Th.h
>

36 
PCR_Th_ML
 
GC_Æloˇã_ml
;

37 
	#DCL_LOCK_STATE
 \

38 
PCR_ERes
 
GC_Á°LockRes
; 
PCR_sig£t_t
 
GC_ﬁd_sig_mask


	)

39 
	#UNCOND_LOCK
(Ë
	`PCR_Th_ML_Acquúe
(&
GC_Æloˇã_ml
)

	)

40 
	#UNCOND_UNLOCK
(Ë
	`PCR_Th_ML_Rñó£
(&
GC_Æloˇã_ml
)

	)

43 #i‡!
deföed
(
AO_HAVE_ã°_™d_£t_acquúe
Ë&& deföed(
GC_PTHREADS
)

44 
	#USE_PTHREAD_LOCKS


	)

47 #i‡
deföed
(
GC_WIN32_THREADS
Ë&& deföed(
GC_PTHREADS
)

48 
	#USE_PTHREAD_LOCKS


	)

51 #i‡
deföed
(
GC_WIN32_THREADS
Ë&& !deföed(
USE_PTHREAD_LOCKS
)

52 
	~<wödows.h
>

53 
	#NO_THREAD
 (
DWORD
)(-1)

	)

54 
DWORD
 
GC_lock_hﬁdî
;

55 
GC_API
 
CRITICAL_SECTION
 
	gGC_Æloˇã_ml
;

56 #ifde‡
GC_ASSERTIONS


57 
	#UNCOND_LOCK
() \

58 { 
	`E¡îCrôiˇlSe˘i⁄
(&
GC_Æloˇã_ml
); \

59 
	`SET_LOCK_HOLDER
(); }

	)

60 
	#UNCOND_UNLOCK
() \

61 { 
	`GC_ASSERT
(
	`I_HOLD_LOCK
()); 
	`UNSET_LOCK_HOLDER
(); \

62 
	`LóveCrôiˇlSe˘i⁄
(&
GC_Æloˇã_ml
); }

	)

64 
	#UNCOND_LOCK
(Ë
	`E¡îCrôiˇlSe˘i⁄
(&
GC_Æloˇã_ml
);

	)

65 
	#UNCOND_UNLOCK
(Ë
	`LóveCrôiˇlSe˘i⁄
(&
GC_Æloˇã_ml
);

	)

67 
	#SET_LOCK_HOLDER
(Ë
GC_lock_hﬁdî
 = 
	`GëCuºítThªadId
()

	)

68 
	#UNSET_LOCK_HOLDER
(Ë
GC_lock_hﬁdî
 = 
NO_THREAD


	)

69 
	#I_HOLD_LOCK
(Ë(!
GC_√ed_to_lock
 \

70 || 
GC_lock_hﬁdî
 =
	`GëCuºítThªadId
())

	)

71 
	#I_DONT_HOLD_LOCK
(Ë(!
GC_√ed_to_lock
 \

72 || 
GC_lock_hﬁdî
 !
	`GëCuºítThªadId
())

	)

73 #ñi‡
deföed
(
GC_PTHREADS
)

74 
	~<±hªad.h
>

85 #i‡!
deföed
(
GC_WIN32_PTHREADS
)

86 
	#NUMERIC_THREAD_ID
(
id
Ë(()(id))

	)

87 
	#THREAD_EQUAL
(
id1
, 
id2
Ë((id1Ë=(id2))

	)

88 
	#NUMERIC_THREAD_ID_UNIQUE


	)

90 #i‡
deföed
(
GC_WIN32_PTHREADS
)

91 
	#NUMERIC_THREAD_ID
(
id
Ë(()(id.
p
))

	)

95 
	#THREAD_EQUAL
(
id1
, 
id2
Ë((id1.
p
 =id2.pË&& (id1.
x
 =id2.x))

	)

96 #unde‡
NUMERIC_THREAD_ID_UNIQUE


100 
	#NUMERIC_THREAD_ID
(
id
Ë1l

	)

101 
	#THREAD_EQUAL
(
id1
, 
id2
Ë
	`±hªad_equÆ
(id1, id2)

	)

102 #unde‡
NUMERIC_THREAD_ID_UNIQUE


105 
	#NO_THREAD
 (()(-1l))

	)

108 #i‡!
deföed
(
THREAD_LOCAL_ALLOC
Ë&& !deföed(
USE_PTHREAD_LOCKS
)

113 
	#USE_SPIN_LOCK


	)

114 vﬁ©ûê
AO_TS_t
 
GC_Æloˇã_lock
;

115 
GC_lock
();

118 #ifde‡
GC_ASSERTIONS


119 
	#UNCOND_LOCK
() \

120 { i‡(
	`AO_ã°_™d_£t_acquúe
(&
GC_Æloˇã_lock
Ë=
AO_TS_SET
) \

121 
	`GC_lock
(); \

122 
	`SET_LOCK_HOLDER
(); }

	)

123 
	#UNCOND_UNLOCK
() \

124 { 
	`GC_ASSERT
(
	`I_HOLD_LOCK
()); 
	`UNSET_LOCK_HOLDER
(); \

125 
	`AO_CLEAR
(&
GC_Æloˇã_lock
); }

	)

127 
	#UNCOND_LOCK
() \

128 { i‡(
	`AO_ã°_™d_£t_acquúe
(&
GC_Æloˇã_lock
Ë=
AO_TS_SET
) \

129 
	`GC_lock
(); }

	)

130 
	#UNCOND_UNLOCK
() \

131 
	`AO_CLEAR
(&
GC_Æloˇã_lock
)

	)

134 #i‚de‡
USE_PTHREAD_LOCKS


135 
	#USE_PTHREAD_LOCKS


	)

138 #ifde‡
USE_PTHREAD_LOCKS


139 
	~<±hªad.h
>

140 
±hªad_muãx_t
 
GC_Æloˇã_ml
;

141 #ifde‡
GC_ASSERTIONS


142 
	#UNCOND_LOCK
() \

143 { 
	`GC_lock
(); \

144 
	`SET_LOCK_HOLDER
(); }

	)

145 
	#UNCOND_UNLOCK
() \

146 { 
	`GC_ASSERT
(
	`I_HOLD_LOCK
()); 
	`UNSET_LOCK_HOLDER
(); \

147 
	`±hªad_muãx_u∆ock
(&
GC_Æloˇã_ml
); }

	)

149 #i‡
deföed
(
NO_PTHREAD_TRYLOCK
)

150 
	#UNCOND_LOCK
(Ë
	`GC_lock
();

	)

152 
	#UNCOND_LOCK
() \

153 { i‡(0 !
	`±hªad_muãx_åylock
(&
GC_Æloˇã_ml
)Ë
	`GC_lock
(); }

	)

155 
	#UNCOND_UNLOCK
(Ë
	`±hªad_muãx_u∆ock
(&
GC_Æloˇã_ml
)

	)

158 
	#SET_LOCK_HOLDER
() \

159 
GC_lock_hﬁdî
 = 
	`NUMERIC_THREAD_ID
(
	`±hªad_£lf
())

	)

160 
	#UNSET_LOCK_HOLDER
(Ë
GC_lock_hﬁdî
 = 
NO_THREAD


	)

161 
	#I_HOLD_LOCK
() \

162 (!
GC_√ed_to_lock
 || \

163 
GC_lock_hﬁdî
 =
	`NUMERIC_THREAD_ID
(
	`±hªad_£lf
()))

	)

164 #i‚de‡
NUMERIC_THREAD_ID_UNIQUE


165 
	#I_DONT_HOLD_LOCK
(Ë1

	)

167 
	#I_DONT_HOLD_LOCK
() \

168 (!
GC_√ed_to_lock
 \

169 || 
GC_lock_hﬁdî
 !
	`NUMERIC_THREAD_ID
(
	`±hªad_£lf
()))

	)

171 vﬁ©ûê
GC_boﬁ
 
GC_cﬁÀ˘ög
;

172 
	#ENTER_GC
(Ë
GC_cﬁÀ˘ög
 = 1;

	)

173 
	#EXIT_GC
(Ë
GC_cﬁÀ˘ög
 = 0;

	)

174 
GC_lock
();

175 
GC_lock_hﬁdî
;

176 #ifde‡
GC_ASSERTIONS


177 
GC_m¨k_lock_hﬁdî
;

183 
	#LOCK
()

	)

184 
	#UNLOCK
()

	)

185 
	#SET_LOCK_HOLDER
()

	)

186 
	#UNSET_LOCK_HOLDER
()

	)

187 
	#I_HOLD_LOCK
(Ë
TRUE


	)

188 
	#I_DONT_HOLD_LOCK
(Ë
TRUE


	)

194 #i‡
deföed
(
UNCOND_LOCK
Ë&& !deföed(
LOCK
)

195 
GC_API
 
GC_boﬁ
 
	gGC_√ed_to_lock
;

197 
	#LOCK
(Ëi‡(
GC_√ed_to_lock
Ë{ 
	`UNCOND_LOCK
(); }

	)

198 
	#UNLOCK
(Ëi‡(
GC_√ed_to_lock
Ë{ 
	`UNCOND_UNLOCK
(); }

	)

201 #i‚de‡
ENTER_GC


202 
	#ENTER_GC
()

	)

203 
	#EXIT_GC
()

	)

206 #i‚de‡
DCL_LOCK_STATE


207 
	#DCL_LOCK_STATE


	)

	@include/private/gc_pmark.h

25 #i‚de‡
GC_PMARK_H


26 
	#GC_PMARK_H


	)

28 #i‡
deföed
(
KEEP_BACK_PTRS
Ë|| deföed(
PRINT_BLACK_LIST
)

29 
	~"dbg_mlc.h
"

31 #i‚de‡
GC_MARK_H


32 
	~"../gc_m¨k.h
"

34 #i‚de‡
GC_PRIVATE_H


35 
	~"gc_¥iv.h
"

48 
	#BITMAP_BITS
 (
WORDSZ
 - 
GC_DS_TAG_BITS
)

	)

49 
	#PROC
(
des¸
) \

50 (
GC_m¨k_¥ocs
[((
des¸
Ë>> 
GC_DS_TAG_BITS
Ë& (
GC_MAX_MARK_PROCS
-1)])

	)

51 
	#ENV
(
des¸
) \

52 ((
des¸
Ë>> (
GC_DS_TAG_BITS
 + 
GC_LOG_MAX_MARK_PROCS
))

	)

53 
	#MAX_ENV
 \

54 (((
w‹d
)1 << (
WORDSZ
 - 
GC_DS_TAG_BITS
 - 
GC_LOG_MAX_MARK_PROCS
)Ë- 1)

	)

57 
GC_n_m¨k_¥ocs
;

60 
	#GC_MARK_STACK_DISCARDS
 (
INITIAL_MARK_STACK_SIZE
/8)

	)

62 
	sGC_ms_íåy
 {

63 
±r_t
 
	mm£_°¨t
;

64 
GC_w‹d
 
	mm£_des¸
;

66 } 
	tm£
;

68 
size_t
 
GC_m¨k_°ack_size
;

70 
m£
 * 
GC_m¨k_°ack_limô
;

72 #ifde‡
PARALLEL_MARK


73 
m£
 * vﬁ©ûê
GC_m¨k_°ack_t›
;

75 
m£
 * 
GC_m¨k_°ack_t›
;

78 
m£
 * 
GC_m¨k_°ack
;

80 #ifde‡
PARALLEL_MARK


106 
GC_do_∑øŒñ_m¨k
();

109 
GC_boﬁ
 
GC_hñp_w™ãd
;

110 
GC_hñ≥r_cou¡
;

112 
GC_a˘ive_cou¡
;

131 
±r_t
 
GC_föd_°¨t
’å_à
cuºít
, 
hdr
 *
hhdr
, hd∏**
√w_hdr_p
);

133 
m£
 * 
GC_sig«l_m¨k_°ack_ovîÊow
(m£ *
m•
);

137 
	#PUSH_OBJ
(
obj
, 
hhdr
, 
m¨k_°ack_t›
, 
m¨k_°ack_limô
) \

139 
w‹d
 
_des¸
 = (
hhdr
Ë-> 
hb_des¸
; \

141 i‡(
_des¸
 != 0) { \

142 
m¨k_°ack_t›
++; \

143 i‡(
m¨k_°ack_t›
 >
m¨k_°ack_limô
) { \

144 
m¨k_°ack_t›
 = 
	`GC_sig«l_m¨k_°ack_ovîÊow
(mark_stack_top); \

146 
m¨k_°ack_t›
 -> 
m£_°¨t
 = (
obj
); \

147 
m¨k_°ack_t›
 -> 
m£_des¸
 = 
_des¸
; \

149 }

	)

155 
	#PUSH_CONTENTS
(
cuºít
, 
m¨k_°ack_t›
, 
m¨k_°ack_limô
, \

156 
sour˚
, 
exô_œbñ
) \

158 
hdr
 * 
my_hhdr
; \

160 
	`HC_GET_HDR
(
cuºít
, 
my_hhdr
, 
sour˚
, 
exô_œbñ
); \

161 
	`PUSH_CONTENTS_HDR
(
cuºít
, 
m¨k_°ack_t›
, 
m¨k_°ack_limô
, \

162 
sour˚
, 
exô_œbñ
, 
my_hhdr
, 
TRUE
); \

163 
exô_œbñ
: ; \

164 }

	)

168 #ifde‡
USE_MARK_BITS


169 #ifde‡
PARALLEL_MARK


172 
	#OR_WORD_EXIT_IF_SET
(
addr
, 
bôs
, 
exô_œbñ
) \

174 i‡(!(*(
addr
Ë& (
mask
))) { \

175 
	`AO_‹
((
AO_t
 *)(
addr
), (
mask
); \

177 
œbñ
; \

179 }

	)

181 
	#OR_WORD_EXIT_IF_SET
(
addr
, 
bôs
, 
exô_œbñ
) \

183 
w‹d
 
ﬁd
 = *(
addr
); \

184 
w‹d
 
my_bôs
 = (
bôs
); \

185 i‡(
ﬁd
 & 
my_bôs
Ë
exô_œbñ
; \

186 *(
addr
Ë(
ﬁd
 | 
my_bôs
); \

187 }

	)

189 
	#SET_MARK_BIT_EXIT_IF_SET
(
hhdr
,
bô_no
,
exô_œbñ
) \

191 
w‹d
 * 
m¨k_w‹d_addr
 = 
hhdr
 -> 
hb_m¨ks
 + 
	`divWORDSZ
(
bô_no
); \

193 
	`OR_WORD_EXIT_IF_SET
(
m¨k_w‹d_addr
, (
w‹d
)1 << 
	`modWORDSZ
(
bô_no
), \

194 
exô_œbñ
); \

195 }

	)

199 #ifde‡
USE_MARK_BYTES


200 #i‡
deföed
(
I386
Ë&& deföed(
__GNUC__
)

201 
	#LONG_MULT
(
h¥od
, 
Õrod
, 
x
, 
y
) { \

202 
	`asm
("muŒ %2" : "˜"(
Õrod
), "=d"(
h¥od
Ë: "g"(
y
), "0"(
x
)); \

203 }

	)

205 
	#LONG_MULT
(
h¥od
, 
Õrod
, 
x
, 
y
) { \

206 
¥od
 = ()
x
 \

207 * ()
y
; \

208 
h¥od
 = 
¥od
 >> 32; \

209 
Õrod
 = (
unsig√d32
)
¥od
; \

210 }

	)

216 
	#SET_MARK_BIT_EXIT_IF_SET
(
hhdr
,
bô_no
,
exô_œbñ
) \

218 * 
m¨k_byã_addr
 = (*)
hhdr
 -> 
hb_m¨ks
 + (
bô_no
); \

219 
m¨k_byã
 = *
m¨k_byã_addr
; \

221 i‡(
m¨k_byã
Ë
exô_œbñ
; \

222 *
m¨k_byã_addr
 = 1; \

223 }

	)

226 #ifde‡
PARALLEL_MARK


227 
	#INCR_MARKS
(
hhdr
) \

228 
	`AO_°‹e
(&(
hhdr
 -> 
hb_n_m¨ks
), 
	`AO_lﬂd
(&(hhd∏-> hb_n_m¨ks))+1);

	)

230 
	#INCR_MARKS
(
hhdr
Ë++(hhd∏-> 
hb_n_m¨ks
)

	)

233 #ifde‡
ENABLE_TRACE


234 
	#TRACE
(
sour˚
, 
cmd
) \

235 i‡(
GC_åa˚_addr
 !0 && (
±r_t
)(
sour˚
Ë=GC_åa˚_addrË
cmd


	)

236 
	#TRACE_TARGET
(
èrgë
, 
cmd
) \

237 i‡(
GC_åa˚_addr
 !0 && (
èrgë
Ë=*(
±r_t
 *)GC_åa˚_addrË
cmd


	)

239 
	#TRACE
(
sour˚
, 
cmd
)

	)

240 
	#TRACE_TARGET
(
sour˚
, 
cmd
)

	)

251 #ifde‡
MARK_BIT_PER_GRANULE


252 
	#PUSH_CONTENTS_HDR
(
cuºít
, 
m¨k_°ack_t›
, 
m¨k_°ack_limô
, \

253 
sour˚
, 
exô_œbñ
, 
hhdr
, 
do_off£t_check
) \

255 
size_t
 
di•l
 = 
	`HBLKDISPL
(
cuºít
); \

259 
size_t
 
gøn_di•l
 = 
	`BYTES_TO_GRANULES
(
di•l
); \

260 
size_t
 
gøn_off£t
 = 
hhdr
 -> 
hb_m≠
[
gøn_di•l
]; \

261 
size_t
 
byã_off£t
 = 
di•l
 & (
GRANULE_BYTES
 - 1); \

262 
±r_t
 
ba£
 = 
cuºít
; \

264 i‡(
	`EXPECT
((
gøn_off£t
 | 
byã_off£t
Ë!0, 
FALSE
)) { \

265 i‡(
hhdr
 -> 
hb_œrge_block
) { \

267 
size_t
 
obj_di•l
; \

268 
ba£
 = (
±r_t
)(
hhdr
 -> 
hb_block
); \

269 
obj_di•l
 = (
±r_t
)(
cuºít
Ë- 
ba£
; \

270 i‡(
obj_di•l
 !
di•l
) { \

271 
	`GC_ASSERT
(
obj_di•l
 < 
hhdr
 -> 
hb_sz
); \

276 i‡(
do_off£t_check
 && !
GC_vÆid_off£ts
[
obj_di•l
]) { \

277 
	`GC_ADD_TO_BLACK_LIST_NORMAL
(
cuºít
, 
sour˚
); \

278 
exô_œbñ
; \

281 
gøn_di•l
 = 0; \

282 
	`GC_ASSERT
(
hhdr
 -> 
hb_sz
 > 
HBLKSIZE
 || \

283 
hhdr
 -> 
hb_block
 =
	`HBLKPTR
(
cuºít
)); \

284 
	`GC_ASSERT
((
±r_t
)(
hhdr
 -> 
hb_block
Ë<’å_tË
cuºít
); \

286 
size_t
 
obj_di•l
 = 
	`GRANULES_TO_BYTES
(
gøn_off£t
) \

287 + 
byã_off£t
; \

288 i‡(
do_off£t_check
 && !
GC_vÆid_off£ts
[
obj_di•l
]) { \

289 
	`GC_ADD_TO_BLACK_LIST_NORMAL
(
cuºít
, 
sour˚
); \

290 
exô_œbñ
; \

292 
gøn_di•l
 -
gøn_off£t
; \

293 
ba£
 -
obj_di•l
; \

296 
	`GC_ASSERT
(
hhdr
 =
	`GC_föd_hódî
(
ba£
)); \

297 
	`GC_ASSERT
(
gøn_di•l
 % 
	`BYTES_TO_GRANULES
(
hhdr
 -> 
hb_sz
) == 0); \

298 
	`TRACE
(
sour˚
, 
	`GC_log_¥ötf
("GC:%d:Öas£d vÆidôyÅe°s\n",
GC_gc_no
)); \

299 
	`SET_MARK_BIT_EXIT_IF_SET
(
hhdr
, 
gøn_di•l
, 
exô_œbñ
); \

300 
	`TRACE
(
sour˚
, 
	`GC_log_¥ötf
("GC:%d:Öªviou¶y unm¨ked\n",
GC_gc_no
)); \

301 
	`TRACE_TARGET
(
ba£
, \

302 
	`GC_log_¥ötf
("GC:%d: m¨kög %∞‰om %∞ö°ód\n", 
GC_gc_no
, \

303 
ba£
, 
sour˚
)); \

304 
	`INCR_MARKS
(
hhdr
); \

305 
	`GC_STORE_BACK_PTR
((
±r_t
)
sour˚
, 
ba£
); \

306 
	`PUSH_OBJ
(
ba£
, 
hhdr
, 
m¨k_°ack_t›
, 
m¨k_°ack_limô
); \

307 }

	)

310 #ifde‡
MARK_BIT_PER_OBJ


311 
	#PUSH_CONTENTS_HDR
(
cuºít
, 
m¨k_°ack_t›
, 
m¨k_°ack_limô
, \

312 
sour˚
, 
exô_œbñ
, 
hhdr
, 
do_off£t_check
) \

314 
size_t
 
di•l
 = 
	`HBLKDISPL
(
cuºít
); \

315 
unsig√d32
 
low_¥od
, 
high_¥od
, 
off£t_‰a˘i⁄
; \

316 
unsig√d32
 
öv_sz
 = 
hhdr
 -> 
hb_öv_sz
; \

317 
±r_t
 
ba£
 = 
cuºít
; \

318 
	`LONG_MULT
(
high_¥od
, 
low_¥od
, 
di•l
, 
öv_sz
); \

320 i‡(
	`EXPECT
(
low_¥od
 >> 16 !0, 
FALSE
)) { \

321 
FIXME
: 
Áûs
 
off£t
 
is
 
a
 
mu…ùÀ
 
of
 
HBLKSIZE
 
which
 
becomes
 0 \

322 i‡(
öv_sz
 =
LARGE_INV_SZ
) { \

323 
size_t
 
obj_di•l
; \

324 
ba£
 = (
±r_t
)(
hhdr
 -> 
hb_block
); \

325 
obj_di•l
 = (
±r_t
)(
cuºít
Ë- 
ba£
; \

326 i‡(
obj_di•l
 !
di•l
) { \

327 
	`GC_ASSERT
(
obj_di•l
 < 
hhdr
 -> 
hb_sz
); \

332 i‡(
do_off£t_check
 && !
GC_vÆid_off£ts
[
obj_di•l
]) { \

333 
	`GC_ADD_TO_BLACK_LIST_NORMAL
(
cuºít
, 
sour˚
); \

334 
exô_œbñ
; \

337 
	`GC_ASSERT
(
hhdr
 -> 
hb_sz
 > 
HBLKSIZE
 || \

338 
hhdr
 -> 
hb_block
 =
	`HBLKPTR
(
cuºít
)); \

339 
	`GC_ASSERT
((
±r_t
)(
hhdr
 -> 
hb_block
Ë< (±r_tË
cuºít
); \

342 
	`GC_ASSERT
(
HBLKSIZE
 <= (1 << 15)); \

343 
size_t
 
obj_di•l
 = (((
low_¥od
 >> 16Ë+ 1Ë* (
hhdr
 -> 
hb_sz
)) >> 16; \

344 i‡(
do_off£t_check
 && !
GC_vÆid_off£ts
[
obj_di•l
]) { \

345 
	`GC_ADD_TO_BLACK_LIST_NORMAL
(
cuºít
, 
sour˚
); \

346 
exô_œbñ
; \

348 
ba£
 -
obj_di•l
; \

353 
	`GC_ASSERT
(
high_¥od
 >0 && high_¥od <
	`HBLK_OBJS
(
hhdr
 -> 
hb_sz
)); \

354 
	`TRACE
(
sour˚
, 
	`GC_log_¥ötf
("GC:%d:Öas£d vÆidôyÅe°s\n",
GC_gc_no
)); \

355 
	`SET_MARK_BIT_EXIT_IF_SET
(
hhdr
, 
high_¥od
, 
exô_œbñ
); \

356 
	`TRACE
(
sour˚
, 
	`GC_log_¥ötf
("GC:%d:Öªviou¶y unm¨ked\n",
GC_gc_no
)); \

357 
	`TRACE_TARGET
(
ba£
, \

358 
	`GC_log_¥ötf
("GC:%d: m¨kög %∞‰om %∞ö°ód\n", 
GC_gc_no
, \

359 
ba£
, 
sour˚
)); \

360 
	`INCR_MARKS
(
hhdr
); \

361 
	`GC_STORE_BACK_PTR
((
±r_t
)
sour˚
, 
ba£
); \

362 
	`PUSH_OBJ
(
ba£
, 
hhdr
, 
m¨k_°ack_t›
, 
m¨k_°ack_limô
); \

363 }

	)

366 #i‡
deföed
(
PRINT_BLACK_LIST
Ë|| deföed(
KEEP_BACK_PTRS
)

367 
	#PUSH_ONE_CHECKED_STACK
(
p
, 
sour˚
) \

368 
	`GC_m¨k_™d_push_°ack
(
p
, (
±r_t
)(
sour˚
))

	)

370 
	#PUSH_ONE_CHECKED_STACK
(
p
, 
sour˚
) \

371 
	`GC_m¨k_™d_push_°ack
(
p
)

	)

382 #i‡
NEED_FIXUP_POINTER


384 
	#GC_PUSH_ONE_STACK
(
p
, 
sour˚
) \

385 i‡((
p
Ë>(
±r_t
)
GC_Àa°_∂ausibÀ_hóp_addr
 \

386 && (
p
Ë< (
±r_t
)
GC_gª©e°_∂ausibÀ_hóp_addr
) { \

387 
	`PUSH_ONE_CHECKED_STACK
(
p
, 
sour˚
); \

389 
	`FIXUP_POINTER
(
p
); \

390 i‡((
p
Ë>(
±r_t
)
GC_Àa°_∂ausibÀ_hóp_addr
 \

391 && (
p
Ë< (
±r_t
)
GC_gª©e°_∂ausibÀ_hóp_addr
) { \

392 
	`PUSH_ONE_CHECKED_STACK
(
p
, 
sour˚
); \

393 }

	)

395 
	#GC_PUSH_ONE_STACK
(
p
, 
sour˚
) \

396 i‡((
±r_t
)(
p
Ë>’å_t)
GC_Àa°_∂ausibÀ_hóp_addr
 \

397 && (
±r_t
)(
p
Ë< (±r_t)
GC_gª©e°_∂ausibÀ_hóp_addr
) { \

398 
	`PUSH_ONE_CHECKED_STACK
(
p
, 
sour˚
); \

399 }

	)

407 
	#GC_PUSH_ONE_HEAP
(
p
,
sour˚
) \

408 
	`FIXUP_POINTER
(
p
); \

409 i‡((
p
Ë>(
±r_t
)
GC_Àa°_∂ausibÀ_hóp_addr
 \

410 && (
p
Ë< (
±r_t
)
GC_gª©e°_∂ausibÀ_hóp_addr
) { \

411 
GC_m¨k_°ack_t›
 = 
	`GC_m¨k_™d_push
( \

412 (*)(
p
), 
GC_m¨k_°ack_t›
, \

413 
GC_m¨k_°ack_limô
, (* *)(
sour˚
)); \

414 }

	)

420 
m£
 * 
GC_m¨k_‰om
(m£ * 
t›
, m£ * 
bŸtom
, m£ *
limô
);

422 
	#MARK_FROM_MARK_STACK
() \

423 
GC_m¨k_°ack_t›
 = 
	`GC_m¨k_‰om
(GC_mark_stack_top, \

424 
GC_m¨k_°ack
, \

425 
GC_m¨k_°ack
 + 
GC_m¨k_°ack_size
);

	)

436 
	#GC_MARK_FO
(
ªÆ_±r
, 
m¨k_¥oc
) \

438 (*(
m¨k_¥oc
))(
ªÆ_±r
); \

439 !
	`GC_m¨k_°ack_em±y
()Ë
	`MARK_FROM_MARK_STACK
(); \

440 i‡(
GC_m¨k_°©e
 !
MS_NONE
) { \

441 
	`GC_£t_m¨k_bô
(
ªÆ_±r
); \

442 !
	`GC_m¨k_some
((
±r_t
)0)) {} \

444 }

	)

446 
GC_boﬁ
 
GC_m¨k_°ack_too_smÆl
;

450 
	tm¨k_°©e_t
;

466 
	#MS_NONE
 0

	)

469 
	#MS_PUSH_RESCUERS
 1

	)

475 
	#MS_PUSH_UNCOLLECTABLE
 2

	)

481 
	#MS_ROOTS_PUSHED
 3

	)

483 
	#MS_PARTIALLY_INVALID
 4

	)

488 
	#MS_INVALID
 5

	)

490 
m¨k_°©e_t
 
GC_m¨k_°©e
;

	@include/private/gc_priv.h

19 #i‚de‡
GC_PRIVATE_H


20 
	#GC_PRIVATE_H


	)

22 
	~<°dlib.h
>

23 #i‡!(
deföed
–
s⁄y_√ws
 ) )

24 
	~<°ddef.h
>

27 #ifde‡
DGUX


28 
	~<sys/ty≥s.h
>

29 
	~<sys/time.h
>

30 
	~<sys/ªsour˚.h
>

33 #ifde‡
BSD_TIME


34 
	~<sys/ty≥s.h
>

35 
	~<sys/time.h
>

36 
	~<sys/ªsour˚.h
>

39 #ifde‡
PARALLEL_MARK


40 
	#AO_REQUIRE_CAS


	)

43 #i‚de‡
_GC_H


44 
	~"../gc.h
"

47 #i‚de‡
GC_TINY_FL_H


48 
	~"../gc_töy_Ê.h
"

51 #i‚de‡
GC_MARK_H


52 
	~"../gc_m¨k.h
"

55 
GC_w‹d
 
	tw‹d
;

56 
GC_sig√d_w‹d
 
	tsig√d_w‹d
;

57 
	tunsig√d32
;

59 
	tGC_boﬁ
;

60 
	#TRUE
 1

	)

61 
	#FALSE
 0

	)

63 * 
	t±r_t
;

67 #i‚de‡
GCCONFIG_H


68 
	~"gcc⁄fig.h
"

71 #i‚de‡
HEADERS_H


72 
	~"gc_hdrs.h
"

75 #i‡
__GNUC__
 >= 3

76 
	#EXPECT
(
ex¥
, 
outcome
Ë
	`__buûtö_ex≥˘
”x¥,outcome)

	)

78 
	#INLINE
 
ölöe


	)

80 
	#EXPECT
(
ex¥
, 
outcome
Ë”x¥)

	)

81 
	#INLINE


	)

84 #i‚de‡
GC_LOCKS_H


85 
	~"gc_locks.h
"

88 #ifde‡
STACK_GROWS_DOWN


89 
	#COOLER_THAN
 >

	)

90 
	#HOTTER_THAN
 <

	)

91 
	#MAKE_COOLER
(
x
,
y
) if ((x)+(y) > (x)) {(x) += (y);} \

92 {(
x
Ë(
±r_t
)
ONES
;}

	)

93 
	#MAKE_HOTTER
(
x
,
y
Ë(xË-(y)

	)

95 
	#COOLER_THAN
 <

	)

96 
	#HOTTER_THAN
 >

	)

97 
	#MAKE_COOLER
(
x
,
y
Ëi‡((x)-(yË< (x)Ë{(xË-(y);} {(xË0;}

	)

98 
	#MAKE_HOTTER
(
x
,
y
Ë(xË+(y)

	)

101 #i‡
deföed
(
AMIGA
Ë&& deföed(
__SASC
)

102 
	#GC_FAR
 
__Ár


	)

104 
	#GC_FAR


	)

154 
	#GC_INVOKE_FINALIZERS
(Ë
	`GC_nŸify_‹_övoke_föÆizîs
()

	)

156 #i‡!
deföed
(
DONT_ADD_BYTE_AT_END
)

157 
	#EXTRA_BYTES
 
GC_Æl_öãri‹_poöãrs


	)

158 
	#MAX_EXTRA_BYTES
 1

	)

160 
	#EXTRA_BYTES
 0

	)

161 
	#MAX_EXTRA_BYTES
 0

	)

165 #i‚de‡
LARGE_CONFIG


166 
	#MINHINCR
 16

	)

168 
	#MAXHINCR
 2048

	)

170 
	#MINHINCR
 64

	)

171 
	#MAXHINCR
 4096

	)

174 
	#TIME_LIMIT
 50

	)

177 
	#BL_LIMIT
 
GC_bœck_li°_•acög


	)

195 #ifde‡
NEED_CALLINFO


196 
	sˇŒöfo
 {

197 
w‹d
 
	mci_pc
;

198 #i‡
NARGS
 > 0

199 
w‹d
 
	mci_¨g
[
NARGS
];

201 #i‡(
NFRAMES
 * (
NARGS
 + 1)) % 2 == 1

203 
w‹d
 
	mci_dummy
;

208 #ifde‡
SAVE_CALL_CHAIN


212 
GC_ßve_ˇŒîs
(
ˇŒöfo
 
öfo
[
NFRAMES
]);

214 
GC_¥öt_ˇŒîs
(
ˇŒöfo
 
öfo
[
NFRAMES
]);

225 #ifde‡
BSD_TIME


226 #unde‡
CLOCK_TYPE


227 #unde‡
GET_TIME


228 #unde‡
MS_TIME_DIFF


229 
	#CLOCK_TYPE
 
timevÆ


	)

230 
	#GET_TIME
(
x
Ë{ 
rußge
Ñusage; \

231 
	`gërußge
 (
RUSAGE_SELF
, &
rußge
); \

232 
x
 = 
rußge
.
ru_utime
; }

	)

233 
	#MS_TIME_DIFF
(
a
,
b
Ë((Ë◊.
tv_£c
 - b.tv_sec) * 1000.0 \

234 + (Ë(
a
.
tv_u£c
 - 
b
.tv_u£cË/ 1000.0)

	)

236 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

237 
	~<wödows.h
>

238 
	~<wöba£.h
>

239 
	#CLOCK_TYPE
 
DWORD


	)

240 
	#GET_TIME
(
x
Ëx = 
	`GëTickCou¡
()

	)

241 
	#MS_TIME_DIFF
(
a
,
b
Ë(()(◊)-(b)))

	)

243 
	~<time.h
>

244 #i‡!
deföed
(
__STDC__
Ë&& deföed(
SPARC
Ë&& deföed(
SUNOS4
)

245 
˛ock_t
 
˛ock
();

247 #i‡
deföed
(
FREEBSD
Ë&& !deföed(
CLOCKS_PER_SEC
)

248 
	~<machöe/limôs.h
>

249 
	#CLOCKS_PER_SEC
 
CLK_TCK


	)

251 #i‡!
deföed
(
CLOCKS_PER_SEC
)

252 
	#CLOCKS_PER_SEC
 1000000

	)

264 
	#CLOCK_TYPE
 
˛ock_t


	)

265 
	#GET_TIME
(
x
Ëx = 
	`˛ock
()

	)

266 
	#MS_TIME_DIFF
(
a
,
b
) (() \

267 (1000.0*()((
a
)-(
b
))/()
CLOCKS_PER_SEC
))

	)

272 #i‡
deföed
(
SPARC
Ë&& deföed(
SUNOS4
)

273 
	#BCOPY_EXISTS


	)

275 #i‡
deföed
(
M68K
Ë&& deföed(
AMIGA
)

276 
	#BCOPY_EXISTS


	)

278 #i‡
deföed
(
M68K
Ë&& deföed(
NEXT
)

279 
	#BCOPY_EXISTS


	)

281 #i‡
deföed
(
VAX
)

282 
	#BCOPY_EXISTS


	)

284 #i‡
deföed
(
AMIGA
)

285 
	~<°rög.h
>

286 
	#BCOPY_EXISTS


	)

288 #i‡
deföed
(
DARWIN
)

289 
	~<°rög.h
>

290 
	#BCOPY_EXISTS


	)

293 #i‚de‡
BCOPY_EXISTS


294 
	~<°rög.h
>

295 
	#BCOPY
(
x
,
y
,
n
Ë
	`mem˝y
(y, x, (
size_t
)“))

	)

296 
	#BZERO
(
x
,
n
Ë
	`mem£t
(x, 0, (
size_t
)“))

	)

298 
	#BCOPY
(
x
,
y
,
n
Ë
	`bc›y
((*)(x),(*)(y),(
size_t
)“))

	)

299 
	#BZERO
(
x
,
n
Ë
	`bzîo
((*)(x),(
size_t
)“))

	)

305 #ifde‡
PCR


306 
	~"th/PCR_ThCé.h
"

307 
	#STOP_WORLD
() \

308 
	`PCR_ThCé_SëEx˛usiveMode
(
PCR_ThCé_Ex˛usiveMode_°›N‹mÆ
, \

309 
PCR_ÆlSigsBlocked
, \

310 
PCR_waôF‹evî
)

	)

311 
	#START_WORLD
() \

312 
	`PCR_ThCé_SëEx˛usiveMode
(
PCR_ThCé_Ex˛usiveMode_nuŒ
, \

313 
PCR_ÆlSigsBlocked
, \

314 
PCR_waôF‹evî
);

	)

316 #i‡
deföed
(
GC_SOLARIS_THREADS
Ë|| deföed(
GC_WIN32_THREADS
) \

317 || 
	$deföed
(
GC_PTHREADS
)

318 
	`GC_°›_w‹ld
();

319 
	`GC_°¨t_w‹ld
();

320 
	#STOP_WORLD
(Ë
	`GC_°›_w‹ld
()

	)

321 
	#START_WORLD
(Ë
	`GC_°¨t_w‹ld
()

	)

323 
	#STOP_WORLD
()

	)

324 
	#START_WORLD
()

	)

329 #ifde‡
PCR


330 
	#ABORT
(
s
Ë
	`PCR_Ba£_P™ic
(s)

	)

332 #ifde‡
SMALL_CONFIG


333 
	#ABORT
(
msg
Ë
	`ab‹t
()

	)

335 
GC_API
 
	`GC_ab‹t
(c⁄° * 
msg
);

336 
	#ABORT
(
msg
Ë
	`GC_ab‹t
(msg)

	)

341 #ifde‡
PCR


342 
	#EXIT
(Ë
	`PCR_Ba£_Exô
(1,
PCR_waôF‹evî
)

	)

344 
	#EXIT
(Ë()
	`exô
(1)

	)

348 
	#WARN
(
msg
,
¨g
Ë(*
GC_cuºít_w¨n_¥oc
)("GC W¨nög: " msg, (
GC_w‹d
)◊rg))

	)

349 
GC_w¨n_¥oc
 
GC_cuºít_w¨n_¥oc
;

352 #i‡!
	`deföed
(
NO_GETENV
)

353 #i‡
	`deföed
(
EMPTY_GETENV_RESULTS
)

355 
ölöe
 * 
	$fixed_gëív
(c⁄° *
«me
)

357 * 
tmp
 = 
	`gëív
(
«me
);

358 i‡(
tmp
 =0 || 
	`°æí
(tmp) == 0)

360  
tmp
;

361 
	}
}

362 
	#GETENV
(
«me
Ë
	`fixed_gëív
“ame)

	)

364 
	#GETENV
(
«me
Ë
	`gëív
“ame)

	)

367 
	#GETENV
(
«me
Ë0

	)

370 #i‡
deföed
(
DARWIN
)

371 #i‡
deföed
(
POWERPC
)

372 #i‡
CPP_WORDSZ
 == 32

373 
	#GC_THREAD_STATE_T
 
µc_thªad_°©e_t


	)

374 
	#GC_MACH_THREAD_STATE
 
PPC_THREAD_STATE


	)

375 
	#GC_MACH_THREAD_STATE_COUNT
 
PPC_THREAD_STATE_COUNT


	)

376 
	#GC_MACH_HEADER
 
mach_hódî


	)

377 
	#GC_MACH_SECTION
 
£˘i⁄


	)

378 
	#GC_GETSECTBYNAME
 
gë£˘by«me‰omhódî


	)

380 
	#GC_THREAD_STATE_T
 
µc_thªad_°©e64_t


	)

381 
	#GC_MACH_THREAD_STATE
 
PPC_THREAD_STATE64


	)

382 
	#GC_MACH_THREAD_STATE_COUNT
 
PPC_THREAD_STATE64_COUNT


	)

383 
	#GC_MACH_HEADER
 
mach_hódî_64


	)

384 
	#GC_MACH_SECTION
 
£˘i⁄_64


	)

385 
	#GC_GETSECTBYNAME
 
gë£˘by«me‰omhódî_64


	)

387 #ñi‡
deföed
(
I386
Ë|| deföed(
X86_64
)

388 #i‡
CPP_WORDSZ
 == 32

389 
	#GC_THREAD_STATE_T
 
x86_thªad_°©e32_t


	)

390 
	#GC_MACH_THREAD_STATE
 
x86_THREAD_STATE32


	)

391 
	#GC_MACH_THREAD_STATE_COUNT
 
x86_THREAD_STATE32_COUNT


	)

392 
	#GC_MACH_HEADER
 
mach_hódî


	)

393 
	#GC_MACH_SECTION
 
£˘i⁄


	)

394 
	#GC_GETSECTBYNAME
 
gë£˘by«me‰omhódî


	)

396 
	#GC_THREAD_STATE_T
 
x86_thªad_°©e64_t


	)

397 
	#GC_MACH_THREAD_STATE
 
x86_THREAD_STATE64


	)

398 
	#GC_MACH_THREAD_STATE_COUNT
 
x86_THREAD_STATE64_COUNT


	)

399 
	#GC_MACH_HEADER
 
mach_hódî_64


	)

400 
	#GC_MACH_SECTION
 
£˘i⁄_64


	)

401 
	#GC_GETSECTBYNAME
 
gë£˘by«me‰omhódî_64


	)

404 #îr‹ 
deföe
 
GC_THREAD_STATE_T


405 
	#GC_MACH_THREAD_STATE
 
MACHINE_THREAD_STATE


	)

406 
	#GC_MACH_THREAD_STATE_COUNT
 
MACHINE_THREAD_STATE_COUNT


	)

412 #i‡
deföed
 (
HAS_PPC_THREAD_STATE___R0
) \

413 || 
deföed
 (
HAS_PPC_THREAD_STATE64___R0
) \

414 || 
deföed
 (
HAS_X86_THREAD_STATE32___EAX
) \

415 || 
	$deföed
 (
HAS_X86_THREAD_STATE64___RAX
)

416 
	#THREAD_FLD
(
x
Ë
__
 ## 
	)
x

418 
	#THREAD_FLD
(
x
Ë
	)
x

428 #i‡
CPP_WORDSZ
 == 32

429 
	#WORDS_TO_BYTES
(
x
Ë((x)<<2)

	)

430 
	#BYTES_TO_WORDS
(
x
Ë((x)>>2)

	)

431 
	#LOGWL
 ((
w‹d
)5Ë

	)

432 
	#modWORDSZ
(
n
Ë(“Ë& 0x1fË

	)

433 #i‡
ALIGNMENT
 != 4

434 
	#UNALIGNED


	)

438 #i‡
CPP_WORDSZ
 == 64

439 
	#WORDS_TO_BYTES
(
x
Ë((x)<<3)

	)

440 
	#BYTES_TO_WORDS
(
x
Ë((x)>>3)

	)

441 
	#LOGWL
 ((
w‹d
)6Ë

	)

442 
	#modWORDSZ
(
n
Ë(“Ë& 0x3fË

	)

443 #i‡
ALIGNMENT
 != 8

444 
	#UNALIGNED


	)

453 
	~"../gc_töy_Ê.h
"

454 
	#GRANULE_BYTES
 
GC_GRANULE_BYTES


	)

455 
	#TINY_FREELISTS
 
GC_TINY_FREELISTS


	)

457 
	#WORDSZ
 ((
w‹d
)
CPP_WORDSZ
)

	)

458 
	#SIGNB
 ((
w‹d
)1 << (
WORDSZ
-1))

	)

459 
	#BYTES_PER_WORD
 ((
w‹d
)( (w‹d)))

	)

460 
	#ONES
 ((
w‹d
)(
sig√d_w‹d
)(-1))

	)

461 
	#divWORDSZ
(
n
Ë(“Ë>> 
LOGWL
Ë

	)

463 #i‡
GRANULE_BYTES
 == 8

464 
	#BYTES_TO_GRANULES
(
n
Ë(“)>>3)

	)

465 
	#GRANULES_TO_BYTES
(
n
Ë(“)<<3)

	)

466 #i‡
CPP_WORDSZ
 == 64

467 
	#GRANULES_TO_WORDS
(
n
Ë“)

	)

468 #ñi‡
CPP_WORDSZ
 == 32

469 
	#GRANULES_TO_WORDS
(
n
Ë(“)<<1)

	)

471 
	#GRANULES_TO_WORDS
(
n
Ë
	`BYTES_TO_WORDS
(
	`GRANULES_TO_BYTES
“))

	)

473 #ñi‡
GRANULE_BYTES
 == 16

474 
	#BYTES_TO_GRANULES
(
n
Ë(“)>>4)

	)

475 
	#GRANULES_TO_BYTES
(
n
Ë(“)<<4)

	)

476 #i‡
CPP_WORDSZ
 == 64

477 
	#GRANULES_TO_WORDS
(
n
Ë(“)<<1)

	)

478 #ñi‡
CPP_WORDSZ
 == 32

479 
	#GRANULES_TO_WORDS
(
n
Ë(“)<<2)

	)

481 
	#GRANULES_TO_WORDS
(
n
Ë
	`BYTES_TO_WORDS
(
	`GRANULES_TO_BYTES
“))

	)

484 #îr‹ 
Bad
 
GRANULE_BYTES
 
vÆue


501 #i‚de‡
HBLKSIZE


502 #ifde‡
SMALL_CONFIG


503 
	#CPP_LOG_HBLKSIZE
 10

	)

505 #i‡
	`deföed
(
ALPHA
)

506 
	#CPP_LOG_HBLKSIZE
 13

	)

508 
	#CPP_LOG_HBLKSIZE
 12

	)

512 #i‡
HBLKSIZE
 == 512

513 
	#CPP_LOG_HBLKSIZE
 9

	)

515 #i‡
HBLKSIZE
 == 1024

516 
	#CPP_LOG_HBLKSIZE
 10

	)

518 #i‡
HBLKSIZE
 == 2048

519 
	#CPP_LOG_HBLKSIZE
 11

	)

521 #i‡
HBLKSIZE
 == 4096

522 
	#CPP_LOG_HBLKSIZE
 12

	)

524 #i‡
HBLKSIZE
 == 8192

525 
	#CPP_LOG_HBLKSIZE
 13

	)

527 #i‡
HBLKSIZE
 == 16384

528 
	#CPP_LOG_HBLKSIZE
 14

	)

530 #i‚de‡
CPP_LOG_HBLKSIZE


531 --> 
fix
 
HBLKSIZE


533 #unde‡
HBLKSIZE


536 
	#CPP_HBLKSIZE
 (1 << 
CPP_LOG_HBLKSIZE
)

	)

537 
	#LOG_HBLKSIZE
 ((
size_t
)
CPP_LOG_HBLKSIZE
)

	)

538 
	#HBLKSIZE
 ((
size_t
)
CPP_HBLKSIZE
)

	)

545 
	#CPP_MAXOBJBYTES
 (
CPP_HBLKSIZE
/2)

	)

546 
	#MAXOBJBYTES
 ((
size_t
)
CPP_MAXOBJBYTES
)

	)

547 
	#CPP_MAXOBJWORDS
 
	`BYTES_TO_WORDS
(
CPP_MAXOBJBYTES
)

	)

548 
	#MAXOBJWORDS
 ((
size_t
)
CPP_MAXOBJWORDS
)

	)

549 
	#CPP_MAXOBJGRANULES
 
	`BYTES_TO_GRANULES
(
CPP_MAXOBJBYTES
)

	)

550 
	#MAXOBJGRANULES
 ((
size_t
)
CPP_MAXOBJGRANULES
)

	)

552 
	#divHBLKSZ
(
n
Ë(“Ë>> 
LOG_HBLKSIZE
)

	)

554 
	#HBLK_PTR_DIFF
(
p
,
q
Ë
	`divHBLKSZ
((
±r_t
Ì - (±r_t)q)

	)

562 
	#modHBLKSZ
(
n
Ë(“Ë& (
HBLKSIZE
-1))

	)

564 
	#HBLKPTR
(
obj±r
Ë((
hblk
 *)(((
w‹d
Ë(obj±r)Ë& ~(
HBLKSIZE
-1)))

	)

566 
	#HBLKDISPL
(
obj±r
Ë(((
size_t
Ë(obj±r)Ë& (
HBLKSIZE
-1))

	)

569 
	#ROUNDED_UP_WORDS
(
n
) \

570 
	`BYTES_TO_WORDS
((
n
Ë+ (
	`WORDS_TO_BYTES
(1Ë- 1 + 
EXTRA_BYTES
))

	)

571 
	#ROUNDED_UP_GRANULES
(
n
) \

572 
	`BYTES_TO_GRANULES
((
n
Ë+ (
GRANULE_BYTES
 - 1 + 
EXTRA_BYTES
))

	)

573 #i‡
MAX_EXTRA_BYTES
 == 0

574 
	#SMALL_OBJ
(
byãs
Ë
	`EXPECT
((byãsË<(
MAXOBJBYTES
), 1)

	)

576 
	#SMALL_OBJ
(
byãs
) \

577 (
	`EXPECT
((
byãs
Ë<(
MAXOBJBYTES
 - 
MAX_EXTRA_BYTES
), 1) || \

578 (
byãs
Ë<(
MAXOBJBYTES
 - 
EXTRA_BYTES
))

	)

582 
	#ADD_SLOP
(
byãs
Ë((byãsË+ 
EXTRA_BYTES
)

	)

583 #i‚de‡
MIN_WORDS


584 
	#MIN_WORDS
 2

	)

597 #ifde‡
LARGE_CONFIG


598 #i‡
CPP_WORDSZ
 == 32

599 
	#LOG_PHT_ENTRIES
 20

	)

604 
	#LOG_PHT_ENTRIES
 21

	)

610 #ifde‡
SMALL_CONFIG


611 
	#LOG_PHT_ENTRIES
 15

	)

615 
	#LOG_PHT_ENTRIES
 18

	)

624 
	#PHT_ENTRIES
 ((
w‹d
)1 << 
LOG_PHT_ENTRIES
)

	)

625 
	#PHT_SIZE
 (
PHT_ENTRIES
 >> 
LOGWL
)

	)

626 
w‹d
 
	t∑ge_hash_èbÀ
[
PHT_SIZE
];

628 
	#PHT_HASH
(
addr
Ë((((
w‹d
)◊ddr)Ë>> 
LOG_HBLKSIZE
Ë& (
PHT_ENTRIES
 - 1))

	)

630 
	#gë_pht_íåy_‰om_ödex
(
bl
, 
ödex
) \

631 (((
bl
)[
	`divWORDSZ
(
ödex
)] >> 
	`modWORDSZ
(ödex)Ë& 1)

	)

632 
	#£t_pht_íåy_‰om_ödex
(
bl
, 
ödex
) \

633 (
bl
)[
	`divWORDSZ
(
ödex
)] |(
w‹d
)1 << 
	`modWORDSZ
(ödex)

	)

634 
	#˛ór_pht_íåy_‰om_ödex
(
bl
, 
ödex
) \

635 (
bl
)[
	`divWORDSZ
(
ödex
)] &~((
w‹d
)1 << 
	`modWORDSZ
(ödex))

	)

638 
	#£t_pht_íåy_‰om_ödex_ß„
(
bl
, 
ödex
) \

639 (
bl
)[
	`divWORDSZ
(
ödex
)] = 
ONES


	)

650 
	#HBLKMASK
 (
HBLKSIZE
-1)

	)

652 
	#MARK_BITS_PER_HBLK
 (
HBLKSIZE
/
GRANULE_BYTES
)

	)

662 #ifde‡
USE_MARK_BYTES


663 
	#MARK_BITS_SZ
 (
MARK_BITS_PER_HBLK
 + 1)

	)

670 
	#MARK_BITS_SZ
 (
MARK_BITS_PER_HBLK
/
CPP_WORDSZ
 + 1)

	)

673 #ifde‡
PARALLEL_MARK


674 
	~<©omic_›s.h
>

675 
AO_t
 
	tcou¡î_t
;

677 
size_t
 
	tcou¡î_t
;

683 
	shblkhdr
 {

684 
hblk
 * 
hb_√xt
;

687 
hblk
 * 
hb_¥ev
;

688 
hblk
 * 
hb_block
;

689 
hb_obj_köd
;

693 
hb_Êags
;

694 
	#IGNORE_OFF_PAGE
 1

	)

697 
	#WAS_UNMAPPED
 2

	)

703 
	#FREE_BLK
 4

	)

704 
hb_œ°_ª˛aimed
;

712 
size_t
 
hb_sz
;

717 
w‹d
 
hb_des¸
;

719 #ifde‡
MARK_BIT_PER_OBJ


720 
unsig√d32
 
hb_öv_sz
;

723 
	#LARGE_INV_SZ
 (1 << 16)

	)

725 
hb_œrge_block
;

726 * 
hb_m≠
;

730 
cou¡î_t
 
hb_n_m¨ks
;

750 #ifde‡
USE_MARK_BYTES


752 
_hb_m¨ks
[
MARK_BITS_SZ
];

759 
w‹d
 
dummy
;

760 } 
_m¨k_byã_uni⁄
;

761 
	#hb_m¨ks
 
_m¨k_byã_uni⁄
.
_hb_m¨ks


	)

763 
w‹d
 
hb_m¨ks
[
MARK_BITS_SZ
];

767 
	#ANY_INDEX
 23

	)

771 
	#HBLK_WORDS
 (
HBLKSIZE
/(
w‹d
))

	)

772 
	#HBLK_GRANULES
 (
HBLKSIZE
/
GRANULE_BYTES
)

	)

776 
	#HBLK_OBJS
(
sz_ö_byãs
Ë(
HBLKSIZE
/(sz_ö_byãs))

	)

778 
	shblk
 {

779 
hb_body
[
HBLKSIZE
];

782 
	#HBLK_IS_FREE
(
hdr
Ë(((hdrË-> 
hb_Êags
 & 
FREE_BLK
Ë!0)

	)

784 
	#OBJ_SZ_TO_BLOCKS
(
sz
Ë
	`divHBLKSZ
(sz + 
HBLKSIZE
-1)

	)

789 
	#obj_lök
(
p
Ë(*(**)’))

	)

791 
	#LOG_MAX_MARK_PROCS
 6

	)

792 
	#MAX_MARK_PROCS
 (1 << 
LOG_MAX_MARK_PROCS
)

	)

798 #ifde‡
LARGE_CONFIG


799 
	#MAX_ROOT_SETS
 8192

	)

801 #ifde‡
SMALL_CONFIG


802 
	#MAX_ROOT_SETS
 512

	)

804 
	#MAX_ROOT_SETS
 2048

	)

808 
	#MAX_EXCLUSIONS
 (
MAX_ROOT_SETS
/4)

	)

814 
	sex˛usi⁄
 {

815 
±r_t
 
e_°¨t
;

816 
±r_t
 
e_íd
;

823 
	sroŸs
 {

824 
±r_t
 
r_°¨t
;

825 
±r_t
 
r_íd
;

826 #i‡!
	`deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

827 
roŸs
 * 
r_√xt
;

829 
GC_boﬁ
 
r_tmp
;

833 #i‡!
	`deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

835 
	#LOG_RT_SIZE
 6

	)

836 
	#RT_SIZE
 (1 << 
LOG_RT_SIZE
Ë

	)

858 
	s_GC_¨øys
 {

859 
w‹d
 
_hópsize
;

860 
w‹d
 
_max_hópsize
;

861 
w‹d
 
_ªque°ed_hópsize
;

862 
±r_t
 
_œ°_hóp_addr
;

863 
±r_t
 
_¥ev_hóp_addr
;

864 
w‹d
 
_œrge_‰ì_byãs
;

867 
w‹d
 
_œrge_Ælocd_byãs
;

872 
w‹d
 
_max_œrge_Ælocd_byãs
;

876 
w‹d
 
_byãs_Ælocd_bef‹e_gc
;

879 #i‚de‡
SEPARATE_GLOBALS


880 
w‹d
 
_byãs_Ælocd
;

883 
w‹d
 
_byãs_dr›≥d
;

888 
w‹d
 
_byãs_föÆized
;

892 
w‹d
 
_n⁄_gc_byãs_©_gc
;

895 
w‹d
 
_byãs_‰ìd
;

898 
w‹d
 
_föÆizî_byãs_‰ìd
;

902 
±r_t
 
_s¸©ch_íd_±r
;

903 
±r_t
 
_s¸©ch_œ°_íd_±r
;

906 
GC_m¨k_¥oc
 
_m¨k_¥ocs
[
MAX_MARK_PROCS
];

911 #i‚de‡
SEPARATE_GLOBALS


912 *
_obj‰ìli°
[
MAXOBJGRANULES
+1];

914 *
_aobj‰ìli°
[
MAXOBJGRANULES
+1];

918 *
_uobj‰ìli°
[
MAXOBJGRANULES
+1];

923 #ifde‡
ATOMIC_UNCOLLECTABLE


924 *
_auobj‰ìli°
[
MAXOBJGRANULES
+1];

928 
w‹d
 
_composôe_ö_u£
;

931 
w‹d
 
_©omic_ö_u£
;

934 #ifde‡
USE_MUNMAP


935 
w‹d
 
_unm≠≥d_byãs
;

938 
size_t
 
_size_m≠
[
MAXOBJBYTES
+1];

942 #ifde‡
STUBBORN_ALLOC


943 
±r_t
 
_sobj‰ìli°
[
MAXOBJGRANULES
+1];

946 #ifde‡
MARK_BIT_PER_GRANULE


947 * 
_obj_m≠
[
MAXOBJGRANULES
+1];

958 
	#MAP_LEN
 
	`BYTES_TO_GRANULES
(
HBLKSIZE
)

	)

960 
	#VALID_OFFSET_SZ
 
HBLKSIZE


	)

961 
_vÆid_off£ts
[
VALID_OFFSET_SZ
];

964 
_modws_vÆid_off£ts
[(
w‹d
)];

967 #ifde‡
STUBBORN_ALLOC


968 
∑ge_hash_èbÀ
 
_ch™ged_∑ges
;

971 
∑ge_hash_èbÀ
 
_¥ev_ch™ged_∑ges
;

975 #i‡
	`deföed
(
PROC_VDB
Ë|| deföed(
MPROTECT_VDB
) || \

976 
	`deföed
(
GWW_VDB
Ë|| deföed(
MANUAL_VDB
)

977 
∑ge_hash_èbÀ
 
_grungy_∑ges
;

980 #i‡
	`deföed
(
MPROTECT_VDB
Ë|| deföed(
MANUAL_VDB
)

981 vﬁ©ûê
∑ge_hash_èbÀ
 
_dúty_∑ges
;

984 #i‡
	`deföed
(
PROC_VDB
Ë|| deföed(
GWW_VDB
)

985 
∑ge_hash_èbÀ
 
_wrôãn_∑ges
;

987 #ifde‡
LARGE_CONFIG


988 #i‡
CPP_WORDSZ
 > 32

989 
	#MAX_HEAP_SECTS
 4096

	)

991 
	#MAX_HEAP_SECTS
 768

	)

994 #ifde‡
SMALL_CONFIG


995 
	#MAX_HEAP_SECTS
 128

	)

997 
	#MAX_HEAP_SECTS
 384

	)

1000 
	sHópSe˘
 {

1001 
±r_t
 
hs_°¨t
; 
size_t
 
hs_byãs
;

1002 } 
_hóp_£˘s
[
MAX_HEAP_SECTS
];

1004 #i‡
	`deföed
(
USE_PROC_FOR_LIBRARIES
)

1005 
HópSe˘
 
_our_mem‹y
[
MAX_HEAP_SECTS
];

1010 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

1011 
±r_t
 
_hóp_ba£s
[
MAX_HEAP_SECTS
];

1014 #ifde‡
MSWINCE


1015 
w‹d
 
_hóp_Àngths
[
MAX_HEAP_SECTS
];

1018 
roŸs
 
_°©ic_roŸs
[
MAX_ROOT_SETS
];

1019 #i‡!
	`deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

1020 
roŸs
 * 
_roŸ_ödex
[
RT_SIZE
];

1022 
ex˛usi⁄
 
_ex˛_èbÀ
[
MAX_EXCLUSIONS
];

1024 
bŸtom_ödex
 * 
_Æl_nûs
;

1025 
bŸtom_ödex
 * 
_t›_ödex
 [
TOP_SZ
];

1026 #ifde‡
ENABLE_TRACE


1027 
±r_t
 
_åa˚_addr
;

1029 #ifde‡
SAVE_CALL_CHAIN


1030 
ˇŒöfo
 
_œ°_°ack
[
NFRAMES
];

1039 
GC_API
 
GC_FAR
 
_GC_¨øys
 
GC_¨øys
;

1041 #i‚de‡
SEPARATE_GLOBALS


1042 
	#GC_obj‰ìli°
 
GC_¨øys
.
_obj‰ìli°


	)

1043 
	#GC_aobj‰ìli°
 
GC_¨øys
.
_aobj‰ìli°


	)

1044 
	#GC_byãs_Ælocd
 
GC_¨øys
.
_byãs_Ælocd


	)

1046 
	#GC_uobj‰ìli°
 
GC_¨øys
.
_uobj‰ìli°


	)

1047 #ifde‡
ATOMIC_UNCOLLECTABLE


1048 
	#GC_auobj‰ìli°
 
GC_¨øys
.
_auobj‰ìli°


	)

1050 
	#GC_sobj‰ìli°
 
GC_¨øys
.
_sobj‰ìli°


	)

1051 
	#GC_vÆid_off£ts
 
GC_¨øys
.
_vÆid_off£ts


	)

1052 
	#GC_modws_vÆid_off£ts
 
GC_¨øys
.
_modws_vÆid_off£ts


	)

1053 #ifde‡
STUBBORN_ALLOC


1054 
	#GC_ch™ged_∑ges
 
GC_¨øys
.
_ch™ged_∑ges


	)

1055 
	#GC_¥ev_ch™ged_∑ges
 
GC_¨øys
.
_¥ev_ch™ged_∑ges


	)

1057 #ifde‡
MARK_BIT_PER_GRANULE


1058 
	#GC_obj_m≠
 
GC_¨øys
.
_obj_m≠


	)

1060 
	#GC_œ°_hóp_addr
 
GC_¨øys
.
_œ°_hóp_addr


	)

1061 
	#GC_¥ev_hóp_addr
 
GC_¨øys
.
_¥ev_hóp_addr


	)

1062 
	#GC_œrge_‰ì_byãs
 
GC_¨øys
.
_œrge_‰ì_byãs


	)

1063 
	#GC_œrge_Ælocd_byãs
 
GC_¨øys
.
_œrge_Ælocd_byãs


	)

1064 
	#GC_max_œrge_Ælocd_byãs
 
GC_¨øys
.
_max_œrge_Ælocd_byãs


	)

1065 
	#GC_byãs_dr›≥d
 
GC_¨øys
.
_byãs_dr›≥d


	)

1066 
	#GC_byãs_föÆized
 
GC_¨øys
.
_byãs_föÆized


	)

1067 
	#GC_n⁄_gc_byãs_©_gc
 
GC_¨øys
.
_n⁄_gc_byãs_©_gc


	)

1068 
	#GC_byãs_‰ìd
 
GC_¨øys
.
_byãs_‰ìd


	)

1069 
	#GC_föÆizî_byãs_‰ìd
 
GC_¨øys
.
_föÆizî_byãs_‰ìd


	)

1070 
	#GC_s¸©ch_íd_±r
 
GC_¨øys
.
_s¸©ch_íd_±r


	)

1071 
	#GC_s¸©ch_œ°_íd_±r
 
GC_¨øys
.
_s¸©ch_œ°_íd_±r


	)

1072 
	#GC_m¨k_¥ocs
 
GC_¨øys
.
_m¨k_¥ocs


	)

1073 
	#GC_hópsize
 
GC_¨øys
.
_hópsize


	)

1074 
	#GC_max_hópsize
 
GC_¨øys
.
_max_hópsize


	)

1075 
	#GC_ªque°ed_hópsize
 
GC_¨øys
.
_ªque°ed_hópsize


	)

1076 
	#GC_byãs_Ælocd_bef‹e_gc
 
GC_¨øys
.
_byãs_Ælocd_bef‹e_gc


	)

1077 
	#GC_hóp_£˘s
 
GC_¨øys
.
_hóp_£˘s


	)

1078 #ifde‡
USE_PROC_FOR_LIBRARIES


1079 
	#GC_our_mem‹y
 
GC_¨øys
.
_our_mem‹y


	)

1081 
	#GC_œ°_°ack
 
GC_¨øys
.
_œ°_°ack


	)

1082 #ifde‡
ENABLE_TRACE


1083 
	#GC_åa˚_addr
 
GC_¨øys
.
_åa˚_addr


	)

1085 #ifde‡
USE_MUNMAP


1086 
	#GC_unm≠≥d_byãs
 
GC_¨øys
.
_unm≠≥d_byãs


	)

1088 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

1089 
	#GC_hóp_ba£s
 
GC_¨øys
.
_hóp_ba£s


	)

1091 #ifde‡
MSWINCE


1092 
	#GC_hóp_Àngths
 
GC_¨øys
.
_hóp_Àngths


	)

1094 
	#GC_°©ic_roŸs
 
GC_¨øys
.
_°©ic_roŸs


	)

1095 
	#GC_roŸ_ödex
 
GC_¨øys
.
_roŸ_ödex


	)

1096 
	#GC_ex˛_èbÀ
 
GC_¨øys
.
_ex˛_èbÀ


	)

1097 
	#GC_Æl_nûs
 
GC_¨øys
.
_Æl_nûs


	)

1098 
	#GC_t›_ödex
 
GC_¨øys
.
_t›_ödex


	)

1099 #i‡
	`deföed
(
PROC_VDB
Ë|| deföed(
MPROTECT_VDB
) || \

1100 
	`deföed
(
GWW_VDB
Ë|| 
	$deföed
(
MANUAL_VDB
)

1101 
	#GC_grungy_∑ges
 
GC_¨øys
.
_grungy_∑ges


	)

1103 #i‡
	`deföed
(
MPROTECT_VDB
Ë|| deföed(
MANUAL_VDB
)

1104 
	#GC_dúty_∑ges
 
GC_¨øys
.
_dúty_∑ges


	)

1106 #i‡
	`deföed
(
PROC_VDB
Ë|| deföed(
GWW_VDB
)

1107 
	#GC_wrôãn_∑ges
 
GC_¨øys
.
_wrôãn_∑ges


	)

1109 
	#GC_composôe_ö_u£
 
GC_¨øys
.
_composôe_ö_u£


	)

1110 
	#GC_©omic_ö_u£
 
GC_¨øys
.
_©omic_ö_u£


	)

1111 
	#GC_size_m≠
 
GC_¨øys
.
_size_m≠


	)

1113 
	#begöGC_¨øys
 ((
±r_t
)(&
GC_¨øys
))

	)

1114 
	#ídGC_¨øys
 (((
±r_t
)(&
GC_¨øys
)Ë+ ( GC_¨øys))

	)

1116 
	#USED_HEAP_SIZE
 (
GC_hópsize
 - 
GC_œrge_‰ì_byãs
)

	)

1119 
	#MAXOBJKINDS
 16

	)

1121 
	sobj_köd
 {

1122 **
ok_‰ìli°
;

1125 
hblk
 **
ok_ª˛aim_li°
;

1129 
w‹d
 
ok_des¸ùt‹
;

1131 
GC_boﬁ
 
ok_ªloˇã_des¸
;

1135 
GC_boﬁ
 
ok_öô
;

1136 } 
GC_obj_köds
[
MAXOBJKINDS
];

1138 
	#begöGC_obj_köds
 ((
±r_t
)(&
GC_obj_köds
))

	)

1139 
	#ídGC_obj_köds
 (
begöGC_obj_köds
 + ( 
GC_obj_köds
))

	)

1146 #ifde‡
SEPARATE_GLOBALS


1147 
w‹d
 
GC_byãs_Ælocd
;

1149 
±r_t
 
GC_obj‰ìli°
[
MAXOBJGRANULES
+1];

1151 
	#begöGC_obj‰ìli°
 ((
±r_t
)(&
GC_obj‰ìli°
))

	)

1152 
	#ídGC_obj‰ìli°
 (
begöGC_obj‰ìli°
 + (
GC_obj‰ìli°
))

	)

1154 
±r_t
 
GC_aobj‰ìli°
[
MAXOBJGRANULES
+1];

1156 
	#begöGC_aobj‰ìli°
 ((
±r_t
)(&
GC_aobj‰ìli°
))

	)

1157 
	#ídGC_aobj‰ìli°
 (
begöGC_aobj‰ìli°
 + (
GC_aobj‰ìli°
))

	)

1161 
	#PTRFREE
 0

	)

1162 
	#NORMAL
 1

	)

1163 
	#UNCOLLECTABLE
 2

	)

1164 #ifde‡
ATOMIC_UNCOLLECTABLE


1165 
	#AUNCOLLECTABLE
 3

	)

1166 
	#STUBBORN
 4

	)

1167 
	#IS_UNCOLLECTABLE
(
k
Ë(((kË& ~1Ë=
UNCOLLECTABLE
)

	)

1169 
	#STUBBORN
 3

	)

1170 
	#IS_UNCOLLECTABLE
(
k
Ë((kË=
UNCOLLECTABLE
)

	)

1173 
GC_n_köds
;

1175 
GC_API
 
w‹d
 
GC_fo_íåõs
;

1177 
w‹d
 
GC_n_hóp_£˘s
;

1180 #ifde‡
USE_PROC_FOR_LIBRARIES


1181 
w‹d
 
GC_n_mem‹y
;

1185 
w‹d
 
GC_∑ge_size
;

1187 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

1188 
_SYSTEM_INFO
;

1189 
_SYSTEM_INFO
 
GC_sysöfo
;

1190 
w‹d
 
GC_n_hóp_ba£s
;

1193 
w‹d
 
GC_tŸÆ_°ack_bœck_li°ed
;

1196 
w‹d
 
GC_bœck_li°_•acög
;

1203 
hblk
 * 
GC_hblk‰ìli°
[];

1209 
GC_boﬁ
 
GC_obje˘s_¨e_m¨ked
;

1212 #i‚de‡
SMALL_CONFIG


1213 
GC_boﬁ
 
GC_ö¸emíèl
;

1215 
	#TRUE_INCREMENTAL
 \

1216 (
GC_ö¸emíèl
 && 
GC_time_limô
 !
GC_TIME_UNLIMITED
)

	)

1219 
	#GC_ö¸emíèl
 
FALSE


	)

1221 
	#TRUE_INCREMENTAL
 
FALSE


	)

1224 
GC_boﬁ
 
GC_dúty_maöèöed
;

1229 
w‹d
 
GC_roŸ_size
;

1231 
GC_boﬁ
 
GC_debuggög_°¨ãd
;

1233 
GC_œrge_Æloc_w¨n_öãrvÆ
;

1236 
GC_œrge_Æloc_w¨n_suµªs£d
;

1239 #ifde‡
THREADS


1240 
GC_boﬁ
 
GC_w‹ld_°›≥d
;

1244 #i‚de‡
abs


1245 
	#abs
(
x
Ë((xË< 0? (-(x)Ë: (x))

	)

1256 #ifde‡
PARALLEL_MARK


1257 
	#OR_WORD
(
addr
, 
bôs
) \

1258 { 
	`AO_‹
((vﬁ©ûê
AO_t
 *)(
addr
), (AO_t)
bôs
); 
	}

	)
}

1260 
	#OR_WORD
(
addr
, 
bôs
Ë*◊ddrË|(bôs)

	)

1272 #ifde‡
USE_MARK_BYTES


1273 
	#m¨k_bô_‰om_hdr
(
hhdr
,
n
Ë((hhdr)->
hb_m¨ks
[n])

	)

1274 
	#£t_m¨k_bô_‰om_hdr
(
hhdr
,
n
Ë((hhdr)->
hb_m¨ks
[n]Ë1

	)

1275 
	#˛ór_m¨k_bô_‰om_hdr
(
hhdr
,
n
Ë((hhdr)->
hb_m¨ks
[n]Ë0

	)

1277 
	#m¨k_bô_‰om_hdr
(
hhdr
,
n
Ë(((hhdr)->
hb_m¨ks
[
	`divWORDSZ
(n)] \

1278 >> (
	`modWORDSZ
(
n
))Ë& (
w‹d
)1)

	)

1279 
	#£t_m¨k_bô_‰om_hdr
(
hhdr
,
n
) \

1280 
	`OR_WORD
((
hhdr
)->
hb_m¨ks
+
	`divWORDSZ
(
n
), \

1281 (
w‹d
)1 << 
	`modWORDSZ
(
n
))

	)

1282 
	#˛ór_m¨k_bô_‰om_hdr
(
hhdr
,
n
Ë(hhdr)->
hb_m¨ks
[
	`divWORDSZ
(n)] \

1283 &~((
w‹d
)1 << 
	`modWORDSZ
(
n
))

	)

1286 #ifde‡
MARK_BIT_PER_OBJ


1287 
	#MARK_BIT_NO
(
off£t
, 
sz
Ë((()(off£t))/(sz))

	)

1290 
	#MARK_BIT_OFFSET
(
sz
Ë1

	)

1292 
	#IF_PER_OBJ
(
x
Ë
	)
x

1293 
	#FINAL_MARK_BIT
(
sz
Ë((szË> 
MAXOBJBYTES
? 1 : 
	`HBLK_OBJS
(sz))

	)

1296 
	#MARK_BIT_NO
(
off£t
, 
sz
Ë
	`BYTES_TO_GRANULES
(()(off£t))

	)

1297 
	#MARK_BIT_OFFSET
(
sz
Ë
	`BYTES_TO_GRANULES
(sz)

	)

1298 
	#IF_PER_OBJ
(
x
)

	)

1299 
	#FINAL_MARK_BIT
(
sz
) \

1300 ((
sz
Ë> 
MAXOBJBYTES
? 
MARK_BITS_PER_HBLK
 \

1301 : 
	`BYTES_TO_GRANULES
(
sz
 * 
	`HBLK_OBJS
(sz)))

	)

1306 
±r_t
 
GC_≠¥ox_•
();

1308 
GC_boﬁ
 
GC_should_cﬁÀ˘
();

1310 
GC_≠∂y_to_Æl_blocks
((*
‚
Ë(
hblk
 *
h
, 
w‹d
 
˛õ¡_d©a
),

1311 
w‹d
 
˛õ¡_d©a
);

1314 
hblk
 * 
	`GC_√xt_u£d_block
(hblk * 
h
);

1316 
hblk
 * 
	`GC_¥ev_block
(hblk * 
h
);

1320 
	`GC_m¨k_öô
();

1321 
	`GC_˛ór_m¨ks
();

1322 
	`GC_övÆid©e_m¨k_°©e
();

1328 
GC_boﬁ
 
	`GC_m¨k_°ack_em±y
();

1329 
GC_boﬁ
 
	`GC_m¨k_some
(
±r_t
 
cﬁd_gc_‰ame
);

1334 
	`GC_öôüã_gc
();

1339 
	`GC_push_Æl
(
±r_t
 
bŸtom
,Öå_à
t›
);

1342 
	`GC_push_£À˘ed
(
±r_t
 
bŸtom
,Öå_à
t›
,

1343 (*
dúty_‚
Ë(
hblk
 *
h
),

1344 (*
push_‚
Ë(
±r_t
 
bŸtom
,Öå_à
t›
) );

1347 #i‚de‡
SMALL_CONFIG


1348 
	`GC_push_c⁄dôi⁄Æ
 (
±r_t
 
b
,Öå_à
t
, 
GC_boﬁ
 
Æl
);

1350 
	#GC_push_c⁄dôi⁄Æ
(
b
, 
t
, 
Æl
Ë
	`GC_push_Æl
(b,Å)

	)

1354 
	`GC_push_Æl_°ack
 (
±r_t
 
b
,Öå_à
t
);

1357 
	`GC_push_Æl_ógî
 (
±r_t
 
b
,Öå_à
t
);

1362 #i‚de‡
THREADS


1363 
	`GC_push_Æl_°ack_∑πüŒy_ógî
(
±r_t
 
bŸtom
,Öå_à
t›
,

1364 
±r_t
 
cﬁd_gc_‰ame
);

1376 
	`GC_push_cuºít_°ack
(
±r_t
 
cﬁd_gc_‰ame
, *
c⁄ãxt
);

1386 
	`GC_push_roŸs
(
GC_boﬁ
 
Æl
, 
±r_t
 
cﬁd_gc_‰ame
);

1388 (*
GC_push_Ÿhî_roŸs
)();

1395 
	`GC_push_gc_°ru˘uªs
();

1401 
	`GC_push_föÆizî_°ru˘uªs
();

1402 
	`GC_push_°ubb‹n_°ru˘uªs
 ();

1403 #ifde‡
THREADS


1404 
	`GC_push_thªad_°ru˘uªs
 ();

1406 (*
GC_push_ty≥d_°ru˘uªs
) ();

1409 (*
GC_°¨t_ˇŒ_back
) ();

1414 
	`GC_push_ªgs_™d_°ack
(
±r_t
 
cﬁd_gc_‰ame
);

1416 
	`GC_push_ªgs
();

1418 
	`GC_wôh_ˇŒì_ßves_pushed
((*
‚
)(
±r_t
, *),

1419 
±r_t
 
¨g
);

1421 #i‡
	`deföed
(
SPARC
Ë|| deföed(
IA64
)

1424 
±r_t
 
	`GC_ßve_ªgs_ö_°ack
();

1430 #ifde‡
NURSERY


1431 (*
GC_push_¥oc
)(
±r_t
);

1433 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

1434 
__cde˛
 
	`GC_push_⁄e
(
w‹d
 
p
);

1436 
	`GC_push_⁄e
(
w‹d
 
p
);

1444 #i‡
	`deföed
(
PRINT_BLACK_LIST
Ë|| deföed(
KEEP_BACK_PTRS
)

1445 
	`GC_m¨k_™d_push_°ack
(
±r_t
 
p
,Öå_à
sour˚
);

1448 
	`GC_m¨k_™d_push_°ack
(
±r_t
 
p
);

1450 
	`GC_push_m¨ked
(
hblk
 * 
h
, 
hdr
 * 
hhdr
);

1453 #ifde‡
SMALL_CONFIG


1454 
	#GC_push_√xt_m¨ked_dúty
(
h
Ë
	`GC_push_√xt_m¨ked
(h)

	)

1456 
hblk
 * 
	`GC_push_√xt_m¨ked_dúty
(hblk * 
h
);

1460 
hblk
 * 
	`GC_push_√xt_m¨ked
(hblk * 
h
);

1462 
hblk
 * 
	`GC_push_√xt_m¨ked_uncﬁÀ˘abÀ
(hblk * 
h
);

1464 
GC_boﬁ
 
	`GC_°›≥d_m¨k
(
GC_°›_func
 
°›_func
);

1467 
	`GC_˛ór_hdr_m¨ks
(
hdr
 * 
hhdr
);

1469 
	`GC_£t_hdr_m¨ks
(
hdr
 * 
hhdr
);

1471 
	`GC_£t_Ê_m¨ks
(
±r_t
 
p
);

1474 #ifde‡
GC_ASSERTIONS


1475 
	`GC_check_Ê_m¨ks
(
±r_t
 
p
);

1480 
	`GC_add_roŸs_ö√r
(
±r_t
 
b
,Öå_à
e
, 
GC_boﬁ
 
tmp
);

1481 
	`GC_ªmove_roŸs_ö√r
(
±r_t
 
b
,Öå_à
e
);

1482 
GC_boﬁ
 
	`GC_is_°©ic_roŸ
(
±r_t
 
p
);

1485 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
_WIN32_WCE_EMULATION
)

1486 
GC_boﬁ
 
	`GC_is_tmp_roŸ
(
±r_t
 
p
);

1490 
	`GC_ªgi°î_dy«mic_libørõs
();

1492 
	`GC_c⁄d_ªgi°î_dy«mic_libørõs
();

1496 
GC_boﬁ
 
	`GC_ªgi°î_maö_°©ic_d©a
();

1502 
±r_t
 
	`GC_gë_maö_°ack_ba£
();

1503 #ifde‡
IA64


1504 
±r_t
 
	`GC_gë_ªgi°î_°ack_ba£
();

1507 
	`GC_ªgi°î_d©a_£gmíts
();

1510 
	`GC_bl_öô
();

1511 #ifde‡
PRINT_BLACK_LIST


1512 
	`GC_add_to_bœck_li°_n‹mÆ
(
w‹d
 
p
, 
±r_t
 
sour˚
);

1515 
	#GC_ADD_TO_BLACK_LIST_NORMAL
(
bôs
, 
sour˚
) \

1516 i‡(
GC_Æl_öãri‹_poöãrs
) { \

1517 
	`GC_add_to_bœck_li°_°ack
((
w‹d
)(
bôs
), (
sour˚
)); \

1518 
	}
} { \

1519 
	`GC_add_to_bœck_li°_n‹mÆ
((
w‹d
)(
bôs
), (
sour˚
)); \

1520 }

	)

1522 
GC_add_to_bœck_li°_n‹mÆ
(
w‹d
 
p
);

1523 
	#GC_ADD_TO_BLACK_LIST_NORMAL
(
bôs
, 
sour˚
) \

1524 i‡(
GC_Æl_öãri‹_poöãrs
) { \

1525 
	`GC_add_to_bœck_li°_°ack
((
w‹d
)(
bôs
)); \

1527 
	`GC_add_to_bœck_li°_n‹mÆ
((
w‹d
)(
bôs
)); \

1528 }

	)

1531 #ifde‡
PRINT_BLACK_LIST


1532 
GC_add_to_bœck_li°_°ack
(
w‹d
 
p
, 
±r_t
 
sour˚
);

1533 
	#GC_ADD_TO_BLACK_LIST_STACK
(
bôs
, 
sour˚
) \

1534 
	`GC_add_to_bœck_li°_°ack
((
w‹d
)(
bôs
), (
sour˚
))

	)

1536 
GC_add_to_bœck_li°_°ack
(
w‹d
 
p
);

1537 
	#GC_ADD_TO_BLACK_LIST_STACK
(
bôs
, 
sour˚
) \

1538 
	`GC_add_to_bœck_li°_°ack
((
w‹d
)(
bôs
))

	)

1540 
hblk
 * 
GC_is_bœck_li°ed
(hblk * 
h
, 
w‹d
 
Àn
);

1546 
GC_¥omŸe_bœck_li°s
();

1548 
GC_u≈romŸe_bœck_li°s
();

1552 
w‹d
 
GC_numbî_°ack_bœck_li°ed
(
hblk
 *
°¨t
, hblk *
ídp1
);

1557 
±r_t
 
GC_s¸©ch_Æloc
(
size_t
 
byãs
);

1563 
GC_boﬁ
 
GC_add_m≠_íåy
(
size_t
 
sz
);

1567 
GC_ªgi°î_di•œ˚mít_ö√r
(
size_t
 
off£t
);

1572 
GC_öôülize_off£ts
();

1578 
GC_√w_hblk
(
size_t
 
size_ö_gønuÀs
, 
köd
);

1582 
±r_t
 
GC_buûd_Ê
(
hblk
 *
h
, 
size_t
 
w‹ds
, 
GC_boﬁ
 
˛ór
,Öå_à
li°
);

1590 
hblk
 * 
GC_Ælochblk
 (
size_t
 
size_ö_byãs
, 
köd
,

1591 
Êags
);

1596 
±r_t
 
GC_Æloc_œrge
 (
size_t
 
lb
, 
k
, 
Êags
);

1606 
±r_t
 
GC_Æloc_œrge_™d_˛ór
(
size_t
 
lb
, 
k
, 
Êags
);

1610 
GC_‰ìhblk
(
hblk
 * 
p
);

1615 
GC_öô_ö√r
();

1616 
GC_boﬁ
 
GC_ex∑nd_hp_ö√r
(
w‹d
 
n
);

1617 
GC_°¨t_ª˛aim
(
ab‹t_if_found
);

1623 
GC_c⁄töue_ª˛aim
(
size_t
 
sz
, 
köd
);

1628 
GC_ª˛aim_‹_dñëe_Æl
();

1632 
GC_boﬁ
 
GC_ª˛aim_Æl
(
GC_°›_func
 
°›_func
, GC_boﬁ 
ign‹e_ﬁd
);

1635 
±r_t
 
GC_ª˛aim_gíîic
(
hblk
 * 
hbp
, 
hdr
 *
hhdr
, 
size_t
 
sz
,

1636 
GC_boﬁ
 
öô
, 
±r_t
 
li°
, 
sig√d_w‹d
 *
cou¡
);

1642 
GC_boﬁ
 
GC_block_em±y
(
hdr
 * 
hhdr
);

1644 
GC_boﬁ
 
GC_√vî_°›_func
();

1646 
GC_boﬁ
 
GC_åy_to_cﬁÀ˘_ö√r
(
GC_°›_func
 
f
);

1653 
	#GC_gcﬁÀ˘_ö√r
() \

1654 (Ë
	`GC_åy_to_cﬁÀ˘_ö√r
(
GC_√vî_°›_func
)

	)

1655 
GC_föish_cﬁÀ˘i⁄
();

1658 
GC_boﬁ
 
GC_cﬁÀ˘_‹_ex∑nd
(
w‹d
 
√eded_blocks
, GC_boﬁ 
ign‹e_off_∑ge
);

1665 
GC_boﬁ
 
GC_is_öôülized
;

1667 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

1668 
GC_deöô
();

1673 
GC_cﬁÀ˘_a_lôée_ö√r
(
n
);

1689 * 
GC_gíîic_mÆloc_ign‹e_off_∑ge
(
size_t
 
b
, 
k
);

1693 * 
GC_gíîic_mÆloc_ö√r
(
size_t
 
lb
, 
k
);

1695 * 
GC_gíîic_mÆloc_ö√r_ign‹e_off_∑ge
(
size_t
 
lb
, 
k
);

1701 
GC_gíîic_mÆloc_m™y
(
size_t
 
lb
, 
k
, **
ªsu…
);

1707 
±r_t
 
GC_Ælocobj
(
size_t
 
sz
, 
köd
);

1714 #ifde‡
THREAD_LOCAL_ALLOC


1715 * 
GC_c‹e_mÆloc
(
size_t
);

1716 * 
GC_c‹e_mÆloc_©omic
(
size_t
);

1717 #ifde‡
GC_GCJ_SUPPORT


1718 *
GC_c‹e_gcj_mÆloc
(
size_t
, *);

1722 
GC_‰ì_ö√r
(* 
p
);

1723 
GC_debug_‰ì_ö√r
(* 
p
);

1725 
GC_öô_hódîs
();

1726 
hblkhdr
 * 
GC_ö°Æl_hódî
(
hblk
 *
h
);

1730 
GC_boﬁ
 
GC_ö°Æl_cou¡s
(
hblk
 * 
h
, 
size_t
 
sz
);

1734 
GC_ªmove_hódî
(
hblk
 * 
h
);

1736 
GC_ªmove_cou¡s
(
hblk
 * 
h
, 
size_t
 
sz
);

1738 
hdr
 * 
GC_föd_hódî
(
±r_t
 
h
);

1740 
GC_föÆize
();

1747 
GC_nŸify_‹_övoke_föÆizîs
();

1754 
GC_API
 * 
GC_make_˛osuª
(
GC_föÆiz©i⁄_¥oc
 
‚
, * 
d©a
);

1755 
GC_API
 
GC_debug_övoke_föÆizî
(* 
obj
, * 
d©a
);

1760 
GC_add_to_hóp
(
hblk
 *
p
, 
size_t
 
byãs
);

1763 #ifde‡
USE_PROC_FOR_LIBRARIES


1764 
GC_add_to_our_mem‹y
(
±r_t
 
p
, 
size_t
 
byãs
);

1768 
	#GC_add_to_our_mem‹y
(
p
, 
byãs
)

	)

1771 
GC_¥öt_obj
(
±r_t
 
p
);

1775 (*
GC_check_hóp
)();

1779 (*
GC_¥öt_Æl_smashed
) ();

1782 
	`GC_¥öt_Æl_îr‹s
 ();

1785 (*
GC_¥öt_hóp_obj
Ë(
±r_t
 
p
);

1789 #i‡
	`deföed
(
LINUX
Ë&& deföed(
__ELF__
Ë&& !deföed(
SMALL_CONFIG
)

1790 
	`GC_¥öt_addªss_m≠
 ();

1794 
GC_boﬁ
 
GC_have_îr‹s
;

1798 #i‚de‡
SMALL_CONFIG


1799 
GC_¥öt_°©s
;

1802 
	#GC_¥öt_°©s
 0

	)

1806 
	#VERBOSE
 2

	)

1808 #i‚de‡
NO_DEBUGGING


1809 
GC_boﬁ
 
GC_dump_ªguœæy
;

1810 
	#COND_DUMP
 i‡(
GC_dump_ªguœæy
Ë
	`GC_dump
();

	)

1812 
	#COND_DUMP


	)

1815 #ifde‡
KEEP_BACK_PTRS


1816 
GC_backåa˚s
;

1817 
	`GC_gíî©e_øndom_backåa˚_no_gc
();

1820 
GC_boﬁ
 
GC_¥öt_back_height
;

1822 #ifde‡
MAKE_BACK_GRAPH


1823 
	`GC_¥öt_back_gøph_°©s
();

1828 #ifde‡
DBG_HDRS_ALL


1829 * 
	`GC_debug_gíîic_mÆloc_ö√r
(
size_t
 
lb
, 
k
);

1830 * 
	`GC_debug_gíîic_mÆloc_ö√r_ign‹e_off_∑ge
(
size_t
 
lb
,

1831 
k
);

1832 
	#GC_INTERNAL_MALLOC
 
GC_debug_gíîic_mÆloc_ö√r


	)

1833 
	#GC_INTERNAL_MALLOC_IGNORE_OFF_PAGE
 \

1834 
GC_debug_gíîic_mÆloc_ö√r_ign‹e_off_∑ge


	)

1835 #ifde‡
THREADS


1836 
	#GC_INTERNAL_FREE
 
GC_debug_‰ì_ö√r


	)

1838 
	#GC_INTERNAL_FREE
 
GC_debug_‰ì


	)

1841 
	#GC_INTERNAL_MALLOC
 
GC_gíîic_mÆloc_ö√r


	)

1842 
	#GC_INTERNAL_MALLOC_IGNORE_OFF_PAGE
 \

1843 
GC_gíîic_mÆloc_ö√r_ign‹e_off_∑ge


	)

1844 #ifde‡
THREADS


1845 
	#GC_INTERNAL_FREE
 
GC_‰ì_ö√r


	)

1847 
	#GC_INTERNAL_FREE
 
GC_‰ì


	)

1852 #ifde‡
USE_MUNMAP


1853 
	`GC_unm≠_ﬁd
();

1854 
	`GC_mîge_unm≠≥d
();

1855 
	`GC_unm≠
(
±r_t
 
°¨t
, 
size_t
 
byãs
);

1856 
	`GC_ªm≠
(
±r_t
 
°¨t
, 
size_t
 
byãs
);

1857 
	`GC_unm≠_g≠
(
±r_t
 
°¨t1
, 
size_t
 
byãs1
,Öå_à
°¨t2
, size_à
byãs2
);

1862 
	`GC_ªad_dúty
();

1864 
GC_boﬁ
 
	`GC_∑ge_was_dúty
(
hblk
 *
h
);

1866 
GC_boﬁ
 
	`GC_∑ge_was_evî_dúty
(
hblk
 *
h
);

1868 
	`GC_ªmove_¥Ÿe˘i⁄
(
hblk
 *
h
, 
w‹d
 
nblocks
,

1869 
GC_boﬁ
 
poöãr‰ì
);

1874 
	`GC_dúty_öô
();

1877 
GC_API
 
GC_boﬁ
 
	`GC_is_m¨ked
(
±r_t
 
p
);

1878 
	`GC_˛ór_m¨k_bô
(
±r_t
 
p
);

1879 
	`GC_£t_m¨k_bô
(
±r_t
 
p
);

1882 
	`GC_ªad_ch™ged
();

1883 
GC_boﬁ
 
	`GC_∑ge_was_ch™ged
(
hblk
 * 
h
);

1885 
	`GC_˛ón_ch™gög_li°
();

1887 
	`GC_°ubb‹n_öô
();

1890 
	`GC_¥öt_block_li°
();

1891 
	`GC_¥öt_hblk‰ìli°
();

1892 
	`GC_¥öt_hóp_£˘s
();

1893 
	`GC_¥öt_°©ic_roŸs
();

1894 
	`GC_¥öt_föÆiz©i⁄_°©s
();

1897 #ifde‡
KEEP_BACK_PTRS


1898 
	`GC_°‹e_back_poöãr
(
±r_t
 
sour˚
,Öå_à
de°
);

1899 
	`GC_m¨ked_f‹_föÆiz©i⁄
(
±r_t
 
de°
);

1900 
	#GC_STORE_BACK_PTR
(
sour˚
, 
de°
Ë
	`GC_°‹e_back_poöãr
(sour˚, de°)

	)

1901 
	#GC_MARKED_FOR_FINALIZATION
(
de°
Ë
	`GC_m¨ked_f‹_föÆiz©i⁄
(de°)

	)

1903 
	#GC_STORE_BACK_PTR
(
sour˚
, 
de°
)

	)

1904 
	#GC_MARKED_FOR_FINALIZATION
(
de°
)

	)

1908 #ifde‡
__WATCOMC__


1909 
	`GC_no›
(*, ...);

1911 #ifde‡
__DMC__


1912 
GC_API
 
	`GC_no›
(...);

1914 
GC_API
 
	`GC_no›
();

1918 
	`GC_no›1
(
w‹d
);

1921 
GC_API
 
	`GC_¥ötf
 (c⁄° * 
f‹m©
, ...);

1926 
GC_API
 
	`GC_îr_¥ötf
(c⁄° * 
f‹m©
, ...);

1927 
GC_API
 
	`GC_log_¥ötf
(c⁄° * 
f‹m©
, ...);

1928 
	`GC_îr_puts
(c⁄° *
s
);

1932 #i‡
	`deföed
(
LINUX
Ë&& !deföed(
SMALL_CONFIG
)

1933 
	`GC_îr_wrôe
(c⁄° *
buf
, 
size_t
 
Àn
);

1939 #ifde‡
GC_ASSERTIONS


1940 
	#GC_ASSERT
(
ex¥
) if(!(expr)) {\

1941 
	`GC_îr_¥ötf
("Assertion failure: %s:%ld\n", \

1942 
__FILE__
, ()
__LINE__
); \

1943 
	`ABORT
("as£πi⁄ faûuª"); 
	}

	)
}

1945 
	#GC_ASSERT
(
ex¥
)

	)

1950 #i‡
deföed
(
mùs
Ë&& !deföed(
__GNUC__
)

1953 
	#GC_STATIC_ASSERT
(
ex¥
Ëdÿ{ i‡(0Ë{ 
j
[”x¥)? 1 : -1]; j[0]='\0'; j[0]=j[0]; } } 0)

	)

1955 
	#GC_STATIC_ASSERT
(
ex¥
Ë([”x¥)? 1 : -1])

	)

1958 #i‡
deföed
(
PARALLEL_MARK
Ë|| deföed(
THREAD_LOCAL_ALLOC
)

1975 
GC_acquúe_m¨k_lock
();

1976 
GC_ªÀa£_m¨k_lock
();

1977 
GC_nŸify_Æl_buûdî
();

1979 
GC_waô_f‹_ª˛aim
();

1981 
w‹d
 
GC_Ê_buûdî_cou¡
;

1983 #ifde‡
PARALLEL_MARK


1984 
GC_nŸify_Æl_m¨kî
();

1985 
GC_waô_m¨kî
();

1986 
w‹d
 
GC_m¨k_no
;

1988 
GC_hñp_m¨kî
(
w‹d
 
my_m¨k_no
);

1995 #i‡
deföed
(
GC_PTHREADS
)

2002 #i‡!
deföed
(
SIG_SUSPEND
)

2003 #i‡
deföed
(
GC_LINUX_THREADS
Ë|| deföed(
GC_DGUX386_THREADS
)

2004 #i‡
deföed
(
SPARC
Ë&& !deföed(
SIGPWR
)

2007 
	#SIG_SUSPEND
 
SIGLOST


	)

2010 
	#SIG_SUSPEND
 
SIGPWR


	)

2013 #i‡
deföed
(
_SIGRTMIN
)

2014 
	#SIG_SUSPEND
 
_SIGRTMIN
 + 6

	)

2016 
	#SIG_SUSPEND
 
SIGRTMIN
 + 6

	)

2027 #ifde‡
UNIX_LIKE


2028 
	~<£tjmp.h
>

2029 #i‡
deföed
(
SUNOS5SIGS
Ë&& !deföed(
FREEBSD
)

2030 
	~<sys/sigöfo.h
>

2034 
	#SETJMP
(
ív
Ë
	`sig£tjmp
”nv, 1)

	)

2035 
	#LONGJMP
(
ív
, 
vÆ
Ë
	`sigl⁄gjmp
”nv, vÆ)

	)

2036 
	#JMP_BUF
 
sigjmp_buf


	)

2038 #ifde‡
ECOS


2039 
	#SETJMP
(
ív
Ë
	`hÆ_£tjmp
”nv)

	)

2041 
	#SETJMP
(
ív
Ë
	`£tjmp
”nv)

	)

2043 
	#LONGJMP
(
ív
, 
vÆ
Ë
	`l⁄gjmp
”nv, vÆ)

	)

2044 
	#JMP_BUF
 
jmp_buf


	)

2049 #i‡
deföed
(
HEURISTIC2
Ë|| deföed(
SEARCH_FOR_DATA_START
)

2050 
	#NEED_FIND_LIMIT


	)

2053 #i‡!
deföed
(
STACKBOTTOM
Ë&& deföed(
HEURISTIC2
)

2054 
	#NEED_FIND_LIMIT


	)

2057 #i‡(
deföed
(
SVR4
Ë|| deföed(
AUX
Ë|| deföed(
DGUX
) \

2058 || (
deföed
(
LINUX
Ë&& deföed(
SPARC
))Ë&& !
	$deföed
(
PCR
)

2059 
	#NEED_FIND_LIMIT


	)

2062 #i‡
	`deföed
(
FREEBSD
Ë&& (deföed(
I386
Ë|| deföed(
X86_64
Ë|| deföed(
powîpc
) \

2063 || 
	$deföed
(
__powîpc__
))

2064 
	~<machöe/å≠.h
>

2065 #i‡!
	`deföed
(
PCR
)

2066 
	#NEED_FIND_LIMIT


	)

2070 #i‡(
	`deföed
(
NETBSD
Ë|| deföed(
OPENBSD
)Ë&& deföed(
__ELF__
) \

2071 && !
	$deföed
(
NEED_FIND_LIMIT
)

2073 
	#NEED_FIND_LIMIT


	)

2076 #i‡
	`deföed
(
IA64
Ë&& !deföed(
NEED_FIND_LIMIT
)

2077 
	#NEED_FIND_LIMIT


	)

2081 #i‡
	`deföed
(
NEED_FIND_LIMIT
) || \

2082 
	`deföed
(
USE_PROC_FOR_LIBRARIES
Ë&& 
	$deföed
(
THREADS
)

2083 
JMP_BUF
 
GC_jmp_buf
;

2087 
	`GC_£tup_ãmp‹¨y_Áu…_h™dÀr
();

2090 
	`GC_ª£t_Áu…_h™dÀr
();

	@include/private/gcconfig.h

25 #i‚de‡
GCCONFIG_H


27 
	#GCCONFIG_H


	)

29 #i‚de‡
GC_PRIVATE_H


32 
GC_undeföed_°ru˘
 * 
	t±r_t
;

33 
	~<°ddef.h
>

42 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
)

43 #i‚de‡
LINUX


44 
	#LINUX


	)

49 #i‡
deföed
(
__NëBSD__
)

50 
	#NETBSD


	)

54 #i‡
deföed
(
__O≥nBSD__
)

55 
	#OPENBSD


	)

59 #i‡(
deföed
(
__FªeBSD__
Ë|| deföed(
__Døg⁄Fly__
) || \

60 
deföed
(
__FªeBSD_kî√l__
)Ë&& !
	$deföed
(
FREEBSD
)

61 
	#FREEBSD


	)

65 #i‡
	`deföed
(
__¨m__
Ë|| deföed(
__thumb__
)

66 
	#ARM32


	)

67 #i‡!
	`deföed
(
LINUX
Ë&& !deföed(
NETBSD
)

68 
	#NOSYS


	)

69 
	#mach_ty≥_known


	)

72 #i‡
	`deföed
(
sun
Ë&& deföed(
mc68000
)

73 #îr‹ 
SUNOS4
 
no
 
l⁄gî
 
suµ‹ãd


75 #i‡
	`deföed
(
hp9000s300
)

76 #îr‹ 
M68K
 
ba£d
 
HP
 
machöes
 
no
 
l⁄gî
 
suµ‹ãd
.

78 #i‡
	`deföed
(
OPENBSD
Ë&& deföed(
m68k
)

79 
	#M68K


	)

80 
	#mach_ty≥_known


	)

82 #i‡
	`deföed
(
OPENBSD
Ë&& deföed(
__•¨c__
)

83 
	#SPARC


	)

84 
	#mach_ty≥_known


	)

86 #i‡
	`deföed
(
NETBSD
Ë&& (deföed(
m68k
Ë|| deföed(
__m68k__
))

87 
	#M68K


	)

88 
	#mach_ty≥_known


	)

90 #i‡
	`deföed
(
NETBSD
Ë&& deföed(
__powîpc__
)

91 
	#POWERPC


	)

92 
	#mach_ty≥_known


	)

94 #i‡
	`deföed
(
NETBSD
Ë&& (deföed(
__¨m32__
Ë|| deföed(
__¨m__
))

95 
	#ARM32


	)

96 
	#mach_ty≥_known


	)

98 #i‡
	`deföed
(
NETBSD
Ë&& deföed(
__sh__
)

99 
	#SH


	)

100 
	#mach_ty≥_known


	)

102 #i‡
	`deföed
(
vax
)

103 
	#VAX


	)

104 #ifde‡
u…rix


105 
	#ULTRIX


	)

107 
	#BSD


	)

109 
	#mach_ty≥_known


	)

111 #i‡
	`deföed
(
__NëBSD__
Ë&& deföed(
__vax__
)

112 
	#VAX


	)

113 
	#mach_ty≥_known


	)

115 #i‡
	`deföed
(
mùs
Ë|| deföed(
__mùs
Ë|| deföed(
_mùs
)

116 
	#MIPS


	)

117 #i‡
	`deföed
(
√c_ews
Ë|| deföed(
_√c_ews
)

118 
	#EWS4800


	)

120 #i‡!
	`deföed
(
LINUX
Ë&& !deföed(
EWS4800
Ë&& !deföed(
NETBSD
)

121 #i‡
	`deföed
(
u…rix
Ë|| deföed(
__u…rix
)

122 
	#ULTRIX


	)

124 
	#IRIX5


	)

127 #i‡
	`deföed
(
__NëBSD__
Ë&& deföed(
__MIPSEL__
)

128 #unde‡
ULTRIX


130 
	#mach_ty≥_known


	)

132 #i‡
	`deföed
(
DGUX
Ë&& (deföed(
i386
Ë|| deföed(
__i386__
))

133 
	#I386


	)

134 #i‚de‡
_USING_DGUX


135 
	#_USING_DGUX


	)

137 
	#mach_ty≥_known


	)

139 #i‡
	`deföed
(
£quít
Ë&& (deföed(
i386
Ë|| deföed(
__i386__
))

140 
	#I386


	)

141 
	#SEQUENT


	)

142 
	#mach_ty≥_known


	)

144 #i‡
	`deföed
(
sun
Ë&& (deföed(
i386
Ë|| deföed(
__i386__
))

145 
	#I386


	)

146 
	#SOLARIS


	)

147 
	#mach_ty≥_known


	)

149 #i‡
	`deföed
(
sun
Ë&& deföed(
__amd64
)

150 
	#X86_64


	)

151 
	#SOLARIS


	)

152 
	#mach_ty≥_known


	)

154 #i‡(
	`deföed
(
__OS2__
Ë|| deföed(
__EMX__
)Ë&& deföed(
__32BIT__
)

155 
	#I386


	)

156 
	#OS2


	)

157 
	#mach_ty≥_known


	)

159 #i‡
	`deföed
(
ibm032
)

160 #îr‹ 
IBM
 
PC
/
RT
 
no
 
l⁄gî
 
suµ‹ãd
.

162 #i‡
	`deföed
(
sun
Ë&& (deföed(
•¨c
Ë|| deföed(
__•¨c
))

163 
	#SPARC


	)

165 
	~<î∫o.h
>

166 
	#SOLARIS


	)

167 
	#mach_ty≥_known


	)

169 #i‡
	`deföed
(
•¨c
Ë&& deföed(
unix
Ë&& !deföed(
sun
Ë&& !deföed(
löux
) \

170 && !
	`deföed
(
__O≥nBSD__
Ë&& !deföed(
__NëBSD__
Ë&& !deföed(
__FªeBSD__
) \

171 && !
	$deföed
(
__Døg⁄Fly__
)

172 
	#SPARC


	)

173 
	#DRSNX


	)

174 
	#mach_ty≥_known


	)

176 #i‡
	`deföed
(
_IBMR2
)

177 
	#POWERPC


	)

178 
	#AIX


	)

179 
	#mach_ty≥_known


	)

181 #i‡
	`deföed
(
__NëBSD__
Ë&& deföed(
__•¨c__
)

182 
	#SPARC


	)

183 
	#mach_ty≥_known


	)

185 #i‡
	`deföed
(
_M_XENIX
Ë&& deföed(
_M_SYSV
Ë&& deföed(
_M_I386
)

187 
	#I386


	)

188 #i‡
	`deföed
(
_SCO_ELF
)

189 
	#SCO_ELF


	)

191 
	#SCO


	)

193 
	#mach_ty≥_known


	)

195 #i‡
	`deföed
(
_AUX_SOURCE
)

196 #îr‹ 
A
/
UX
 
no
 
l⁄gî
 
suµ‹ãd


198 #i‡
	`deföed
(
_PA_RISC1_0
Ë|| deföed(
_PA_RISC1_1
Ë|| deföed(
_PA_RISC2_0
) \

199 || 
	`deföed
(
hµa
Ë|| 
	$deföed
(
__hµa__
)

200 
	#HP_PA


	)

201 #i‡!
	`deföed
(
LINUX
Ë&& !deföed(
HPUX
)

202 
	#HPUX


	)

204 
	#mach_ty≥_known


	)

206 #i‡
	`deföed
(
__ü64
Ë&& (deföed(
_HPUX_SOURCE
Ë|| deföed(
__HP_aCC
))

207 
	#IA64


	)

208 #i‚de‡
HPUX


209 
	#HPUX


	)

211 
	#mach_ty≥_known


	)

213 #i‡
	`deföed
(
__BEOS__
Ë&& deföed(
_X86_
)

214 
	#I386


	)

215 
	#BEOS


	)

216 
	#mach_ty≥_known


	)

218 #i‡
	`deföed
(
LINUX
Ë&& (deföed(
i386
Ë|| deföed(
__i386__
))

219 
	#I386


	)

220 
	#mach_ty≥_known


	)

222 #i‡
	`deföed
(
LINUX
Ë&& deföed(
__x86_64__
)

223 
	#X86_64


	)

224 
	#mach_ty≥_known


	)

226 #i‡
	`deföed
(
LINUX
Ë&& (deföed(
__ü64__
Ë|| deföed(
__ü64
))

227 
	#IA64


	)

228 
	#mach_ty≥_known


	)

230 #i‡
	`deföed
(
LINUX
Ë&& deföed(
__¨m__
)

231 
	#ARM32


	)

232 
	#mach_ty≥_known


	)

234 #i‡
	`deföed
(
LINUX
Ë&& deföed(
__¸is__
)

235 #i‚de‡
CRIS


236 
	#CRIS


	)

238 
	#mach_ty≥_known


	)

240 #i‡
	`deföed
(
LINUX
Ë&& (deföed(
powîpc
Ë|| deföed(
__powîpc__
) || \

241 
	`deföed
(
powîpc64
Ë|| 
	$deföed
(
__powîpc64__
))

242 
	#POWERPC


	)

243 
	#mach_ty≥_known


	)

245 #i‡
	`deföed
(
FREEBSD
Ë&& (deföed(
powîpc
Ë|| deföed(
__powîpc__
))

246 
	#POWERPC


	)

247 
	#mach_ty≥_known


	)

249 #i‡
	`deföed
(
LINUX
Ë&& deföed(
__mc68000__
)

250 
	#M68K


	)

251 
	#mach_ty≥_known


	)

253 #i‡
	`deföed
(
LINUX
Ë&& (deföed(
•¨c
Ë|| deföed(
__•¨c__
))

254 
	#SPARC


	)

255 
	#mach_ty≥_known


	)

257 #i‡
	`deföed
(
LINUX
Ë&& deföed(
__¨m__
)

258 
	#ARM32


	)

259 
	#mach_ty≥_known


	)

261 #i‡
	`deföed
(
LINUX
Ë&& deföed(
__sh__
)

262 
	#SH


	)

263 
	#mach_ty≥_known


	)

265 #i‡
	`deföed
(
LINUX
Ë&& deföed(
__m32r__
)

266 
	#M32R


	)

267 
	#mach_ty≥_known


	)

269 #i‡
	`deföed
(
__Æpha
Ë|| deföed(
__Æpha__
)

270 
	#ALPHA


	)

271 #i‡!
	`deföed
(
LINUX
Ë&& !deföed(
NETBSD
Ë&& !deföed(
OPENBSD
Ë&& !deföed(
FREEBSD
)

272 
	#OSF1


	)

274 
	#mach_ty≥_known


	)

276 #i‡
	`deföed
(
_AMIGA
Ë&& !deföed(
AMIGA
)

277 
	#AMIGA


	)

279 #ifde‡
AMIGA


280 
	#M68K


	)

281 
	#mach_ty≥_known


	)

283 #i‡
	`deföed
(
THINK_C
Ë|| deföed(
__MWERKS__
Ë&& !deföed(
__powîc
)

284 
	#M68K


	)

285 
	#MACOS


	)

286 
	#mach_ty≥_known


	)

288 #i‡
	`deföed
(
__MWERKS__
Ë&& deföed(
__powîc
Ë&& !deföed(
__MACH__
)

289 
	#POWERPC


	)

290 
	#MACOS


	)

291 
	#mach_ty≥_known


	)

293 #i‡
	`deföed
(
macosx
Ë|| (deföed(
__APPLE__
Ë&& deföed(
__MACH__
))

294 
	#DARWIN


	)

295 #i‡
	`deföed
(
__µc__
Ë|| deföed(
__µc64__
)

296 
	#POWERPC


	)

297 
	#mach_ty≥_known


	)

298 #ñi‡
	`deföed
(
__x86_64__
)

299 
	#X86_64


	)

300 
	#mach_ty≥_known


	)

301 #ñi‡
	`deföed
(
__i386__
)

302 
	#I386


	)

303 
	#mach_ty≥_known


	)

306 #i‡
	`deföed
(
NeXT
Ë&& deföed(
mc68000
)

307 
	#M68K


	)

308 
	#NEXT


	)

309 
	#mach_ty≥_known


	)

311 #i‡
	`deföed
(
NeXT
Ë&& (deföed(
i386
Ë|| deföed(
__i386__
))

312 
	#I386


	)

313 
	#NEXT


	)

314 
	#mach_ty≥_known


	)

316 #i‡
	`deföed
(
__O≥nBSD__
Ë&& (deföed(
i386
Ë|| deföed(
__i386__
))

317 
	#I386


	)

318 
	#OPENBSD


	)

319 
	#mach_ty≥_known


	)

321 #i‡
	`deföed
(
FREEBSD
Ë&& (deföed(
i386
Ë|| deföed(
__i386__
))

322 
	#I386


	)

323 
	#mach_ty≥_known


	)

325 #i‡
	`deföed
(
FREEBSD
Ë&& deföed(
__x86_64__
)

326 
	#X86_64


	)

327 
	#mach_ty≥_known


	)

329 #i‡
	`deföed
(
__NëBSD__
Ë&& (deföed(
i386
Ë|| deföed(
__i386__
))

330 
	#I386


	)

331 
	#mach_ty≥_known


	)

333 #i‡
	`deföed
(
__NëBSD__
Ë&& deföed(
__x86_64__
)

334 
	#X86_64


	)

335 
	#mach_ty≥_known


	)

337 #i‡
	`deföed
(
FREEBSD
Ë&& deföed(
__•¨c__
)

338 
	#SPARC


	)

339 
	#mach_ty≥_known


	)

341 #i‡
	`deföed
(
bsdi
Ë&& (deföed(
i386
Ë|| deföed(
__i386__
))

342 
	#I386


	)

343 
	#BSDI


	)

344 
	#mach_ty≥_known


	)

346 #i‡!
	`deföed
(
mach_ty≥_known
Ë&& deföed(
__386BSD__
)

347 
	#I386


	)

348 
	#THREE86BSD


	)

349 
	#mach_ty≥_known


	)

351 #i‡
	`deföed
(
_CX_UX
Ë&& deföed(
_M88K
)

352 
	#M88K


	)

353 
	#CX_UX


	)

354 
	#mach_ty≥_known


	)

356 #i‡
	`deföed
(
DGUX
Ë&& deföed(
m88k
)

357 
	#M88K


	)

359 
	#mach_ty≥_known


	)

361 #i‡
	`deföed
(
_WIN32_WCE
)

363 #i‡
	`deföed
(
SH3
Ë|| deföed(
SH4
)

364 
	#SH


	)

366 #i‡
	`deföed
(
x86
)

367 
	#I386


	)

369 #i‡
	`deföed
(
ARM
)

370 
	#ARM32


	)

372 
	#MSWINCE


	)

373 
	#mach_ty≥_known


	)

375 #i‡(
	`deföed
(
_MSDOS
Ë|| deföed(
_MSC_VER
)Ë&& (
_M_IX86
 >= 300) \

376 || 
	`deföed
(
_WIN32
Ë&& !deföed(
__CYGWIN32__
Ë&& !
	$deföed
(
__CYGWIN__
)

377 #i‡
	`deföed
(
__LP64__
Ë|| deföed(
_WIN64
)

378 
	#X86_64


	)

380 
	#I386


	)

382 
	#MSWIN32


	)

383 
	#mach_ty≥_known


	)

385 #i‡
	`deföed
(
_MSC_VER
Ë&& deföed(
_M_IA64
)

386 
	#IA64


	)

387 
	#MSWIN32


	)

391 #i‡
	`deföed
(
__DJGPP__
)

392 
	#I386


	)

393 #i‚de‡
DJGPP


394 
	#DJGPP


	)

396 
	#mach_ty≥_known


	)

398 #i‡
	`deföed
(
__CYGWIN32__
Ë|| deföed(
__CYGWIN__
)

399 
	#I386


	)

400 
	#CYGWIN32


	)

401 
	#mach_ty≥_known


	)

403 #i‡
	`deföed
(
__MINGW32__
)

404 
	#I386


	)

405 
	#MSWIN32


	)

406 
	#mach_ty≥_known


	)

408 #i‡
	`deföed
(
__BORLANDC__
)

409 
	#I386


	)

410 
	#MSWIN32


	)

411 
	#mach_ty≥_known


	)

413 #i‡
	`deföed
(
_UTS
Ë&& !deföed(
mach_ty≥_known
)

414 
	#S370


	)

415 
	#UTS4


	)

416 
	#mach_ty≥_known


	)

418 #i‡
	`deföed
(
__pj__
)

419 #îr‹ 
PicoJava
 
no
 
l⁄gî
 
suµ‹ãd


423 #i‡
	`deföed
(
__embedded__
Ë&& deföed(
PPC
)

424 
	#POWERPC


	)

425 
	#NOSYS


	)

426 
	#mach_ty≥_known


	)

429 #i‡
	`deföed
(
__WATCOMC__
Ë&& deföed(
__386__
)

430 
	#I386


	)

431 #i‡!
	`deföed
(
OS2
Ë&& !deföed(
MSWIN32
Ë&& !deföed(
DOS4GW
)

432 #i‡
	`deföed
(
__OS2__
)

433 
	#OS2


	)

435 #i‡
	`deföed
(
__WINDOWS_386__
Ë|| deföed(
__NT__
)

436 
	#MSWIN32


	)

438 
	#DOS4GW


	)

442 
	#mach_ty≥_known


	)

444 #i‡
	`deföed
(
__s390__
Ë&& deföed(
LINUX
)

445 
	#S390


	)

446 
	#mach_ty≥_known


	)

448 #i‡
	`deföed
(
__GNU__
)

449 #i‡
	`deföed
(
__i386__
)

451 
	#HURD


	)

452 
	#I386


	)

453 
	#mach_ty≥_known


	)

456 #i‡
	`deföed
(
__TANDEM
)

459 
	#MIPS


	)

460 
	#NONSTOP


	)

461 
	#mach_ty≥_known


	)

472 #i‚de‡
mach_ty≥_known


640 #i‡
	`deföed
(
__GNUC__
) && ((__GNUC__ >= 3) || \

641 (
__GNUC__
 =2 && 
__GNUC_MINOR__
 >= 8)) \

642 && !
	`deföed
(
__INTEL_COMPILER
Ë&& !
	$deföed
(
__PATHCC__
)

643 
	#HAVE_BUILTIN_UNWIND_INIT


	)

646 
	#STACK_GRAN
 0x1000000

	)

647 #ifde‡
M68K


648 
	#MACH_TYPE
 "M68K"

	)

649 
	#ALIGNMENT
 2

	)

650 #ifde‡
OPENBSD


651 
	#OS_TYPE
 "OPENBSD"

	)

652 
	#HEURISTIC2


	)

653 #ifde‡
__ELF__


654 
	#DATASTART
 
GC_d©a_°¨t


	)

655 
	#DYNAMIC_LOADING


	)

657 
ëext
[];

658 
	#DATASTART
 ((
±r_t
)(
ëext
))

	)

661 #ifde‡
NETBSD


662 
	#OS_TYPE
 "NETBSD"

	)

663 
	#HEURISTIC2


	)

664 #ifde‡
__ELF__


665 
	#DATASTART
 
GC_d©a_°¨t


	)

666 
	#DYNAMIC_LOADING


	)

668 
ëext
[];

669 
	#DATASTART
 ((
±r_t
)(
ëext
))

	)

672 #ifde‡
LINUX


673 
	#OS_TYPE
 "LINUX"

	)

674 
	#LINUX_STACKBOTTOM


	)

675 
	#MPROTECT_VDB


	)

676 #ifde‡
__ELF__


677 
	#DYNAMIC_LOADING


	)

678 
	~<„©uªs.h
>

679 #i‡
	`deföed
(
__GLIBC__
)&& __GLIBC__>=2

680 
	#SEARCH_FOR_DATA_START


	)

682 **
__ívú⁄
;

683 
	#DATASTART
 ((
±r_t
)(&
__ívú⁄
))

	)

693 
_íd
[];

694 
	#DATAEND
 (
_íd
)

	)

696 
ëext
[];

697 
	#DATASTART
 ((
±r_t
)((((
w‹d
Ë(
ëext
)Ë+ 0xfffË& ~0xfff))

	)

700 #ifde‡
AMIGA


701 
	#OS_TYPE
 "AMIGA"

	)

704 
	#DATAEND


	)

705 
	#GETPAGESIZE
(Ë4096

	)

707 #ifde‡
MACOS


708 #i‚de‡
__LOWMEM__


709 
	~<LowMem.h
>

711 
	#OS_TYPE
 "MACOS"

	)

713 
	#STACKBOTTOM
 ((
±r_t
Ë
	`LMGëCurSèckBa£
())

	)

714 
	#DATAEND


	)

715 
	#GETPAGESIZE
(Ë4096

	)

717 #ifde‡
NEXT


718 
	#OS_TYPE
 "NEXT"

	)

719 
	#DATASTART
 ((
±r_t
Ë
	`gë_ëext
())

	)

720 
	#STACKBOTTOM
 ((
±r_t
Ë0x4000000)

	)

721 
	#DATAEND


	)

725 #i‡
	`deföed
(
POWERPC
)

726 
	#MACH_TYPE
 "POWERPC"

	)

727 #ifde‡
MACOS


728 
	#ALIGNMENT
 2

	)

729 #i‚de‡
__LOWMEM__


730 
	~<LowMem.h
>

732 
	#OS_TYPE
 "MACOS"

	)

734 
	#STACKBOTTOM
 ((
±r_t
Ë
	`LMGëCurSèckBa£
())

	)

735 
	#DATAEND


	)

737 #ifde‡
LINUX


738 #i‡
	`deföed
(
__powîpc64__
)

739 
	#ALIGNMENT
 8

	)

740 
	#CPP_WORDSZ
 64

	)

741 #i‚de‡
HBLKSIZE


742 
	#HBLKSIZE
 4096

	)

745 
	#ALIGNMENT
 4

	)

747 
	#OS_TYPE
 "LINUX"

	)

750 
	#LINUX_STACKBOTTOM


	)

751 
	#DYNAMIC_LOADING


	)

752 
	#SEARCH_FOR_DATA_START


	)

753 
_íd
[];

754 
	#DATAEND
 (
_íd
)

	)

756 #ifde‡
DARWIN


757 
	#OS_TYPE
 "DARWIN"

	)

758 
	#DYNAMIC_LOADING


	)

759 #i‡
	`deföed
(
__µc64__
)

760 
	#ALIGNMENT
 8

	)

761 
	#CPP_WORDSZ
 64

	)

762 
	#STACKBOTTOM
 ((
±r_t
Ë0x7fff5fc00000)

	)

763 
	#CACHE_LINE_SIZE
 64

	)

764 #i‚de‡
HBLKSIZE


765 
	#HBLKSIZE
 4096

	)

768 
	#ALIGNMENT
 4

	)

769 
	#STACKBOTTOM
 ((
±r_t
Ë0xc0000000)

	)

773 
	#DATASTART
 ((
±r_t
Ë
	`gë_ëext
())

	)

774 
	#DATAEND
 ((
±r_t
Ë
	`gë_íd
())

	)

775 
	#USE_MMAP


	)

776 
	#USE_MMAP_ANON


	)

777 #ifde‡
GC_DARWIN_THREADS


778 
	#MPROTECT_VDB


	)

780 
	~<uni°d.h
>

781 
	#GETPAGESIZE
(Ë
	`gë∑gesize
()

	)

782 #i‡
	`deföed
(
USE_PPC_PREFETCH
Ë&& deföed(
__GNUC__
)

784 
	#PREFETCH
(
x
) \

785 
__asm__
 
	`__vﬁ©ûe__
 ("dcbà0,%0" : : "r" ((c⁄° *Ë(
x
)))

	)

786 
	#PREFETCH_FOR_WRITE
(
x
) \

787 
__asm__
 
	`__vﬁ©ûe__
 ("dcbt° 0,%0" : : "r" ((c⁄° *Ë(
x
)))

	)

791 
	#NO_PTHREAD_TRYLOCK


	)

793 #ifde‡
FREEBSD


794 
	#ALIGNMENT
 4

	)

795 
	#OS_TYPE
 "FREEBSD"

	)

796 #i‚de‡
GC_FREEBSD_THREADS


797 
	#MPROTECT_VDB


	)

799 
	#SIG_SUSPEND
 
SIGUSR1


	)

800 
	#SIG_THR_RESTART
 
SIGUSR2


	)

801 
	#FREEBSD_STACKBOTTOM


	)

802 #ifde‡
__ELF__


803 
	#DYNAMIC_LOADING


	)

805 
ëext
[];

806 * 
	`GC_FªeBSDGëD©aSèπ
();

807 
	#DATASTART
 
	`GC_FªeBSDGëD©aSèπ
(0x1000, &
ëext
)

	)

809 #ifde‡
NETBSD


810 
	#ALIGNMENT
 4

	)

811 
	#OS_TYPE
 "NETBSD"

	)

812 
	#HEURISTIC2


	)

813 
ëext
[];

814 
	#DATASTART
 
GC_d©a_°¨t


	)

815 
	#DYNAMIC_LOADING


	)

817 #ifde‡
AIX


818 
	#OS_TYPE
 "AIX"

	)

819 #unde‡
ALIGNMENT


820 #ifde‡
IA64


821 #unde‡
IA64


825 #ifde‡
__64BIT__


826 
	#ALIGNMENT
 8

	)

827 
	#CPP_WORDSZ
 64

	)

828 
	#STACKBOTTOM
 ((
±r_t
)0x1000000000000000)

	)

830 
	#ALIGNMENT
 4

	)

831 
	#CPP_WORDSZ
 32

	)

832 
	#STACKBOTTOM
 ((
±r_t
)((
ul⁄g
)&
î∫o
))

	)

834 
	#USE_MMAP


	)

835 
	#USE_MMAP_ANON


	)

843 
_d©a
[], 
_íd
[];

844 
	#DATASTART
 ((
±r_t
)((
ul⁄g
)
_d©a
))

	)

845 
	#DATAEND
 ((
±r_t
)((
ul⁄g
)
_íd
))

	)

846 
î∫o
;

847 
	#DYNAMIC_LOADING


	)

851 #ifde‡
NOSYS


852 
	#ALIGNMENT
 4

	)

853 
	#OS_TYPE
 "NOSYS"

	)

854 
__íd
[], 
__dso_h™dÀ
[];

855 
	#DATASTART
 (
__dso_h™dÀ
Ë

	)

856 
	#DATAEND
 (
__íd
)

	)

858 #unde‡
STACK_GRAN


859 
	#STACK_GRAN
 0x10000000

	)

860 
	#HEURISTIC1


	)

864 #ifde‡
VAX


865 
	#MACH_TYPE
 "VAX"

	)

866 
	#ALIGNMENT
 4

	)

867 
ëext
[];

868 
	#DATASTART
 ((
±r_t
)(
ëext
))

	)

869 #ifde‡
BSD


870 
	#OS_TYPE
 "BSD"

	)

871 
	#HEURISTIC1


	)

874 #ifde‡
ULTRIX


875 
	#OS_TYPE
 "ULTRIX"

	)

876 
	#STACKBOTTOM
 ((
±r_t
Ë0x7fffc800)

	)

880 #ifde‡
SPARC


881 
	#MACH_TYPE
 "SPARC"

	)

882 #i‡
	`deföed
(
__¨ch64__
Ë|| deföed(
__•¨cv9
)

883 
	#ALIGNMENT
 8

	)

884 
	#CPP_WORDSZ
 64

	)

885 
	#ELF_CLASS
 
ELFCLASS64


	)

887 
	#ALIGNMENT
 4

	)

888 
	#CPP_WORDSZ
 32

	)

892 #ifde‡
SOLARIS


893 
	#OS_TYPE
 "SOLARIS"

	)

894 
_ëext
[];

895 
_íd
[];

896 
±r_t
 
	`GC_SysVGëD©aSèπ
(
size_t
,Ötr_t);

897 
	#DATASTART
 
	`GC_SysVGëD©aSèπ
(0x10000, (
±r_t
)
_ëext
)

	)

898 
	#DATAEND
 (
_íd
)

	)

899 #i‡!
	`deföed
(
USE_MMAP
Ë&& deföed(
REDIRECT_MALLOC
)

900 
	#USE_MMAP


	)

906 #ifde‡
USE_MMAP


907 
	#HEAP_START
 (
±r_t
)0x40000000

	)

909 
	#HEAP_START
 
DATAEND


	)

911 
	#PROC_VDB


	)

917 
	~<sys/vm∑øm.h
>

918 #ifde‡
USERLIMIT


920 
	#STACKBOTTOM
 
USRSTACK


	)

922 
	#HEURISTIC2


	)

924 
	~<uni°d.h
>

925 
	#GETPAGESIZE
(Ë
	`sysc⁄f
(
_SC_PAGESIZE
)

	)

928 
	#DYNAMIC_LOADING


	)

930 #ifde‡
DRSNX


931 
	#OS_TYPE
 "DRSNX"

	)

932 
±r_t
 
	`GC_SysVGëD©aSèπ
(
size_t
,Ötr_t);

933 
ëext
[];

934 
	#DATASTART
 
	`GC_SysVGëD©aSèπ
(0x10000, (
±r_t
)
ëext
)

	)

935 
	#MPROTECT_VDB


	)

936 
	#STACKBOTTOM
 ((
±r_t
Ë0xdfff0000)

	)

937 
	#DYNAMIC_LOADING


	)

939 #ifde‡
LINUX


940 
	#OS_TYPE
 "LINUX"

	)

941 #ifde‡
__ELF__


942 
	#DYNAMIC_LOADING


	)

944 
Löux
 
S∑rc
/
a
.
out
 
nŸ
 
suµ‹ãd


946 
_íd
[];

947 
_ëext
[];

948 
	#DATAEND
 (
_íd
)

	)

949 
	#SVR4


	)

950 
±r_t
 
	`GC_SysVGëD©aSèπ
(
size_t
,Ötr_t);

951 #ifde‡
__¨ch64__


952 
	#DATASTART
 
	`GC_SysVGëD©aSèπ
(0x100000, (
±r_t
)
_ëext
)

	)

954 
	#DATASTART
 
	`GC_SysVGëD©aSèπ
(0x10000, (
±r_t
)
_ëext
)

	)

956 
	#LINUX_STACKBOTTOM


	)

958 #ifde‡
OPENBSD


959 
	#OS_TYPE
 "OPENBSD"

	)

960 
	#STACKBOTTOM
 ((
±r_t
Ë0xf8000000)

	)

961 
ëext
[];

962 
	#DATASTART
 ((
±r_t
)(
ëext
))

	)

964 #ifde‡
NETBSD


965 
	#OS_TYPE
 "NETBSD"

	)

966 
	#HEURISTIC2


	)

967 #ifde‡
__ELF__


968 
	#DATASTART
 
GC_d©a_°¨t


	)

969 
	#DYNAMIC_LOADING


	)

971 
ëext
[];

972 
	#DATASTART
 ((
±r_t
)(
ëext
))

	)

975 #ifde‡
FREEBSD


976 
	#OS_TYPE
 "FREEBSD"

	)

977 
	#SIG_SUSPEND
 
SIGUSR1


	)

978 
	#SIG_THR_RESTART
 
SIGUSR2


	)

979 
	#FREEBSD_STACKBOTTOM


	)

980 #ifde‡
__ELF__


981 
	#DYNAMIC_LOADING


	)

983 
ëext
[];

984 
ed©a
[];

985 
íd
[];

986 
	#NEED_FIND_LIMIT


	)

987 
	#DATASTART
 ((
±r_t
)(&
ëext
))

	)

988 
	#DATAEND
 (
	`GC_föd_limô
 (
DATASTART
, 
TRUE
))

	)

989 
	#DATASTART2
 ((
±r_t
)(&
ed©a
))

	)

990 
	#DATAEND2
 ((
±r_t
)(&
íd
))

	)

994 #ifde‡
I386


995 
	#MACH_TYPE
 "I386"

	)

996 #i‡
	`deföed
(
__LP64__
Ë|| deföed(
_WIN64
)

997 #îr‹ 
This
 
should
 
be
 
h™dÀd
 
as
 
X86_64


999 
	#CPP_WORDSZ
 32

	)

1000 
	#ALIGNMENT
 4

	)

1006 #ifde‡
SEQUENT


1007 
	#OS_TYPE
 "SEQUENT"

	)

1008 
ëext
[];

1009 
	#DATASTART
 ((
±r_t
)((((
w‹d
Ë(
ëext
)Ë+ 0xfffË& ~0xfff))

	)

1010 
	#STACKBOTTOM
 ((
±r_t
Ë0x3ffff000)

	)

1012 #ifde‡
BEOS


1013 
	#OS_TYPE
 "BEOS"

	)

1014 
	~<OS.h
>

1015 
	#GETPAGESIZE
(Ë
B_PAGE_SIZE


	)

1016 
ëext
[];

1017 
	#DATASTART
 ((
±r_t
)((((
w‹d
Ë(
ëext
)Ë+ 0xfffË& ~0xfff))

	)

1019 #ifde‡
SOLARIS


1020 
	#OS_TYPE
 "SOLARIS"

	)

1021 
_ëext
[], 
_íd
[];

1022 
±r_t
 
	`GC_SysVGëD©aSèπ
(
size_t
,Ötr_t);

1023 
	#DATASTART
 
	`GC_SysVGëD©aSèπ
(0x1000, (
±r_t
)
_ëext
)

	)

1024 
	#DATAEND
 (
_íd
)

	)

1030 
	~<sys/vm.h
>

1031 
	#STACKBOTTOM
 
USRSTACK


	)

1034 #ifde‡
SOLARIS25_PROC_VDB_BUG_FIXED


1035 
	#PROC_VDB


	)

1037 
	#DYNAMIC_LOADING


	)

1038 #i‡!
	`deföed
(
USE_MMAP
Ë&& deföed(
REDIRECT_MALLOC
)

1039 
	#USE_MMAP


	)

1045 #ifde‡
USE_MMAP


1046 
	#HEAP_START
 (
±r_t
)0x40000000

	)

1048 
	#HEAP_START
 
DATAEND


	)

1051 #ifde‡
SCO


1052 
	#OS_TYPE
 "SCO"

	)

1053 
ëext
[];

1054 
	#DATASTART
 ((
±r_t
)((((
w‹d
Ë(
ëext
)) + 0x3fffff) \

1056 +((
w‹d
)
ëext
 & 0xfff))

	)

1057 
	#STACKBOTTOM
 ((
±r_t
Ë0x7ffffffc)

	)

1059 #ifde‡
SCO_ELF


1060 
	#OS_TYPE
 "SCO_ELF"

	)

1061 
ëext
[];

1062 
	#DATASTART
 ((
±r_t
)(
ëext
))

	)

1063 
	#STACKBOTTOM
 ((
±r_t
Ë0x08048000)

	)

1064 
	#DYNAMIC_LOADING


	)

1065 
	#ELF_CLASS
 
ELFCLASS32


	)

1067 #ifde‡
DGUX


1068 
	#OS_TYPE
 "DGUX"

	)

1069 
_ëext
, 
_íd
;

1070 
±r_t
 
	`GC_SysVGëD©aSèπ
(
size_t
,Ötr_t);

1071 
	#DATASTART
 
	`GC_SysVGëD©aSèπ
(0x1000, (
±r_t
)(&
_ëext
))

	)

1072 
	#DATAEND
 (&
_íd
)

	)

1073 
	#STACK_GROWS_DOWN


	)

1074 
	#HEURISTIC2


	)

1075 
	~<uni°d.h
>

1076 
	#GETPAGESIZE
(Ë
	`sysc⁄f
(
_SC_PAGESIZE
)

	)

1077 
	#DYNAMIC_LOADING


	)

1078 #i‚de‡
USE_MMAP


1079 
	#USE_MMAP


	)

1081 
	#MAP_FAILED
 (*Ë-1

	)

1082 #ifde‡
USE_MMAP


1083 
	#HEAP_START
 (
±r_t
)0x40000000

	)

1085 
	#HEAP_START
 
DATAEND


	)

1089 #ifde‡
LINUX


1090 
	#OS_TYPE
 "LINUX"

	)

1091 
	#LINUX_STACKBOTTOM


	)

1093 
	#HEURISTIC1


	)

1094 #unde‡
STACK_GRAN


1095 
	#STACK_GRAN
 0x10000000

	)

1101 #i‡!
	`deföed
(
GC_LINUX_THREADS
Ë|| !deföed(
REDIRECT_MALLOC
)

1102 
	#MPROTECT_VDB


	)

1108 
	#HEAP_START
 (
±r_t
)0x1000

	)

1111 #ifde‡
__ELF__


1112 
	#DYNAMIC_LOADING


	)

1113 #ifde‡
UNDEFINED


1114 
_ëext
[];

1115 
	#DATASTART
 ((
±r_t
)((((
w‹d
Ë(
_ëext
)Ë+ 0xfffË& ~0xfff))

	)

1117 
	~<„©uªs.h
>

1118 #i‡
	`deföed
(
__GLIBC__
) && __GLIBC__ >= 2

1119 
	#SEARCH_FOR_DATA_START


	)

1121 **
__ívú⁄
;

1122 
	#DATASTART
 ((
±r_t
)(&
__ívú⁄
))

	)

1132 
_íd
[];

1133 
	#DATAEND
 (
_íd
)

	)

1135 
ëext
[];

1136 
	#DATASTART
 ((
±r_t
)((((
w‹d
Ë(
ëext
)Ë+ 0xfffË& ~0xfff))

	)

1138 #ifde‡
USE_I686_PREFETCH


1141 
	#PREFETCH
(
x
) \

1142 
__asm__
 
	`__vﬁ©ûe__
 ("Öª„tch¡a %0": : "m"(*(*)(
x
)))

	)

1150 
	#PREFETCH_FOR_WRITE
(
x
) \

1151 
__asm__
 
	`__vﬁ©ûe__
 ("Öª„tcht0 %0": : "m"(*(*)(
x
)))

	)

1154 #ifde‡
USE_3DNOW_PREFETCH


1155 
	#PREFETCH
(
x
) \

1156 
__asm__
 
	`__vﬁ©ûe__
 ("Öª„tch %0": : "m"(*(*)(
x
)))

	)

1157 
	#PREFETCH_FOR_WRITE
(
x
) \

1158 
__asm__
 
	`__vﬁ©ûe__
 ("Öª„tchw %0": : "m"(*(*)(
x
)))

	)

1161 #ifde‡
CYGWIN32


1162 
	#OS_TYPE
 "CYGWIN32"

	)

1163 
	#DATASTART
 ((
±r_t
)
GC_DATASTART
Ë

	)

1164 
	#DATAEND
 ((
±r_t
)
GC_DATAEND
)

	)

1165 #unde‡
STACK_GRAN


1166 
	#STACK_GRAN
 0x10000

	)

1167 
	#HEURISTIC1


	)

1169 #ifde‡
OS2


1170 
	#OS_TYPE
 "OS2"

	)

1174 
	#DATAEND


	)

1176 #ifde‡
MSWIN32


1177 
	#OS_TYPE
 "MSWIN32"

	)

1180 #i‡!
	`deföed
(
__WATCOMC__
)

1181 
	#MPROTECT_VDB


	)

1185 #i‡
_MSC_VER
 >= 1300

1186 
	#GWW_VDB


	)

1188 
	#DATAEND


	)

1190 #ifde‡
MSWINCE


1191 
	#OS_TYPE
 "MSWINCE"

	)

1192 
	#DATAEND


	)

1194 #ifde‡
DJGPP


1195 
	#OS_TYPE
 "DJGPP"

	)

1196 
	~"°uböfo.h
"

1197 
ëext
[];

1198 
_°kÀn
;

1199 
__djgµ_°ack_limô
;

1200 
	#DATASTART
 ((
±r_t
)((((
w‹d
Ë(
ëext
)Ë+ 0x1ffË& ~0x1ff))

	)

1203 
	#STACKBOTTOM
 ((
±r_t
)((
w‹d
Ë
__djgµ_°ack_limô
 + 
_°kÀn
))

	)

1206 #ifde‡
OPENBSD


1207 
	#OS_TYPE
 "OPENBSD"

	)

1209 #ifde‡
FREEBSD


1210 
	#OS_TYPE
 "FREEBSD"

	)

1211 #i‚de‡
GC_FREEBSD_THREADS


1212 
	#MPROTECT_VDB


	)

1214 #ifde‡
__GLIBC__


1215 
	#SIG_SUSPEND
 (32+6)

	)

1216 
	#SIG_THR_RESTART
 (32+5)

	)

1217 
_íd
[];

1218 
	#DATAEND
 (
_íd
)

	)

1220 
	#SIG_SUSPEND
 
SIGUSR1


	)

1221 
	#SIG_THR_RESTART
 
SIGUSR2


	)

1223 
	#FREEBSD_STACKBOTTOM


	)

1224 #ifde‡
__ELF__


1225 
	#DYNAMIC_LOADING


	)

1227 
ëext
[];

1228 * 
	`GC_FªeBSDGëD©aSèπ
(
size_t
, 
±r_t
);

1229 
	#DATASTART
 
	`GC_FªeBSDGëD©aSèπ
(0x1000, (
±r_t
)
ëext
)

	)

1231 #ifde‡
NETBSD


1232 
	#OS_TYPE
 "NETBSD"

	)

1233 #ifde‡
__ELF__


1234 
	#DYNAMIC_LOADING


	)

1237 #ifde‡
THREE86BSD


1238 
	#OS_TYPE
 "THREE86BSD"

	)

1240 #ifde‡
BSDI


1241 
	#OS_TYPE
 "BSDI"

	)

1243 #i‡
	`deföed
(
OPENBSD
Ë|| deföed(
NETBSD
) \

1244 || 
	`deföed
(
THREE86BSD
Ë|| 
	$deföed
(
BSDI
)

1245 
	#HEURISTIC2


	)

1246 
ëext
[];

1247 
	#DATASTART
 ((
±r_t
)(
ëext
))

	)

1249 #ifde‡
NEXT


1250 
	#OS_TYPE
 "NEXT"

	)

1251 
	#DATASTART
 ((
±r_t
Ë
	`gë_ëext
())

	)

1252 
	#STACKBOTTOM
 ((
±r_t
)0xc0000000)

	)

1253 
	#DATAEND


	)

1255 #ifde‡
DOS4GW


1256 
	#OS_TYPE
 "DOS4GW"

	)

1257 
__nuŒ¨ó
;

1258 
_íd
;

1259 *
_STACKTOP
;

1263 #¥agm®
aux
 
__nuŒ¨ó
 "*";

1264 #¥agm®
aux
 
_íd
 "*";

1265 
	#STACKBOTTOM
 ((
±r_t
Ë
_STACKTOP
)

	)

1267 
	#DATASTART
 ((
±r_t
Ë&
__nuŒ¨ó
)

	)

1268 
	#DATAEND
 ((
±r_t
Ë&
_íd
)

	)

1270 #ifde‡
HURD


1271 
	#OS_TYPE
 "HURD"

	)

1272 
	#STACK_GROWS_DOWN


	)

1273 
	#HEURISTIC2


	)

1274 
	#SIG_SUSPEND
 
SIGUSR1


	)

1275 
	#SIG_THR_RESTART
 
SIGUSR2


	)

1276 
	#SEARCH_FOR_DATA_START


	)

1277 
_íd
[];

1278 
	#DATAEND
 ((
±r_t
Ë(
_íd
))

	)

1280 
	#DYNAMIC_LOADING


	)

1282 #ifde‡
DARWIN


1283 
	#OS_TYPE
 "DARWIN"

	)

1284 
	#DARWIN_DONT_PARSE_STACK


	)

1285 
	#DYNAMIC_LOADING


	)

1288 
	#DATASTART
 ((
±r_t
Ë
	`gë_ëext
())

	)

1289 
	#DATAEND
 ((
±r_t
Ë
	`gë_íd
())

	)

1290 
	#STACKBOTTOM
 ((
±r_t
Ë0xc0000000)

	)

1291 
	#USE_MMAP


	)

1292 
	#USE_MMAP_ANON


	)

1293 #ifde‡
GC_DARWIN_THREADS


1294 
	#MPROTECT_VDB


	)

1296 
	~<uni°d.h
>

1297 
	#GETPAGESIZE
(Ë
	`gë∑gesize
()

	)

1300 
	#NO_PTHREAD_TRYLOCK


	)

1304 #ifde‡
NS32K


1305 
	#MACH_TYPE
 "NS32K"

	)

1306 
	#ALIGNMENT
 4

	)

1307 **
ívú⁄
;

1308 
	#DATASTART
 ((
±r_t
)(&
ívú⁄
))

	)

1313 
	#STACKBOTTOM
 ((
±r_t
Ë0xfffff000Ë

	)

1316 #ifde‡
MIPS


1317 
	#MACH_TYPE
 "MIPS"

	)

1318 #ifde‡
LINUX


1321 
	#OS_TYPE
 "LINUX"

	)

1322 
	#DYNAMIC_LOADING


	)

1323 
_íd
[];

1324 
	#DATAEND
 (
_íd
)

	)

1325 
__d©a_°¨t
[];

1326 
	#DATASTART
 ((
±r_t
)(
__d©a_°¨t
))

	)

1327 #ifde‡
_MIPS_SZPTR


1328 
	#CPP_WORDSZ
 
_MIPS_SZPTR


	)

1329 
	#ALIGNMENT
 (
_MIPS_SZPTR
/8)

	)

1331 
	#ALIGNMENT
 4

	)

1333 #i‡
__GLIBC__
 =2 && 
__GLIBC_MINOR__
 >= 2 || __GLIBC__ > 2

1334 
	#LINUX_STACKBOTTOM


	)

1336 
	#STACKBOTTOM
 0x80000000

	)

1339 #ifde‡
EWS4800


1340 
	#HEURISTIC2


	)

1341 #i‡
	`deföed
(
_MIPS_SZPTR
) && (_MIPS_SZPTR == 64)

1342 
_fd©a
[], 
_íd
[];

1343 
	#DATASTART
 ((
±r_t
)
_fd©a
)

	)

1344 
	#DATAEND
 ((
±r_t
)
_íd
)

	)

1345 
	#CPP_WORDSZ
 
_MIPS_SZPTR


	)

1346 
	#ALIGNMENT
 (
_MIPS_SZPTR
/8)

	)

1348 
ëext
[], 
ed©a
[], 
íd
[];

1349 
_DYNAMIC_LINKING
[], 
_gp
[];

1350 
	#DATASTART
 ((
±r_t
)((((
w‹d
)
ëext
 + 0x3ffff) & ~0x3ffff) \

1351 + ((
w‹d
)
ëext
 & 0xffff)))

	)

1352 
	#DATAEND
 (
ed©a
)

	)

1353 
	#DATASTART2
 (
_DYNAMIC_LINKING
 \

1354 ? (
±r_t
)(((
w‹d
)
_gp
 + 0x8000 + 0x3ffff) & ~0x3ffff) \

1355 : (
±r_t
)
ed©a
)

	)

1356 
	#DATAEND2
 (
íd
)

	)

1357 
	#ALIGNMENT
 4

	)

1359 
	#OS_TYPE
 "EWS4800"

	)

1361 #ifde‡
ULTRIX


1362 
	#HEURISTIC2


	)

1363 
	#DATASTART
 (
±r_t
)0x10000000

	)

1366 
	#OS_TYPE
 "ULTRIX"

	)

1367 
	#ALIGNMENT
 4

	)

1369 #ifde‡
IRIX5


1370 
	#HEURISTIC2


	)

1371 
_fd©a
[];

1372 
	#DATASTART
 ((
±r_t
)(
_fd©a
))

	)

1373 #ifde‡
USE_MMAP


1374 
	#HEAP_START
 (
±r_t
)0x30000000

	)

1376 
	#HEAP_START
 
DATASTART


	)

1383 
	#OS_TYPE
 "IRIX5"

	)

1386 #ifde‡
_MIPS_SZPTR


1387 
	#CPP_WORDSZ
 
_MIPS_SZPTR


	)

1388 
	#ALIGNMENT
 (
_MIPS_SZPTR
/8)

	)

1390 
	#ALIGNMENT
 4

	)

1392 
	#DYNAMIC_LOADING


	)

1394 #ifde‡
MSWINCE


1395 
	#OS_TYPE
 "MSWINCE"

	)

1396 
	#ALIGNMENT
 4

	)

1397 
	#DATAEND


	)

1399 #i‡
	`deföed
(
NETBSD
)

1400 
	#OS_TYPE
 "NETBSD"

	)

1401 
	#ALIGNMENT
 4

	)

1402 
	#HEURISTIC2


	)

1403 #ifde‡
__ELF__


1404 
ëext
[];

1405 
	#DATASTART
 
GC_d©a_°¨t


	)

1406 
	#NEED_FIND_LIMIT


	)

1407 
	#DYNAMIC_LOADING


	)

1409 
	#DATASTART
 ((
±r_t
Ë0x10000000)

	)

1410 
	#STACKBOTTOM
 ((
±r_t
Ë0x7ffff000)

	)

1413 #i‡
	`deföed
(
NONSTOP
)

1414 
	#CPP_WORDSZ
 32

	)

1415 
	#OS_TYPE
 "NONSTOP"

	)

1416 
	#ALIGNMENT
 4

	)

1417 
	#DATASTART
 ((
±r_t
Ë0x08000000)

	)

1418 **
ívú⁄
;

1419 
	#DATAEND
 ((
±r_t
)(
ívú⁄
 - 0x10))

	)

1420 
	#STACKBOTTOM
 ((
±r_t
Ë0x4fffffff)

	)

1424 #ifde‡
HP_PA


1425 
	#MACH_TYPE
 "HP_PA"

	)

1426 #ifde‡
__LP64__


1427 
	#CPP_WORDSZ
 64

	)

1428 
	#ALIGNMENT
 8

	)

1430 
	#CPP_WORDSZ
 32

	)

1431 
	#ALIGNMENT
 4

	)

1433 #i‡!
	`deföed
(
GC_HPUX_THREADS
Ë&& !deföed(
GC_LINUX_THREADS
)

1434 #i‚de‡
LINUX


1435 
	#MPROTECT_VDB


	)

1438 #ifde‡
PARALLEL_MARK


1439 
	#USE_MARK_BYTES


	)

1443 
	#STACK_GROWS_UP


	)

1444 #ifde‡
HPUX


1445 
	#OS_TYPE
 "HPUX"

	)

1446 
__d©a_°¨t
[];

1447 
	#DATASTART
 ((
±r_t
)(
__d©a_°¨t
))

	)

1456 
	#STACKBOTTOM
 ((
±r_t
Ë0x7b033000Ë

	)

1461 ** 
ívú⁄
;

1462 
	#STACKBOTTOM
 ((
±r_t
)
ívú⁄
)

	)

1464 
	#DYNAMIC_LOADING


	)

1465 
	~<uni°d.h
>

1466 
	#GETPAGESIZE
(Ë
	`sysc⁄f
(
_SC_PAGE_SIZE
)

	)

1467 #i‚de‡
__GNUC__


1468 
	#PREFETCH
(
x
) { \

1469 
addr
 = ()(
x
); \

1470 (Ë
	`_asm
 ("LDW", 0, 0, 
addr
, 0); \

1471 
	}

	)
}

1474 #ifde‡
LINUX


1475 
	#OS_TYPE
 "LINUX"

	)

1476 
	#LINUX_STACKBOTTOM


	)

1477 
	#DYNAMIC_LOADING


	)

1478 
	#SEARCH_FOR_DATA_START


	)

1479 
_íd
[];

1480 
	#DATAEND
 (&
_íd
)

	)

1484 #ifde‡
ALPHA


1485 
	#MACH_TYPE
 "ALPHA"

	)

1486 
	#ALIGNMENT
 8

	)

1487 
	#CPP_WORDSZ
 64

	)

1488 #ifde‡
NETBSD


1489 
	#OS_TYPE
 "NETBSD"

	)

1490 
	#HEURISTIC2


	)

1491 
	#DATASTART
 
GC_d©a_°¨t


	)

1492 
	#ELFCLASS32
 32

	)

1493 
	#ELFCLASS64
 64

	)

1494 
	#ELF_CLASS
 
ELFCLASS64


	)

1495 
	#DYNAMIC_LOADING


	)

1497 #ifde‡
OPENBSD


1498 
	#OS_TYPE
 "OPENBSD"

	)

1499 
	#HEURISTIC2


	)

1500 #ifde‡
__ELF__


1501 
	#DATASTART
 
GC_d©a_°¨t


	)

1502 
	#ELFCLASS32
 32

	)

1503 
	#ELFCLASS64
 64

	)

1504 
	#ELF_CLASS
 
ELFCLASS64


	)

1506 
	#DATASTART
 ((
±r_t
Ë0x140000000)

	)

1509 #ifde‡
FREEBSD


1510 
	#OS_TYPE
 "FREEBSD"

	)

1512 
	#SIG_SUSPEND
 
SIGUSR1


	)

1513 
	#SIG_THR_RESTART
 
SIGUSR2


	)

1514 
	#FREEBSD_STACKBOTTOM


	)

1515 #ifde‡
__ELF__


1516 
	#DYNAMIC_LOADING


	)

1519 
ëext
[];

1520 
ed©a
[];

1521 
íd
[];

1522 
	#NEED_FIND_LIMIT


	)

1523 
	#DATASTART
 ((
±r_t
)(&
ëext
))

	)

1524 
	#DATAEND
 (
	`GC_föd_limô
 (
DATASTART
, 
TRUE
))

	)

1525 
	#DATASTART2
 ((
±r_t
)(&
ed©a
))

	)

1526 
	#DATAEND2
 ((
±r_t
)(&
íd
))

	)

1528 #ifde‡
OSF1


1529 
	#OS_TYPE
 "OSF1"

	)

1530 
	#DATASTART
 ((
±r_t
Ë0x140000000)

	)

1531 
_íd
[];

1532 
	#DATAEND
 ((
±r_t
Ë&
_íd
)

	)

1533 ** 
ívú⁄
;

1537 
	#STACKBOTTOM
 ((
±r_t
)(((
w‹d
)(
ívú⁄
Ë| (
	`gë∑gesize
()-1))+1))

	)

1543 
__°¨t
[];

1544 
	#HEURISTIC2_LIMIT
 ((
±r_t
)((
w‹d
)(
__°¨t
Ë& ~(
	`gë∑gesize
()-1)))

	)

1545 #i‚de‡
GC_OSF1_THREADS


1547 
	#MPROTECT_VDB


	)

1549 
	#DYNAMIC_LOADING


	)

1551 #ifde‡
LINUX


1552 
	#OS_TYPE
 "LINUX"

	)

1553 
	#LINUX_STACKBOTTOM


	)

1554 #ifde‡
__ELF__


1555 
	#SEARCH_FOR_DATA_START


	)

1556 
	#DYNAMIC_LOADING


	)

1558 
	#DATASTART
 ((
±r_t
Ë0x140000000)

	)

1560 
_íd
[];

1561 
	#DATAEND
 (
_íd
)

	)

1562 
	#MPROTECT_VDB


	)

1568 #ifde‡
IA64


1569 
	#MACH_TYPE
 "IA64"

	)

1570 #ifde‡
HPUX


1571 #ifde‡
_ILP32


1572 
	#CPP_WORDSZ
 32

	)

1574 
	#ALIGNMENT
 4

	)

1576 #i‚de‡
_LP64


1577 ---> 
unknown
 
	gABI


1579 
	#CPP_WORDSZ
 64

	)

1581 
	#ALIGNMENT
 8

	)

1583 
	#OS_TYPE
 "HPUX"

	)

1584 
__d©a_°¨t
[];

1585 
	#DATASTART
 ((
±r_t
)(
__d©a_°¨t
))

	)

1589 ** 
ívú⁄
;

1590 
	#STACKBOTTOM
 ((
±r_t
)
ívú⁄
)

	)

1591 
	#HPUX_STACKBOTTOM


	)

1592 
	#DYNAMIC_LOADING


	)

1593 
	~<uni°d.h
>

1594 
	#GETPAGESIZE
(Ë
	`sysc⁄f
(
_SC_PAGE_SIZE
)

	)

1599 
	#BACKING_STORE_DISPLACEMENT
 0x1000000

	)

1600 
	#BACKING_STORE_ALIGNMENT
 0x1000

	)

1601 
±r_t
 
GC_ªgi°î_°ackbŸtom
;

1602 
	#BACKING_STORE_BASE
 
GC_ªgi°î_°ackbŸtom


	)

1605 #ifde‡
LINUX


1606 
	#CPP_WORDSZ
 64

	)

1607 
	#ALIGNMENT
 8

	)

1608 
	#OS_TYPE
 "LINUX"

	)

1612 
	#LINUX_STACKBOTTOM


	)

1617 
	#BACKING_STORE_ALIGNMENT
 0x100000

	)

1618 
	#BACKING_STORE_DISPLACEMENT
 0x80000000

	)

1619 
±r_t
 
GC_ªgi°î_°ackbŸtom
;

1620 
	#BACKING_STORE_BASE
 
GC_ªgi°î_°ackbŸtom


	)

1621 
	#SEARCH_FOR_DATA_START


	)

1622 #ifde‡
__GNUC__


1623 
	#DYNAMIC_LOADING


	)

1629 
	#MPROTECT_VDB


	)

1631 
_íd
[];

1632 
	#DATAEND
 (
_íd
)

	)

1633 #ifde‡
__GNUC__


1634 #i‚de‡
__INTEL_COMPILER


1635 
	#PREFETCH
(
x
) \

1636 
	`__asm__
 ("Ü„tch [%0]": : "r"(
x
))

	)

1637 
	#PREFETCH_FOR_WRITE
(
x
) \

1638 
	`__asm__
 ("Ü„tch.ex˛ [%0]": : "r"(
x
))

	)

1639 
	#CLEAR_DOUBLE
(
x
) \

1640 
	`__asm__
 (" stf.•ûl [%0]=f0": : "r"((*)(
x
)))

	)

1642 
	~<ü64öåö.h
>

1643 
	#PREFETCH
(
x
) \

1644 
	`__l„tch
(
__lfhöt_n⁄e
, (
x
))

	)

1645 
	#PREFETCH_FOR_WRITE
(
x
) \

1646 
	`__l„tch
(
__lfhöt_¡a
, (
x
))

	)

1647 
	#CLEAR_DOUBLE
(
x
) \

1648 
	`__°f_•ûl
((*)(
x
), 0)

	)

1652 #ifde‡
MSWIN32


1654 
	#OS_TYPE
 "MSWIN32"

	)

1657 
	#DATAEND


	)

1658 #i‡
deföed
(
_WIN64
)

1659 
	#CPP_WORDSZ
 64

	)

1661 
	#CPP_WORDSZ
 32

	)

1663 
	#ALIGNMENT
 8

	)

1664 
	#STRTOULL
 
_°πoui64


	)

1668 #ifde‡
M88K


1669 
	#MACH_TYPE
 "M88K"

	)

1670 
	#ALIGNMENT
 4

	)

1671 
ëext
[];

1672 #ifde‡
CX_UX


1673 
	#OS_TYPE
 "CX_UX"

	)

1674 
	#DATASTART
 ((((
w‹d
)
ëext
 + 0x3fffffË& ~0x3fffffË+ 0x10000)

	)

1676 #ifde‡ 
DGUX


1677 
	#OS_TYPE
 "DGUX"

	)

1678 
±r_t
 
GC_SysVGëD©aSèπ
(
size_t
,Ötr_t);

1679 
	#DATASTART
 
	`GC_SysVGëD©aSèπ
(0x10000, (
±r_t
)
ëext
)

	)

1681 
	#STACKBOTTOM
 ((*)0xf0000000Ë

	)

1684 #ifde‡
S370


1687 
	#MACH_TYPE
 "S370"

	)

1688 
	#ALIGNMENT
 4

	)

1689 #ifde‡
UTS4


1690 
	#OS_TYPE
 "UTS4"

	)

1691 
ëext
[];

1692 
_ëext
[];

1693 
_íd
[];

1694 
±r_t
 
GC_SysVGëD©aSèπ
(
size_t
,Ötr_t);

1695 
	#DATASTART
 
	`GC_SysVGëD©aSèπ
(0x10000, (
±r_t
)
_ëext
)

	)

1696 
	#DATAEND
 (
_íd
)

	)

1697 
	#HEURISTIC2


	)

1701 #ifde‡
S390


1702 
	#MACH_TYPE
 "S390"

	)

1703 #i‚de‡
__s390x__


1704 
	#ALIGNMENT
 4

	)

1705 
	#CPP_WORDSZ
 32

	)

1707 
	#ALIGNMENT
 8

	)

1708 
	#CPP_WORDSZ
 64

	)

1709 #i‚de‡
HBLKSIZE


1710 
	#HBLKSIZE
 4096

	)

1713 #ifde‡
LINUX


1714 
	#OS_TYPE
 "LINUX"

	)

1715 
	#LINUX_STACKBOTTOM


	)

1716 
	#DYNAMIC_LOADING


	)

1717 
__d©a_°¨t
[];

1718 
	#DATASTART
 ((
±r_t
)(
__d©a_°¨t
))

	)

1719 
_íd
[];

1720 
	#DATAEND
 (
_íd
)

	)

1721 
	#CACHE_LINE_SIZE
 256

	)

1722 
	#GETPAGESIZE
(Ë4096

	)

1726 #ifde‡
ARM32


1727 
	#CPP_WORDSZ
 32

	)

1728 
	#MACH_TYPE
 "ARM32"

	)

1729 
	#ALIGNMENT
 4

	)

1730 #ifde‡
NETBSD


1731 
	#OS_TYPE
 "NETBSD"

	)

1732 
	#HEURISTIC2


	)

1733 #ifde‡
__ELF__


1734 
	#DATASTART
 
GC_d©a_°¨t


	)

1735 
	#DYNAMIC_LOADING


	)

1737 
ëext
[];

1738 
	#DATASTART
 ((
±r_t
)(
ëext
))

	)

1741 #ifde‡
LINUX


1742 
	#OS_TYPE
 "LINUX"

	)

1743 
	#LINUX_STACKBOTTOM


	)

1744 #unde‡
STACK_GRAN


1745 
	#STACK_GRAN
 0x10000000

	)

1746 #ifde‡
__ELF__


1747 
	#DYNAMIC_LOADING


	)

1748 
	~<„©uªs.h
>

1749 #i‡
deföed
(
__GLIBC__
) && __GLIBC__ >= 2

1750 
	#SEARCH_FOR_DATA_START


	)

1752 **
__ívú⁄
;

1753 
	#DATASTART
 ((
±r_t
)(&
__ívú⁄
))

	)

1763 
_íd
[];

1764 
	#DATAEND
 (
_íd
)

	)

1766 
ëext
[];

1767 
	#DATASTART
 ((
±r_t
)((((
w‹d
Ë(
ëext
)Ë+ 0xfffË& ~0xfff))

	)

1770 #ifde‡
MSWINCE


1771 
	#OS_TYPE
 "MSWINCE"

	)

1772 
	#DATAEND


	)

1774 #ifde‡
NOSYS


1776 
__d©a_°¨t
[];

1777 
	#DATASTART
 (
±r_t
)(
__d©a_°¨t
)

	)

1779 *
__°ack_ba£__
;

1780 
	#STACKBOTTOM
 ((
±r_t
Ë(
__°ack_ba£__
))

	)

1784 #ifde‡
CRIS


1785 
	#MACH_TYPE
 "CRIS"

	)

1786 
	#CPP_WORDSZ
 32

	)

1787 
	#ALIGNMENT
 1

	)

1788 
	#OS_TYPE
 "LINUX"

	)

1789 
	#DYNAMIC_LOADING


	)

1790 
	#LINUX_STACKBOTTOM


	)

1791 
	#SEARCH_FOR_DATA_START


	)

1792 
_íd
[];

1793 
	#DATAEND
 (
_íd
)

	)

1796 #ifde‡
SH


1797 
	#MACH_TYPE
 "SH"

	)

1798 
	#ALIGNMENT
 4

	)

1799 #ifde‡
MSWINCE


1800 
	#OS_TYPE
 "MSWINCE"

	)

1801 
	#DATAEND


	)

1803 #ifde‡
LINUX


1804 
	#OS_TYPE
 "LINUX"

	)

1805 
	#LINUX_STACKBOTTOM


	)

1806 
	#DYNAMIC_LOADING


	)

1807 
	#SEARCH_FOR_DATA_START


	)

1808 
_íd
[];

1809 
	#DATAEND
 (
_íd
)

	)

1811 #ifde‡
NETBSD


1812 
	#OS_TYPE
 "NETBSD"

	)

1813 
	#HEURISTIC2


	)

1814 
	#DATASTART
 
GC_d©a_°¨t


	)

1815 
	#DYNAMIC_LOADING


	)

1819 #ifde‡
SH4


1820 
	#MACH_TYPE
 "SH4"

	)

1821 
	#OS_TYPE
 "MSWINCE"

	)

1822 
	#ALIGNMENT
 4

	)

1823 
	#DATAEND


	)

1826 #ifde‡
M32R


1827 
	#CPP_WORDSZ
 32

	)

1828 
	#MACH_TYPE
 "M32R"

	)

1829 
	#ALIGNMENT
 4

	)

1830 #ifde‡
LINUX


1831 
	#OS_TYPE
 "LINUX"

	)

1832 
	#LINUX_STACKBOTTOM


	)

1833 #unde‡
STACK_GRAN


1834 
	#STACK_GRAN
 0x10000000

	)

1835 
	#DYNAMIC_LOADING


	)

1836 
	#SEARCH_FOR_DATA_START


	)

1837 
_íd
[];

1838 
	#DATAEND
 (
_íd
)

	)

1842 #ifde‡
X86_64


1843 
	#MACH_TYPE
 "X86_64"

	)

1844 
	#ALIGNMENT
 8

	)

1845 
	#CPP_WORDSZ
 64

	)

1846 #i‚de‡
HBLKSIZE


1847 
	#HBLKSIZE
 4096

	)

1849 
	#CACHE_LINE_SIZE
 64

	)

1850 #ifde‡
LINUX


1851 
	#OS_TYPE
 "LINUX"

	)

1852 
	#LINUX_STACKBOTTOM


	)

1853 #i‡!
deföed
(
GC_LINUX_THREADS
Ë|| !deföed(
REDIRECT_MALLOC
)

1854 
	#MPROTECT_VDB


	)

1860 #ifde‡
__ELF__


1861 
	#DYNAMIC_LOADING


	)

1862 #ifde‡
UNDEFINED


1863 
_ëext
[];

1864 
	#DATASTART
 ((
±r_t
)((((
w‹d
Ë(
_ëext
)Ë+ 0xfffË& ~0xfff))

	)

1866 
	~<„©uªs.h
>

1867 
	#SEARCH_FOR_DATA_START


	)

1868 
_íd
[];

1869 
	#DATAEND
 (
_íd
)

	)

1871 
ëext
[];

1872 
	#DATASTART
 ((
±r_t
)((((
w‹d
Ë(
ëext
)Ë+ 0xfffË& ~0xfff))

	)

1874 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 3

1875 
	#PREFETCH
(
x
Ë
	`__buûtö_¥e„tch
((x), 0, 0)

	)

1876 
	#PREFETCH_FOR_WRITE
(
x
Ë
	`__buûtö_¥e„tch
((x), 1)

	)

1879 #ifde‡
DARWIN


1880 
	#OS_TYPE
 "DARWIN"

	)

1881 
	#DARWIN_DONT_PARSE_STACK


	)

1882 
	#DYNAMIC_LOADING


	)

1885 
	#DATASTART
 ((
±r_t
Ë
	`gë_ëext
())

	)

1886 
	#DATAEND
 ((
±r_t
Ë
	`gë_íd
())

	)

1887 
	#STACKBOTTOM
 ((
±r_t
Ë0x7fff5fc00000)

	)

1888 
	#USE_MMAP


	)

1889 
	#USE_MMAP_ANON


	)

1890 #ifde‡
GC_DARWIN_THREADS


1891 
	#MPROTECT_VDB


	)

1893 
	~<uni°d.h
>

1894 
	#GETPAGESIZE
(Ë
	`gë∑gesize
()

	)

1897 
	#NO_PTHREAD_TRYLOCK


	)

1899 #ifde‡
FREEBSD


1900 
	#OS_TYPE
 "FREEBSD"

	)

1901 #i‚de‡
GC_FREEBSD_THREADS


1902 
	#MPROTECT_VDB


	)

1904 #ifde‡
__GLIBC__


1905 
	#SIG_SUSPEND
 (32+6)

	)

1906 
	#SIG_THR_RESTART
 (32+5)

	)

1907 
_íd
[];

1908 
	#DATAEND
 (
_íd
)

	)

1910 
	#SIG_SUSPEND
 
SIGUSR1


	)

1911 
	#SIG_THR_RESTART
 
SIGUSR2


	)

1913 
	#FREEBSD_STACKBOTTOM


	)

1914 #ifde‡
__ELF__


1915 
	#DYNAMIC_LOADING


	)

1917 
ëext
[];

1918 * 
GC_FªeBSDGëD©aSèπ
();

1919 
	#DATASTART
 
	`GC_FªeBSDGëD©aSèπ
(0x1000, &
ëext
)

	)

1921 #ifde‡
NETBSD


1922 
	#OS_TYPE
 "NETBSD"

	)

1923 #ifde‡
__ELF__


1924 
	#DYNAMIC_LOADING


	)

1926 
	#HEURISTIC2


	)

1927 
ëext
[];

1928 
	#SEARCH_FOR_DATA_START


	)

1930 #ifde‡
SOLARIS


1931 
	#OS_TYPE
 "SOLARIS"

	)

1932 
	#ELF_CLASS
 
ELFCLASS64


	)

1933 
_ëext
[], 
_íd
[];

1934 
±r_t
 
GC_SysVGëD©aSèπ
(
size_t
,Ötr_t);

1935 
	#DATASTART
 
	`GC_SysVGëD©aSèπ
(0x1000, (
±r_t
)
_ëext
)

	)

1936 
	#DATAEND
 (
_íd
)

	)

1945 
	~<sys/vm∑øm.h
>

1946 #ifde‡
USERLIMIT


1948 
	#STACKBOTTOM
 
USRSTACK


	)

1950 
	#HEURISTIC2


	)

1954 #ifde‡
SOLARIS25_PROC_VDB_BUG_FIXED


1955 
	#PROC_VDB


	)

1957 
	#DYNAMIC_LOADING


	)

1958 #i‡!
deföed
(
USE_MMAP
Ë&& deföed(
REDIRECT_MALLOC
)

1959 
	#USE_MMAP


	)

1965 #ifde‡
USE_MMAP


1966 
	#HEAP_START
 (
±r_t
)0x40000000

	)

1968 
	#HEAP_START
 
DATAEND


	)

1971 #ifde‡
MSWIN32


1972 
	#OS_TYPE
 "MSWIN32"

	)

1975 #i‡!
deföed
(
__WATCOMC__
)

1976 
	#MPROTECT_VDB


	)

1980 #i‡
_MSC_VER
 >= 1300

1981 
	#GWW_VDB


	)

1983 
	#DATAEND


	)

1987 #i‡
deföed
(
LINUX_STACKBOTTOM
Ë&& deföed(
NO_PROC_STAT
) \

1988 && !
	$deföed
(
USE_LIBC_PRIVATES
)

1991 #unde‡
LINUX_STACKBOTTOM


1992 
	#HEURISTIC2


	)

1997 #i‡
	`deföed
(
LINUX
Ë&& deföed(
USE_MMAP
)

2000 
	#USE_MMAP_ANON


	)

2003 #i‡
	`deföed
(
GC_LINUX_THREADS
Ë&& deföed(
REDIRECT_MALLOC
)

2026 
	#USE_PROC_FOR_LIBRARIES


	)

2029 #i‚de‡
STACK_GROWS_UP


2030 
	#STACK_GROWS_DOWN


	)

2033 #i‚de‡
CPP_WORDSZ


2034 
	#CPP_WORDSZ
 32

	)

2037 #i‚de‡
OS_TYPE


2038 
	#OS_TYPE
 ""

	)

2041 #i‚de‡
DATAEND


2042 
íd
[];

2043 
	#DATAEND
 (
íd
)

	)

2046 #i‡
	`deföed
(
SVR4
Ë&& !deföed(
GETPAGESIZE
)

2047 
	~<uni°d.h
>

2048 
	#GETPAGESIZE
(Ë
	`sysc⁄f
(
_SC_PAGESIZE
)

	)

2051 #i‚de‡
GETPAGESIZE


2052 #i‡
	`deföed
(
SOLARIS
Ë|| deföed(
IRIX5
Ë|| deföed(
LINUX
) \

2053 || 
	`deföed
(
NETBSD
Ë|| deföed(
FREEBSD
Ë|| 
	$deföed
(
HPUX
)

2054 
	~<uni°d.h
>

2056 
	#GETPAGESIZE
(Ë
	`gë∑gesize
()

	)

2059 #i‡
	`deföed
(
SOLARIS
Ë|| deföed(
DRSNX
Ë|| deföed(
UTS4
)

2062 
	#SVR4


	)

2065 #i‡
	`deföed
(
SOLARIS
Ë|| deföed(
DRSNX
)

2068 
	#SOLARISDL


	)

2070 
	#SUNOS5SIGS


	)

2073 #i‡
	`deföed
(
HPUX
)

2074 
	#SUNOS5SIGS


	)

2077 #i‡
	`deföed
(
FREEBSD
) && \

2078 (
	`deföed
(
__Døg⁄Fly__
Ë|| 
__FªeBSD__
 >4 || (
__FªeBSD_kî√l__
 >= 4))

2079 
	#SUNOS5SIGS


	)

2082 #ifde‡
GC_NETBSD_THREADS


2083 
	#SIGRTMIN
 33

	)

2084 
	#SIGRTMAX
 63

	)

2087 #i‡
	`deföed
(
SVR4
Ë|| deföed(
LINUX
Ë|| deföed(
IRIX5
Ë|| deföed(
HPUX
) \

2088 || 
	`deföed
(
OPENBSD
Ë|| deföed(
NETBSD
Ë|| deföed(
FREEBSD
) \

2089 || 
	`deföed
(
DGUX
Ë|| deföed(
BSD
) \

2090 || 
	`deföed
(
AIX
Ë|| deföed(
DARWIN
Ë|| deföed(
OSF1
) \

2091 || 
	$deföed
(
HURD
)

2092 
	#UNIX_LIKE


	)

2095 #i‡
CPP_WORDSZ
 != 32 && CPP_WORDSZ != 64

2096 -> 
bad
 
w‹d
 
size


2099 #ifde‡
PCR


2100 #unde‡
DYNAMIC_LOADING


2101 #unde‡
STACKBOTTOM


2102 #unde‡
HEURISTIC1


2103 #unde‡
HEURISTIC2


2104 #unde‡
PROC_VDB


2105 #unde‡
MPROTECT_VDB


2106 
	#PCR_VDB


	)

2109 #ifde‡
SMALL_CONFIG


2111 #unde‡
PROC_VDB


2112 #unde‡
MPROTECT_VDB


2115 #ifde‡
USE_MUNMAP


2116 #unde‡
MPROTECT_VDB


2119 #ifde‡
PARALLEL_MARK


2120 #unde‡
MPROTECT_VDB


2123 #i‡!
	`deföed
(
PCR_VDB
Ë&& !deföed(
PROC_VDB
Ë&& !deföed(
MPROTECT_VDB
) \

2124 && !
	$deföed
(
GWW_VDB
)

2125 
	#DEFAULT_VDB


	)

2128 #i‚de‡
PREFETCH


2129 
	#PREFETCH
(
x
)

	)

2130 
	#NO_PREFETCH


	)

2133 #i‚de‡
PREFETCH_FOR_WRITE


2134 
	#PREFETCH_FOR_WRITE
(
x
)

	)

2135 
	#NO_PREFETCH_FOR_WRITE


	)

2138 #i‚de‡
CACHE_LINE_SIZE


2139 
	#CACHE_LINE_SIZE
 32

	)

2142 #i‡
	`deföed
(
LINUX
Ë|| deföed(
HURD
Ë|| deföed(
__GLIBC__
)

2143 
	#REGISTER_LIBRARIES_EARLY


	)

2151 #i‡
	`deföed
(
SEARCH_FOR_DATA_START
)

2152 
±r_t
 
GC_d©a_°¨t
;

2153 
	#DATASTART
 
GC_d©a_°¨t


	)

2156 #i‚de‡
CLEAR_DOUBLE


2157 
	#CLEAR_DOUBLE
(
x
) \

2158 ((
w‹d
*)
x
)[0] = 0; \

2159 ((
w‹d
*)
x
)[1] = 0;

	)

2162 #i‡
	`deföed
(
GC_LINUX_THREADS
Ë&& deföed(
REDIRECT_MALLOC
) \

2163 && !
	$deföed
(
INCLUDE_LINUX_THREAD_DESCR
)

2166 
	#INCLUDE_LINUX_THREAD_DESCR


	)

2169 #i‡
	`deföed
(
GC_IRIX_THREADS
Ë&& !deföed(
IRIX5
)

2170 --> 
öc⁄si°ít
 
c⁄figuøti⁄


2172 #i‡
	`deföed
(
GC_LINUX_THREADS
Ë&& !deföed(
LINUX
)

2173 --> 
öc⁄si°ít
 
c⁄figuøti⁄


2175 #i‡
	`deföed
(
GC_NETBSD_THREADS
Ë&& !deföed(
NETBSD
)

2176 --> 
öc⁄si°ít
 
c⁄figuøti⁄


2178 #i‡
	`deföed
(
GC_FREEBSD_THREADS
Ë&& !deföed(
FREEBSD
)

2179 --> 
öc⁄si°ít
 
c⁄figuøti⁄


2181 #i‡
	`deföed
(
GC_SOLARIS_THREADS
Ë&& !deföed(
SOLARIS
)

2182 --> 
öc⁄si°ít
 
c⁄figuøti⁄


2184 #i‡
	`deföed
(
GC_HPUX_THREADS
Ë&& !deföed(
HPUX
)

2185 --> 
öc⁄si°ít
 
c⁄figuøti⁄


2187 #i‡
	`deföed
(
GC_AIX_THREADS
Ë&& !deföed(
_AIX
)

2188 --> 
öc⁄si°ít
 
c⁄figuøti⁄


2190 #i‡
	`deföed
(
GC_GNU_THREADS
Ë&& !deföed(
HURD
)

2191 --> 
öc⁄si°ít
 
c⁄figuøti⁄


2193 #i‡
	`deföed
(
GC_WIN32_THREADS
Ë&& !deföed(
MSWIN32
Ë&& !deföed(
CYGWIN32
)

2194 --> 
öc⁄si°ít
 
c⁄figuøti⁄


2197 #i‡
	`deföed
(
PCR
Ë|| deföed(
GC_WIN32_THREADS
Ë|| deföed(
GC_PTHREADS
)

2198 
	#THREADS


	)

2201 #i‡!
	`deföed
(
USE_MARK_BITS
Ë&& !deföed(
USE_MARK_BYTES
)

2202 #i‡
	`deföed
(
THREADS
Ë&& deföed(
PARALLEL_MARK
)

2203 
	#USE_MARK_BYTES


	)

2205 
	#USE_MARK_BITS


	)

2209 #i‡
	`deföed
(
MSWINCE
)

2210 
	#NO_GETENV


	)

2213 #i‡
	`deföed
(
SPARC
)

2214 
	#ASM_CLEAR_CODE


	)

2227 #i‡
	`deföed
(
SPARC
)

2228 
	#CAN_SAVE_CALL_ARGS


	)

2230 #i‡(
	`deföed
(
I386
Ë|| deföed(
X86_64
)Ë&& (deföed(
LINUX
Ë|| deföed(
__GLIBC__
))

2233 
	#CAN_SAVE_CALL_ARGS


	)

2236 #i‡
	`deföed
(
SAVE_CALL_COUNT
Ë&& !deföed(
GC_ADD_CALLER
) \

2237 && 
	$deföed
(
GC_CAN_SAVE_CALL_STACKS
)

2238 
	#SAVE_CALL_CHAIN


	)

2240 #ifde‡
SAVE_CALL_CHAIN


2241 #i‡
	`deföed
(
SAVE_CALL_NARGS
Ë&& deföed(
CAN_SAVE_CALL_ARGS
)

2242 
	#NARGS
 
SAVE_CALL_NARGS


	)

2244 
	#NARGS
 0

	)

2247 #ifde‡
SAVE_CALL_CHAIN


2248 #i‚de‡
SAVE_CALL_COUNT


2249 
	#NFRAMES
 6

	)

2252 
	#NFRAMES
 ((
SAVE_CALL_COUNT
 + 1Ë& ~1)

	)

2254 
	#NEED_CALLINFO


	)

2256 #ifde‡
GC_ADD_CALLER


2257 
	#NFRAMES
 1

	)

2258 
	#NARGS
 0

	)

2259 
	#NEED_CALLINFO


	)

2262 #i‡
	`deföed
(
MAKE_BACK_GRAPH
Ë&& !deföed(
DBG_HDRS_ALL
)

2263 
	#DBG_HDRS_ALL


	)

2266 #i‡
	`deföed
(
POINTER_MASK
Ë&& !deföed(
POINTER_SHIFT
)

2267 
	#POINTER_SHIFT
 0

	)

2270 #i‡
	`deföed
(
POINTER_SHIFT
Ë&& !deföed(
POINTER_MASK
)

2271 
	#POINTER_MASK
 ((
GC_w‹d
)(-1))

	)

2274 #i‡!
	`deföed
(
FIXUP_POINTER
Ë&& deföed(
POINTER_MASK
)

2275 
	#FIXUP_POINTER
(
p
Ë’Ë(’Ë& (
POINTER_MASK
Ë<< 
POINTER_SHIFT
)

	)

2278 #i‡
	`deföed
(
FIXUP_POINTER
)

2279 
	#NEED_FIXUP_POINTER
 1

	)

2281 
	#NEED_FIXUP_POINTER
 0

	)

2282 
	#FIXUP_POINTER
(
p
)

	)

2285 #i‡!
	`deföed
(
MARK_BIT_PER_GRANULE
Ë&& !deföed(
MARK_BIT_PER_OBJ
)

2286 
	#MARK_BIT_PER_GRANULE


	)

2290 #i‡
	`deföed
(
MARK_BIT_PER_GRANULE
Ë&& deföed(
MARK_BIT_PER_OBJ
)

2291 #îr‹ 
Deföe
 
⁄ly
 
⁄e
 
of
 
MARK_BIT_PER_GRANULE
 
™d
 
MARK_BIT_PER_OBJ
.

2294 #i‡
	`deföed
(
STACK_GROWS_UP
Ë&& deföed(
STACK_GROWS_DOWN
)

2297 #i‡!
	`deföed
(
STACK_GROWS_UP
Ë&& !deföed(
STACK_GROWS_DOWN
)

2301 #i‡
	`deföed
(
REDIRECT_MALLOC
Ë&& deföed(
THREADS
Ë&& !deföed(
LINUX
)

2305 #ifde‡
GC_PRIVATE_H


2321 
hblk
;

2322 #i‡
	`deföed
(
PCR
)

2323 * 
	`ªÆ_mÆloc
();

2324 
	#GET_MEM
(
byãs
Ë
	`HBLKPTR
(
	`ªÆ_mÆloc
((
size_t
)byã†+ 
GC_∑ge_size
) \

2325 + 
GC_∑ge_size
-1)

	)

2326 #ñi‡
	`deföed
(
OS2
)

2327 * 
	`os2_Æloc
(
size_t
 
byãs
);

2328 
	#GET_MEM
(
byãs
Ë
	`HBLKPTR
((
±r_t
)
	`os2_Æloc
((
size_t
)bytes \

2329 + 
GC_∑ge_size
) \

2330 + 
GC_∑ge_size
-1)

	)

2331 #ñi‡
	`deföed
(
NEXT
Ë|| deföed(
DOS4GW
Ë|| deföed(
NONSTOP
) || \

2332 (
	`deföed
(
AMIGA
Ë&& !deföed(
GC_AMIGA_FASTALLOC
)) || \

2333 (
	`deföed
(
SOLARIS
Ë&& !
	$deföed
(
USE_MMAP
))

2334 
	#GET_MEM
(
byãs
Ë
	`HBLKPTR
((
size_t
Ë
	`ˇŒoc
(1, (size_t)byã†+ 
GC_∑ge_size
) \

2335 + 
GC_∑ge_size
-1)

	)

2336 #ñi‡
	`deföed
(
MSWIN32
)

2337 
±r_t
 
	`GC_wö32_gë_mem
();

2338 
	#GET_MEM
(
byãs
Ë(
hblk
 *)
	`GC_wö32_gë_mem
(byãs)

	)

2339 #ñi‡
	`deföed
(
MACOS
)

2340 #i‡
	`deföed
(
USE_TEMPORARY_MEMORY
)

2341 
På
 
	`GC_MacTemp‹¨yNewPå
(
size_t
 
size
, 
Boﬁón
 
˛órMem‹y
);

2342 
	#GET_MEM
(
byãs
Ë
	`HBLKPTR
( \

2343 
	`GC_MacTemp‹¨yNewPå
(
byãs
 + 
GC_∑ge_size
, 
åue
) \

2344 + 
GC_∑ge_size
-1)

	)

2346 
	#GET_MEM
(
byãs
Ë
	`HBLKPTR
( \

2347 
	`NewPåCÀ¨
(
byãs
 + 
GC_∑ge_size
Ë+ GC_∑ge_size-1)

	)

2349 #ñi‡
	`deföed
(
MSWINCE
)

2350 
±r_t
 
	`GC_wö˚_gë_mem
();

2351 
	#GET_MEM
(
byãs
Ë(
hblk
 *)
	`GC_wö˚_gë_mem
(byãs)

	)

2352 #ñi‡
	`deföed
(
AMIGA
Ë&& deföed(
GC_AMIGA_FASTALLOC
)

2353 *
	`GC_amiga_gë_mem
(
size_t
 
size
);

2354 
	#GET_MEM
(
byãs
Ë
	`HBLKPTR
((
size_t
) \

2355 
	`GC_amiga_gë_mem
((
size_t
)
byãs
 + 
GC_∑ge_size
) \

2356 + 
GC_∑ge_size
-1)

	)

2358 
±r_t
 
	`GC_unix_gë_mem
();

2359 
	#GET_MEM
(
byãs
Ë(
hblk
 *)
	`GC_unix_gë_mem
(byãs)

	)

	@include/private/msvc_dbg.h

22 #i‚de‡
_MSVC_DBG_H


23 
	#_MSVC_DBG_H


	)

25 
	~<°dlib.h
>

27 #ifde‡
__˝lu•lus


31 #i‡!
MSVC_DBG_DLL


32 
	#MSVC_DBG_EXPORT


	)

33 #ñi‡
MSVC_DBG_BUILD


34 
	#MSVC_DBG_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

36 
	#MSVC_DBG_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

39 #i‚de‡
MAX_SYM_NAME


40 
	#MAX_SYM_NAME
 2000

	)

43 * 
	tHANDLE
;

44 
_CONTEXT
 
	tCONTEXT
;

46 
MSVC_DBG_EXPORT
 
size_t
 
GëSèckFømes
(size_à
skù
, * 
‰ames
[], size_à
maxFømes
);

47 
MSVC_DBG_EXPORT
 
size_t
 
GëSèckFømesFromC⁄ãxt
(
HANDLE
 
hPro˚ss
, HANDLE 
hThªad
, 
CONTEXT
* 
c⁄ãxt
, size_à
skù
, * 
‰ames
[], size_à
maxFømes
);

49 
MSVC_DBG_EXPORT
 
size_t
 
GëModuÀNameFromAddªss
(* 
addªss
, * 
moduÀName
, size_à
size
);

50 
MSVC_DBG_EXPORT
 
size_t
 
GëModuÀNameFromSèck
(size_à
skù
, * 
moduÀName
, size_à
size
);

52 
MSVC_DBG_EXPORT
 
size_t
 
GëSymbﬁNameFromAddªss
(* 
addªss
, * 
symbﬁName
, size_à
size
, size_t* 
off£tByãs
);

53 
MSVC_DBG_EXPORT
 
size_t
 
GëSymbﬁNameFromSèck
(size_à
skù
, * 
symbﬁName
, size_à
size
, size_t* 
off£tByãs
);

55 
MSVC_DBG_EXPORT
 
size_t
 
GëFûeLöeFromAddªss
(* 
addªss
, * 
fûeName
, size_à
size
, size_t* 
löeNumbî
, size_t* 
off£tByãs
);

56 
MSVC_DBG_EXPORT
 
size_t
 
GëFûeLöeFromSèck
(size_à
skù
, * 
fûeName
, size_à
size
, size_t* 
löeNumbî
, size_t* 
off£tByãs
);

58 
MSVC_DBG_EXPORT
 
size_t
 
GëDes¸ùti⁄FromAddªss
(* 
addªss
, c⁄° * 
f‹m©
, * 
des¸ùti⁄
, size_à
size
);

59 
MSVC_DBG_EXPORT
 
size_t
 
GëDes¸ùti⁄FromSèck
(*c⁄° 
‰ames
[], size_à
cou¡
, c⁄° * 
f‹m©
, * 
des¸ùti⁄
[], size_à
size
);

62 
MSVC_DBG_EXPORT
 
backåa˚
(* 
addªs£s
[], 
cou¡
);

63 
MSVC_DBG_EXPORT
 ** 
backåa˚_symbﬁs
(*c⁄° 
addªs£s
[], 
cou¡
);

65 #ifde‡
__˝lu•lus


	@include/private/pthread_stop_world.h

1 #i‚de‡
GC_PTHREAD_STOP_WORLD_H


2 
	#GC_PTHREAD_STOP_WORLD_H


	)

4 
	sthªad_°›_öfo
 {

5 
w‹d
 
	mœ°_°›_cou¡
;

8 
±r_t
 
	m°ack_±r
;

	@include/private/pthread_support.h

1 #i‚de‡
GC_PTHREAD_SUPPORT_H


2 
	#GC_PTHREAD_SUPPORT_H


	)

4 
	~"¥iv©e/gc_¥iv.h
"

6 #i‡
deföed
(
GC_PTHREADS
Ë&& !deföed(
GC_WIN32_THREADS
)

8 #i‡
deföed
(
GC_DARWIN_THREADS
)

9 
	~"¥iv©e/d¨wö_°›_w‹ld.h
"

11 
	~"¥iv©e/±hªad_°›_w‹ld.h
"

14 #ifde‡
THREAD_LOCAL_ALLOC


15 
	~"thªad_loˇl_Æloc.h
"

25 
	sGC_Thªad_Rï
 {

26 
GC_Thªad_Rï
 * 
	m√xt
;

31 
±hªad_t
 
	mid
;

33 
thªad_°›_öfo
 
	m°›_öfo
;

35 
	mÊags
;

36 
	#FINISHED
 1

	)

37 
	#DETACHED
 2

	)

44 
	#MAIN_THREAD
 4

	)

45 
	mthªad_blocked
;

52 
±r_t
 
	m°ack_íd
;

53 #ifde‡
IA64


54 
±r_t
 
	mbackög_°‹e_íd
;

55 
±r_t
 
	mbackög_°‹e_±r
;

57 * 
	m°©us
;

64 #ifde‡
THREAD_LOCAL_ALLOC


65 
thªad_loˇl_‰ìli°s
 
	méfs
;

67 } * 
	tGC_thªad
;

69 
	#THREAD_TABLE_SZ
 256

	)

70 vﬁ©ûê
GC_thªad
 
GC_thªads
[
THREAD_TABLE_SZ
];

72 
GC_boﬁ
 
GC_thr_öôülized
;

74 
GC_thªad
 
GC_lookup_thªad
(
±hªad_t
 
id
);

76 
GC_°›_öô
();

78 
GC_boﬁ
 
GC_ö_thªad_¸óti⁄
;

	@include/private/specific.h

15 
	~<î∫o.h
>

16 
	~"©omic_›s.h
"

23 
	#MALLOC_CLEAR
(
n
Ë
	`GC_INTERNAL_MALLOC
“, 
NORMAL
)

	)

24 
	#PREFIXED
(
«me
Ë
GC_
##
	)
name

26 
	#TS_CACHE_SIZE
 1024

	)

27 
	#CACHE_HASH
(
n
Ë(((((ÍË>> 8Ë^ (ÍË& (
TS_CACHE_SIZE
 - 1))

	)

28 
	#TS_HASH_SIZE
 1024

	)

29 
	#HASH
(
n
Ë(((((ÍË>> 8Ë^ (ÍË& (
TS_HASH_SIZE
 - 1))

	)

37 
	sthªad_•ecific_íåy
 {

38 vﬁ©ûê
AO_t
 
	mqtid
;

39 * 
	mvÆue
;

40 
thªad_•ecific_íåy
 *
	m√xt
;

41 
±hªad_t
 
	mthªad
;

42 } 
	tt£
;

57 
__ölöe__
 
	$quick_thªad_id
() {

58 
dummy
;

59  ()(&
dummy
) >> 12;

60 
	}
}

62 
	#INVALID_QTID
 (()0)

	)

63 
	#INVALID_THREADID
 ((
±hªad_t
)0)

	)

65 
	sthªad_•ecific_d©a
 {

66 
t£
 * vﬁ©ûê
	mˇche
[
TS_CACHE_SIZE
];

68 
t£
 * 
	mhash
[
TS_HASH_SIZE
];

69 
±hªad_muãx_t
 
	mlock
;

70 } 
	ttsd
;

72 
tsd
 * 
	tPREFIXED
(
	tkey_t
);

74 
	$PREFIXED
(
key_¸óã
Ë(
tsd
 ** 
key_±r
, (* 
de°ru˘‹
)(*));

76 
	$PREFIXED
(
£t•ecific
Ë(
tsd
 * 
key
, * 
vÆue
);

78 
	$PREFIXED
(
ªmove_•ecific
Ë(
tsd
 * 
key
);

81 * 
	$PREFIXED
(
¶ow_gë•ecific
Ë(
tsd
 * 
key
, 
qtid
,

82 
t£
 * vﬁ©ûê* 
ˇche_íåy
);

84 
__ölöe__
 * 
	$PREFIXED
(
gë•ecific
Ë(
tsd
 * 
key
) {

85 
qtid
 = 
	`quick_thªad_id
();

86 
hash_vÆ
 = 
	`CACHE_HASH
(
qtid
);

87 
t£
 * vﬁ©ûê* 
íåy_±r
 = 
key
 -> 
ˇche
 + 
hash_vÆ
;

88 
t£
 * 
íåy
 = *
íåy_±r
;

89 i‡(
	`EXPECT
(
íåy
 -> 
qtid
 == qtid, 1)) {

90 
	`GC_ASSERT
(
íåy
 -> 
thªad
 =
	`±hªad_£lf
());

91  
íåy
 -> 
vÆue
;

93  
	`PREFIXED
(
¶ow_gë•ecific
Ë(
key
, 
qtid
, 
íåy_±r
);

94 
	}
}

	@include/private/thread_local_alloc.h

22 
	~"¥iv©e/gc_¥iv.h
"

24 #i‡
deföed
(
THREAD_LOCAL_ALLOC
)

26 
	~"gc_ölöe.h
"

29 #i‡
deföed
 
USE_HPUX_TLS


30 #îr‹ 
USE_HPUX_TLS
 
ma¸o
 
was
 
ª∂a˚d
 
by
 
USE_COMPILER_TLS


33 #i‡!
deföed
(
USE_PTHREAD_SPECIFIC
Ë&& !deföed(
USE_WIN32_SPECIFIC
) && \

34 !
deföed
(
USE_WIN32_COMPILER_TLS
Ë&& !deföed(
USE_COMPILER_TLS
) && \

35 !
	$deföed
(
USE_CUSTOM_SPECIFIC
)

36 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
Ë|| deföed(
CYGWIN32
)

37 #i‡
	`deföed
(
__GNUC__
)

38 
	#USE_WIN32_SPECIFIC


	)

40 
	#USE_WIN32_COMPILER_TLS


	)

42 #ñi‡
	`deföed
(
LINUX
Ë&& !deföed(
ARM32
) && \

43 (
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 >=3))

44 
	#USE_COMPILER_TLS


	)

45 #ñi‡(
	`deföed
(
GC_DGUX386_THREADS
Ë|| deföed(
GC_OSF1_THREADS
) || \

46 
	`deföed
(
GC_DARWIN_THREADS
Ë|| deföed(
GC_AIX_THREADS
)) || \

47 
	$deföed
(
GC_NETBSD_THREADS
)

48 
	#USE_PTHREAD_SPECIFIC


	)

49 #ñi‡
	`deföed
(
GC_HPUX_THREADS
)

50 #ifde‡
__GNUC__


51 
	#USE_PTHREAD_SPECIFIC


	)

54 
	#USE_COMPILER_TLS


	)

57 
	#USE_CUSTOM_SPECIFIC


	)

61 
	~<°dlib.h
>

65 
	sthªad_loˇl_‰ìli°s
 {

66 #ifde‡
THREAD_LOCAL_ALLOC


67 * 
±r‰ì_‰ìli°s
[
TINY_FREELISTS
];

68 * 
n‹mÆ_‰ìli°s
[
TINY_FREELISTS
];

69 #ifde‡
GC_GCJ_SUPPORT


70 * 
gcj_‰ìli°s
[
TINY_FREELISTS
];

71 
	#ERROR_FL
 (*)(-1)

	)

86 
	#DIRECT_GRANULES
 (
HBLKSIZE
/
GRANULE_BYTES
)

	)

91 } *
	tGC_éfs
;

93 #i‡
	`deföed
(
USE_PTHREAD_SPECIFIC
)

94 
	#GC_gë•ecific
 
±hªad_gë•ecific


	)

95 
	#GC_£t•ecific
 
±hªad_£t•ecific


	)

96 
	#GC_key_¸óã
 
±hªad_key_¸óã


	)

97 
	#GC_ªmove_•ecific
(
key
Ë

	)

98 
±hªad_key_t
 
	tGC_key_t
;

99 #ñi‡
	`deföed
(
USE_COMPILER_TLS
Ë|| deföed(
USE_WIN32_COMPILER_TLS
)

100 
	#GC_gë•ecific
(
x
Ë(x)

	)

101 
	#GC_£t•ecific
(
key
, 
v
Ë((keyË(v), 0)

	)

102 
	#GC_key_¸óã
(
key
, 
d
Ë0

	)

103 
	#GC_ªmove_•ecific
(
key
Ë

	)

104 * 
	tGC_key_t
;

105 #ñi‡
	`deföed
(
USE_WIN32_SPECIFIC
)

106 
	~<wödows.h
>

107 
	#GC_gë•ecific
 
TlsGëVÆue


	)

108 
	#GC_£t•ecific
(
key
, 
v
Ë!
	`TlsSëVÆue
(key, v)

	)

110 
	#GC_key_¸óã
(
key
, 
d
) \

111 ((
d
Ë!0? (
	`ABORT
("Destructor unsupported by TlsAlloc"),0) \

112 : ((*(
key
Ë
	`TlsAŒoc
()Ë=
TLS_OUT_OF_INDEXES
? \

113 (
	`ABORT
("Out ofÅls"), 0): \

114 0))

	)

115 
	#GC_ªmove_•ecific
(
key
Ë

	)

117 
DWORD
 
	tGC_key_t
;

118 #ñi‡
	`deföed
(
USE_CUSTOM_SPECIFIC
)

119 
	~"¥iv©e/•ecific.h
"

121 #îr‹ 
im∂emít
 
me


128 
	`GC_öô_thªad_loˇl
(
GC_éfs
 
p
);

132 
	`GC_de°roy_thªad_loˇl
(
GC_éfs
 
p
);

138 
	`GC_m¨k_thªad_loˇl_Ês_f‹
(
GC_éfs
 
p
);

141 #i‡
	`deföed
(
USE_COMPILER_TLS
)

142 
__thªad


143 #ñi‡
	`deföed
(
USE_WIN32_COMPILER_TLS
)

144 
	$__de˛•ec
(
thªad
)

146 
GC_key_t
 
GC_thªad_key
;

	@include/weakpointer.h

1 #i‚def 
_wókpoöãr_h_


2 
	#_wókpoöãr_h_


	)

35 
	gãm∂©e
< 
˛ass
 
	gT
 > cœs†
	cWókPoöãr
 {

36 
	mpublic
:

38 
	$WókPoöãr
–
T
* 
t
 = 0 )

41 {
im∂
 = 
	`_WókPoöãr_New
–
t
 );}

43 
T
* 
	$Poöãr
()

47 { (
T
*Ë
	`_WókPoöãr_Poöãr
–
this
->
im∂
 );
	}
}

49 
	g›î©‹
==–
WókPoöãr
< 
T
 > 
wp2
 )

56 { 
_WókPoöãr_EquÆ
–
this
->
im∂
, 
wp2
.impl );}

58 
	$Hash
()

62 { 
	`_WókPoöãr_Hash
–
this
->
im∂
 );
	}
}

64 
	g¥iv©e
:

65 * 
im∂
;

112 
	gãm∂©e
< 
˛ass
 
	gT
, cœs†
	gD©a
 > cœs†
	cCÀ™Up
 {

113 
	mpublic
:

115 
Së
–
T
* 
t
, 
c
–
D©a
* 
d
, T*Å ), Data* d = 0 )

122 {
_CÀ™Up_Së
–
t
, 
c
, 
d
 );}

124 
	$CÆl
–
T
* 
t
 )

128 {
	`_CÀ™Up_CÆl
–
t
 );
	}
}

130 ˛as†
	cQueue
 {
	gpublic
:

131 
Queue
()

133 {
this
->
hód
 = 
_CÀ™Up_Queue_NewHód
();}

135 
Së
–
T
* 
t
 )

137 {
_CÀ™Up_Queue_Së
–
this
->
hód
, 
t
 );}

139 
CÆl
()

144 { 
_CÀ™Up_Queue_CÆl
–
this
->
hód
 );}

146 
	g¥iv©e
:

147 * 
hód
;

208 * 
_WókPoöãr_New
–* 
t
 );

209 * 
_WókPoöãr_Poöãr
–* 
wp
 );

210 
_WókPoöãr_EquÆ
–* 
wp1
, * 
wp2
 );

211 
_WókPoöãr_Hash
–* 
wp
 );

212 
_CÀ™Up_Së
–* 
t
, (*
c
)–* 
d
, *Å ), * d );

213 
_CÀ™Up_CÆl
–* 
t
 );

214 * 
_CÀ™Up_Queue_NewHód
 ();

215 
_CÀ™Up_Queue_Së
–* 
h
, * 
t
 );

216 
_CÀ™Up_Queue_CÆl
–* 
h
 );

	@libatomic_ops-1.2/src/atomic_ops.c

31 #i‡
deföed
(
HAVE_CONFIG_H
)

32 
	~"c⁄fig.h
"

35 #i‡!
deföed
(
_MSC_VER
Ë&& !deföed(
__MINGW32__
Ë&& !deföed(
__BORLANDC__
)

37 #unde‡
AO_REQUIRE_CAS


39 
	~<±hªad.h
>

40 
	~<sig«l.h
>

41 #ifde‡
_HPUX_SOURCE


42 
	~<sys/time.h
>

44 
	~<sys/£À˘.h
>

46 
	~"©omic_›s.h
"

48 #i‚de‡
AO_HAVE_doubÀ_t


49 
	~"©omic_›s/sysdïs/°™d¨d_ao_doubÀ_t.h
"

56 
±hªad_muãx_t
 
	gAO_±_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

70 
	#AO_HASH_SIZE
 16

	)

72 
	#AO_HASH
(
x
Ë((()(xË>> 12Ë& (
AO_HASH_SIZE
-1))

	)

74 
AO_TS_t
 
	gAO_locks
[
AO_HASH_SIZE
] = {

75 
AO_TS_INITIALIZER
, AO_TS_INITIALIZER,

76 
AO_TS_INITIALIZER
, AO_TS_INITIALIZER,

77 
AO_TS_INITIALIZER
, AO_TS_INITIALIZER,

78 
AO_TS_INITIALIZER
, AO_TS_INITIALIZER,

79 
AO_TS_INITIALIZER
, AO_TS_INITIALIZER,

80 
AO_TS_INITIALIZER
, AO_TS_INITIALIZER,

81 
AO_TS_INITIALIZER
, AO_TS_INITIALIZER,

82 
AO_TS_INITIALIZER
, AO_TS_INITIALIZER,

85 
AO_T
 
	gdummy
 = 1;

88 
	$AO_•ö
(
n
)

90 
i
;

91 
AO_T
 
j
 = 
	`AO_lﬂd
(&
dummy
);

93 
i
 = 0; i < (2 << 
n
); ++i)

95 
j
 *= 5;

96 
j
 -= 4;

98 
	`AO_°‹e
(&
dummy
, 
j
);

99 
	}
}

101 
	$AO_∑u£
(
n
)

103 i‡(
n
 < 12)

104 
	`AO_•ö
(
n
);

107 
timevÆ
 
tv
;

110 
tv
.
tv_£c
 = 0;

111 
tv
.
tv_u£c
 = (
n
 > 28? 100000 : (1 << (n - 12)));

112 
	`£À˘
(0, 0, 0, 0, &
tv
);

114 
	}
}

116 
	$lock_oﬁ
(vﬁ©ûê
AO_TS_t
 *
l
)

118 
i
 = 0;

120 
	`AO_ã°_™d_£t_acquúe
(
l
Ë=
AO_TS_SET
)

121 
	`AO_∑u£
(++
i
);

122 
	}
}

124 
AO_INLINE
 
	$lock
(vﬁ©ûê
AO_TS_t
 *
l
)

126 i‡(
	`AO_ã°_™d_£t_acquúe
(
l
Ë=
AO_TS_SET
)

127 
	`lock_oﬁ
(
l
);

128 
	}
}

130 
AO_INLINE
 
	$u∆ock
(vﬁ©ûê
AO_TS_t
 *
l
)

132 
	`AO_CLEAR
(
l
);

133 
	}
}

135 
sig£t_t
 
	gÆl_sigs
;

137 vﬁ©ûê
AO_t
 
	göôülized
 = 0;

139 vﬁ©ûê
AO_TS_t
 
	göô_lock
 = 
AO_TS_INITIALIZER
;

141 
	$AO_com∑ª_™d_sw≠_emuœti⁄
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
,

142 
AO_t
 
√w_vÆ
)

144 
AO_TS_t
 *
my_lock
 = 
AO_locks
 + 
	`AO_HASH
(
addr
);

145 
sig£t_t
 
ﬁd_sigs
;

146 
ªsu…
;

148 i‡(!
	`AO_lﬂd_acquúe
(&
öôülized
))

150 
	`lock
(&
öô_lock
);

151 i‡(!
öôülized
Ë
	`sigfûl£t
(&
Æl_sigs
);

152 
	`u∆ock
(&
öô_lock
);

153 
	`AO_°‹e_ªÀa£
(&
öôülized
, 1);

155 
	`sig¥ocmask
(
SIG_BLOCK
, &
Æl_sigs
, &
ﬁd_sigs
);

163 
	`lock
(
my_lock
);

164 i‡(*
addr
 =
ﬁd
)

166 *
addr
 = 
√w_vÆ
;

167 
ªsu…
 = 1;

170 
ªsu…
 = 0;

171 
	`u∆ock
(
my_lock
);

172 
	`sig¥ocmask
(
SIG_SETMASK
, &
ﬁd_sigs
, 
NULL
);

173  
ªsu…
;

174 
	}
}

176 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_emuœti⁄
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

177 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

178 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

180 
AO_TS_t
 *
my_lock
 = 
AO_locks
 + 
	`AO_HASH
(
addr
);

181 
sig£t_t
 
ﬁd_sigs
;

182 
ªsu…
;

184 i‡(!
	`AO_lﬂd_acquúe
(&
öôülized
))

186 
	`lock
(&
öô_lock
);

187 i‡(!
öôülized
Ë
	`sigfûl£t
(&
Æl_sigs
);

188 
	`u∆ock
(&
öô_lock
);

189 
	`AO_°‹e_ªÀa£
(&
öôülized
, 1);

191 
	`sig¥ocmask
(
SIG_BLOCK
, &
Æl_sigs
, &
ﬁd_sigs
);

199 
	`lock
(
my_lock
);

200 i‡(
addr
 -> 
AO_vÆ1
 =
ﬁd_vÆ1
 &&ádd∏-> 
AO_vÆ2
 =
ﬁd_vÆ2
)

202 
addr
 -> 
AO_vÆ1
 = 
√w_vÆ1
;

203 
addr
 -> 
AO_vÆ2
 = 
√w_vÆ2
;

204 
ªsu…
 = 1;

207 
ªsu…
 = 0;

208 
	`u∆ock
(
my_lock
);

209 
	`sig¥ocmask
(
SIG_SETMASK
, &
ﬁd_sigs
, 
NULL
);

210  
ªsu…
;

211 
	}
}

213 
	$AO_°‹e_fuŒ_emuœti⁄
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆ
)

215 
AO_TS_t
 *
my_lock
 = 
AO_locks
 + 
	`AO_HASH
(
addr
);

216 
	`lock
(
my_lock
);

217 *
addr
 = 
vÆ
;

218 
	`u∆ock
(
my_lock
);

219 
	}
}

223 
	gAO_n⁄_posix_im∂emíèti⁄_is_ítúñy_ö_hódîs
;

	@libatomic_ops-1.2/src/atomic_ops.h

23 #i‚de‡
ATOMIC_OPS_H


25 
	#ATOMIC_OPS_H


	)

27 
	~<as£π.h
>

28 
	~<°ddef.h
>

142 
	#AO_t
 
size_t


	)

147 
	#AO_TS_INITIALIZER
 (
AO_t
)
AO_TS_CLEAR


	)

150 #i‡
deföed
(
__GNUC__
Ë|| deföed(
_MSC_VER
Ë|| deföed(
__INTEL_COMPILER
)

151 
	#AO_INLINE
 
__ölöe


	)

153 
	#AO_INLINE
 

	)

156 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

157 
	#AO_compûî_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("" : : : "mem‹y")

	)

158 #ñi‡
deföed
(
_MSC_VER
)

159 #i‡
deföed
(
_AMD64_
)

160 #¥agm®
öåösic
(
_RódWrôeB¨rõr
)

161 
	#AO_compûî_b¨rõr
(Ë
	`_RódWrôeB¨rõr
()

	)

165 
	#AO_compûî_b¨rõr
(Ë
__asm
 { }

	)

169 #ñi‡
deföed
(
__INTEL_COMPILER
)

170 
	#AO_compûî_b¨rõr
(Ë
	`__mem‹y_b¨rõr
(Ë

	)

171 #ñi‡
deföed
(
_HPUX_SOURCE
)

172 #i‡
deföed
(
__ü64
)

173 
	~<machöe/sys/ölöe.h
>

174 
	#AO_compûî_b¨rõr
(Ë
	`_Asm_sched_„n˚
()

	)

178 vﬁ©ûê
	gAO_b¨rõr_dummy
;

179 
	#AO_compûî_b¨rõr
(Ë
AO_b¨rõr_dummy
 = 
	)
AO_barrier_dummy

184 
	#AO_compûî_b¨rõr
(Ë
	`asm
("")

	)

187 #i‡
deföed
(
AO_USE_PTHREAD_DEFS
)

188 
	~"©omic_›s/sysdïs/gíîic_±hªad.h
"

191 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
AO_USE_PTHREAD_DEFS
) \

192 && !
	$deföed
(
__INTEL_COMPILER
)

193 #i‡
	`deföed
(
__i386__
)

194 
	~"©omic_›s/sysdïs/gcc/x86.h
"

196 #i‡
	`deföed
(
__x86_64__
)

197 
	~"©omic_›s/sysdïs/gcc/x86_64.h
"

199 #i‡
	`deföed
(
__ü64__
)

200 
	~"©omic_›s/sysdïs/gcc/ü64.h
"

201 
	#AO_GENERALIZE_TWICE


	)

203 #i‡
	`deföed
(
__hµa__
)

204 
	~"©omic_›s/sysdïs/gcc/hµa.h
"

205 
	#AO_CAN_EMUL_CAS


	)

207 #i‡
	`deföed
(
__Æpha__
)

208 
	~"©omic_›s/sysdïs/gcc/Æpha.h
"

209 
	#AO_GENERALIZE_TWICE


	)

211 #i‡
	`deföed
(
__s390__
)

212 
	~"©omic_›s/sysdïs/gcc/s390.h
"

214 #i‡
	`deföed
(
__•¨c__
)

215 
	~"©omic_›s/sysdïs/gcc/•¨c.h
"

216 
	#AO_CAN_EMUL_CAS


	)

218 #i‡
	`deföed
(
__m68k__
)

219 
	~"©omic_›s/sysdïs/gcc/m68k.h
"

221 #i‡
	`deföed
(
__powîpc__
Ë|| deföed(
__µc__
Ë|| deföed(
__PPC__
) \

222 || 
	`deföed
(
__powîpc64__
Ë|| 
	$deföed
(
__µc64__
)

223 
	~"©omic_›s/sysdïs/gcc/powîpc.h
"

225 #i‡
	`deföed
(
__¨m__
Ë&& !deföed(
AO_USE_PTHREAD_DEFS
)

226 
	~"©omic_›s/sysdïs/gcc/¨m.h
"

227 
	#AO_CAN_EMUL_CAS


	)

229 #i‡
	`deföed
(
__¸is__
Ë|| deföed(
CRIS
)

230 
	~"©omic_›s/sysdïs/gcc/¸is.h
"

234 #i‡
	`deföed
(
__INTEL_COMPILER
Ë&& !deföed(
AO_USE_PTHREAD_DEFS
)

235 #i‡
	`deföed
(
__ü64__
)

236 
	~"©omic_›s/sysdïs/icc/ü64.h
"

237 
	#AO_GENERALIZE_TWICE


	)

241 #i‡
	`deföed
(
_HPUX_SOURCE
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
AO_USE_PTHREAD_DEFS
)

242 #i‡
	`deföed
(
__ü64
)

243 
	~"©omic_›s/sysdïs/hpc/ü64.h
"

244 
	#AO_GENERALIZE_TWICE


	)

246 
	~"©omic_›s/sysdïs/hpc/hµa.h
"

247 
	#AO_CAN_EMUL_CAS


	)

251 #i‡!
	`deföed
(
__GNUC__
Ë&& (deföed(
•¨c
Ë|| deföed(
__•¨c
)) \

252 && !
	$deföed
(
AO_USE_PTHREAD_DEFS
)

253 
	~"©omic_›s/sysdïs/sunc/•¨c.h
"

254 
	#AO_CAN_EMUL_CAS


	)

257 #i‡
	`deföed
(
_MSC_VER
)

258 #i‡
	`deföed
(
_AMD64_
)

259 
	~"©omic_›s/sysdïs/ms·c/x86_64.h
"

260 #ñi‡
_M_IX86
 >= 400

261 
	~"©omic_›s/sysdïs/ms·c/x86.h
"

265 #i‡
	`deföed
(
AO_REQUIRE_CAS
Ë&& !deföed(
AO_HAVE_com∑ª_™d_sw≠
) \

266 && !
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
) \

267 && !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
)

268 #i‡
	`deföed
(
AO_CAN_EMUL_CAS
)

269 
	~"©omic_›s/sysdïs/emul_ˇs.h
"

271 #îr‹ 
C™nŸ
 
im∂emít
 
AO_com∑ª_™d_sw≠_fuŒ
 
⁄
 
this
 
¨chôe˘uª
.

277 #i‡
AO_AO_TS_T
 && !
	`deföed
(
AO_CLEAR
)

278 
	#AO_CLEAR
(
addr
Ë
	`AO_°‹e_ªÀa£
((
AO_TS_t
 *Ôddr, 
AO_TS_CLEAR
)

	)

280 #i‡
AO_CHAR_TS_T
 && !
	`deföed
(
AO_CLEAR
)

281 
	#AO_CLEAR
(
addr
Ë
	`AO_ch¨_°‹e_ªÀa£
((
AO_TS_t
 *Ôddr, 
AO_TS_CLEAR
)

	)

290 
	~"©omic_›s/gíîÆize.h
"

291 #ifde‡
AO_GENERALIZE_TWICE


292 
	~"©omic_›s/gíîÆize.h
"

296 
	#AO_TS_T
 
AO_TS_t


	)

297 
	#AO_T
 
AO_t


	)

298 
	#AO_TS_VAL
 
AO_TS_VAL_t


	)

	@libatomic_ops-1.2/src/atomic_ops/generalize-small.h

2 #i‡
deföed
(
AO_HAVE_ch¨_lﬂd_acquúe
Ë&& !deföed(
AO_HAVE_ch¨_lﬂd
)

3 
	#AO_ch¨_lﬂd
(
addr
Ë
	`AO_ch¨_lﬂd_acquúe
◊ddr)

	)

4 
	#AO_HAVE_ch¨_lﬂd


	)

7 #i‡
deföed
(
AO_HAVE_ch¨_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_ch¨_lﬂd_acquúe
)

8 
	#AO_ch¨_lﬂd_acquúe
(
addr
Ë
	`AO_ch¨_lﬂd_fuŒ
◊ddr)

	)

9 
	#AO_HAVE_ch¨_lﬂd_acquúe


	)

12 #i‡
deföed
(
AO_HAVE_ch¨_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_ch¨_lﬂd_ªad
)

13 
	#AO_ch¨_lﬂd_ªad
(
addr
Ë
	`AO_ch¨_lﬂd_fuŒ
◊ddr)

	)

14 
	#AO_HAVE_ch¨_lﬂd_ªad


	)

17 #i‡!
deföed
(
AO_HAVE_ch¨_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_ch¨_lﬂd_acquúe
)

18 
	#AO_ch¨_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_ch¨_lﬂd_acquúe
◊ddr)

	)

19 
	#AO_HAVE_ch¨_lﬂd_acquúe_ªad


	)

22 #i‡
deföed
(
AO_HAVE_ch¨_lﬂd
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

23 !
	$deföed
(
AO_HAVE_ch¨_lﬂd_acquúe
)

24 
AO_INLINE
 

25 
	$AO_ch¨_lﬂd_acquúe
(vﬁ©ûê*
addr
)

27 
ªsu…
 = 
	`AO_ch¨_lﬂd
(
addr
);

30 
	`AO_n›_fuŒ
();

31  
ªsu…
;

32 
	}
}

33 
	#AO_HAVE_ch¨_lﬂd_acquúe


	)

36 #i‡
deföed
(
AO_HAVE_ch¨_lﬂd
Ë&& deföed(
AO_HAVE_n›_ªad
) && \

37 !
	$deföed
(
AO_HAVE_ch¨_lﬂd_ªad
)

38 
AO_INLINE
 

39 
	$AO_ch¨_lﬂd_ªad
(vﬁ©ûê*
addr
)

41 
ªsu…
 = 
	`AO_ch¨_lﬂd
(
addr
);

44 
	`AO_n›_ªad
();

45  
ªsu…
;

46 
	}
}

47 
	#AO_HAVE_ch¨_lﬂd_ªad


	)

50 #i‡
deföed
(
AO_HAVE_ch¨_lﬂd_acquúe
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

51 !
	$deföed
(
AO_HAVE_ch¨_lﬂd_fuŒ
)

52 
	#AO_ch¨_lﬂd_fuŒ
(
addr
Ë(
	`AO_n›_fuŒ
(), 
	`AO_ch¨_lﬂd_acquúe
◊ddr))

	)

53 
	#AO_HAVE_ch¨_lﬂd_fuŒ


	)

56 #i‡!
	`deföed
(
AO_HAVE_ch¨_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_ch¨_lﬂd_ªad
)

57 
	#AO_ch¨_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_ch¨_lﬂd_ªad
◊ddr)

	)

58 
	#AO_HAVE_ch¨_lﬂd_acquúe_ªad


	)

61 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd_acquúe_ªad
Ë&& !deföed(
AO_HAVE_ch¨_lﬂd
)

62 
	#AO_ch¨_lﬂd
(
addr
Ë
	`AO_ch¨_lﬂd_acquúe_ªad
◊ddr)

	)

63 
	#AO_HAVE_ch¨_lﬂd


	)

66 #ifde‡
AO_NO_DD_ORDERING


67 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd_acquúe_ªad
)

68 
	#AO_ch¨_lﬂd_dd_acquúe_ªad
(
addr
) \

69 
	`AO_ch¨_lﬂd_acquúe_ªad
(
addr
)

	)

70 
	#AO_HAVE_ch¨_lﬂd_dd_acquúe_ªad


	)

73 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd
)

74 
	#AO_ch¨_lﬂd_dd_acquúe_ªad
(
addr
) \

75 
	`AO_ch¨_lﬂd
(
addr
)

	)

76 
	#AO_HAVE_ch¨_lﬂd_dd_acquúe_ªad


	)

83 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£
Ë&& !deföed(
AO_HAVE_ch¨_°‹e
)

84 
	#AO_ch¨_°‹e
(
addr
, 
vÆ
Ë
	`AO_ch¨_°‹e_ªÀa£
◊ddr,vÆ)

	)

85 
	#AO_HAVE_ch¨_°‹e


	)

88 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_ch¨_°‹e_ªÀa£
)

89 
	#AO_ch¨_°‹e_ªÀa£
(
addr
,
vÆ
Ë
	`AO_ch¨_°‹e_fuŒ
◊ddr,vÆ)

	)

90 
	#AO_HAVE_ch¨_°‹e_ªÀa£


	)

93 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_ch¨_°‹e_wrôe
)

94 
	#AO_ch¨_°‹e_wrôe
(
addr
,
vÆ
Ë
	`AO_ch¨_°‹e_fuŒ
◊ddr,vÆ)

	)

95 
	#AO_HAVE_ch¨_°‹e_wrôe


	)

98 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£
) && \

99 !
	$deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£_wrôe
)

100 
	#AO_ch¨_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
) \

101 
	`AO_ch¨_°‹e_ªÀa£
(
addr
,
vÆ
)

	)

102 
	#AO_HAVE_ch¨_°‹e_ªÀa£_wrôe


	)

105 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_wrôe
Ë&& !deföed(
AO_HAVE_ch¨_°‹e
)

106 
	#AO_ch¨_°‹e
(
addr
, 
vÆ
Ë
	`AO_ch¨_°‹e_wrôe
◊ddr,vÆ)

	)

107 
	#AO_HAVE_ch¨_°‹e


	)

110 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

111 !
	$deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£
)

112 
	#AO_ch¨_°‹e_ªÀa£
(
addr
,
vÆ
) \

113 (
	`AO_n›_fuŒ
(), 
	`AO_ch¨_°‹e
(
addr
,
vÆ
))

	)

114 
	#AO_HAVE_ch¨_°‹e_ªÀa£


	)

117 #i‡
	`deföed
(
AO_HAVE_n›_wrôe
Ë&& deföed(
AO_HAVE_ch¨_°‹e
) && \

118 !
	$deföed
(
AO_HAVE_ch¨_°‹e_wrôe
)

119 
	#AO_ch¨_°‹e_wrôe
(
addr
, 
vÆ
) \

120 (
	`AO_n›_wrôe
(), 
	`AO_ch¨_°‹e
(
addr
,
vÆ
))

	)

121 
	#AO_HAVE_ch¨_°‹e_wrôe


	)

124 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_wrôe
) && \

125 !
	$deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£_wrôe
)

126 
	#AO_ch¨_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
Ë
	`AO_ch¨_°‹e_wrôe
◊ddr,vÆ)

	)

127 
	#AO_HAVE_ch¨_°‹e_ªÀa£_wrôe


	)

130 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

131 !
	$deföed
(
AO_HAVE_ch¨_°‹e_fuŒ
)

132 
	#AO_ch¨_°‹e_fuŒ
(
addr
, 
vÆ
) \

133 (
	`AO_ch¨_°‹e_ªÀa£
(
addr
, 
vÆ
), 
	`AO_n›_fuŒ
())

	)

134 
	#AO_HAVE_ch¨_°‹e_fuŒ


	)

139 #i‡
	`deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠_fuŒ
) && \

140 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_fuŒ
)

141 
AO_INLINE
 
AO_t


142 
	$AO_ch¨_„tch_™d_add_fuŒ
(vﬁ©ûê*
addr
,

143 
ö¸
)

145 
ﬁd
;

148 
ﬁd
 = *
addr
;

150 !
	`AO_ch¨_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, old+
ö¸
));

151  
ﬁd
;

152 
	}
}

153 
	#AO_HAVE_ch¨_„tch_™d_add_fuŒ


	)

156 #i‡
deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠_acquúe
) && \

157 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
)

158 
AO_INLINE
 
AO_t


159 
	$AO_ch¨_„tch_™d_add_acquúe
(vﬁ©ûê*
addr
,

160 
ö¸
)

162 
ﬁd
;

165 
ﬁd
 = *
addr
;

167 !
	`AO_ch¨_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, old+
ö¸
));

168  
ﬁd
;

169 
	}
}

170 
	#AO_HAVE_ch¨_„tch_™d_add_acquúe


	)

173 #i‡
deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠_ªÀa£
) && \

174 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£
)

175 
AO_INLINE
 
AO_t


176 
	$AO_ch¨_„tch_™d_add_ªÀa£
(vﬁ©ûê*
addr
,

177 
ö¸
)

179 
ﬁd
;

182 
ﬁd
 = *
addr
;

184 !
	`AO_ch¨_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, old+
ö¸
));

185  
ﬁd
;

186 
	}
}

187 
	#AO_HAVE_ch¨_„tch_™d_add_ªÀa£


	)

190 #i‡
deföed
(
AO_HAVE_ch¨_„tch_™d_add_fuŒ
)

191 #i‡!
deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£
)

192 
	#AO_ch¨_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
) \

193 
	`AO_ch¨_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

194 
	#AO_HAVE_ch¨_„tch_™d_add_ªÀa£


	)

196 #i‡!
deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
)

197 
	#AO_ch¨_„tch_™d_add_acquúe
(
addr
, 
vÆ
) \

198 
	`AO_ch¨_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

199 
	#AO_HAVE_ch¨_„tch_™d_add_acquúe


	)

201 #i‡!
deföed
(
AO_HAVE_ch¨_„tch_™d_add_wrôe
)

202 
	#AO_ch¨_„tch_™d_add_wrôe
(
addr
, 
vÆ
) \

203 
	`AO_ch¨_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

204 
	#AO_HAVE_ch¨_„tch_™d_add_wrôe


	)

206 #i‡!
deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªad
)

207 
	#AO_ch¨_„tch_™d_add_ªad
(
addr
, 
vÆ
) \

208 
	`AO_ch¨_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

209 
	#AO_HAVE_ch¨_„tch_™d_add_ªad


	)

213 #i‡!
deföed
(
AO_HAVE_ch¨_„tch_™d_add
) && \

214 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£
)

215 
	#AO_ch¨_„tch_™d_add
(
addr
, 
vÆ
) \

216 
	`AO_ch¨_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

217 
	#AO_HAVE_ch¨_„tch_™d_add


	)

219 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add
) && \

220 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
)

221 
	#AO_ch¨_„tch_™d_add
(
addr
, 
vÆ
) \

222 
	`AO_ch¨_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

223 
	#AO_HAVE_ch¨_„tch_™d_add


	)

225 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add
) && \

226 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_wrôe
)

227 
	#AO_ch¨_„tch_™d_add
(
addr
, 
vÆ
) \

228 
	`AO_ch¨_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

229 
	#AO_HAVE_ch¨_„tch_™d_add


	)

231 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add
) && \

232 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªad
)

233 
	#AO_ch¨_„tch_™d_add
(
addr
, 
vÆ
) \

234 
	`AO_ch¨_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

235 
	#AO_HAVE_ch¨_„tch_™d_add


	)

238 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
) &&\

239 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

240 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_fuŒ
)

241 
	#AO_ch¨_„tch_™d_add_fuŒ
(
addr
, 
vÆ
) \

242 (
	`AO_n›_fuŒ
(), 
	`AO_ch¨_„tch_™d_add_acquúe
(
addr
, 
vÆ
))

	)

245 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£_wrôe
) && \

246 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_wrôe
)

247 
	#AO_ch¨_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

248 
	`AO_ch¨_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

249 
	#AO_HAVE_ch¨_„tch_™d_add_ªÀa£_wrôe


	)

251 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£_wrôe
) && \

252 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£
)

253 
	#AO_ch¨_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

254 
	`AO_ch¨_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

255 
	#AO_HAVE_ch¨_„tch_™d_add_ªÀa£_wrôe


	)

257 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad
) && \

258 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªad
)

259 
	#AO_ch¨_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

260 
	`AO_ch¨_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

261 
	#AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad


	)

263 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad
) && \

264 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
)

265 
	#AO_ch¨_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

266 
	`AO_ch¨_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

267 
	#AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad


	)

270 #ifde‡
AO_NO_DD_ORDERING


271 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad
)

272 
	#AO_ch¨_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

273 
	`AO_ch¨_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
)

	)

274 
	#AO_HAVE_ch¨_„tch_™d_add_dd_acquúe_ªad


	)

277 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add
)

278 
	#AO_ch¨_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

279 
	`AO_ch¨_„tch_™d_add
(
addr
, 
vÆ
)

	)

280 
	#AO_HAVE_ch¨_„tch_™d_add_dd_acquúe_ªad


	)

286 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_fuŒ
) &&\

287 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_fuŒ
)

288 
	#AO_ch¨_„tch_™d_add1_fuŒ
(
addr
) \

289 
	`AO_ch¨_„tch_™d_add_fuŒ
(
addr
,1)

	)

290 
	#AO_HAVE_ch¨_„tch_™d_add1_fuŒ


	)

292 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£
) &&\

293 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£
)

294 
	#AO_ch¨_„tch_™d_add1_ªÀa£
(
addr
) \

295 
	`AO_ch¨_„tch_™d_add_ªÀa£
(
addr
,1)

	)

296 
	#AO_HAVE_ch¨_„tch_™d_add1_ªÀa£


	)

298 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
) &&\

299 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe
)

300 
	#AO_ch¨_„tch_™d_add1_acquúe
(
addr
) \

301 
	`AO_ch¨_„tch_™d_add_acquúe
(
addr
,1)

	)

302 
	#AO_HAVE_ch¨_„tch_™d_add1_acquúe


	)

304 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_wrôe
) &&\

305 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_wrôe
)

306 
	#AO_ch¨_„tch_™d_add1_wrôe
(
addr
) \

307 
	`AO_ch¨_„tch_™d_add_wrôe
(
addr
,1)

	)

308 
	#AO_HAVE_ch¨_„tch_™d_add1_wrôe


	)

310 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªad
) &&\

311 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªad
)

312 
	#AO_ch¨_„tch_™d_add1_ªad
(
addr
) \

313 
	`AO_ch¨_„tch_™d_add_ªad
(
addr
,1)

	)

314 
	#AO_HAVE_ch¨_„tch_™d_add1_ªad


	)

316 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£_wrôe
) &&\

317 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£_wrôe
)

318 
	#AO_ch¨_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

319 
	`AO_ch¨_„tch_™d_add_ªÀa£_wrôe
(
addr
,1)

	)

320 
	#AO_HAVE_ch¨_„tch_™d_add1_ªÀa£_wrôe


	)

322 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad
) &&\

323 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad
)

324 
	#AO_ch¨_„tch_™d_add1_acquúe_ªad
(
addr
) \

325 
	`AO_ch¨_„tch_™d_add_acquúe_ªad
(
addr
,1)

	)

326 
	#AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad


	)

328 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add
) &&\

329 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1
)

330 
	#AO_ch¨_„tch_™d_add1
(
addr
) \

331 
	`AO_ch¨_„tch_™d_add
(
addr
,1)

	)

332 
	#AO_HAVE_ch¨_„tch_™d_add1


	)

335 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_fuŒ
)

336 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£
)

337 
	#AO_ch¨_„tch_™d_add1_ªÀa£
(
addr
) \

338 
	`AO_ch¨_„tch_™d_add1_fuŒ
(
addr
)

	)

339 
	#AO_HAVE_ch¨_„tch_™d_add1_ªÀa£


	)

341 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe
)

342 
	#AO_ch¨_„tch_™d_add1_acquúe
(
addr
) \

343 
	`AO_ch¨_„tch_™d_add1_fuŒ
(
addr
)

	)

344 
	#AO_HAVE_ch¨_„tch_™d_add1_acquúe


	)

346 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_wrôe
)

347 
	#AO_ch¨_„tch_™d_add1_wrôe
(
addr
) \

348 
	`AO_ch¨_„tch_™d_add1_fuŒ
(
addr
)

	)

349 
	#AO_HAVE_ch¨_„tch_™d_add1_wrôe


	)

351 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªad
)

352 
	#AO_ch¨_„tch_™d_add1_ªad
(
addr
) \

353 
	`AO_ch¨_„tch_™d_add1_fuŒ
(
addr
)

	)

354 
	#AO_HAVE_ch¨_„tch_™d_add1_ªad


	)

358 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1
) && \

359 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£
)

360 
	#AO_ch¨_„tch_™d_add1
(
addr
) \

361 
	`AO_ch¨_„tch_™d_add1_ªÀa£
(
addr
)

	)

362 
	#AO_HAVE_ch¨_„tch_™d_add1


	)

364 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1
) && \

365 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe
)

366 
	#AO_ch¨_„tch_™d_add1
(
addr
) \

367 
	`AO_ch¨_„tch_™d_add1_acquúe
(
addr
)

	)

368 
	#AO_HAVE_ch¨_„tch_™d_add1


	)

370 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1
) && \

371 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_wrôe
)

372 
	#AO_ch¨_„tch_™d_add1
(
addr
) \

373 
	`AO_ch¨_„tch_™d_add1_wrôe
(
addr
)

	)

374 
	#AO_HAVE_ch¨_„tch_™d_add1


	)

376 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1
) && \

377 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªad
)

378 
	#AO_ch¨_„tch_™d_add1
(
addr
) \

379 
	`AO_ch¨_„tch_™d_add1_ªad
(
addr
)

	)

380 
	#AO_HAVE_ch¨_„tch_™d_add1


	)

383 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe
) &&\

384 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

385 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_fuŒ
)

386 
	#AO_ch¨_„tch_™d_add1_fuŒ
(
addr
) \

387 (
	`AO_n›_fuŒ
(), 
	`AO_ch¨_„tch_™d_add1_acquúe
(
addr
))

	)

388 
	#AO_HAVE_ch¨_„tch_™d_add1_fuŒ


	)

391 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£_wrôe
) && \

392 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_wrôe
)

393 
	#AO_ch¨_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

394 
	`AO_ch¨_„tch_™d_add1_wrôe
(
addr
)

	)

395 
	#AO_HAVE_ch¨_„tch_™d_add1_ªÀa£_wrôe


	)

397 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£_wrôe
) && \

398 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£
)

399 
	#AO_ch¨_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

400 
	`AO_ch¨_„tch_™d_add1_ªÀa£
(
addr
)

	)

401 
	#AO_HAVE_ch¨_„tch_™d_add1_ªÀa£_wrôe


	)

403 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad
) && \

404 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªad
)

405 
	#AO_ch¨_„tch_™d_add1_acquúe_ªad
(
addr
) \

406 
	`AO_ch¨_„tch_™d_add1_ªad
(
addr
)

	)

407 
	#AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad


	)

409 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad
) && \

410 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe
)

411 
	#AO_ch¨_„tch_™d_add1_acquúe_ªad
(
addr
) \

412 
	`AO_ch¨_„tch_™d_add1_acquúe
(
addr
)

	)

413 
	#AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad


	)

416 #ifde‡
AO_NO_DD_ORDERING


417 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad
)

418 
	#AO_ch¨_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

419 
	`AO_ch¨_„tch_™d_add1_acquúe_ªad
(
addr
)

	)

420 
	#AO_HAVE_ch¨_„tch_™d_add1_dd_acquúe_ªad


	)

423 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1
)

424 
	#AO_ch¨_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

425 
	`AO_ch¨_„tch_™d_add1
(
addr
)

	)

426 
	#AO_HAVE_ch¨_„tch_™d_add1_dd_acquúe_ªad


	)

432 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_fuŒ
) &&\

433 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_fuŒ
)

434 
	#AO_ch¨_„tch_™d_sub1_fuŒ
(
addr
) \

435 
	`AO_ch¨_„tch_™d_add_fuŒ
(
addr
,()(-1))

	)

436 
	#AO_HAVE_ch¨_„tch_™d_sub1_fuŒ


	)

438 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£
) &&\

439 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£
)

440 
	#AO_ch¨_„tch_™d_sub1_ªÀa£
(
addr
) \

441 
	`AO_ch¨_„tch_™d_add_ªÀa£
(
addr
,()(-1))

	)

442 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£


	)

444 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
) &&\

445 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe
)

446 
	#AO_ch¨_„tch_™d_sub1_acquúe
(
addr
) \

447 
	`AO_ch¨_„tch_™d_add_acquúe
(
addr
,()(-1))

	)

448 
	#AO_HAVE_ch¨_„tch_™d_sub1_acquúe


	)

450 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_wrôe
) &&\

451 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_wrôe
)

452 
	#AO_ch¨_„tch_™d_sub1_wrôe
(
addr
) \

453 
	`AO_ch¨_„tch_™d_add_wrôe
(
addr
,()(-1))

	)

454 
	#AO_HAVE_ch¨_„tch_™d_sub1_wrôe


	)

456 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªad
) &&\

457 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªad
)

458 
	#AO_ch¨_„tch_™d_sub1_ªad
(
addr
) \

459 
	`AO_ch¨_„tch_™d_add_ªad
(
addr
,()(-1))

	)

460 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªad


	)

462 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£_wrôe
) &&\

463 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£_wrôe
)

464 
	#AO_ch¨_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

465 
	`AO_ch¨_„tch_™d_add_ªÀa£_wrôe
(
addr
,()(-1))

	)

466 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£_wrôe


	)

468 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad
) &&\

469 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad
)

470 
	#AO_ch¨_„tch_™d_sub1_acquúe_ªad
(
addr
) \

471 
	`AO_ch¨_„tch_™d_add_acquúe_ªad
(
addr
,()(-1))

	)

472 
	#AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad


	)

474 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add
) &&\

475 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1
)

476 
	#AO_ch¨_„tch_™d_sub1
(
addr
) \

477 
	`AO_ch¨_„tch_™d_add
(
addr
,()(-1))

	)

478 
	#AO_HAVE_ch¨_„tch_™d_sub1


	)

481 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_fuŒ
)

482 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£
)

483 
	#AO_ch¨_„tch_™d_sub1_ªÀa£
(
addr
) \

484 
	`AO_ch¨_„tch_™d_sub1_fuŒ
(
addr
)

	)

485 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£


	)

487 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe
)

488 
	#AO_ch¨_„tch_™d_sub1_acquúe
(
addr
) \

489 
	`AO_ch¨_„tch_™d_sub1_fuŒ
(
addr
)

	)

490 
	#AO_HAVE_ch¨_„tch_™d_sub1_acquúe


	)

492 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_wrôe
)

493 
	#AO_ch¨_„tch_™d_sub1_wrôe
(
addr
) \

494 
	`AO_ch¨_„tch_™d_sub1_fuŒ
(
addr
)

	)

495 
	#AO_HAVE_ch¨_„tch_™d_sub1_wrôe


	)

497 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªad
)

498 
	#AO_ch¨_„tch_™d_sub1_ªad
(
addr
) \

499 
	`AO_ch¨_„tch_™d_sub1_fuŒ
(
addr
)

	)

500 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªad


	)

504 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1
) && \

505 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£
)

506 
	#AO_ch¨_„tch_™d_sub1
(
addr
) \

507 
	`AO_ch¨_„tch_™d_sub1_ªÀa£
(
addr
)

	)

508 
	#AO_HAVE_ch¨_„tch_™d_sub1


	)

510 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1
) && \

511 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe
)

512 
	#AO_ch¨_„tch_™d_sub1
(
addr
) \

513 
	`AO_ch¨_„tch_™d_sub1_acquúe
(
addr
)

	)

514 
	#AO_HAVE_ch¨_„tch_™d_sub1


	)

516 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1
) && \

517 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_wrôe
)

518 
	#AO_ch¨_„tch_™d_sub1
(
addr
) \

519 
	`AO_ch¨_„tch_™d_sub1_wrôe
(
addr
)

	)

520 
	#AO_HAVE_ch¨_„tch_™d_sub1


	)

522 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1
) && \

523 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªad
)

524 
	#AO_ch¨_„tch_™d_sub1
(
addr
) \

525 
	`AO_ch¨_„tch_™d_sub1_ªad
(
addr
)

	)

526 
	#AO_HAVE_ch¨_„tch_™d_sub1


	)

529 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe
) &&\

530 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

531 !
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_fuŒ
)

532 
	#AO_ch¨_„tch_™d_sub1_fuŒ
(
addr
) \

533 (
	`AO_n›_fuŒ
(), 
	`AO_ch¨_„tch_™d_sub1_acquúe
(
addr
))

	)

534 
	#AO_HAVE_ch¨_„tch_™d_sub1_fuŒ


	)

537 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£_wrôe
) && \

538 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_wrôe
)

539 
	#AO_ch¨_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

540 
	`AO_ch¨_„tch_™d_sub1_wrôe
(
addr
)

	)

541 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£_wrôe


	)

543 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£_wrôe
) && \

544 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£
)

545 
	#AO_ch¨_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

546 
	`AO_ch¨_„tch_™d_sub1_ªÀa£
(
addr
)

	)

547 
	#AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£_wrôe


	)

549 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad
) && \

550 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªad
)

551 
	#AO_ch¨_„tch_™d_sub1_acquúe_ªad
(
addr
) \

552 
	`AO_ch¨_„tch_™d_sub1_ªad
(
addr
)

	)

553 
	#AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad


	)

555 #i‡!
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad
) && \

556 
	$deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe
)

557 
	#AO_ch¨_„tch_™d_sub1_acquúe_ªad
(
addr
) \

558 
	`AO_ch¨_„tch_™d_sub1_acquúe
(
addr
)

	)

559 
	#AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad


	)

562 #ifde‡
AO_NO_DD_ORDERING


563 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad
)

564 
	#AO_ch¨_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

565 
	`AO_ch¨_„tch_™d_sub1_acquúe_ªad
(
addr
)

	)

566 
	#AO_HAVE_ch¨_„tch_™d_sub1_dd_acquúe_ªad


	)

569 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1
)

570 
	#AO_ch¨_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

571 
	`AO_ch¨_„tch_™d_sub1
(
addr
)

	)

572 
	#AO_HAVE_ch¨_„tch_™d_sub1_dd_acquúe_ªad


	)

577 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe
Ë&& !deföed(
AO_HAVE_sh‹t_lﬂd
)

578 
	#AO_sh‹t_lﬂd
(
addr
Ë
	`AO_sh‹t_lﬂd_acquúe
◊ddr)

	)

579 
	#AO_HAVE_sh‹t_lﬂd


	)

582 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_sh‹t_lﬂd_acquúe
)

583 
	#AO_sh‹t_lﬂd_acquúe
(
addr
Ë
	`AO_sh‹t_lﬂd_fuŒ
◊ddr)

	)

584 
	#AO_HAVE_sh‹t_lﬂd_acquúe


	)

587 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_sh‹t_lﬂd_ªad
)

588 
	#AO_sh‹t_lﬂd_ªad
(
addr
Ë
	`AO_sh‹t_lﬂd_fuŒ
◊ddr)

	)

589 
	#AO_HAVE_sh‹t_lﬂd_ªad


	)

592 #i‡!
	`deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_sh‹t_lﬂd_acquúe
)

593 
	#AO_sh‹t_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_sh‹t_lﬂd_acquúe
◊ddr)

	)

594 
	#AO_HAVE_sh‹t_lﬂd_acquúe_ªad


	)

597 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

598 !
	$deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe
)

599 
AO_INLINE
 

600 
	$AO_sh‹t_lﬂd_acquúe
(vﬁ©ûê*
addr
)

602 
ªsu…
 = 
	`AO_sh‹t_lﬂd
(
addr
);

605 
	`AO_n›_fuŒ
();

606  
ªsu…
;

607 
	}
}

608 
	#AO_HAVE_sh‹t_lﬂd_acquúe


	)

611 #i‡
deföed
(
AO_HAVE_sh‹t_lﬂd
Ë&& deföed(
AO_HAVE_n›_ªad
) && \

612 !
	$deföed
(
AO_HAVE_sh‹t_lﬂd_ªad
)

613 
AO_INLINE
 

614 
	$AO_sh‹t_lﬂd_ªad
(vﬁ©ûê*
addr
)

616 
ªsu…
 = 
	`AO_sh‹t_lﬂd
(
addr
);

619 
	`AO_n›_ªad
();

620  
ªsu…
;

621 
	}
}

622 
	#AO_HAVE_sh‹t_lﬂd_ªad


	)

625 #i‡
deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

626 !
	$deföed
(
AO_HAVE_sh‹t_lﬂd_fuŒ
)

627 
	#AO_sh‹t_lﬂd_fuŒ
(
addr
Ë(
	`AO_n›_fuŒ
(), 
	`AO_sh‹t_lﬂd_acquúe
◊ddr))

	)

628 
	#AO_HAVE_sh‹t_lﬂd_fuŒ


	)

631 #i‡!
	`deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_sh‹t_lﬂd_ªad
)

632 
	#AO_sh‹t_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_sh‹t_lﬂd_ªad
◊ddr)

	)

633 
	#AO_HAVE_sh‹t_lﬂd_acquúe_ªad


	)

636 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe_ªad
Ë&& !deföed(
AO_HAVE_sh‹t_lﬂd
)

637 
	#AO_sh‹t_lﬂd
(
addr
Ë
	`AO_sh‹t_lﬂd_acquúe_ªad
◊ddr)

	)

638 
	#AO_HAVE_sh‹t_lﬂd


	)

641 #ifde‡
AO_NO_DD_ORDERING


642 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe_ªad
)

643 
	#AO_sh‹t_lﬂd_dd_acquúe_ªad
(
addr
) \

644 
	`AO_sh‹t_lﬂd_acquúe_ªad
(
addr
)

	)

645 
	#AO_HAVE_sh‹t_lﬂd_dd_acquúe_ªad


	)

648 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd
)

649 
	#AO_sh‹t_lﬂd_dd_acquúe_ªad
(
addr
) \

650 
	`AO_sh‹t_lﬂd
(
addr
)

	)

651 
	#AO_HAVE_sh‹t_lﬂd_dd_acquúe_ªad


	)

658 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£
Ë&& !deföed(
AO_HAVE_sh‹t_°‹e
)

659 
	#AO_sh‹t_°‹e
(
addr
, 
vÆ
Ë
	`AO_sh‹t_°‹e_ªÀa£
◊ddr,vÆ)

	)

660 
	#AO_HAVE_sh‹t_°‹e


	)

663 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_sh‹t_°‹e_ªÀa£
)

664 
	#AO_sh‹t_°‹e_ªÀa£
(
addr
,
vÆ
Ë
	`AO_sh‹t_°‹e_fuŒ
◊ddr,vÆ)

	)

665 
	#AO_HAVE_sh‹t_°‹e_ªÀa£


	)

668 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_sh‹t_°‹e_wrôe
)

669 
	#AO_sh‹t_°‹e_wrôe
(
addr
,
vÆ
Ë
	`AO_sh‹t_°‹e_fuŒ
◊ddr,vÆ)

	)

670 
	#AO_HAVE_sh‹t_°‹e_wrôe


	)

673 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£
) && \

674 !
	$deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£_wrôe
)

675 
	#AO_sh‹t_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
) \

676 
	`AO_sh‹t_°‹e_ªÀa£
(
addr
,
vÆ
)

	)

677 
	#AO_HAVE_sh‹t_°‹e_ªÀa£_wrôe


	)

680 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_wrôe
Ë&& !deföed(
AO_HAVE_sh‹t_°‹e
)

681 
	#AO_sh‹t_°‹e
(
addr
, 
vÆ
Ë
	`AO_sh‹t_°‹e_wrôe
◊ddr,vÆ)

	)

682 
	#AO_HAVE_sh‹t_°‹e


	)

685 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

686 !
	$deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£
)

687 
	#AO_sh‹t_°‹e_ªÀa£
(
addr
,
vÆ
) \

688 (
	`AO_n›_fuŒ
(), 
	`AO_sh‹t_°‹e
(
addr
,
vÆ
))

	)

689 
	#AO_HAVE_sh‹t_°‹e_ªÀa£


	)

692 #i‡
	`deföed
(
AO_HAVE_n›_wrôe
Ë&& deföed(
AO_HAVE_sh‹t_°‹e
) && \

693 !
	$deföed
(
AO_HAVE_sh‹t_°‹e_wrôe
)

694 
	#AO_sh‹t_°‹e_wrôe
(
addr
, 
vÆ
) \

695 (
	`AO_n›_wrôe
(), 
	`AO_sh‹t_°‹e
(
addr
,
vÆ
))

	)

696 
	#AO_HAVE_sh‹t_°‹e_wrôe


	)

699 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_wrôe
) && \

700 !
	$deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£_wrôe
)

701 
	#AO_sh‹t_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
Ë
	`AO_sh‹t_°‹e_wrôe
◊ddr,vÆ)

	)

702 
	#AO_HAVE_sh‹t_°‹e_ªÀa£_wrôe


	)

705 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

706 !
	$deföed
(
AO_HAVE_sh‹t_°‹e_fuŒ
)

707 
	#AO_sh‹t_°‹e_fuŒ
(
addr
, 
vÆ
) \

708 (
	`AO_sh‹t_°‹e_ªÀa£
(
addr
, 
vÆ
), 
	`AO_n›_fuŒ
())

	)

709 
	#AO_HAVE_sh‹t_°‹e_fuŒ


	)

714 #i‡
	`deföed
(
AO_HAVE_sh‹t_com∑ª_™d_sw≠_fuŒ
) && \

715 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_fuŒ
)

716 
AO_INLINE
 
AO_t


717 
	$AO_sh‹t_„tch_™d_add_fuŒ
(vﬁ©ûê*
addr
,

718 
ö¸
)

720 
ﬁd
;

723 
ﬁd
 = *
addr
;

725 !
	`AO_sh‹t_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, old+
ö¸
));

726  
ﬁd
;

727 
	}
}

728 
	#AO_HAVE_sh‹t_„tch_™d_add_fuŒ


	)

731 #i‡
deföed
(
AO_HAVE_sh‹t_com∑ª_™d_sw≠_acquúe
) && \

732 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
)

733 
AO_INLINE
 
AO_t


734 
	$AO_sh‹t_„tch_™d_add_acquúe
(vﬁ©ûê*
addr
,

735 
ö¸
)

737 
ﬁd
;

740 
ﬁd
 = *
addr
;

742 !
	`AO_sh‹t_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, old+
ö¸
));

743  
ﬁd
;

744 
	}
}

745 
	#AO_HAVE_sh‹t_„tch_™d_add_acquúe


	)

748 #i‡
deföed
(
AO_HAVE_sh‹t_com∑ª_™d_sw≠_ªÀa£
) && \

749 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£
)

750 
AO_INLINE
 
AO_t


751 
	$AO_sh‹t_„tch_™d_add_ªÀa£
(vﬁ©ûê*
addr
,

752 
ö¸
)

754 
ﬁd
;

757 
ﬁd
 = *
addr
;

759 !
	`AO_sh‹t_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, old+
ö¸
));

760  
ﬁd
;

761 
	}
}

762 
	#AO_HAVE_sh‹t_„tch_™d_add_ªÀa£


	)

765 #i‡
deföed
(
AO_HAVE_sh‹t_„tch_™d_add_fuŒ
)

766 #i‡!
deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£
)

767 
	#AO_sh‹t_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
) \

768 
	`AO_sh‹t_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

769 
	#AO_HAVE_sh‹t_„tch_™d_add_ªÀa£


	)

771 #i‡!
deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
)

772 
	#AO_sh‹t_„tch_™d_add_acquúe
(
addr
, 
vÆ
) \

773 
	`AO_sh‹t_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

774 
	#AO_HAVE_sh‹t_„tch_™d_add_acquúe


	)

776 #i‡!
deföed
(
AO_HAVE_sh‹t_„tch_™d_add_wrôe
)

777 
	#AO_sh‹t_„tch_™d_add_wrôe
(
addr
, 
vÆ
) \

778 
	`AO_sh‹t_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

779 
	#AO_HAVE_sh‹t_„tch_™d_add_wrôe


	)

781 #i‡!
deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªad
)

782 
	#AO_sh‹t_„tch_™d_add_ªad
(
addr
, 
vÆ
) \

783 
	`AO_sh‹t_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

784 
	#AO_HAVE_sh‹t_„tch_™d_add_ªad


	)

788 #i‡!
deföed
(
AO_HAVE_sh‹t_„tch_™d_add
) && \

789 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£
)

790 
	#AO_sh‹t_„tch_™d_add
(
addr
, 
vÆ
) \

791 
	`AO_sh‹t_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

792 
	#AO_HAVE_sh‹t_„tch_™d_add


	)

794 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add
) && \

795 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
)

796 
	#AO_sh‹t_„tch_™d_add
(
addr
, 
vÆ
) \

797 
	`AO_sh‹t_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

798 
	#AO_HAVE_sh‹t_„tch_™d_add


	)

800 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add
) && \

801 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_wrôe
)

802 
	#AO_sh‹t_„tch_™d_add
(
addr
, 
vÆ
) \

803 
	`AO_sh‹t_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

804 
	#AO_HAVE_sh‹t_„tch_™d_add


	)

806 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add
) && \

807 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªad
)

808 
	#AO_sh‹t_„tch_™d_add
(
addr
, 
vÆ
) \

809 
	`AO_sh‹t_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

810 
	#AO_HAVE_sh‹t_„tch_™d_add


	)

813 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
) &&\

814 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

815 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_fuŒ
)

816 
	#AO_sh‹t_„tch_™d_add_fuŒ
(
addr
, 
vÆ
) \

817 (
	`AO_n›_fuŒ
(), 
	`AO_sh‹t_„tch_™d_add_acquúe
(
addr
, 
vÆ
))

	)

820 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£_wrôe
) && \

821 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_wrôe
)

822 
	#AO_sh‹t_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

823 
	`AO_sh‹t_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

824 
	#AO_HAVE_sh‹t_„tch_™d_add_ªÀa£_wrôe


	)

826 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£_wrôe
) && \

827 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£
)

828 
	#AO_sh‹t_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

829 
	`AO_sh‹t_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

830 
	#AO_HAVE_sh‹t_„tch_™d_add_ªÀa£_wrôe


	)

832 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad
) && \

833 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªad
)

834 
	#AO_sh‹t_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

835 
	`AO_sh‹t_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

836 
	#AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad


	)

838 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad
) && \

839 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
)

840 
	#AO_sh‹t_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

841 
	`AO_sh‹t_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

842 
	#AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad


	)

845 #ifde‡
AO_NO_DD_ORDERING


846 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad
)

847 
	#AO_sh‹t_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

848 
	`AO_sh‹t_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
)

	)

849 
	#AO_HAVE_sh‹t_„tch_™d_add_dd_acquúe_ªad


	)

852 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add
)

853 
	#AO_sh‹t_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

854 
	`AO_sh‹t_„tch_™d_add
(
addr
, 
vÆ
)

	)

855 
	#AO_HAVE_sh‹t_„tch_™d_add_dd_acquúe_ªad


	)

861 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_fuŒ
) &&\

862 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_fuŒ
)

863 
	#AO_sh‹t_„tch_™d_add1_fuŒ
(
addr
) \

864 
	`AO_sh‹t_„tch_™d_add_fuŒ
(
addr
,1)

	)

865 
	#AO_HAVE_sh‹t_„tch_™d_add1_fuŒ


	)

867 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£
) &&\

868 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£
)

869 
	#AO_sh‹t_„tch_™d_add1_ªÀa£
(
addr
) \

870 
	`AO_sh‹t_„tch_™d_add_ªÀa£
(
addr
,1)

	)

871 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£


	)

873 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
) &&\

874 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe
)

875 
	#AO_sh‹t_„tch_™d_add1_acquúe
(
addr
) \

876 
	`AO_sh‹t_„tch_™d_add_acquúe
(
addr
,1)

	)

877 
	#AO_HAVE_sh‹t_„tch_™d_add1_acquúe


	)

879 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_wrôe
) &&\

880 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_wrôe
)

881 
	#AO_sh‹t_„tch_™d_add1_wrôe
(
addr
) \

882 
	`AO_sh‹t_„tch_™d_add_wrôe
(
addr
,1)

	)

883 
	#AO_HAVE_sh‹t_„tch_™d_add1_wrôe


	)

885 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªad
) &&\

886 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªad
)

887 
	#AO_sh‹t_„tch_™d_add1_ªad
(
addr
) \

888 
	`AO_sh‹t_„tch_™d_add_ªad
(
addr
,1)

	)

889 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªad


	)

891 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£_wrôe
) &&\

892 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£_wrôe
)

893 
	#AO_sh‹t_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

894 
	`AO_sh‹t_„tch_™d_add_ªÀa£_wrôe
(
addr
,1)

	)

895 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£_wrôe


	)

897 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad
) &&\

898 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad
)

899 
	#AO_sh‹t_„tch_™d_add1_acquúe_ªad
(
addr
) \

900 
	`AO_sh‹t_„tch_™d_add_acquúe_ªad
(
addr
,1)

	)

901 
	#AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad


	)

903 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add
) &&\

904 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1
)

905 
	#AO_sh‹t_„tch_™d_add1
(
addr
) \

906 
	`AO_sh‹t_„tch_™d_add
(
addr
,1)

	)

907 
	#AO_HAVE_sh‹t_„tch_™d_add1


	)

910 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_fuŒ
)

911 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£
)

912 
	#AO_sh‹t_„tch_™d_add1_ªÀa£
(
addr
) \

913 
	`AO_sh‹t_„tch_™d_add1_fuŒ
(
addr
)

	)

914 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£


	)

916 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe
)

917 
	#AO_sh‹t_„tch_™d_add1_acquúe
(
addr
) \

918 
	`AO_sh‹t_„tch_™d_add1_fuŒ
(
addr
)

	)

919 
	#AO_HAVE_sh‹t_„tch_™d_add1_acquúe


	)

921 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_wrôe
)

922 
	#AO_sh‹t_„tch_™d_add1_wrôe
(
addr
) \

923 
	`AO_sh‹t_„tch_™d_add1_fuŒ
(
addr
)

	)

924 
	#AO_HAVE_sh‹t_„tch_™d_add1_wrôe


	)

926 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªad
)

927 
	#AO_sh‹t_„tch_™d_add1_ªad
(
addr
) \

928 
	`AO_sh‹t_„tch_™d_add1_fuŒ
(
addr
)

	)

929 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªad


	)

933 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1
) && \

934 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£
)

935 
	#AO_sh‹t_„tch_™d_add1
(
addr
) \

936 
	`AO_sh‹t_„tch_™d_add1_ªÀa£
(
addr
)

	)

937 
	#AO_HAVE_sh‹t_„tch_™d_add1


	)

939 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1
) && \

940 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe
)

941 
	#AO_sh‹t_„tch_™d_add1
(
addr
) \

942 
	`AO_sh‹t_„tch_™d_add1_acquúe
(
addr
)

	)

943 
	#AO_HAVE_sh‹t_„tch_™d_add1


	)

945 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1
) && \

946 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_wrôe
)

947 
	#AO_sh‹t_„tch_™d_add1
(
addr
) \

948 
	`AO_sh‹t_„tch_™d_add1_wrôe
(
addr
)

	)

949 
	#AO_HAVE_sh‹t_„tch_™d_add1


	)

951 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1
) && \

952 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªad
)

953 
	#AO_sh‹t_„tch_™d_add1
(
addr
) \

954 
	`AO_sh‹t_„tch_™d_add1_ªad
(
addr
)

	)

955 
	#AO_HAVE_sh‹t_„tch_™d_add1


	)

958 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe
) &&\

959 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

960 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_fuŒ
)

961 
	#AO_sh‹t_„tch_™d_add1_fuŒ
(
addr
) \

962 (
	`AO_n›_fuŒ
(), 
	`AO_sh‹t_„tch_™d_add1_acquúe
(
addr
))

	)

963 
	#AO_HAVE_sh‹t_„tch_™d_add1_fuŒ


	)

966 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£_wrôe
) && \

967 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_wrôe
)

968 
	#AO_sh‹t_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

969 
	`AO_sh‹t_„tch_™d_add1_wrôe
(
addr
)

	)

970 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£_wrôe


	)

972 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£_wrôe
) && \

973 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£
)

974 
	#AO_sh‹t_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

975 
	`AO_sh‹t_„tch_™d_add1_ªÀa£
(
addr
)

	)

976 
	#AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£_wrôe


	)

978 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad
) && \

979 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªad
)

980 
	#AO_sh‹t_„tch_™d_add1_acquúe_ªad
(
addr
) \

981 
	`AO_sh‹t_„tch_™d_add1_ªad
(
addr
)

	)

982 
	#AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad


	)

984 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad
) && \

985 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe
)

986 
	#AO_sh‹t_„tch_™d_add1_acquúe_ªad
(
addr
) \

987 
	`AO_sh‹t_„tch_™d_add1_acquúe
(
addr
)

	)

988 
	#AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad


	)

991 #ifde‡
AO_NO_DD_ORDERING


992 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad
)

993 
	#AO_sh‹t_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

994 
	`AO_sh‹t_„tch_™d_add1_acquúe_ªad
(
addr
)

	)

995 
	#AO_HAVE_sh‹t_„tch_™d_add1_dd_acquúe_ªad


	)

998 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1
)

999 
	#AO_sh‹t_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

1000 
	`AO_sh‹t_„tch_™d_add1
(
addr
)

	)

1001 
	#AO_HAVE_sh‹t_„tch_™d_add1_dd_acquúe_ªad


	)

1007 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_fuŒ
) &&\

1008 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_fuŒ
)

1009 
	#AO_sh‹t_„tch_™d_sub1_fuŒ
(
addr
) \

1010 
	`AO_sh‹t_„tch_™d_add_fuŒ
(
addr
,()(-1))

	)

1011 
	#AO_HAVE_sh‹t_„tch_™d_sub1_fuŒ


	)

1013 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£
) &&\

1014 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£
)

1015 
	#AO_sh‹t_„tch_™d_sub1_ªÀa£
(
addr
) \

1016 
	`AO_sh‹t_„tch_™d_add_ªÀa£
(
addr
,()(-1))

	)

1017 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£


	)

1019 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
) &&\

1020 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe
)

1021 
	#AO_sh‹t_„tch_™d_sub1_acquúe
(
addr
) \

1022 
	`AO_sh‹t_„tch_™d_add_acquúe
(
addr
,()(-1))

	)

1023 
	#AO_HAVE_sh‹t_„tch_™d_sub1_acquúe


	)

1025 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_wrôe
) &&\

1026 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_wrôe
)

1027 
	#AO_sh‹t_„tch_™d_sub1_wrôe
(
addr
) \

1028 
	`AO_sh‹t_„tch_™d_add_wrôe
(
addr
,()(-1))

	)

1029 
	#AO_HAVE_sh‹t_„tch_™d_sub1_wrôe


	)

1031 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªad
) &&\

1032 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªad
)

1033 
	#AO_sh‹t_„tch_™d_sub1_ªad
(
addr
) \

1034 
	`AO_sh‹t_„tch_™d_add_ªad
(
addr
,()(-1))

	)

1035 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªad


	)

1037 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£_wrôe
) &&\

1038 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
)

1039 
	#AO_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

1040 
	`AO_sh‹t_„tch_™d_add_ªÀa£_wrôe
(
addr
,()(-1))

	)

1041 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£_wrôe


	)

1043 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad
) &&\

1044 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad
)

1045 
	#AO_sh‹t_„tch_™d_sub1_acquúe_ªad
(
addr
) \

1046 
	`AO_sh‹t_„tch_™d_add_acquúe_ªad
(
addr
,()(-1))

	)

1047 
	#AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad


	)

1049 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add
) &&\

1050 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1
)

1051 
	#AO_sh‹t_„tch_™d_sub1
(
addr
) \

1052 
	`AO_sh‹t_„tch_™d_add
(
addr
,()(-1))

	)

1053 
	#AO_HAVE_sh‹t_„tch_™d_sub1


	)

1056 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_fuŒ
)

1057 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£
)

1058 
	#AO_sh‹t_„tch_™d_sub1_ªÀa£
(
addr
) \

1059 
	`AO_sh‹t_„tch_™d_sub1_fuŒ
(
addr
)

	)

1060 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£


	)

1062 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe
)

1063 
	#AO_sh‹t_„tch_™d_sub1_acquúe
(
addr
) \

1064 
	`AO_sh‹t_„tch_™d_sub1_fuŒ
(
addr
)

	)

1065 
	#AO_HAVE_sh‹t_„tch_™d_sub1_acquúe


	)

1067 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_wrôe
)

1068 
	#AO_sh‹t_„tch_™d_sub1_wrôe
(
addr
) \

1069 
	`AO_sh‹t_„tch_™d_sub1_fuŒ
(
addr
)

	)

1070 
	#AO_HAVE_sh‹t_„tch_™d_sub1_wrôe


	)

1072 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªad
)

1073 
	#AO_sh‹t_„tch_™d_sub1_ªad
(
addr
) \

1074 
	`AO_sh‹t_„tch_™d_sub1_fuŒ
(
addr
)

	)

1075 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªad


	)

1079 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1
) && \

1080 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£
)

1081 
	#AO_sh‹t_„tch_™d_sub1
(
addr
) \

1082 
	`AO_sh‹t_„tch_™d_sub1_ªÀa£
(
addr
)

	)

1083 
	#AO_HAVE_sh‹t_„tch_™d_sub1


	)

1085 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1
) && \

1086 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe
)

1087 
	#AO_sh‹t_„tch_™d_sub1
(
addr
) \

1088 
	`AO_sh‹t_„tch_™d_sub1_acquúe
(
addr
)

	)

1089 
	#AO_HAVE_sh‹t_„tch_™d_sub1


	)

1091 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1
) && \

1092 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_wrôe
)

1093 
	#AO_sh‹t_„tch_™d_sub1
(
addr
) \

1094 
	`AO_sh‹t_„tch_™d_sub1_wrôe
(
addr
)

	)

1095 
	#AO_HAVE_sh‹t_„tch_™d_sub1


	)

1097 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1
) && \

1098 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªad
)

1099 
	#AO_sh‹t_„tch_™d_sub1
(
addr
) \

1100 
	`AO_sh‹t_„tch_™d_sub1_ªad
(
addr
)

	)

1101 
	#AO_HAVE_sh‹t_„tch_™d_sub1


	)

1104 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe
) &&\

1105 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1106 !
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_fuŒ
)

1107 
	#AO_sh‹t_„tch_™d_sub1_fuŒ
(
addr
) \

1108 (
	`AO_n›_fuŒ
(), 
	`AO_sh‹t_„tch_™d_sub1_acquúe
(
addr
))

	)

1109 
	#AO_HAVE_sh‹t_„tch_™d_sub1_fuŒ


	)

1112 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
) && \

1113 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_wrôe
)

1114 
	#AO_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

1115 
	`AO_sh‹t_„tch_™d_sub1_wrôe
(
addr
)

	)

1116 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£_wrôe


	)

1118 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
) && \

1119 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£
)

1120 
	#AO_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

1121 
	`AO_sh‹t_„tch_™d_sub1_ªÀa£
(
addr
)

	)

1122 
	#AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£_wrôe


	)

1124 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad
) && \

1125 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªad
)

1126 
	#AO_sh‹t_„tch_™d_sub1_acquúe_ªad
(
addr
) \

1127 
	`AO_sh‹t_„tch_™d_sub1_ªad
(
addr
)

	)

1128 
	#AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad


	)

1130 #i‡!
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad
) && \

1131 
	$deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe
)

1132 
	#AO_sh‹t_„tch_™d_sub1_acquúe_ªad
(
addr
) \

1133 
	`AO_sh‹t_„tch_™d_sub1_acquúe
(
addr
)

	)

1134 
	#AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad


	)

1137 #ifde‡
AO_NO_DD_ORDERING


1138 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad
)

1139 
	#AO_sh‹t_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

1140 
	`AO_sh‹t_„tch_™d_sub1_acquúe_ªad
(
addr
)

	)

1141 
	#AO_HAVE_sh‹t_„tch_™d_sub1_dd_acquúe_ªad


	)

1144 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1
)

1145 
	#AO_sh‹t_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

1146 
	`AO_sh‹t_„tch_™d_sub1
(
addr
)

	)

1147 
	#AO_HAVE_sh‹t_„tch_™d_sub1_dd_acquúe_ªad


	)

1152 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_acquúe
Ë&& !deföed(
AO_HAVE_öt_lﬂd
)

1153 
	#AO_öt_lﬂd
(
addr
Ë
	`AO_öt_lﬂd_acquúe
◊ddr)

	)

1154 
	#AO_HAVE_öt_lﬂd


	)

1157 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_öt_lﬂd_acquúe
)

1158 
	#AO_öt_lﬂd_acquúe
(
addr
Ë
	`AO_öt_lﬂd_fuŒ
◊ddr)

	)

1159 
	#AO_HAVE_öt_lﬂd_acquúe


	)

1162 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_öt_lﬂd_ªad
)

1163 
	#AO_öt_lﬂd_ªad
(
addr
Ë
	`AO_öt_lﬂd_fuŒ
◊ddr)

	)

1164 
	#AO_HAVE_öt_lﬂd_ªad


	)

1167 #i‡!
	`deföed
(
AO_HAVE_öt_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_öt_lﬂd_acquúe
)

1168 
	#AO_öt_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_öt_lﬂd_acquúe
◊ddr)

	)

1169 
	#AO_HAVE_öt_lﬂd_acquúe_ªad


	)

1172 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

1173 !
	$deföed
(
AO_HAVE_öt_lﬂd_acquúe
)

1174 
AO_INLINE
 

1175 
	$AO_öt_lﬂd_acquúe
(vﬁ©ûê*
addr
)

1177 
ªsu…
 = 
	`AO_öt_lﬂd
(
addr
);

1180 
	`AO_n›_fuŒ
();

1181  
ªsu…
;

1182 
	}
}

1183 
	#AO_HAVE_öt_lﬂd_acquúe


	)

1186 #i‡
deföed
(
AO_HAVE_öt_lﬂd
Ë&& deföed(
AO_HAVE_n›_ªad
) && \

1187 !
	$deföed
(
AO_HAVE_öt_lﬂd_ªad
)

1188 
AO_INLINE
 

1189 
	$AO_öt_lﬂd_ªad
(vﬁ©ûê*
addr
)

1191 
ªsu…
 = 
	`AO_öt_lﬂd
(
addr
);

1194 
	`AO_n›_ªad
();

1195  
ªsu…
;

1196 
	}
}

1197 
	#AO_HAVE_öt_lﬂd_ªad


	)

1200 #i‡
deföed
(
AO_HAVE_öt_lﬂd_acquúe
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

1201 !
	$deföed
(
AO_HAVE_öt_lﬂd_fuŒ
)

1202 
	#AO_öt_lﬂd_fuŒ
(
addr
Ë(
	`AO_n›_fuŒ
(), 
	`AO_öt_lﬂd_acquúe
◊ddr))

	)

1203 
	#AO_HAVE_öt_lﬂd_fuŒ


	)

1206 #i‡!
	`deföed
(
AO_HAVE_öt_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_öt_lﬂd_ªad
)

1207 
	#AO_öt_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_öt_lﬂd_ªad
◊ddr)

	)

1208 
	#AO_HAVE_öt_lﬂd_acquúe_ªad


	)

1211 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_acquúe_ªad
Ë&& !deföed(
AO_HAVE_öt_lﬂd
)

1212 
	#AO_öt_lﬂd
(
addr
Ë
	`AO_öt_lﬂd_acquúe_ªad
◊ddr)

	)

1213 
	#AO_HAVE_öt_lﬂd


	)

1216 #ifde‡
AO_NO_DD_ORDERING


1217 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_acquúe_ªad
)

1218 
	#AO_öt_lﬂd_dd_acquúe_ªad
(
addr
) \

1219 
	`AO_öt_lﬂd_acquúe_ªad
(
addr
)

	)

1220 
	#AO_HAVE_öt_lﬂd_dd_acquúe_ªad


	)

1223 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd
)

1224 
	#AO_öt_lﬂd_dd_acquúe_ªad
(
addr
) \

1225 
	`AO_öt_lﬂd
(
addr
)

	)

1226 
	#AO_HAVE_öt_lﬂd_dd_acquúe_ªad


	)

1233 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_ªÀa£
Ë&& !deföed(
AO_HAVE_öt_°‹e
)

1234 
	#AO_öt_°‹e
(
addr
, 
vÆ
Ë
	`AO_öt_°‹e_ªÀa£
◊ddr,vÆ)

	)

1235 
	#AO_HAVE_öt_°‹e


	)

1238 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_öt_°‹e_ªÀa£
)

1239 
	#AO_öt_°‹e_ªÀa£
(
addr
,
vÆ
Ë
	`AO_öt_°‹e_fuŒ
◊ddr,vÆ)

	)

1240 
	#AO_HAVE_öt_°‹e_ªÀa£


	)

1243 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_öt_°‹e_wrôe
)

1244 
	#AO_öt_°‹e_wrôe
(
addr
,
vÆ
Ë
	`AO_öt_°‹e_fuŒ
◊ddr,vÆ)

	)

1245 
	#AO_HAVE_öt_°‹e_wrôe


	)

1248 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_ªÀa£
) && \

1249 !
	$deföed
(
AO_HAVE_öt_°‹e_ªÀa£_wrôe
)

1250 
	#AO_öt_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
) \

1251 
	`AO_öt_°‹e_ªÀa£
(
addr
,
vÆ
)

	)

1252 
	#AO_HAVE_öt_°‹e_ªÀa£_wrôe


	)

1255 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_wrôe
Ë&& !deföed(
AO_HAVE_öt_°‹e
)

1256 
	#AO_öt_°‹e
(
addr
, 
vÆ
Ë
	`AO_öt_°‹e_wrôe
◊ddr,vÆ)

	)

1257 
	#AO_HAVE_öt_°‹e


	)

1260 #i‡
	`deföed
(
AO_HAVE_öt_°‹e
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

1261 !
	$deföed
(
AO_HAVE_öt_°‹e_ªÀa£
)

1262 
	#AO_öt_°‹e_ªÀa£
(
addr
,
vÆ
) \

1263 (
	`AO_n›_fuŒ
(), 
	`AO_öt_°‹e
(
addr
,
vÆ
))

	)

1264 
	#AO_HAVE_öt_°‹e_ªÀa£


	)

1267 #i‡
	`deföed
(
AO_HAVE_n›_wrôe
Ë&& deföed(
AO_HAVE_öt_°‹e
) && \

1268 !
	$deföed
(
AO_HAVE_öt_°‹e_wrôe
)

1269 
	#AO_öt_°‹e_wrôe
(
addr
, 
vÆ
) \

1270 (
	`AO_n›_wrôe
(), 
	`AO_öt_°‹e
(
addr
,
vÆ
))

	)

1271 
	#AO_HAVE_öt_°‹e_wrôe


	)

1274 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_wrôe
) && \

1275 !
	$deföed
(
AO_HAVE_öt_°‹e_ªÀa£_wrôe
)

1276 
	#AO_öt_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
Ë
	`AO_öt_°‹e_wrôe
◊ddr,vÆ)

	)

1277 
	#AO_HAVE_öt_°‹e_ªÀa£_wrôe


	)

1280 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_ªÀa£
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

1281 !
	$deföed
(
AO_HAVE_öt_°‹e_fuŒ
)

1282 
	#AO_öt_°‹e_fuŒ
(
addr
, 
vÆ
) \

1283 (
	`AO_öt_°‹e_ªÀa£
(
addr
, 
vÆ
), 
	`AO_n›_fuŒ
())

	)

1284 
	#AO_HAVE_öt_°‹e_fuŒ


	)

1289 #i‡
	`deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_fuŒ
) && \

1290 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
)

1291 
AO_INLINE
 
AO_t


1292 
	$AO_öt_„tch_™d_add_fuŒ
(vﬁ©ûê*
addr
,

1293 
ö¸
)

1295 
ﬁd
;

1298 
ﬁd
 = *
addr
;

1300 !
	`AO_öt_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, old+
ö¸
));

1301  
ﬁd
;

1302 
	}
}

1303 
	#AO_HAVE_öt_„tch_™d_add_fuŒ


	)

1306 #i‡
deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_acquúe
) && \

1307 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
)

1308 
AO_INLINE
 
AO_t


1309 
	$AO_öt_„tch_™d_add_acquúe
(vﬁ©ûê*
addr
,

1310 
ö¸
)

1312 
ﬁd
;

1315 
ﬁd
 = *
addr
;

1317 !
	`AO_öt_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, old+
ö¸
));

1318  
ﬁd
;

1319 
	}
}

1320 
	#AO_HAVE_öt_„tch_™d_add_acquúe


	)

1323 #i‡
deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_ªÀa£
) && \

1324 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
)

1325 
AO_INLINE
 
AO_t


1326 
	$AO_öt_„tch_™d_add_ªÀa£
(vﬁ©ûê*
addr
,

1327 
ö¸
)

1329 
ﬁd
;

1332 
ﬁd
 = *
addr
;

1334 !
	`AO_öt_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, old+
ö¸
));

1335  
ﬁd
;

1336 
	}
}

1337 
	#AO_HAVE_öt_„tch_™d_add_ªÀa£


	)

1340 #i‡
deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
)

1341 #i‡!
deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
)

1342 
	#AO_öt_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
) \

1343 
	`AO_öt_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

1344 
	#AO_HAVE_öt_„tch_™d_add_ªÀa£


	)

1346 #i‡!
deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
)

1347 
	#AO_öt_„tch_™d_add_acquúe
(
addr
, 
vÆ
) \

1348 
	`AO_öt_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

1349 
	#AO_HAVE_öt_„tch_™d_add_acquúe


	)

1351 #i‡!
deföed
(
AO_HAVE_öt_„tch_™d_add_wrôe
)

1352 
	#AO_öt_„tch_™d_add_wrôe
(
addr
, 
vÆ
) \

1353 
	`AO_öt_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

1354 
	#AO_HAVE_öt_„tch_™d_add_wrôe


	)

1356 #i‡!
deföed
(
AO_HAVE_öt_„tch_™d_add_ªad
)

1357 
	#AO_öt_„tch_™d_add_ªad
(
addr
, 
vÆ
) \

1358 
	`AO_öt_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

1359 
	#AO_HAVE_öt_„tch_™d_add_ªad


	)

1363 #i‡!
deföed
(
AO_HAVE_öt_„tch_™d_add
) && \

1364 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
)

1365 
	#AO_öt_„tch_™d_add
(
addr
, 
vÆ
) \

1366 
	`AO_öt_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

1367 
	#AO_HAVE_öt_„tch_™d_add


	)

1369 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add
) && \

1370 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
)

1371 
	#AO_öt_„tch_™d_add
(
addr
, 
vÆ
) \

1372 
	`AO_öt_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

1373 
	#AO_HAVE_öt_„tch_™d_add


	)

1375 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add
) && \

1376 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_wrôe
)

1377 
	#AO_öt_„tch_™d_add
(
addr
, 
vÆ
) \

1378 
	`AO_öt_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

1379 
	#AO_HAVE_öt_„tch_™d_add


	)

1381 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add
) && \

1382 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_ªad
)

1383 
	#AO_öt_„tch_™d_add
(
addr
, 
vÆ
) \

1384 
	`AO_öt_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

1385 
	#AO_HAVE_öt_„tch_™d_add


	)

1388 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
) &&\

1389 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1390 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
)

1391 
	#AO_öt_„tch_™d_add_fuŒ
(
addr
, 
vÆ
) \

1392 (
	`AO_n›_fuŒ
(), 
	`AO_öt_„tch_™d_add_acquúe
(
addr
, 
vÆ
))

	)

1395 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£_wrôe
) && \

1396 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_wrôe
)

1397 
	#AO_öt_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

1398 
	`AO_öt_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

1399 
	#AO_HAVE_öt_„tch_™d_add_ªÀa£_wrôe


	)

1401 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£_wrôe
) && \

1402 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
)

1403 
	#AO_öt_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

1404 
	`AO_öt_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

1405 
	#AO_HAVE_öt_„tch_™d_add_ªÀa£_wrôe


	)

1407 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe_ªad
) && \

1408 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_ªad
)

1409 
	#AO_öt_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

1410 
	`AO_öt_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

1411 
	#AO_HAVE_öt_„tch_™d_add_acquúe_ªad


	)

1413 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe_ªad
) && \

1414 
	$deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
)

1415 
	#AO_öt_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

1416 
	`AO_öt_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

1417 
	#AO_HAVE_öt_„tch_™d_add_acquúe_ªad


	)

1420 #ifde‡
AO_NO_DD_ORDERING


1421 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe_ªad
)

1422 
	#AO_öt_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

1423 
	`AO_öt_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
)

	)

1424 
	#AO_HAVE_öt_„tch_™d_add_dd_acquúe_ªad


	)

1427 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add
)

1428 
	#AO_öt_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

1429 
	`AO_öt_„tch_™d_add
(
addr
, 
vÆ
)

	)

1430 
	#AO_HAVE_öt_„tch_™d_add_dd_acquúe_ªad


	)

1436 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
) &&\

1437 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_fuŒ
)

1438 
	#AO_öt_„tch_™d_add1_fuŒ
(
addr
) \

1439 
	`AO_öt_„tch_™d_add_fuŒ
(
addr
,1)

	)

1440 
	#AO_HAVE_öt_„tch_™d_add1_fuŒ


	)

1442 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
) &&\

1443 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£
)

1444 
	#AO_öt_„tch_™d_add1_ªÀa£
(
addr
) \

1445 
	`AO_öt_„tch_™d_add_ªÀa£
(
addr
,1)

	)

1446 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£


	)

1448 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
) &&\

1449 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
)

1450 
	#AO_öt_„tch_™d_add1_acquúe
(
addr
) \

1451 
	`AO_öt_„tch_™d_add_acquúe
(
addr
,1)

	)

1452 
	#AO_HAVE_öt_„tch_™d_add1_acquúe


	)

1454 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_wrôe
) &&\

1455 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_wrôe
)

1456 
	#AO_öt_„tch_™d_add1_wrôe
(
addr
) \

1457 
	`AO_öt_„tch_™d_add_wrôe
(
addr
,1)

	)

1458 
	#AO_HAVE_öt_„tch_™d_add1_wrôe


	)

1460 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªad
) &&\

1461 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªad
)

1462 
	#AO_öt_„tch_™d_add1_ªad
(
addr
) \

1463 
	`AO_öt_„tch_™d_add_ªad
(
addr
,1)

	)

1464 
	#AO_HAVE_öt_„tch_™d_add1_ªad


	)

1466 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£_wrôe
) &&\

1467 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£_wrôe
)

1468 
	#AO_öt_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

1469 
	`AO_öt_„tch_™d_add_ªÀa£_wrôe
(
addr
,1)

	)

1470 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£_wrôe


	)

1472 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe_ªad
) &&\

1473 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe_ªad
)

1474 
	#AO_öt_„tch_™d_add1_acquúe_ªad
(
addr
) \

1475 
	`AO_öt_„tch_™d_add_acquúe_ªad
(
addr
,1)

	)

1476 
	#AO_HAVE_öt_„tch_™d_add1_acquúe_ªad


	)

1478 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add
) &&\

1479 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1
)

1480 
	#AO_öt_„tch_™d_add1
(
addr
) \

1481 
	`AO_öt_„tch_™d_add
(
addr
,1)

	)

1482 
	#AO_HAVE_öt_„tch_™d_add1


	)

1485 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_fuŒ
)

1486 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£
)

1487 
	#AO_öt_„tch_™d_add1_ªÀa£
(
addr
) \

1488 
	`AO_öt_„tch_™d_add1_fuŒ
(
addr
)

	)

1489 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£


	)

1491 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
)

1492 
	#AO_öt_„tch_™d_add1_acquúe
(
addr
) \

1493 
	`AO_öt_„tch_™d_add1_fuŒ
(
addr
)

	)

1494 
	#AO_HAVE_öt_„tch_™d_add1_acquúe


	)

1496 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_wrôe
)

1497 
	#AO_öt_„tch_™d_add1_wrôe
(
addr
) \

1498 
	`AO_öt_„tch_™d_add1_fuŒ
(
addr
)

	)

1499 
	#AO_HAVE_öt_„tch_™d_add1_wrôe


	)

1501 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_ªad
)

1502 
	#AO_öt_„tch_™d_add1_ªad
(
addr
) \

1503 
	`AO_öt_„tch_™d_add1_fuŒ
(
addr
)

	)

1504 
	#AO_HAVE_öt_„tch_™d_add1_ªad


	)

1508 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1
) && \

1509 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£
)

1510 
	#AO_öt_„tch_™d_add1
(
addr
) \

1511 
	`AO_öt_„tch_™d_add1_ªÀa£
(
addr
)

	)

1512 
	#AO_HAVE_öt_„tch_™d_add1


	)

1514 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1
) && \

1515 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
)

1516 
	#AO_öt_„tch_™d_add1
(
addr
) \

1517 
	`AO_öt_„tch_™d_add1_acquúe
(
addr
)

	)

1518 
	#AO_HAVE_öt_„tch_™d_add1


	)

1520 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1
) && \

1521 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_wrôe
)

1522 
	#AO_öt_„tch_™d_add1
(
addr
) \

1523 
	`AO_öt_„tch_™d_add1_wrôe
(
addr
)

	)

1524 
	#AO_HAVE_öt_„tch_™d_add1


	)

1526 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1
) && \

1527 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªad
)

1528 
	#AO_öt_„tch_™d_add1
(
addr
) \

1529 
	`AO_öt_„tch_™d_add1_ªad
(
addr
)

	)

1530 
	#AO_HAVE_öt_„tch_™d_add1


	)

1533 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
) &&\

1534 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1535 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_fuŒ
)

1536 
	#AO_öt_„tch_™d_add1_fuŒ
(
addr
) \

1537 (
	`AO_n›_fuŒ
(), 
	`AO_öt_„tch_™d_add1_acquúe
(
addr
))

	)

1538 
	#AO_HAVE_öt_„tch_™d_add1_fuŒ


	)

1541 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£_wrôe
) && \

1542 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_wrôe
)

1543 
	#AO_öt_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

1544 
	`AO_öt_„tch_™d_add1_wrôe
(
addr
)

	)

1545 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£_wrôe


	)

1547 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£_wrôe
) && \

1548 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£
)

1549 
	#AO_öt_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

1550 
	`AO_öt_„tch_™d_add1_ªÀa£
(
addr
)

	)

1551 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£_wrôe


	)

1553 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe_ªad
) && \

1554 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªad
)

1555 
	#AO_öt_„tch_™d_add1_acquúe_ªad
(
addr
) \

1556 
	`AO_öt_„tch_™d_add1_ªad
(
addr
)

	)

1557 
	#AO_HAVE_öt_„tch_™d_add1_acquúe_ªad


	)

1559 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe_ªad
) && \

1560 
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
)

1561 
	#AO_öt_„tch_™d_add1_acquúe_ªad
(
addr
) \

1562 
	`AO_öt_„tch_™d_add1_acquúe
(
addr
)

	)

1563 
	#AO_HAVE_öt_„tch_™d_add1_acquúe_ªad


	)

1566 #ifde‡
AO_NO_DD_ORDERING


1567 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe_ªad
)

1568 
	#AO_öt_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

1569 
	`AO_öt_„tch_™d_add1_acquúe_ªad
(
addr
)

	)

1570 
	#AO_HAVE_öt_„tch_™d_add1_dd_acquúe_ªad


	)

1573 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1
)

1574 
	#AO_öt_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

1575 
	`AO_öt_„tch_™d_add1
(
addr
)

	)

1576 
	#AO_HAVE_öt_„tch_™d_add1_dd_acquúe_ªad


	)

1582 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
) &&\

1583 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_fuŒ
)

1584 
	#AO_öt_„tch_™d_sub1_fuŒ
(
addr
) \

1585 
	`AO_öt_„tch_™d_add_fuŒ
(
addr
,()(-1))

	)

1586 
	#AO_HAVE_öt_„tch_™d_sub1_fuŒ


	)

1588 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
) &&\

1589 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£
)

1590 
	#AO_öt_„tch_™d_sub1_ªÀa£
(
addr
) \

1591 
	`AO_öt_„tch_™d_add_ªÀa£
(
addr
,()(-1))

	)

1592 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£


	)

1594 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
) &&\

1595 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
)

1596 
	#AO_öt_„tch_™d_sub1_acquúe
(
addr
) \

1597 
	`AO_öt_„tch_™d_add_acquúe
(
addr
,()(-1))

	)

1598 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe


	)

1600 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_wrôe
) &&\

1601 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_wrôe
)

1602 
	#AO_öt_„tch_™d_sub1_wrôe
(
addr
) \

1603 
	`AO_öt_„tch_™d_add_wrôe
(
addr
,()(-1))

	)

1604 
	#AO_HAVE_öt_„tch_™d_sub1_wrôe


	)

1606 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªad
) &&\

1607 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªad
)

1608 
	#AO_öt_„tch_™d_sub1_ªad
(
addr
) \

1609 
	`AO_öt_„tch_™d_add_ªad
(
addr
,()(-1))

	)

1610 
	#AO_HAVE_öt_„tch_™d_sub1_ªad


	)

1612 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£_wrôe
) &&\

1613 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£_wrôe
)

1614 
	#AO_öt_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

1615 
	`AO_öt_„tch_™d_add_ªÀa£_wrôe
(
addr
,()(-1))

	)

1616 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£_wrôe


	)

1618 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe_ªad
) &&\

1619 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad
)

1620 
	#AO_öt_„tch_™d_sub1_acquúe_ªad
(
addr
) \

1621 
	`AO_öt_„tch_™d_add_acquúe_ªad
(
addr
,()(-1))

	)

1622 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad


	)

1624 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add
) &&\

1625 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1
)

1626 
	#AO_öt_„tch_™d_sub1
(
addr
) \

1627 
	`AO_öt_„tch_™d_add
(
addr
,()(-1))

	)

1628 
	#AO_HAVE_öt_„tch_™d_sub1


	)

1631 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_fuŒ
)

1632 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£
)

1633 
	#AO_öt_„tch_™d_sub1_ªÀa£
(
addr
) \

1634 
	`AO_öt_„tch_™d_sub1_fuŒ
(
addr
)

	)

1635 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£


	)

1637 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
)

1638 
	#AO_öt_„tch_™d_sub1_acquúe
(
addr
) \

1639 
	`AO_öt_„tch_™d_sub1_fuŒ
(
addr
)

	)

1640 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe


	)

1642 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_wrôe
)

1643 
	#AO_öt_„tch_™d_sub1_wrôe
(
addr
) \

1644 
	`AO_öt_„tch_™d_sub1_fuŒ
(
addr
)

	)

1645 
	#AO_HAVE_öt_„tch_™d_sub1_wrôe


	)

1647 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªad
)

1648 
	#AO_öt_„tch_™d_sub1_ªad
(
addr
) \

1649 
	`AO_öt_„tch_™d_sub1_fuŒ
(
addr
)

	)

1650 
	#AO_HAVE_öt_„tch_™d_sub1_ªad


	)

1654 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1
) && \

1655 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£
)

1656 
	#AO_öt_„tch_™d_sub1
(
addr
) \

1657 
	`AO_öt_„tch_™d_sub1_ªÀa£
(
addr
)

	)

1658 
	#AO_HAVE_öt_„tch_™d_sub1


	)

1660 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1
) && \

1661 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
)

1662 
	#AO_öt_„tch_™d_sub1
(
addr
) \

1663 
	`AO_öt_„tch_™d_sub1_acquúe
(
addr
)

	)

1664 
	#AO_HAVE_öt_„tch_™d_sub1


	)

1666 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1
) && \

1667 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_wrôe
)

1668 
	#AO_öt_„tch_™d_sub1
(
addr
) \

1669 
	`AO_öt_„tch_™d_sub1_wrôe
(
addr
)

	)

1670 
	#AO_HAVE_öt_„tch_™d_sub1


	)

1672 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1
) && \

1673 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªad
)

1674 
	#AO_öt_„tch_™d_sub1
(
addr
) \

1675 
	`AO_öt_„tch_™d_sub1_ªad
(
addr
)

	)

1676 
	#AO_HAVE_öt_„tch_™d_sub1


	)

1679 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
) &&\

1680 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1681 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_fuŒ
)

1682 
	#AO_öt_„tch_™d_sub1_fuŒ
(
addr
) \

1683 (
	`AO_n›_fuŒ
(), 
	`AO_öt_„tch_™d_sub1_acquúe
(
addr
))

	)

1684 
	#AO_HAVE_öt_„tch_™d_sub1_fuŒ


	)

1687 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£_wrôe
) && \

1688 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_wrôe
)

1689 
	#AO_öt_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

1690 
	`AO_öt_„tch_™d_sub1_wrôe
(
addr
)

	)

1691 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£_wrôe


	)

1693 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£_wrôe
) && \

1694 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£
)

1695 
	#AO_öt_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

1696 
	`AO_öt_„tch_™d_sub1_ªÀa£
(
addr
)

	)

1697 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£_wrôe


	)

1699 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad
) && \

1700 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªad
)

1701 
	#AO_öt_„tch_™d_sub1_acquúe_ªad
(
addr
) \

1702 
	`AO_öt_„tch_™d_sub1_ªad
(
addr
)

	)

1703 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad


	)

1705 #i‡!
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad
) && \

1706 
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
)

1707 
	#AO_öt_„tch_™d_sub1_acquúe_ªad
(
addr
) \

1708 
	`AO_öt_„tch_™d_sub1_acquúe
(
addr
)

	)

1709 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad


	)

1712 #ifde‡
AO_NO_DD_ORDERING


1713 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad
)

1714 
	#AO_öt_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

1715 
	`AO_öt_„tch_™d_sub1_acquúe_ªad
(
addr
)

	)

1716 
	#AO_HAVE_öt_„tch_™d_sub1_dd_acquúe_ªad


	)

1719 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1
)

1720 
	#AO_öt_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

1721 
	`AO_öt_„tch_™d_sub1
(
addr
)

	)

1722 
	#AO_HAVE_öt_„tch_™d_sub1_dd_acquúe_ªad


	)

	@libatomic_ops-1.2/src/atomic_ops/generalize.h

46 #i‚de‡
ATOMIC_OPS_H


47 #îr‹ 
Atomic_›s_gíîÆize
.
h
 
should
 
nŸ
 
be
 
ö˛uded
 
dúe˘ly
.

50 #i‡
AO_CHAR_TS_T


51 
	#AO_TS_COMPARE_AND_SWAP_FULL
(
a
,
o
,
n
) \

52 
	`AO_ch¨_com∑ª_™d_sw≠_fuŒ
(
a
,
o
,
n
)

	)

53 
	#AO_TS_COMPARE_AND_SWAP_ACQUIRE
(
a
,
o
,
n
) \

54 
	`AO_ch¨_com∑ª_™d_sw≠_acquúe
(
a
,
o
,
n
)

	)

55 
	#AO_TS_COMPARE_AND_SWAP_RELEASE
(
a
,
o
,
n
) \

56 
	`AO_ch¨_com∑ª_™d_sw≠_ªÀa£
(
a
,
o
,
n
)

	)

57 
	#AO_TS_COMPARE_AND_SWAP
(
a
,
o
,
n
) \

58 
	`AO_ch¨_com∑ª_™d_sw≠
(
a
,
o
,
n
)

	)

61 #i‡
AO_AO_TS_T


62 
	#AO_TS_COMPARE_AND_SWAP_FULL
(
a
,
o
,
n
) \

63 
	`AO_com∑ª_™d_sw≠_fuŒ
(
a
,
o
,
n
)

	)

64 
	#AO_TS_COMPARE_AND_SWAP_ACQUIRE
(
a
,
o
,
n
) \

65 
	`AO_com∑ª_™d_sw≠_acquúe
(
a
,
o
,
n
)

	)

66 
	#AO_TS_COMPARE_AND_SWAP_RELEASE
(
a
,
o
,
n
) \

67 
	`AO_com∑ª_™d_sw≠_ªÀa£
(
a
,
o
,
n
)

	)

68 
	#AO_TS_COMPARE_AND_SWAP
(
a
,
o
,
n
) \

69 
	`AO_com∑ª_™d_sw≠
(
a
,
o
,
n
)

	)

73 #i‡!
deföed
(
AO_HAVE_ã°_™d_£t
) && \

74 !
deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£
) && \

75 !
deföed
(
AO_HAVE_ã°_™d_£t_acquúe
) && \

76 !
deföed
(
AO_HAVE_ã°_™d_£t_ªad
) && \

77 !
	$deföed
(
AO_HAVE_ã°_™d_£t_fuŒ
)

78 #i‡
AO_AO_TS_T
 && 
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
) || \

79 
AO_CHAR_TS_T
 && 
	$deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠_fuŒ
)

80 
AO_INLINE
 
AO_TS_VAL_t


81 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

83 i‡(
	`AO_TS_COMPARE_AND_SWAP_FULL
(
addr
, 
AO_TS_CLEAR
, 
AO_TS_SET
))

84  
AO_TS_CLEAR
;

86  
AO_TS_SET
;

87 
	}
}

88 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

91 #i‡
AO_AO_TS_T
 && 
deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
) || \

92 
	gAO_CHAR_TS_T
 && 
	$deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠_acquúe
)

93 
AO_INLINE
 
AO_TS_VAL_t


94 
	$AO_ã°_™d_£t_acquúe
(vﬁ©ûê
AO_TS_t
 *
addr
)

96 i‡(
	`AO_TS_COMPARE_AND_SWAP_ACQUIRE
(
addr
, 
AO_TS_CLEAR
, 
AO_TS_SET
))

97  
AO_TS_CLEAR
;

99  
AO_TS_SET
;

100 
	}
}

101 
	#AO_HAVE_ã°_™d_£t_acquúe


	)

104 #i‡
AO_AO_TS_T
 && 
deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
) || \

105 
	gAO_CHAR_TS_T
 && 
	$deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠_ªÀa£
)

106 
AO_INLINE
 
AO_TS_VAL_t


107 
	$AO_ã°_™d_£t_ªÀa£
(vﬁ©ûê
AO_TS_t
 *
addr
)

109 i‡(
	`AO_TS_COMPARE_AND_SWAP_RELEASE
(
addr
, 
AO_TS_CLEAR
, 
AO_TS_SET
))

110  
AO_TS_CLEAR
;

112  
AO_TS_SET
;

113 
	}
}

114 
	#AO_HAVE_ã°_™d_£t_ªÀa£


	)

117 #i‡
AO_AO_TS_T
 && 
deföed
(
AO_HAVE_com∑ª_™d_sw≠
) || \

118 
	gAO_CHAR_TS_T
 && 
	$deföed
(
AO_HAVE_ch¨_com∑ª_™d_sw≠
)

119 
AO_INLINE
 
AO_TS_VAL_t


120 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
)

122 i‡(
	`AO_TS_COMPARE_AND_SWAP
(
addr
, 
AO_TS_CLEAR
, 
AO_TS_SET
))

123  
AO_TS_CLEAR
;

125  
AO_TS_SET
;

126 
	}
}

127 
	#AO_HAVE_ã°_™d_£t


	)

130 #i‡
deföed
(
AO_HAVE_ã°_™d_£t
Ë&& deföed(
AO_HAVE_n›_fuŒ
) \

131 && !
	$deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

132 
AO_INLINE
 
AO_TS_VAL_t


133 
	$AO_ã°_™d_£t_acquúe
(vﬁ©ûê
AO_TS_t
 *
addr
)

135 
AO_TS_VAL_t
 
ªsu…
 = 
	`AO_ã°_™d_£t
(
addr
);

136 
	`AO_n›_fuŒ
();

137  
ªsu…
;

138 
	}
}

139 
	#AO_HAVE_ã°_™d_£t_acquúe


	)

145 #i‡!
deföed
(
AO_HAVE_n›
)

146 
AO_INLINE
 
	$AO_n›
(Ë{
	}
}

147 
	#AO_HAVE_n›


	)

150 #i‡
deföed
(
AO_HAVE_ã°_™d_£t_fuŒ
Ë&& !deföed(
AO_HAVE_n›_fuŒ
)

151 
AO_INLINE
 

152 
	$AO_n›_fuŒ
()

154 
AO_TS_t
 
dummy
 = 
AO_TS_INITIALIZER
;

155 
	`AO_ã°_™d_£t_fuŒ
(&
dummy
);

156 
	}
}

157 
	#AO_HAVE_n›_fuŒ


	)

160 #i‡
deföed
(
AO_HAVE_n›_acquúe
)

161 #îr‹ 
AO_n›_acquúe
 
is
 
u£Àss
: 
d⁄t
 
deföe
.

163 #i‡
deföed
(
AO_HAVE_n›_ªÀa£
)

164 #îr‹ 
AO_n›_ªÀa£
 
is
 
u£Àss
: 
d⁄t
 
deföe
.

167 #i‡
deföed
(
AO_HAVE_n›_fuŒ
Ë&& !deföed(
AO_HAVE_n›_ªad
)

168 
	#AO_n›_ªad
(Ë
	`AO_n›_fuŒ
()

	)

169 
	#AO_HAVE_n›_ªad


	)

172 #i‡
deföed
(
AO_HAVE_n›_fuŒ
Ë&& !deföed(
AO_HAVE_n›_wrôe
)

173 
	#AO_n›_wrôe
(Ë
	`AO_n›_fuŒ
()

	)

174 
	#AO_HAVE_n›_wrôe


	)

178 #i‡
deföed
(
AO_HAVE_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_lﬂd_acquúe
)

179 
	#AO_lﬂd_acquúe
(
addr
Ë
	`AO_lﬂd_fuŒ
◊ddr)

	)

180 
	#AO_HAVE_lﬂd_acquúe


	)

183 #i‡
deföed
(
AO_HAVE_lﬂd_acquúe
Ë&& !deföed(
AO_HAVE_lﬂd
)

184 
	#AO_lﬂd
(
addr
Ë
	`AO_lﬂd_acquúe
◊ddr)

	)

185 
	#AO_HAVE_lﬂd


	)

188 #i‡
deföed
(
AO_HAVE_lﬂd_fuŒ
Ë&& !deföed(
AO_HAVE_lﬂd_ªad
)

189 
	#AO_lﬂd_ªad
(
addr
Ë
	`AO_lﬂd_fuŒ
◊ddr)

	)

190 
	#AO_HAVE_lﬂd_ªad


	)

193 #i‡!
deföed
(
AO_HAVE_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_lﬂd_acquúe
)

194 
	#AO_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_lﬂd_acquúe
◊ddr)

	)

195 
	#AO_HAVE_lﬂd_acquúe_ªad


	)

198 #i‡
deföed
(
AO_HAVE_lﬂd
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

199 !
	$deföed
(
AO_HAVE_lﬂd_acquúe
)

200 
AO_INLINE
 
AO_t


201 
	$AO_lﬂd_acquúe
(vﬁ©ûê
AO_t
 *
addr
)

203 
AO_t
 
ªsu…
 = 
	`AO_lﬂd
(
addr
);

206 
	`AO_n›_fuŒ
();

207  
ªsu…
;

208 
	}
}

209 
	#AO_HAVE_lﬂd_acquúe


	)

212 #i‡
deföed
(
AO_HAVE_lﬂd
Ë&& deföed(
AO_HAVE_n›_ªad
) && \

213 !
	$deföed
(
AO_HAVE_lﬂd_ªad
)

214 
AO_INLINE
 
AO_t


215 
	$AO_lﬂd_ªad
(vﬁ©ûê
AO_t
 *
addr
)

217 
AO_t
 
ªsu…
 = 
	`AO_lﬂd
(
addr
);

220 
	`AO_n›_ªad
();

221  
ªsu…
;

222 
	}
}

223 
	#AO_HAVE_lﬂd_ªad


	)

226 #i‡
deföed
(
AO_HAVE_lﬂd_acquúe
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

227 !
	$deföed
(
AO_HAVE_lﬂd_fuŒ
)

228 
	#AO_lﬂd_fuŒ
(
addr
Ë(
	`AO_n›_fuŒ
(), 
	`AO_lﬂd_acquúe
◊ddr))

	)

229 
	#AO_HAVE_lﬂd_fuŒ


	)

232 #i‡!
	`deföed
(
AO_HAVE_lﬂd_acquúe_ªad
Ë&& deföed(
AO_HAVE_lﬂd_ªad
)

233 
	#AO_lﬂd_acquúe_ªad
(
addr
Ë
	`AO_lﬂd_ªad
◊ddr)

	)

234 
	#AO_HAVE_lﬂd_acquúe_ªad


	)

237 #i‡
	`deföed
(
AO_HAVE_lﬂd_acquúe_ªad
Ë&& !deföed(
AO_HAVE_lﬂd
)

238 
	#AO_lﬂd
(
addr
Ë
	`AO_lﬂd_acquúe_ªad
◊ddr)

	)

239 
	#AO_HAVE_lﬂd


	)

242 #ifde‡
AO_NO_DD_ORDERING


243 #i‡
	`deföed
(
AO_HAVE_lﬂd_acquúe_ªad
)

244 
	#AO_lﬂd_dd_acquúe_ªad
(
addr
Ë
	`AO_lﬂd_acquúe_ªad
◊ddr)

	)

245 
	#AO_HAVE_lﬂd_dd_acquúe_ªad


	)

248 #i‡
	`deföed
(
AO_HAVE_lﬂd
)

249 
	#AO_lﬂd_dd_acquúe_ªad
(
addr
Ë
	`AO_lﬂd
◊ddr)

	)

250 
	#AO_HAVE_lﬂd_dd_acquúe_ªad


	)

257 #i‡
	`deföed
(
AO_HAVE_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_°‹e_ªÀa£
)

258 
	#AO_°‹e_ªÀa£
(
addr
,
vÆ
Ë
	`AO_°‹e_fuŒ
◊ddr,vÆ)

	)

259 
	#AO_HAVE_°‹e_ªÀa£


	)

262 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£
Ë&& !deföed(
AO_HAVE_°‹e
)

263 
	#AO_°‹e
(
addr
, 
vÆ
Ë
	`AO_°‹e_ªÀa£
◊ddr,vÆ)

	)

264 
	#AO_HAVE_°‹e


	)

267 #i‡
	`deföed
(
AO_HAVE_°‹e_fuŒ
Ë&& !deföed(
AO_HAVE_°‹e_wrôe
)

268 
	#AO_°‹e_wrôe
(
addr
,
vÆ
Ë
	`AO_°‹e_fuŒ
◊ddr,vÆ)

	)

269 
	#AO_HAVE_°‹e_wrôe


	)

272 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£
Ë&& !deföed(
AO_HAVE_°‹e_ªÀa£_wrôe
)

273 
	#AO_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
Ë
	`AO_°‹e_ªÀa£
◊ddr,vÆ)

	)

274 
	#AO_HAVE_°‹e_ªÀa£_wrôe


	)

277 #i‡
	`deföed
(
AO_HAVE_°‹e_wrôe
Ë&& !deföed(
AO_HAVE_°‹e
)

278 
	#AO_°‹e
(
addr
, 
vÆ
Ë
	`AO_°‹e_wrôe
◊ddr,vÆ)

	)

279 
	#AO_HAVE_°‹e


	)

282 #i‡
	`deföed
(
AO_HAVE_°‹e
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

283 !
	$deföed
(
AO_HAVE_°‹e_ªÀa£
)

284 
	#AO_°‹e_ªÀa£
(
addr
,
vÆ
Ë(
	`AO_n›_fuŒ
(), 
	`AO_°‹e
◊ddr,vÆ))

	)

285 
	#AO_HAVE_°‹e_ªÀa£


	)

288 #i‡
	`deföed
(
AO_HAVE_n›_wrôe
Ë&& deföed(
AO_HAVE_°‹e
) && \

289 !
	$deföed
(
AO_HAVE_°‹e_wrôe
)

290 
	#AO_°‹e_wrôe
(
addr
, 
vÆ
Ë(
	`AO_n›_wrôe
(), 
	`AO_°‹e
◊ddr,vÆ))

	)

291 
	#AO_HAVE_°‹e_wrôe


	)

294 #i‡
	`deföed
(
AO_HAVE_°‹e_wrôe
Ë&& !deföed(
AO_HAVE_°‹e_ªÀa£_wrôe
)

295 
	#AO_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
Ë
	`AO_°‹e_wrôe
◊ddr,vÆ)

	)

296 
	#AO_HAVE_°‹e_ªÀa£_wrôe


	)

299 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£
Ë&& deföed(
AO_HAVE_n›_fuŒ
) && \

300 !
	$deföed
(
AO_HAVE_°‹e_fuŒ
)

301 
	#AO_°‹e_fuŒ
(
addr
, 
vÆ
Ë(
	`AO_°‹e_ªÀa£
◊ddr, vÆ), 
	`AO_n›_fuŒ
())

	)

302 
	#AO_HAVE_°‹e_fuŒ


	)

306 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t
) && \

307 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

308 !
	$deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£
)

309 
	#AO_ã°_™d_£t_ªÀa£
(
addr
) \

310 (
	`AO_n›_fuŒ
(), 
	`AO_ã°_™d_£t
(
addr
))

	)

311 
	#AO_HAVE_ã°_™d_£t_ªÀa£


	)

314 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t
) && \

315 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

316 !
	$deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

317 
AO_INLINE
 
AO_TS_t


318 
	$AO_ã°_™d_£t_acquúe
(vﬁ©ûê
AO_TS_t
 *
addr
)

320 
AO_TS_t
 
ªs
 = 
	`AO_ã°_™d_£t
(
addr
);

321 
	`AO_n›_fuŒ
();

322  
ªs
;

323 
	}
}

324 
	#AO_HAVE_ã°_™d_£t_acquúe


	)

332 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
) && \

333 !
	$deföed
(
AO_HAVE_„tch_™d_add_fuŒ
)

334 
AO_INLINE
 
AO_t


335 
	$AO_„tch_™d_add_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
)

337 
AO_t
 
ﬁd
;

340 
ﬁd
 = *
addr
;

342 !
	`AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, old+
ö¸
));

343  
ﬁd
;

344 
	}
}

345 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

348 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
) && \

349 !
	$deföed
(
AO_HAVE_„tch_™d_add_acquúe
)

350 
AO_INLINE
 
AO_t


351 
	$AO_„tch_™d_add_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
)

353 
AO_t
 
ﬁd
;

356 
ﬁd
 = *
addr
;

358 !
	`AO_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, old+
ö¸
));

359  
ﬁd
;

360 
	}
}

361 
	#AO_HAVE_„tch_™d_add_acquúe


	)

364 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
) && \

365 !
	$deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
)

366 
AO_INLINE
 
AO_t


367 
	$AO_„tch_™d_add_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
)

369 
AO_t
 
ﬁd
;

372 
ﬁd
 = *
addr
;

374 !
	`AO_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, old+
ö¸
));

375  
ﬁd
;

376 
	}
}

377 
	#AO_HAVE_„tch_™d_add_ªÀa£


	)

380 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠
) && \

381 !
	$deföed
(
AO_HAVE_„tch_™d_add
)

382 
AO_INLINE
 
AO_t


383 
	$AO_„tch_™d_add
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
)

385 
AO_t
 
ﬁd
;

388 
ﬁd
 = *
addr
;

390 !
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, old+
ö¸
));

391  
ﬁd
;

392 
	}
}

393 
	#AO_HAVE_„tch_™d_add


	)

396 #i‡
deföed
(
AO_HAVE_„tch_™d_add_fuŒ
)

397 #i‡!
deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
)

398 
	#AO_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
) \

399 
	`AO_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

400 
	#AO_HAVE_„tch_™d_add_ªÀa£


	)

402 #i‡!
deföed
(
AO_HAVE_„tch_™d_add_acquúe
)

403 
	#AO_„tch_™d_add_acquúe
(
addr
, 
vÆ
) \

404 
	`AO_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

405 
	#AO_HAVE_„tch_™d_add_acquúe


	)

407 #i‡!
deföed
(
AO_HAVE_„tch_™d_add_wrôe
)

408 
	#AO_„tch_™d_add_wrôe
(
addr
, 
vÆ
) \

409 
	`AO_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

410 
	#AO_HAVE_„tch_™d_add_wrôe


	)

412 #i‡!
deföed
(
AO_HAVE_„tch_™d_add_ªad
)

413 
	#AO_„tch_™d_add_ªad
(
addr
, 
vÆ
) \

414 
	`AO_„tch_™d_add_fuŒ
(
addr
, 
vÆ
)

	)

415 
	#AO_HAVE_„tch_™d_add_ªad


	)

419 #i‡!
deföed
(
AO_HAVE_„tch_™d_add
) && \

420 
	$deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
)

421 
	#AO_„tch_™d_add
(
addr
, 
vÆ
) \

422 
	`AO_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

423 
	#AO_HAVE_„tch_™d_add


	)

425 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add
) && \

426 
	$deföed
(
AO_HAVE_„tch_™d_add_acquúe
)

427 
	#AO_„tch_™d_add
(
addr
, 
vÆ
) \

428 
	`AO_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

429 
	#AO_HAVE_„tch_™d_add


	)

431 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add
) && \

432 
	$deföed
(
AO_HAVE_„tch_™d_add_wrôe
)

433 
	#AO_„tch_™d_add
(
addr
, 
vÆ
) \

434 
	`AO_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

435 
	#AO_HAVE_„tch_™d_add


	)

437 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add
) && \

438 
	$deföed
(
AO_HAVE_„tch_™d_add_ªad
)

439 
	#AO_„tch_™d_add
(
addr
, 
vÆ
) \

440 
	`AO_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

441 
	#AO_HAVE_„tch_™d_add


	)

444 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe
) &&\

445 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

446 !
	$deföed
(
AO_HAVE_„tch_™d_add_fuŒ
)

447 
	#AO_„tch_™d_add_fuŒ
(
addr
, 
vÆ
) \

448 (
	`AO_n›_fuŒ
(), 
	`AO_„tch_™d_add_acquúe
(
addr
, 
vÆ
))

	)

449 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

452 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£_wrôe
) && \

453 
	$deföed
(
AO_HAVE_„tch_™d_add_wrôe
)

454 
	#AO_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

455 
	`AO_„tch_™d_add_wrôe
(
addr
, 
vÆ
)

	)

456 
	#AO_HAVE_„tch_™d_add_ªÀa£_wrôe


	)

458 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£_wrôe
) && \

459 
	$deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
)

460 
	#AO_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
vÆ
) \

461 
	`AO_„tch_™d_add_ªÀa£
(
addr
, 
vÆ
)

	)

462 
	#AO_HAVE_„tch_™d_add_ªÀa£_wrôe


	)

464 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe_ªad
) && \

465 
	$deföed
(
AO_HAVE_„tch_™d_add_ªad
)

466 
	#AO_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

467 
	`AO_„tch_™d_add_ªad
(
addr
, 
vÆ
)

	)

468 
	#AO_HAVE_„tch_™d_add_acquúe_ªad


	)

470 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe_ªad
) && \

471 
	$deföed
(
AO_HAVE_„tch_™d_add_acquúe
)

472 
	#AO_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
) \

473 
	`AO_„tch_™d_add_acquúe
(
addr
, 
vÆ
)

	)

474 
	#AO_HAVE_„tch_™d_add_acquúe_ªad


	)

477 #ifde‡
AO_NO_DD_ORDERING


478 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe_ªad
)

479 
	#AO_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

480 
	`AO_„tch_™d_add_acquúe_ªad
(
addr
, 
vÆ
)

	)

481 
	#AO_HAVE_„tch_™d_add_dd_acquúe_ªad


	)

484 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add
)

485 
	#AO_„tch_™d_add_dd_acquúe_ªad
(
addr
, 
vÆ
) \

486 
	`AO_„tch_™d_add
(
addr
, 
vÆ
)

	)

487 
	#AO_HAVE_„tch_™d_add_dd_acquúe_ªad


	)

493 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_fuŒ
) &&\

494 !
	$deföed
(
AO_HAVE_„tch_™d_add1_fuŒ
)

495 
	#AO_„tch_™d_add1_fuŒ
(
addr
Ë
	`AO_„tch_™d_add_fuŒ
◊ddr,1)

	)

496 
	#AO_HAVE_„tch_™d_add1_fuŒ


	)

498 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
) &&\

499 !
	$deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£
)

500 
	#AO_„tch_™d_add1_ªÀa£
(
addr
Ë
	`AO_„tch_™d_add_ªÀa£
◊ddr,1)

	)

501 
	#AO_HAVE_„tch_™d_add1_ªÀa£


	)

503 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe
) &&\

504 !
	$deföed
(
AO_HAVE_„tch_™d_add1_acquúe
)

505 
	#AO_„tch_™d_add1_acquúe
(
addr
Ë
	`AO_„tch_™d_add_acquúe
◊ddr,1)

	)

506 
	#AO_HAVE_„tch_™d_add1_acquúe


	)

508 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_wrôe
) &&\

509 !
	$deföed
(
AO_HAVE_„tch_™d_add1_wrôe
)

510 
	#AO_„tch_™d_add1_wrôe
(
addr
Ë
	`AO_„tch_™d_add_wrôe
◊ddr,1)

	)

511 
	#AO_HAVE_„tch_™d_add1_wrôe


	)

513 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªad
) &&\

514 !
	$deföed
(
AO_HAVE_„tch_™d_add1_ªad
)

515 
	#AO_„tch_™d_add1_ªad
(
addr
Ë
	`AO_„tch_™d_add_ªad
◊ddr,1)

	)

516 
	#AO_HAVE_„tch_™d_add1_ªad


	)

518 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£_wrôe
) &&\

519 !
	$deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£_wrôe
)

520 
	#AO_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

521 
	`AO_„tch_™d_add_ªÀa£_wrôe
(
addr
,1)

	)

522 
	#AO_HAVE_„tch_™d_add1_ªÀa£_wrôe


	)

524 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe_ªad
) &&\

525 !
	$deföed
(
AO_HAVE_„tch_™d_add1_acquúe_ªad
)

526 
	#AO_„tch_™d_add1_acquúe_ªad
(
addr
) \

527 
	`AO_„tch_™d_add_acquúe_ªad
(
addr
,1)

	)

528 
	#AO_HAVE_„tch_™d_add1_acquúe_ªad


	)

530 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add
) &&\

531 !
	$deföed
(
AO_HAVE_„tch_™d_add1
)

532 
	#AO_„tch_™d_add1
(
addr
) \

533 
	`AO_„tch_™d_add
(
addr
,1)

	)

534 
	#AO_HAVE_„tch_™d_add1


	)

537 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_fuŒ
)

538 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£
)

539 
	#AO_„tch_™d_add1_ªÀa£
(
addr
) \

540 
	`AO_„tch_™d_add1_fuŒ
(
addr
)

	)

541 
	#AO_HAVE_„tch_™d_add1_ªÀa£


	)

543 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe
)

544 
	#AO_„tch_™d_add1_acquúe
(
addr
) \

545 
	`AO_„tch_™d_add1_fuŒ
(
addr
)

	)

546 
	#AO_HAVE_„tch_™d_add1_acquúe


	)

548 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_wrôe
)

549 
	#AO_„tch_™d_add1_wrôe
(
addr
) \

550 
	`AO_„tch_™d_add1_fuŒ
(
addr
)

	)

551 
	#AO_HAVE_„tch_™d_add1_wrôe


	)

553 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_ªad
)

554 
	#AO_„tch_™d_add1_ªad
(
addr
) \

555 
	`AO_„tch_™d_add1_fuŒ
(
addr
)

	)

556 
	#AO_HAVE_„tch_™d_add1_ªad


	)

560 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1
) && \

561 
	$deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£
)

562 
	#AO_„tch_™d_add1
(
addr
) \

563 
	`AO_„tch_™d_add1_ªÀa£
(
addr
)

	)

564 
	#AO_HAVE_„tch_™d_add1


	)

566 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1
) && \

567 
	$deföed
(
AO_HAVE_„tch_™d_add1_acquúe
)

568 
	#AO_„tch_™d_add1
(
addr
) \

569 
	`AO_„tch_™d_add1_acquúe
(
addr
)

	)

570 
	#AO_HAVE_„tch_™d_add1


	)

572 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1
) && \

573 
	$deföed
(
AO_HAVE_„tch_™d_add1_wrôe
)

574 
	#AO_„tch_™d_add1
(
addr
) \

575 
	`AO_„tch_™d_add1_wrôe
(
addr
)

	)

576 
	#AO_HAVE_„tch_™d_add1


	)

578 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1
) && \

579 
	$deföed
(
AO_HAVE_„tch_™d_add1_ªad
)

580 
	#AO_„tch_™d_add1
(
addr
) \

581 
	`AO_„tch_™d_add1_ªad
(
addr
)

	)

582 
	#AO_HAVE_„tch_™d_add1


	)

585 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe
) &&\

586 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

587 !
	$deföed
(
AO_HAVE_„tch_™d_add1_fuŒ
)

588 
	#AO_„tch_™d_add1_fuŒ
(
addr
) \

589 (
	`AO_n›_fuŒ
(), 
	`AO_„tch_™d_add1_acquúe
(
addr
))

	)

590 
	#AO_HAVE_„tch_™d_add1_fuŒ


	)

593 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£_wrôe
) && \

594 
	$deföed
(
AO_HAVE_„tch_™d_add1_wrôe
)

595 
	#AO_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

596 
	`AO_„tch_™d_add1_wrôe
(
addr
)

	)

597 
	#AO_HAVE_„tch_™d_add1_ªÀa£_wrôe


	)

599 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£_wrôe
) && \

600 
	$deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£
)

601 
	#AO_„tch_™d_add1_ªÀa£_wrôe
(
addr
) \

602 
	`AO_„tch_™d_add1_ªÀa£
(
addr
)

	)

603 
	#AO_HAVE_„tch_™d_add1_ªÀa£_wrôe


	)

605 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe_ªad
) && \

606 
	$deföed
(
AO_HAVE_„tch_™d_add1_ªad
)

607 
	#AO_„tch_™d_add1_acquúe_ªad
(
addr
) \

608 
	`AO_„tch_™d_add1_ªad
(
addr
)

	)

609 
	#AO_HAVE_„tch_™d_add1_acquúe_ªad


	)

611 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe_ªad
) && \

612 
	$deföed
(
AO_HAVE_„tch_™d_add1_acquúe
)

613 
	#AO_„tch_™d_add1_acquúe_ªad
(
addr
) \

614 
	`AO_„tch_™d_add1_acquúe
(
addr
)

	)

615 
	#AO_HAVE_„tch_™d_add1_acquúe_ªad


	)

618 #ifde‡
AO_NO_DD_ORDERING


619 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe_ªad
)

620 
	#AO_„tch_™d_add1_dd_acquúe_ªad
(
addr
) \

621 
	`AO_„tch_™d_add1_acquúe_ªad
(
addr
)

	)

622 
	#AO_HAVE_„tch_™d_add1_dd_acquúe_ªad


	)

625 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1
)

626 
	#AO_„tch_™d_add1_dd_acquúe_ªad
(
addr
Ë
	`AO_„tch_™d_add1
◊ddr)

	)

627 
	#AO_HAVE_„tch_™d_add1_dd_acquúe_ªad


	)

633 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_fuŒ
) &&\

634 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_fuŒ
)

635 
	#AO_„tch_™d_sub1_fuŒ
(
addr
Ë
	`AO_„tch_™d_add_fuŒ
◊ddr,(
AO_t
)(-1))

	)

636 
	#AO_HAVE_„tch_™d_sub1_fuŒ


	)

638 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
) &&\

639 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£
)

640 
	#AO_„tch_™d_sub1_ªÀa£
(
addr
) \

641 
	`AO_„tch_™d_add_ªÀa£
(
addr
,(
AO_t
)(-1))

	)

642 
	#AO_HAVE_„tch_™d_sub1_ªÀa£


	)

644 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe
) &&\

645 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
)

646 
	#AO_„tch_™d_sub1_acquúe
(
addr
) \

647 
	`AO_„tch_™d_add_acquúe
(
addr
,(
AO_t
)(-1))

	)

648 
	#AO_HAVE_„tch_™d_sub1_acquúe


	)

650 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_wrôe
) &&\

651 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_wrôe
)

652 
	#AO_„tch_™d_sub1_wrôe
(
addr
) \

653 
	`AO_„tch_™d_add_wrôe
(
addr
,(
AO_t
)(-1))

	)

654 
	#AO_HAVE_„tch_™d_sub1_wrôe


	)

656 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªad
) &&\

657 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªad
)

658 
	#AO_„tch_™d_sub1_ªad
(
addr
) \

659 
	`AO_„tch_™d_add_ªad
(
addr
,(
AO_t
)(-1))

	)

660 
	#AO_HAVE_„tch_™d_sub1_ªad


	)

662 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£_wrôe
) &&\

663 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe
)

664 
	#AO_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

665 
	`AO_„tch_™d_add_ªÀa£_wrôe
(
addr
,(
AO_t
)(-1))

	)

666 
	#AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe


	)

668 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe_ªad
) &&\

669 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_acquúe_ªad
)

670 
	#AO_„tch_™d_sub1_acquúe_ªad
(
addr
) \

671 
	`AO_„tch_™d_add_acquúe_ªad
(
addr
,(
AO_t
)(-1))

	)

672 
	#AO_HAVE_„tch_™d_sub1_acquúe_ªad


	)

674 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add
) &&\

675 !
	$deföed
(
AO_HAVE_„tch_™d_sub1
)

676 
	#AO_„tch_™d_sub1
(
addr
) \

677 
	`AO_„tch_™d_add
(
addr
,(
AO_t
)(-1))

	)

678 
	#AO_HAVE_„tch_™d_sub1


	)

681 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_fuŒ
)

682 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£
)

683 
	#AO_„tch_™d_sub1_ªÀa£
(
addr
) \

684 
	`AO_„tch_™d_sub1_fuŒ
(
addr
)

	)

685 
	#AO_HAVE_„tch_™d_sub1_ªÀa£


	)

687 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
)

688 
	#AO_„tch_™d_sub1_acquúe
(
addr
) \

689 
	`AO_„tch_™d_sub1_fuŒ
(
addr
)

	)

690 
	#AO_HAVE_„tch_™d_sub1_acquúe


	)

692 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_wrôe
)

693 
	#AO_„tch_™d_sub1_wrôe
(
addr
) \

694 
	`AO_„tch_™d_sub1_fuŒ
(
addr
)

	)

695 
	#AO_HAVE_„tch_™d_sub1_wrôe


	)

697 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªad
)

698 
	#AO_„tch_™d_sub1_ªad
(
addr
) \

699 
	`AO_„tch_™d_sub1_fuŒ
(
addr
)

	)

700 
	#AO_HAVE_„tch_™d_sub1_ªad


	)

704 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1
) && \

705 
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£
)

706 
	#AO_„tch_™d_sub1
(
addr
) \

707 
	`AO_„tch_™d_sub1_ªÀa£
(
addr
)

	)

708 
	#AO_HAVE_„tch_™d_sub1


	)

710 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1
) && \

711 
	$deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
)

712 
	#AO_„tch_™d_sub1
(
addr
) \

713 
	`AO_„tch_™d_sub1_acquúe
(
addr
)

	)

714 
	#AO_HAVE_„tch_™d_sub1


	)

716 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1
) && \

717 
	$deföed
(
AO_HAVE_„tch_™d_sub1_wrôe
)

718 
	#AO_„tch_™d_sub1
(
addr
) \

719 
	`AO_„tch_™d_sub1_wrôe
(
addr
)

	)

720 
	#AO_HAVE_„tch_™d_sub1


	)

722 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1
) && \

723 
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªad
)

724 
	#AO_„tch_™d_sub1
(
addr
) \

725 
	`AO_„tch_™d_sub1_ªad
(
addr
)

	)

726 
	#AO_HAVE_„tch_™d_sub1


	)

729 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
) &&\

730 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

731 !
	$deföed
(
AO_HAVE_„tch_™d_sub1_fuŒ
)

732 
	#AO_„tch_™d_sub1_fuŒ
(
addr
) \

733 (
	`AO_n›_fuŒ
(), 
	`AO_„tch_™d_sub1_acquúe
(
addr
))

	)

734 
	#AO_HAVE_„tch_™d_sub1_fuŒ


	)

737 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe
) && \

738 
	$deföed
(
AO_HAVE_„tch_™d_sub1_wrôe
)

739 
	#AO_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

740 
	`AO_„tch_™d_sub1_wrôe
(
addr
)

	)

741 
	#AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe


	)

743 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe
) && \

744 
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£
)

745 
	#AO_„tch_™d_sub1_ªÀa£_wrôe
(
addr
) \

746 
	`AO_„tch_™d_sub1_ªÀa£
(
addr
)

	)

747 
	#AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe


	)

749 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe_ªad
) && \

750 
	$deföed
(
AO_HAVE_„tch_™d_sub1_ªad
)

751 
	#AO_„tch_™d_sub1_acquúe_ªad
(
addr
) \

752 
	`AO_„tch_™d_sub1_ªad
(
addr
)

	)

753 
	#AO_HAVE_„tch_™d_sub1_acquúe_ªad


	)

755 #i‡!
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe_ªad
) && \

756 
	$deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
)

757 
	#AO_„tch_™d_sub1_acquúe_ªad
(
addr
) \

758 
	`AO_„tch_™d_sub1_acquúe
(
addr
)

	)

759 
	#AO_HAVE_„tch_™d_sub1_acquúe_ªad


	)

762 #ifde‡
AO_NO_DD_ORDERING


763 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe_ªad
)

764 
	#AO_„tch_™d_sub1_dd_acquúe_ªad
(
addr
) \

765 
	`AO_„tch_™d_sub1_acquúe_ªad
(
addr
)

	)

766 
	#AO_HAVE_„tch_™d_sub1_dd_acquúe_ªad


	)

769 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1
)

770 
	#AO_„tch_™d_sub1_dd_acquúe_ªad
(
addr
Ë
	`AO_„tch_™d_sub1
◊ddr)

	)

771 
	#AO_HAVE_„tch_™d_sub1_dd_acquúe_ªad


	)

776 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
) && \

777 !
	$deföed
(
AO_HAVE_‹_fuŒ
)

778 
AO_INLINE
 

779 
	$AO_‹_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ö¸
)

781 
AO_t
 
ﬁd
;

784 
ﬁd
 = *
addr
;

786 !
	`AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, (ﬁd | 
ö¸
)));

787 
	}
}

788 
	#AO_HAVE_‹_fuŒ


	)

791 #i‡
deföed
(
AO_HAVE_‹_fuŒ
)

792 #i‡!
deföed
(
AO_HAVE_‹_ªÀa£
)

793 
	#AO_‹_ªÀa£
(
addr
, 
vÆ
) \

794 
	`AO_‹_fuŒ
(
addr
, 
vÆ
)

	)

795 
	#AO_HAVE_‹_ªÀa£


	)

797 #i‡!
deföed
(
AO_HAVE_‹_acquúe
)

798 
	#AO_‹_acquúe
(
addr
, 
vÆ
) \

799 
	`AO_‹_fuŒ
(
addr
, 
vÆ
)

	)

800 
	#AO_HAVE_‹_acquúe


	)

802 #i‡!
deföed
(
AO_HAVE_‹_wrôe
)

803 
	#AO_‹_wrôe
(
addr
, 
vÆ
) \

804 
	`AO_‹_fuŒ
(
addr
, 
vÆ
)

	)

805 
	#AO_HAVE_‹_wrôe


	)

807 #i‡!
deföed
(
AO_HAVE_‹_ªad
)

808 
	#AO_‹_ªad
(
addr
, 
vÆ
) \

809 
	`AO_‹_fuŒ
(
addr
, 
vÆ
)

	)

810 
	#AO_HAVE_‹_ªad


	)

814 #i‡!
deföed
(
AO_HAVE_‹
) && \

815 
	$deföed
(
AO_HAVE_‹_ªÀa£
)

816 
	#AO_‹
(
addr
, 
vÆ
) \

817 
	`AO_‹_ªÀa£
(
addr
, 
vÆ
)

	)

818 
	#AO_HAVE_‹


	)

820 #i‡!
	`deföed
(
AO_HAVE_‹
) && \

821 
	$deföed
(
AO_HAVE_‹_acquúe
)

822 
	#AO_‹
(
addr
, 
vÆ
) \

823 
	`AO_‹_acquúe
(
addr
, 
vÆ
)

	)

824 
	#AO_HAVE_‹


	)

826 #i‡!
	`deföed
(
AO_HAVE_‹
) && \

827 
	$deföed
(
AO_HAVE_‹_wrôe
)

828 
	#AO_‹
(
addr
, 
vÆ
) \

829 
	`AO_‹_wrôe
(
addr
, 
vÆ
)

	)

830 
	#AO_HAVE_‹


	)

832 #i‡!
	`deföed
(
AO_HAVE_‹
) && \

833 
	$deföed
(
AO_HAVE_‹_ªad
)

834 
	#AO_‹
(
addr
, 
vÆ
) \

835 
	`AO_‹_ªad
(
addr
, 
vÆ
)

	)

836 
	#AO_HAVE_‹


	)

839 #i‡
	`deföed
(
AO_HAVE_‹_acquúe
) &&\

840 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

841 !
	$deföed
(
AO_HAVE_‹_fuŒ
)

842 
	#AO_‹_fuŒ
(
addr
, 
vÆ
) \

843 (
	`AO_n›_fuŒ
(), 
	`AO_‹_acquúe
(
addr
, 
vÆ
))

	)

846 #i‡!
	`deföed
(
AO_HAVE_‹_ªÀa£_wrôe
) && \

847 
	$deföed
(
AO_HAVE_‹_wrôe
)

848 
	#AO_‹_ªÀa£_wrôe
(
addr
, 
vÆ
) \

849 
	`AO_‹_wrôe
(
addr
, 
vÆ
)

	)

850 
	#AO_HAVE_‹_ªÀa£_wrôe


	)

852 #i‡!
	`deföed
(
AO_HAVE_‹_ªÀa£_wrôe
) && \

853 
	$deföed
(
AO_HAVE_‹_ªÀa£
)

854 
	#AO_‹_ªÀa£_wrôe
(
addr
, 
vÆ
) \

855 
	`AO_‹_ªÀa£
(
addr
, 
vÆ
)

	)

856 
	#AO_HAVE_‹_ªÀa£_wrôe


	)

858 #i‡!
	`deföed
(
AO_HAVE_‹_acquúe_ªad
) && \

859 
	$deföed
(
AO_HAVE_‹_ªad
)

860 
	#AO_‹_acquúe_ªad
(
addr
, 
vÆ
) \

861 
	`AO_‹_ªad
(
addr
, 
vÆ
)

	)

862 
	#AO_HAVE_‹_acquúe_ªad


	)

864 #i‡!
	`deföed
(
AO_HAVE_‹_acquúe_ªad
) && \

865 
	$deföed
(
AO_HAVE_‹_acquúe
)

866 
	#AO_‹_acquúe_ªad
(
addr
, 
vÆ
) \

867 
	`AO_‹_acquúe
(
addr
, 
vÆ
)

	)

868 
	#AO_HAVE_‹_acquúe_ªad


	)

875 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_fuŒ
)

876 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£
)

877 
	#AO_ã°_™d_£t_ªÀa£
(
addr
) \

878 
	`AO_ã°_™d_£t_fuŒ
(
addr
)

	)

879 
	#AO_HAVE_ã°_™d_£t_ªÀa£


	)

881 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

882 
	#AO_ã°_™d_£t_acquúe
(
addr
) \

883 
	`AO_ã°_™d_£t_fuŒ
(
addr
)

	)

884 
	#AO_HAVE_ã°_™d_£t_acquúe


	)

886 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_wrôe
)

887 
	#AO_ã°_™d_£t_wrôe
(
addr
) \

888 
	`AO_ã°_™d_£t_fuŒ
(
addr
)

	)

889 
	#AO_HAVE_ã°_™d_£t_wrôe


	)

891 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_ªad
)

892 
	#AO_ã°_™d_£t_ªad
(
addr
) \

893 
	`AO_ã°_™d_£t_fuŒ
(
addr
)

	)

894 
	#AO_HAVE_ã°_™d_£t_ªad


	)

898 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t
) && \

899 
	$deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£
)

900 
	#AO_ã°_™d_£t
(
addr
) \

901 
	`AO_ã°_™d_£t_ªÀa£
(
addr
)

	)

902 
	#AO_HAVE_ã°_™d_£t


	)

904 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t
) && \

905 
	$deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

906 
	#AO_ã°_™d_£t
(
addr
) \

907 
	`AO_ã°_™d_£t_acquúe
(
addr
)

	)

908 
	#AO_HAVE_ã°_™d_£t


	)

910 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t
) && \

911 
	$deföed
(
AO_HAVE_ã°_™d_£t_wrôe
)

912 
	#AO_ã°_™d_£t
(
addr
) \

913 
	`AO_ã°_™d_£t_wrôe
(
addr
)

	)

914 
	#AO_HAVE_ã°_™d_£t


	)

916 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t
) && \

917 
	$deföed
(
AO_HAVE_ã°_™d_£t_ªad
)

918 
	#AO_ã°_™d_£t
(
addr
) \

919 
	`AO_ã°_™d_£t_ªad
(
addr
)

	)

920 
	#AO_HAVE_ã°_™d_£t


	)

923 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe
) &&\

924 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

925 !
	$deföed
(
AO_HAVE_ã°_™d_£t_fuŒ
)

926 
	#AO_ã°_™d_£t_fuŒ
(
addr
) \

927 (
	`AO_n›_fuŒ
(), 
	`AO_ã°_™d_£t_acquúe
(
addr
))

	)

928 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

931 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£_wrôe
) && \

932 
	$deföed
(
AO_HAVE_ã°_™d_£t_wrôe
)

933 
	#AO_ã°_™d_£t_ªÀa£_wrôe
(
addr
) \

934 
	`AO_ã°_™d_£t_wrôe
(
addr
)

	)

935 
	#AO_HAVE_ã°_™d_£t_ªÀa£_wrôe


	)

937 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£_wrôe
) && \

938 
	$deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£
)

939 
	#AO_ã°_™d_£t_ªÀa£_wrôe
(
addr
) \

940 
	`AO_ã°_™d_£t_ªÀa£
(
addr
)

	)

941 
	#AO_HAVE_ã°_™d_£t_ªÀa£_wrôe


	)

943 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe_ªad
) && \

944 
	$deföed
(
AO_HAVE_ã°_™d_£t_ªad
)

945 
	#AO_ã°_™d_£t_acquúe_ªad
(
addr
) \

946 
	`AO_ã°_™d_£t_ªad
(
addr
)

	)

947 
	#AO_HAVE_ã°_™d_£t_acquúe_ªad


	)

949 #i‡!
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe_ªad
) && \

950 
	$deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

951 
	#AO_ã°_™d_£t_acquúe_ªad
(
addr
) \

952 
	`AO_ã°_™d_£t_acquúe
(
addr
)

	)

953 
	#AO_HAVE_ã°_™d_£t_acquúe_ªad


	)

956 #ifde‡
AO_NO_DD_ORDERING


957 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe_ªad
)

958 
	#AO_ã°_™d_£t_dd_acquúe_ªad
(
addr
) \

959 
	`AO_ã°_™d_£t_acquúe_ªad
(
addr
)

	)

960 
	#AO_HAVE_ã°_™d_£t_dd_acquúe_ªad


	)

963 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t
)

964 
	#AO_ã°_™d_£t_dd_acquúe_ªad
(
addr
Ë
	`AO_ã°_™d_£t
◊ddr)

	)

965 
	#AO_HAVE_ã°_™d_£t_dd_acquúe_ªad


	)

970 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
Ë&& deföed(
AO_HAVE_n›_fuŒ
)\

971 && !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
)

972 
AO_INLINE
 

973 
	$AO_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
)

975 
ªsu…
 = 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

976 
	`AO_n›_fuŒ
();

977  
ªsu…
;

978 
	}
}

979 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe


	)

981 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠
Ë&& deföed(
AO_HAVE_n›_fuŒ
)\

982 && !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
)

983 
	#AO_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, 
√w_vÆ
) \

984 (
	`AO_n›_fuŒ
(), 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
))

	)

985 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£


	)

987 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
)

988 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
)

989 
	#AO_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, 
√w_vÆ
) \

990 
	`AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

991 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£


	)

993 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
)

994 
	#AO_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

995 
	`AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

996 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe


	)

998 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_wrôe
)

999 
	#AO_com∑ª_™d_sw≠_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1000 
	`AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1001 
	#AO_HAVE_com∑ª_™d_sw≠_wrôe


	)

1003 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªad
)

1004 
	#AO_com∑ª_™d_sw≠_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1005 
	`AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1006 
	#AO_HAVE_com∑ª_™d_sw≠_ªad


	)

1010 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
) && \

1011 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
)

1012 
	#AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1013 
	`AO_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1014 
	#AO_HAVE_com∑ª_™d_sw≠


	)

1016 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
) && \

1017 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
)

1018 
	#AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1019 
	`AO_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1020 
	#AO_HAVE_com∑ª_™d_sw≠


	)

1022 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
) && \

1023 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_wrôe
)

1024 
	#AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1025 
	`AO_com∑ª_™d_sw≠_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1026 
	#AO_HAVE_com∑ª_™d_sw≠


	)

1028 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
) && \

1029 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªad
)

1030 
	#AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1031 
	`AO_com∑ª_™d_sw≠_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1032 
	#AO_HAVE_com∑ª_™d_sw≠


	)

1035 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
) &&\

1036 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1037 !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
)

1038 
	#AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1039 (
	`AO_n›_fuŒ
(), 
	`AO_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, 
√w_vÆ
))

	)

1040 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

1043 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£_wrôe
) && \

1044 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_wrôe
)

1045 
	#AO_com∑ª_™d_sw≠_ªÀa£_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1046 
	`AO_com∑ª_™d_sw≠_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1047 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£_wrôe


	)

1049 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£_wrôe
) && \

1050 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
)

1051 
	#AO_com∑ª_™d_sw≠_ªÀa£_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1052 
	`AO_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1053 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£_wrôe


	)

1055 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe_ªad
) && \

1056 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªad
)

1057 
	#AO_com∑ª_™d_sw≠_acquúe_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1058 
	`AO_com∑ª_™d_sw≠_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1059 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe_ªad


	)

1061 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe_ªad
) && \

1062 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
)

1063 
	#AO_com∑ª_™d_sw≠_acquúe_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1064 
	`AO_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1065 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe_ªad


	)

1068 #ifde‡
AO_NO_DD_ORDERING


1069 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe_ªad
)

1070 
	#AO_com∑ª_™d_sw≠_dd_acquúe_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1071 
	`AO_com∑ª_™d_sw≠_acquúe_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1072 
	#AO_HAVE_com∑ª_™d_sw≠_dd_acquúe_ªad


	)

1075 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
)

1076 
	#AO_com∑ª_™d_sw≠_dd_acquúe_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

1077 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
)

	)

1078 
	#AO_HAVE_com∑ª_™d_sw≠_dd_acquúe_ªad


	)

1082 
	~"gíîÆize-smÆl.h
"

1085 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
Ë&& deföed(
AO_HAVE_n›_fuŒ
)\

1086 && !
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
)

1087 
AO_INLINE
 

1088 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

1089 
AO_t
 
o1
, AO_à
o2
,

1090 
AO_t
 
n1
, AO_à
n2
)

1092 
ªsu…
 = 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
);

1093 
	`AO_n›_fuŒ
();

1094  
ªsu…
;

1095 
	}
}

1096 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe


	)

1098 #i‡
deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
) \

1099 && 
deföed
(
AO_HAVE_n›_fuŒ
)\

1100 && !
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
)

1101 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1102 (
	`AO_n›_fuŒ
(), 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
))

	)

1103 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£


	)

1105 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
)

1106 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
)

1107 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1108 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1109 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£


	)

1111 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
)

1112 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1113 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1114 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe


	)

1116 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
)

1117 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1118 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1119 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe


	)

1121 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
)

1122 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1123 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1124 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad


	)

1128 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
) && \

1129 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
)

1130 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1131 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1132 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ


	)

1134 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
) && \

1135 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
)

1136 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1137 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1138 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ


	)

1140 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
) && \

1141 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
)

1142 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1143 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1144 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ


	)

1146 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
) && \

1147 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
)

1148 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1149 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1150 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ


	)

1153 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
) &&\

1154 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1155 !
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
)

1156 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1157 (
	`AO_n›_fuŒ
(), 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
))

	)

1158 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

1161 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe
) && \

1162 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
)

1163 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1164 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1165 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe


	)

1167 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe
) && \

1168 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
)

1169 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1170 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1171 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe


	)

1173 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
) && \

1174 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
)

1175 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1176 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1177 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad


	)

1179 #i‡!
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
) && \

1180 
	$deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
)

1181 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1182 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1183 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad


	)

1186 #ifde‡
AO_NO_DD_ORDERING


1187 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
)

1188 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_dd_acquúe_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1189 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1190 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_dd_acquúe_ªad


	)

1193 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
)

1194 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_dd_acquúe_ªad
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
) \

1195 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(
addr
, 
o1
, 
o2
, 
n1
, 
n2
)

	)

1196 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_dd_acquúe_ªad


	)

1201 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
Ë&& deföed(
AO_HAVE_n›_fuŒ
)\

1202 && !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe
)

1203 
AO_INLINE
 

1204 
	$AO_com∑ª_™d_sw≠_doubÀ_acquúe
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

1205 
AO_t
 
o1
, AO_à
o2
,

1206 
AO_t
 
n1
, AO_à
n2
)

1208 
ªsu…
 = 
	`AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
);

1209 
	`AO_n›_fuŒ
();

1210  
ªsu…
;

1211 
	}
}

1212 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe


	)

1214 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
) \

1215 && 
deföed
(
AO_HAVE_n›_fuŒ
)\

1216 && !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£
)

1217 
	#AO_com∑ª_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
n1
, 
n2
) \

1218 (
	`AO_n›_fuŒ
(), 
	`AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
))

	)

1219 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£


	)

1221 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_fuŒ
)

1222 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£
)

1223 
	#AO_com∑ª_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
n1
, 
n2
) \

1224 
	`AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1225 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£


	)

1227 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe
)

1228 
	#AO_com∑ª_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
n1
, 
n2
) \

1229 
	`AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1230 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe


	)

1232 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_wrôe
)

1233 
	#AO_com∑ª_™d_sw≠_doubÀ_wrôe
(
addr
, 
o1
, 
n1
, 
n2
) \

1234 
	`AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1235 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_wrôe


	)

1237 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªad
)

1238 
	#AO_com∑ª_™d_sw≠_doubÀ_ªad
(
addr
, 
o1
, 
n1
, 
n2
) \

1239 
	`AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1240 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªad


	)

1244 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
) && \

1245 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£
)

1246 
	#AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
) \

1247 
	`AO_com∑ª_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1248 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ


	)

1250 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
) && \

1251 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe
)

1252 
	#AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
) \

1253 
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1254 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ


	)

1256 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
) && \

1257 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_wrôe
)

1258 
	#AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
) \

1259 
	`AO_com∑ª_™d_sw≠_doubÀ_wrôe
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1260 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ


	)

1262 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
) && \

1263 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªad
)

1264 
	#AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
) \

1265 
	`AO_com∑ª_™d_sw≠_doubÀ_ªad
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1266 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ


	)

1269 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe
) &&\

1270 
	`deföed
(
AO_HAVE_n›_fuŒ
) && \

1271 !
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_fuŒ
)

1272 
	#AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(
addr
, 
o1
, 
n1
, 
n2
) \

1273 (
	`AO_n›_fuŒ
(), 
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
n1
, 
n2
))

	)

1274 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_fuŒ


	)

1277 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe
) && \

1278 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_wrôe
)

1279 
	#AO_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe
(
addr
, 
o1
, 
n1
, 
n2
) \

1280 
	`AO_com∑ª_™d_sw≠_doubÀ_wrôe
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1281 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe


	)

1283 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe
) && \

1284 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£
)

1285 
	#AO_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe
(
addr
, 
o1
, 
n1
, 
n2
) \

1286 
	`AO_com∑ª_™d_sw≠_doubÀ_ªÀa£
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1287 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe


	)

1289 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
) && \

1290 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªad
)

1291 
	#AO_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
(
addr
, 
o1
, 
n1
, 
n2
) \

1292 
	`AO_com∑ª_™d_sw≠_doubÀ_ªad
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1293 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe_ªad


	)

1295 #i‡!
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
) && \

1296 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe
)

1297 
	#AO_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
(
addr
, 
o1
, 
n1
, 
n2
) \

1298 
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1299 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe_ªad


	)

1302 #ifde‡
AO_NO_DD_ORDERING


1303 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
)

1304 
	#AO_com∑ª_™d_sw≠_doubÀ_dd_acquúe_ªad
(
addr
, 
o1
, 
n1
, 
n2
) \

1305 
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1306 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_dd_acquúe_ªad


	)

1309 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
)

1310 
	#AO_com∑ª_™d_sw≠_doubÀ_dd_acquúe_ªad
(
addr
, 
o1
, 
n1
, 
n2
) \

1311 
	`AO_com∑ª_™d_sw≠_doubÀ
(
addr
, 
o1
, 
n1
, 
n2
)

	)

1312 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_dd_acquúe_ªad


	)

1318 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
) && \

1319 !
	$deföed
(
AO_HAVE_doubÀ_com∑ª_™d_sw≠_ªÀa£
)

1320 
AO_INLINE
 

1321 
	$AO_doubÀ_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

1322 
AO_doubÀ_t
 
ﬁd_vÆ
, AO_doubÀ_à
√w_vÆ
)

1324  
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
(
addr
,

1325 
ﬁd_vÆ
.
AO_vÆ1
, old_vÆ.
AO_vÆ2
,

1326 
√w_vÆ
.
AO_vÆ1
,Çew_vÆ.
AO_vÆ2
);

1327 
	}
}

1328 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠_ªÀa£


	)

1331 #i‡
deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
) && \

1332 !
	$deföed
(
AO_HAVE_doubÀ_com∑ª_™d_sw≠_acquúe
)

1333 
AO_INLINE
 

1334 
	$AO_doubÀ_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

1335 
AO_doubÀ_t
 
ﬁd_vÆ
, AO_doubÀ_à
√w_vÆ
)

1337  
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(
addr
,

1338 
ﬁd_vÆ
.
AO_vÆ1
, old_vÆ.
AO_vÆ2
,

1339 
√w_vÆ
.
AO_vÆ1
,Çew_vÆ.
AO_vÆ2
);

1340 
	}
}

1341 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠_acquúe


	)

1344 #i‡
deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
) && \

1345 !
	$deföed
(
AO_HAVE_doubÀ_com∑ª_™d_sw≠_fuŒ
)

1346 
AO_INLINE
 

1347 
	$AO_doubÀ_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

1348 
AO_doubÀ_t
 
ﬁd_vÆ
, AO_doubÀ_à
√w_vÆ
)

1350  
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
,

1351 
ﬁd_vÆ
.
AO_vÆ1
, old_vÆ.
AO_vÆ2
,

1352 
√w_vÆ
.
AO_vÆ1
,Çew_vÆ.
AO_vÆ2
);

1353 
	}
}

1354 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/acquire_release_volatile.h

37 #i‡!
deföed
(
AO_GCC_BARRIER
)

38 #i‡
deföed
(
__GNUC__
)

39 
	#AO_GCC_BARRIER
(Ë
	`AO_compûî_b¨rõr
()

	)

41 
	#AO_GCC_BARRIER
()

	)

45 
AO_INLINE
 
AO_t


46 
	$AO_lﬂd_acquúe
(vﬁ©ûê
AO_t
 *
p
)

48 
AO_t
 
ªsu…
 = *
p
;

50 
	`AO_GCC_BARRIER
();

51  
ªsu…
;

52 
	}
}

53 
	#AO_HAVE_lﬂd_acquúe


	)

55 
AO_INLINE
 

56 
	$AO_°‹e_ªÀa£
(vﬁ©ûê
AO_t
 *
p
, AO_à
vÆ
)

58 
	`AO_GCC_BARRIER
();

60 *
p
 = 
vÆ
;

61 
	}
}

62 
	#AO_HAVE_°‹e_ªÀa£


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/aligned_atomic_load_store.h

28 
AO_INLINE
 
AO_t


29 
	$AO_lﬂd
(vﬁ©ûê
AO_t
 *
addr
)

31 
	`as£π
(((
size_t
)
addr
 & ((
AO_t
) - 1)) == 0);

34  *(
AO_t
 *)
addr
;

35 
	}
}

37 
	#AO_HAVE_lﬂd


	)

39 
AO_INLINE
 

40 
	$AO_°‹e
(vﬁ©ûê
AO_t
 *
addr
, AO_à
√w_vÆ
)

42 
	`as£π
(((
size_t
)
addr
 & ((
AO_t
) - 1)) == 0);

43 (*(
AO_t
 *)
addr
Ë
√w_vÆ
;

44 
	}
}

46 
	#AO_HAVE_°‹e


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/all_acquire_release_volatile.h

28 
	~"acquúe_ªÀa£_vﬁ©ûe.h
"

29 
	~"ch¨_acquúe_ªÀa£_vﬁ©ûe.h
"

30 
	~"sh‹t_acquúe_ªÀa£_vﬁ©ûe.h
"

31 
	~"öt_acquúe_ªÀa£_vﬁ©ûe.h
"

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/all_aligned_atomic_load_store.h

27 
	~"Æig√d_©omic_lﬂd_°‹e.h
"

28 
	~"ch¨_©omic_lﬂd_°‹e.h
"

29 
	~"sh‹t_Æig√d_©omic_lﬂd_°‹e.h
"

30 
	~"öt_Æig√d_©omic_lﬂd_°‹e.h
"

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/all_atomic_load_store.h

28 
	~"©omic_lﬂd_°‹e.h
"

29 
	~"ch¨_©omic_lﬂd_°‹e.h
"

30 
	~"sh‹t_©omic_lﬂd_°‹e.h
"

31 
	~"öt_©omic_lﬂd_°‹e.h
"

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/ao_t_is_int.h

31 #i‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
) && \

32 !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_fuŒ
)

33 
	#AO_öt_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√w_vÆ
) \

34 
	`AO_com∑ª_™d_sw≠_fuŒ
((vﬁ©ûê
AO_t
 *)
addr
, \

35 (
AO_t
Ë
ﬁd
, (AO_t)
√w_vÆ
)

	)

36 
	#AO_HAVE_öt_com∑ª_™d_sw≠_fuŒ


	)

39 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
) && \

40 !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_acquúe
)

41 
	#AO_öt_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

42 
	`AO_com∑ª_™d_sw≠_acquúe
((vﬁ©ûê
AO_t
 *)
addr
, \

43 (
AO_t
Ë
ﬁd
, (AO_t)
√w_vÆ
)

	)

44 
	#AO_HAVE_öt_com∑ª_™d_sw≠_acquúe


	)

47 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
) && \

48 !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_ªÀa£
)

49 
	#AO_öt_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁd
, 
√w_vÆ
) \

50 
	`AO_com∑ª_™d_sw≠_ªÀa£
((vﬁ©ûê
AO_t
 *)
addr
, \

51 (
AO_t
Ë
ﬁd
, (AO_t)
√w_vÆ
)

	)

52 
	#AO_HAVE_öt_com∑ª_™d_sw≠_ªÀa£


	)

55 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_wrôe
) && \

56 !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_wrôe
)

57 
	#AO_öt_com∑ª_™d_sw≠_wrôe
(
addr
, 
ﬁd
, 
√w_vÆ
) \

58 
	`AO_com∑ª_™d_sw≠_wrôe
((vﬁ©ûê
AO_t
 *)
addr
, \

59 (
AO_t
Ë
ﬁd
, (AO_t)
√w_vÆ
)

	)

60 
	#AO_HAVE_öt_com∑ª_™d_sw≠_wrôe


	)

63 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªad
) && \

64 !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠_ªad
)

65 
	#AO_öt_com∑ª_™d_sw≠_ªad
(
addr
, 
ﬁd
, 
√w_vÆ
) \

66 
	`AO_com∑ª_™d_sw≠_ªad
((vﬁ©ûê
AO_t
 *)
addr
, \

67 (
AO_t
Ë
ﬁd
, (AO_t)
√w_vÆ
)

	)

68 
	#AO_HAVE_öt_com∑ª_™d_sw≠_ªad


	)

71 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
) && \

72 !
	$deföed
(
AO_HAVE_öt_com∑ª_™d_sw≠
)

73 
	#AO_öt_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
) \

74 
	`AO_com∑ª_™d_sw≠
((vﬁ©ûê
AO_t
 *)
addr
, \

75 (
AO_t
Ë
ﬁd
, (AO_t)
√w_vÆ
)

	)

76 
	#AO_HAVE_öt_com∑ª_™d_sw≠


	)

79 #i‡
	`deföed
(
AO_HAVE_lﬂd_acquúe
) && \

80 !
	$deföed
(
AO_HAVE_öt_lﬂd_acquúe
)

81 
	#AO_öt_lﬂd_acquúe
(
addr
Ë()
	`AO_lﬂd_acquúe
((vﬁ©ûê
AO_t
 *Ôddr)

	)

82 
	#AO_HAVE_öt_lﬂd_acquúe


	)

85 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£
) && \

86 !
	$deföed
(
AO_HAVE_öt_°‹e_ªÀa£
)

87 
	#AO_öt_°‹e_ªÀa£
(
addr
, 
vÆ
) \

88 
	`AO_°‹e_ªÀa£
((vﬁ©ûê
AO_t
 *)
addr
, (AO_t)
vÆ
)

	)

89 
	#AO_HAVE_öt_°‹e_ªÀa£


	)

92 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_fuŒ
) && \

93 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
)

94 
	#AO_öt_„tch_™d_add_fuŒ
(
addr
, 
ö¸
) \

95 ()
	`AO_„tch_™d_add_fuŒ
((vﬁ©ûê
AO_t
 *)
addr
, (AO_t)
ö¸
)

	)

96 
	#AO_HAVE_öt_„tch_™d_add_fuŒ


	)

99 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe
) && \

100 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
)

101 
	#AO_öt_„tch_™d_add1_acquúe
(
addr
) \

102 ()
	`AO_„tch_™d_add1_acquúe
((vﬁ©ûê
AO_t
 *)
addr
)

	)

103 
	#AO_HAVE_öt_„tch_™d_add1_acquúe


	)

106 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£
) && \

107 !
	$deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£
)

108 
	#AO_öt_„tch_™d_add1_ªÀa£
(
addr
) \

109 ()
	`AO_„tch_™d_add1_ªÀa£
((vﬁ©ûê
AO_t
 *)
addr
)

	)

110 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£


	)

113 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
) && \

114 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
)

115 
	#AO_öt_„tch_™d_sub1_acquúe
(
addr
) \

116 ()
	`AO_„tch_™d_sub1_acquúe
((vﬁ©ûê
AO_t
 *)
addr
)

	)

117 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe


	)

120 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£
) && \

121 !
	$deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£
)

122 
	#AO_öt_„tch_™d_sub1_ªÀa£
(
addr
) \

123 ()
	`AO_„tch_™d_sub1_ªÀa£
((vﬁ©ûê
AO_t
 *)
addr
)

	)

124 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/armcc/arm_v6.h

22 
	~"../ªad_‹dîed.h
"

23 
	~"../ã°_™d_£t_t_is_ao_t.h
"

25 #i‡
__TARGET_ARCH_ARM
 < 6

26 
D⁄t
 
u£
 
wôh
 
ARM
 
ö°ru˘i⁄
 
£ts
 
lowî
 
th™
 
	gv6


41 
AO_INLINE
 

42 
	$AO_n›_fuŒ
()

44 #i‚de‡
AO_UNIPROCESSOR


45 
de°
=0;

48 
__asm
 { 
m¸
 
p15
,0,
de°
,
c7
,
c10
,5 } ;

50 
	}
}

52 
	#AO_HAVE_n›_fuŒ


	)

54 
AO_INLINE
 
AO_t


55 
	$AO_lﬂd
(vﬁ©ûê
AO_t
 *
addr
)

58  (*(
AO_t
 *)
addr
);

59 
	}
}

60 
	#AO_HAVE_lﬂd


	)

71 
AO_INLINE
 
	$AO_°‹e
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆue
)

73 
tmp
;

75 
ªåy
:

76 
__asm
 {

77 
ldªx
 
tmp
, [
addr
]

78 
°ªx
 
tmp
, 
vÆue
, [
addr
]

79 
ãq
 
tmp
, #0

80 
b√
 
ªåy


82 
	}
}

83 
	#AO_HAVE_°‹e


	)

96 
AO_INLINE
 
AO_TS_t


97 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
) {

99 
AO_TS_t
 
ﬁdvÆ
;

100 
tmp
;

101 
⁄e
 = 1;

102 
ªåy
:

103 
__asm
 {

104 
ldªx
 
ﬁdvÆ
, [
addr
]

105 
°ªx
 
tmp
, 
⁄e
, [
addr
]

106 
ãq
 
tmp
, #0

107 
b√
 
ªåy


110  
ﬁdvÆ
;

111 
	}
}

113 
	#AO_HAVE_ã°_™d_£t


	)

116 
AO_INLINE
 
AO_t


117 
	$AO_„tch_™d_add
(vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

119 
tmp
,
tmp2
;

120 
AO_t
 
ªsu…
;

122 
ªåy
:

123 
__asm
 {

124 
ldªx
 
ªsu…
, [
p
]

125 
add
 
tmp
, 
ö¸
, 
ªsu…


126 
°ªx
 
tmp2
, 
tmp
, [
p
]

127 
ãq
 
tmp2
, #0

128 
b√
 
ªåy
 }

130  
ªsu…
;

131 
	}
}

133 
	#AO_HAVE_„tch_™d_add


	)

136 
AO_INLINE
 
AO_t


137 
	$AO_„tch_™d_add1
(vﬁ©ûê
AO_t
 *
p
)

139 
tmp
,
tmp2
;

140 
AO_t
 
ªsu…
;

142 
ªåy
:

143 
__asm
 {

144 
ldªx
 
ªsu…
, [
p
]

145 
add
 
tmp
, 
ªsu…
, #1

146 
°ªx
 
tmp2
, 
tmp
, [
p
]

147 
ãq
 
tmp2
, #0

148 
b√
 
ªåy


151  
ªsu…
;

152 
	}
}

154 
	#AO_HAVE_„tch_™d_add1


	)

157 
AO_INLINE
 
AO_t


158 
	$AO_„tch_™d_sub1
(vﬁ©ûê
AO_t
 *
p
)

160 
tmp
,
tmp2
;

161 
AO_t
 
ªsu…
;

163 
ªåy
:

164 
__asm
 {

165 
ldªx
 
ªsu…
, [
p
]

166 
sub
 
tmp
, 
ªsu…
, #1

167 
°ªx
 
tmp2
, 
tmp
, [
p
]

168 
ãq
 
tmp2
, #0

169 
b√
 
ªåy


172  
ªsu…
;

173 
	}
}

175 
	#AO_HAVE_„tch_™d_sub1


	)

179 
AO_INLINE
 

180 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
,

181 
AO_t
 
ﬁd_vÆ
, AO_à
√w_vÆ
)

183 
AO_t
 
ªsu…
,
tmp
;

185 
ªåy
:

186 
__asm__
 {

187 
ldªx
 
tmp
, [
addr
]

188 
mov
 
ªsu…
, #2

189 
ãq
 
tmp
, 
ﬁd_vÆ


190 
°ªxeq
 
ªsu…
, 
√w_vÆ
, [
addr
]

191 
ãq
 
ªsu…
, #1

192 
beq
 
ªåy


195  (
ªsu…
^2)>>1;

196 
	}
}

197 
	#AO_HAVE_com∑ª_™d_sw≠


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/atomic_load_store.h

28 
AO_INLINE
 
AO_t


29 
	$AO_lﬂd
(vﬁ©ûê
AO_t
 *
addr
)

33  (*(
AO_t
 *)
addr
);

34 
	}
}

36 
	#AO_HAVE_lﬂd


	)

38 
AO_INLINE
 

39 
	$AO_°‹e
(vﬁ©ûê
AO_t
 *
addr
, AO_à
√w_vÆ
)

41 (*(
AO_t
 *)
addr
Ë
√w_vÆ
;

42 
	}
}

44 
	#AO_HAVE_°‹e


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/char_acquire_release_volatile.h

28 #i‡!
deföed
(
AO_GCC_BARRIER
)

29 #i‡
deföed
(
__GNUC__
)

30 
	#AO_GCC_BARRIER
(Ë
	`AO_compûî_b¨rõr
()

	)

32 
	#AO_GCC_BARRIER
()

	)

36 
AO_INLINE
 

37 
	$AO_ch¨_lﬂd_acquúe
(vﬁ©ûê*
p
)

39 
ªsu…
 = *
p
;

41 
	`AO_GCC_BARRIER
();

42  
ªsu…
;

43 
	}
}

44 
	#AO_HAVE_ch¨_lﬂd_acquúe


	)

46 
AO_INLINE
 

47 
	$AO_ch¨_°‹e_ªÀa£
(vﬁ©ûê*
p
, 
vÆ
)

49 
	`AO_GCC_BARRIER
();

51 *
p
 = 
vÆ
;

52 
	}
}

53 
	#AO_HAVE_ch¨_°‹e_ªÀa£


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/char_atomic_load_store.h

28 
AO_INLINE
 

29 
	$AO_ch¨_lﬂd
(vﬁ©ûê*
addr
)

33  (*(*)
addr
);

34 
	}
}

36 
	#AO_HAVE_ch¨_lﬂd


	)

38 
AO_INLINE
 

39 
	$AO_ch¨_°‹e
(vﬁ©ûê*
addr
, 
√w_vÆ
)

41 (*(*)
addr
Ë
√w_vÆ
;

42 
	}
}

44 
	#AO_HAVE_ch¨_°‹e


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/emul_cas.h

38 #i‡!
deföed
(
ATOMIC_OPS_H
)

39 #îr‹ 
This
 
fûe
 
should
 
nŸ
 
be
 
ö˛uded
 
dúe˘ly
.

42 #i‚de‡
AO_HAVE_doubÀ_t


43 
	~"°™d¨d_ao_doubÀ_t.h
"

46 
AO_com∑ª_™d_sw≠_emuœti⁄
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
,

47 
AO_t
 
√w_vÆ
);

49 
AO_com∑ª_doubÀ_™d_sw≠_doubÀ_emuœti⁄
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

50 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

51 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
);

53 
AO_°‹e_fuŒ_emuœti⁄
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆ
);

55 
	#AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁd
, 
√wvÆ
) \

56 
	`AO_com∑ª_™d_sw≠_emuœti⁄
(
addr
, 
ﬁd
, 
√wvÆ
)

	)

57 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

59 #i‚de‡
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ


60 
	#AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(
addr
, 
ﬁd1
, 
ﬁd2
, \

61 
√wvÆ1
, 
√wvÆ2
) \

62 
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_emuœti⁄
(
addr
, 
ﬁd1
, 
ﬁd2
, \

63 
√wvÆ1
, 
√wvÆ2
)

	)

64 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

67 #unde‡
AO_°‹e


68 #unde‡
AO_HAVE_°‹e


69 #unde‡
AO_°‹e_wrôe


70 #unde‡
AO_HAVE_°‹e_wrôe


71 #unde‡
AO_°‹e_ªÀa£


72 #unde‡
AO_HAVE_°‹e_ªÀa£


73 #unde‡
AO_°‹e_fuŒ


74 #unde‡
AO_HAVE_°‹e_fuŒ


75 
	#AO_°‹e_fuŒ
(
addr
, 
vÆ
Ë
	`AO_°‹e_fuŒ_emuœti⁄
◊ddr, vÆ)

	)

76 
	#AO_HAVE_°‹e_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/alpha.h

18 
	~"../©omic_lﬂd_°‹e.h
"

20 
	~"../ã°_™d_£t_t_is_ao_t.h
"

22 
	#AO_NO_DD_ORDERING


	)

25 
AO_INLINE
 

26 
	$AO_n›_fuŒ
()

28 
__asm__
 
	`__vﬁ©ûe__
("mb" : : : "memory");

29 
	}
}

31 
	#AO_HAVE_n›_fuŒ


	)

33 
AO_INLINE
 

34 
	$AO_n›_wrôe
()

36 
__asm__
 
	`__vﬁ©ûe__
("wmb" : : : "memory");

37 
	}
}

39 
	#AO_HAVE_n›_wrôe


	)

45 
AO_INLINE
 

46 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
,

47 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

49 
was_equÆ
;

50 
ãmp
;

52 
__asm__
 
	`__vﬁ©ûe__
(

60 :"=&r" (
ãmp
), "=m" (*
addr
), "=&r" (
was_equÆ
)

61 : "r" (
√w_vÆ
), "Ir" (
ﬁd
)

63  
was_equÆ
;

64 
	}
}

66 
	#AO_HAVE_com∑ª_™d_sw≠


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/arm.h

18 
	~"../ªad_‹dîed.h
"

20 
	~"../ã°_™d_£t_t_is_ao_t.h
"

36 #i‡
deföed
(
__ARM_ARCH_6__
Ë|| deföed(
__ARM_ARCH_6K__
Ë|| deföed(
__ARM_ARCH_7__
)

37 
AO_INLINE
 

38 
	$AO_n›_fuŒ
()

40 #i‚de‡
AO_UNIPROCESSOR


43 
de°
=0;

44 
__asm__
 
	`__vﬁ©ûe__
("m¸Ö15,0,%0,c7,c10,5" :"=&r"(
de°
) : : "memory");

46 
	}
}

48 
	#AO_HAVE_n›_fuŒ


	)

51 
AO_INLINE
 
AO_t


52 
	$AO_lﬂd
(vﬁ©ûê
AO_t
 *
addr
)

56  (*(
AO_t
 *)
addr
);

57 
	}
}

58 
	#AO_HAVE_lﬂd


	)

85 
AO_INLINE
 
	$AO_°‹e
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆue
)

87 
tmp
;

89 
__asm__
 
	`__vﬁ©ûe__
("@AO_store\n"

94 : "=&r"(
tmp
)

95 : "r" (
addr
), "r"(
vÆue
)

97 
	}
}

98 
	#AO_HAVE_°‹e


	)

112 
AO_INLINE
 
AO_TS_t


113 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
) {

115 
AO_TS_t
 
ﬁdvÆ
;

116 
tmp
;

118 
__asm__
 
	`__vﬁ©ûe__
("@AO_test_and_set\n"

123 : "=&r"(
ﬁdvÆ
),"=&r"(
tmp
)

124 : "r"(
addr
), "r"(1)

127  
ﬁdvÆ
;

128 
	}
}

130 
	#AO_HAVE_ã°_™d_£t


	)

133 
AO_INLINE
 
AO_t


134 
	$AO_„tch_™d_add
(vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

136 
tmp
,
tmp2
;

137 
AO_t
 
ªsu…
;

139 
__asm__
 
	`__vﬁ©ûe__
("@AO_fetch_and_add\n"

145 : "=&r"(
ªsu…
),"=&r"(
tmp
),"=&r"(
tmp2
)

146 : "r"(
ö¸
), "r"(
p
)

149  
ªsu…
;

150 
	}
}

152 
	#AO_HAVE_„tch_™d_add


	)

155 
AO_INLINE
 
AO_t


156 
	$AO_„tch_™d_add1
(vﬁ©ûê
AO_t
 *
p
)

158 
tmp
,
tmp2
;

159 
AO_t
 
ªsu…
;

161 
__asm__
 
	`__vﬁ©ûe__
("@AO_fetch_and_add1\n"

167 : "=&r"(
ªsu…
), "=&r"(
tmp
), "=&r"(
tmp2
)

168 : "r"(
p
)

171  
ªsu…
;

172 
	}
}

174 
	#AO_HAVE_„tch_™d_add1


	)

177 
AO_INLINE
 
AO_t


178 
	$AO_„tch_™d_sub1
(vﬁ©ûê
AO_t
 *
p
)

180 
tmp
,
tmp2
;

181 
AO_t
 
ªsu…
;

183 
__asm__
 
	`__vﬁ©ûe__
("@ AO_fetch_and_sub1\n"

189 : "=&r"(
ªsu…
), "=&r"(
tmp
), "=&r"(
tmp2
)

190 : "r"(
p
)

193  
ªsu…
;

194 
	}
}

196 
	#AO_HAVE_„tch_™d_sub1


	)

200 
AO_INLINE
 

201 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
,

202 
AO_t
 
ﬁd_vÆ
, AO_à
√w_vÆ
)

204 
AO_t
 
ªsu…
,
tmp
;

206 
__asm__
 
	`__vﬁ©ûe__
("@ AO_compare_and_swap\n"

214 : "=&r"(
ªsu…
), "=&r"(
tmp
)

215 : "r"(
addr
), "r"(
ﬁd_vÆ
), "r"(
√w_vÆ
)

218  (
ªsu…
>>1);

219 
	}
}

220 
	#AO_HAVE_com∑ª_™d_sw≠


	)

229 
	~"../Æl_©omic_lﬂd_°‹e.h
"

231 
AO_INLINE
 
AO_TS_VAL_t


232 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
) {

233 
AO_TS_VAL_t
 
ﬁdvÆ
;

241 
__asm__
 
	`__vﬁ©ûe__
("swp %0, %2, [%3]"

242 : "=&r"(
ﬁdvÆ
), "=&r"(
addr
)

243 : "r"(1), "1"(
addr
)

245  
ﬁdvÆ
;

246 
	}
}

248 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/cris.h

29 
	~"../Æl_©omic_lﬂd_°‹e.h
"

31 
	~"../‹dîed.h
"

33 
	~"../ã°_™d_£t_t_is_ao_t.h
"

50 
AO_INLINE
 
AO_TS_VAL_t


51 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
) {

53 
ªt
;

57 
__asm__
 
	`__vﬁ©ûe__
("clearf\n"

64 : "=&r" (
ªt
), "=m" (*
addr
)

65 : "r" (
addr
), "r" (() 1), "m" (*addr)

67  
ªt
;

68 
	}
}

70 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/hppa.h

27 
	~"../Æl_©omic_lﬂd_°‹e.h
"

33 
	~"../‹dîed.h
"

38 
	sAO_∑_˛óøbÀ_loc
 {

39 
	md©a
[4];

42 #unde‡
AO_TS_INITIALIZER


43 
	#AO_TS_t
 
AO_∑_˛óøbÀ_loc


	)

44 
	#AO_TS_INITIALIZER
 {1,1,1,1}

	)

47 íum {
	mAO_PA_TS_£t
 = 0, 
	mAO_PA_TS_˛ór
 = 1} 
	tAO_PA_TS_vÆ
;

48 
	#AO_TS_VAL_t
 
AO_PA_TS_vÆ


	)

49 
	#AO_TS_CLEAR
 
AO_PA_TS_˛ór


	)

50 
	#AO_TS_SET
 
AO_PA_TS_£t


	)

57 
	#__ldcw
(
a
) ({ \

58 vﬁ©ûê
__ªt
; \

59 
__asm__
 
	`__vﬁ©ûe__
("ldcw 0(%2),%0" \

60 : "Ù" (
__ªt
), "=m" (*(
a
)) : "r" (a)); \

61 
__ªt
; \

62 })

	)

71 
	#__PA_LDCW_ALIGNMENT
 16

	)

72 
	#__ldcw_Æign
(
a
) ({ \

73 
__ªt
 = (Ë
a
; \

74 
__ªt
 +
__PA_LDCW_ALIGNMENT
 - 1; \

75 
__ªt
 &~(
__PA_LDCW_ALIGNMENT
 - 1); \

76 (vﬁ©ûê*Ë
__ªt
; \

77 })

	)

80 
AO_INLINE
 
AO_TS_VAL_t


81 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 * 
addr
)

83 vﬁ©ûê*
a
 = 
	`__ldcw_Æign
 (
addr
);

84  (
AO_TS_VAL_t
Ë
	`__ldcw
 (
a
);

85 
	}
}

87 
AO_INLINE
 

88 
	$AO_∑_˛ór
(vﬁ©ûê
AO_TS_t
 * 
addr
)

90 vﬁ©ûê*
a
 = 
	`__ldcw_Æign
 (
addr
);

91 
	`AO_compûî_b¨rõr
();

92 *
a
 = 1;

93 
	}
}

94 
	#AO_CLEAR
(
addr
Ë
	`AO_∑_˛ór
◊ddr)

	)

96 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/ia64.h

23 
	~"../Æl_©omic_lﬂd_°‹e.h
"

25 
	~"../Æl_acquúe_ªÀa£_vﬁ©ûe.h
"

27 
	~"../ã°_™d_£t_t_is_ch¨.h
"

29 #ifde‡
_ILP32


34 
	#AO_LEN
 "4"

	)

45 
	#AO_IN_ADDR
 "1"(
addr
)

	)

46 
	#AO_OUT_ADDR
 , "Ù"(
addr
)

	)

47 
	#AO_SWIZZLE
 "addp4 %1=0,%1;;\n"

	)

48 
	#AO_MASK
(
±r
Ë
	`__asm__
("zxt4 %1=%1": "Ù"’åË: "0"’å));

	)

50 
	#AO_LEN
 "8"

	)

51 
	#AO_IN_ADDR
 "r"(
addr
)

	)

52 
	#AO_OUT_ADDR


	)

53 
	#AO_SWIZZLE


	)

54 
	#AO_MASK
(
±r
)

	)

57 
AO_INLINE
 

58 
	$AO_n›_fuŒ
()

60 
__asm__
 
	`__vﬁ©ûe__
("mf" : : : "memory");

61 
	}
}

62 
	#AO_HAVE_n›_fuŒ


	)

64 
AO_INLINE
 
AO_t


65 
	$AO_„tch_™d_add1_acquúe
 (vﬁ©ûê
AO_t
 *
addr
)

67 
AO_t
 
ªsu…
;

69 
__asm__
 
	`__vﬁ©ûe__
 (
AO_SWIZZLE


70 "„tchadd" 
AO_LEN
 ".acq %0=[%1],1":

71 "Ù" (
ªsu…
Ë
AO_OUT_ADDR
: 
AO_IN_ADDR
 :"memory");

72  
ªsu…
;

73 
	}
}

74 
	#AO_HAVE_„tch_™d_add1_acquúe


	)

76 
AO_INLINE
 
AO_t


77 
	$AO_„tch_™d_add1_ªÀa£
 (vﬁ©ûê
AO_t
 *
addr
)

79 
AO_t
 
ªsu…
;

81 
__asm__
 
	`__vﬁ©ûe__
 (
AO_SWIZZLE


82 "„tchadd" 
AO_LEN
 ".rel %0=[%1],1":

83 "Ù" (
ªsu…
Ë
AO_OUT_ADDR
: 
AO_IN_ADDR
 :"memory");

84  
ªsu…
;

85 
	}
}

87 
	#AO_HAVE_„tch_™d_add1_ªÀa£


	)

89 
AO_INLINE
 
AO_t


90 
	$AO_„tch_™d_sub1_acquúe
 (vﬁ©ûê
AO_t
 *
addr
)

92 
AO_t
 
ªsu…
;

94 
__asm__
 
	`__vﬁ©ûe__
 (
AO_SWIZZLE


95 "„tchadd" 
AO_LEN
 ".acq %0=[%1],-1":

96 "Ù" (
ªsu…
Ë
AO_OUT_ADDR
: 
AO_IN_ADDR
 :"memory");

97  
ªsu…
;

98 
	}
}

100 
	#AO_HAVE_„tch_™d_sub1_acquúe


	)

102 
AO_INLINE
 
AO_t


103 
	$AO_„tch_™d_sub1_ªÀa£
 (vﬁ©ûê
AO_t
 *
addr
)

105 
AO_t
 
ªsu…
;

107 
__asm__
 
	`__vﬁ©ûe__
 (
AO_SWIZZLE


108 "„tchadd" 
AO_LEN
 ".rel %0=[%1],-1":

109 "Ù" (
ªsu…
Ë
AO_OUT_ADDR
: 
AO_IN_ADDR
 :"memory");

110  
ªsu…
;

111 
	}
}

113 
	#AO_HAVE_„tch_™d_sub1_ªÀa£


	)

115 #i‚de‡
_ILP32


117 
AO_INLINE
 

118 
	$AO_öt_„tch_™d_add1_acquúe
 (vﬁ©ûê*
addr
)

120 
ªsu…
;

122 
__asm__
 
	`__vﬁ©ûe__
 ("fetchadd4.acq %0=[%1],1":

123 "Ù" (
ªsu…
): 
AO_IN_ADDR
 :"memory");

124  
ªsu…
;

125 
	}
}

126 
	#AO_HAVE_öt_„tch_™d_add1_acquúe


	)

128 
AO_INLINE
 

129 
	$AO_öt_„tch_™d_add1_ªÀa£
 (vﬁ©ûê*
addr
)

131 
ªsu…
;

133 
__asm__
 
	`__vﬁ©ûe__
 ("fetchadd4.rel %0=[%1],1":

134 "Ù" (
ªsu…
): 
AO_IN_ADDR
 :"memory");

135  
ªsu…
;

136 
	}
}

138 
	#AO_HAVE_öt_„tch_™d_add1_ªÀa£


	)

140 
AO_INLINE
 

141 
	$AO_öt_„tch_™d_sub1_acquúe
 (vﬁ©ûê*
addr
)

143 
ªsu…
;

145 
__asm__
 
	`__vﬁ©ûe__
 ("fetchadd4.acq %0=[%1],-1":

146 "Ù" (
ªsu…
): 
AO_IN_ADDR
 :"memory");

147  
ªsu…
;

148 
	}
}

150 
	#AO_HAVE_öt_„tch_™d_sub1_acquúe


	)

152 
AO_INLINE
 

153 
	$AO_öt_„tch_™d_sub1_ªÀa£
 (vﬁ©ûê*
addr
)

155 
ªsu…
;

157 
__asm__
 
	`__vﬁ©ûe__
 ("fetchadd4.rel %0=[%1],-1":

158 "Ù" (
ªsu…
): 
AO_IN_ADDR
 :"memory");

159  
ªsu…
;

160 
	}
}

162 
	#AO_HAVE_öt_„tch_™d_sub1_ªÀa£


	)

166 
AO_INLINE
 

167 
	$AO_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
,

168 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

170 
AO_t
 
ﬁdvÆ
;

171 
	`AO_MASK
(
ﬁd
);

172 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


173 "movár.ccv=%[ﬁd] ;; cmpxchg" 
AO_LEN


175 : "Ù"(
ﬁdvÆ
Ë
AO_OUT_ADDR


176 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"(old)

178  (
ﬁdvÆ
 =
ﬁd
);

179 
	}
}

181 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe


	)

183 
AO_INLINE
 

184 
	$AO_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
,

185 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

187 
AO_t
 
ﬁdvÆ
;

188 
	`AO_MASK
(
ﬁd
);

189 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


190 "movár.ccv=%[ﬁd] ;; cmpxchg" 
AO_LEN


192 : "Ù"(
ﬁdvÆ
Ë
AO_OUT_ADDR


193 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"(old)

195  (
ﬁdvÆ
 =
ﬁd
);

196 
	}
}

198 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£


	)

200 
AO_INLINE
 

201 
	$AO_ch¨_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

202 
ﬁd
, 
√w_vÆ
)

204 
ﬁdvÆ
;

205 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


207 : "Ù"(
ﬁdvÆ
Ë
AO_OUT_ADDR


208 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"((
AO_t
)old)

210  (
ﬁdvÆ
 =
ﬁd
);

211 
	}
}

213 
	#AO_HAVE_ch¨_com∑ª_™d_sw≠_acquúe


	)

215 
AO_INLINE
 

216 
	$AO_ch¨_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

217 
ﬁd
, 
√w_vÆ
)

219 
ﬁdvÆ
;

220 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


222 : "Ù"(
ﬁdvÆ
Ë
AO_OUT_ADDR


223 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"((
AO_t
)old)

225  (
ﬁdvÆ
 =
ﬁd
);

226 
	}
}

228 
	#AO_HAVE_ch¨_com∑ª_™d_sw≠_ªÀa£


	)

230 
AO_INLINE
 

231 
	$AO_sh‹t_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

232 
ﬁd
, 
√w_vÆ
)

234 
ﬁdvÆ
;

235 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


237 : "Ù"(
ﬁdvÆ
Ë
AO_OUT_ADDR


238 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"((
AO_t
)old)

240  (
ﬁdvÆ
 =
ﬁd
);

241 
	}
}

243 
	#AO_HAVE_sh‹t_com∑ª_™d_sw≠_acquúe


	)

245 
AO_INLINE
 

246 
	$AO_sh‹t_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

247 
ﬁd
, 
√w_vÆ
)

249 
ﬁdvÆ
;

250 
__asm__
 
	`__vﬁ©ûe__
(
AO_SWIZZLE


252 : "Ù"(
ﬁdvÆ
Ë
AO_OUT_ADDR


253 : 
AO_IN_ADDR
, [
√w_vÆ
]"r"“ew_vÆ), [
ﬁd
]"r"((
AO_t
)old)

255  (
ﬁdvÆ
 =
ﬁd
);

256 
	}
}

258 
	#AO_HAVE_sh‹t_com∑ª_™d_sw≠_ªÀa£


	)

260 #i‚de‡
_ILP32


262 
AO_INLINE
 

263 
	$AO_öt_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

264 
ﬁd
, 
√w_vÆ
)

266 
ﬁdvÆ
;

267 
__asm__
 
	`__vﬁ©ûe__
("movár.ccv=%3 ;; cmpxchg4.acq %0=[%1],%2,ar.ccv"

268 : "Ù"(
ﬁdvÆ
)

269 : 
AO_IN_ADDR
, "r"(
√w_vÆ
), "r"((
AO_t
)
ﬁd
) : "memory");

270  (
ﬁdvÆ
 =
ﬁd
);

271 
	}
}

273 
	#AO_HAVE_öt_com∑ª_™d_sw≠_acquúe


	)

275 
AO_INLINE
 

276 
	$AO_öt_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

277 
ﬁd
, 
√w_vÆ
)

279 
ﬁdvÆ
;

280 
__asm__
 
	`__vﬁ©ûe__
("movár.ccv=%3 ;; cmpxchg4.rel %0=[%1],%2,ar.ccv"

281 : "Ù"(
ﬁdvÆ
)

282 : 
AO_IN_ADDR
, "r"(
√w_vÆ
), "r"((
AO_t
)
ﬁd
) : "memory");

283  (
ﬁdvÆ
 =
ﬁd
);

284 
	}
}

286 
	#AO_HAVE_öt_com∑ª_™d_sw≠_ªÀa£


	)

295 #ifde‡
_ILP32


296 
	~"../ao_t_is_öt.h
"

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/m68k.h

19 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

23 
	~"../‹dîed.h
"

25 
	~"../ã°_™d_£t_t_is_ao_t.h
"

28 
AO_INLINE
 
AO_TS_VAL_t


29 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
) {

30 
ﬁdvÆ
;

35 
__asm__
 
	`__vﬁ©ûe__
(

37 : "=d" (
ﬁdvÆ
)

38 : "a" (
addr
) : "memory");

39  
ﬁdvÆ
;

40 
	}
}

42 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/powerpc.h

33 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

35 
	~"../ã°_™d_£t_t_is_ao_t.h
"

39 
AO_INLINE
 

40 
	$AO_n›_fuŒ
()

42 
__asm__
 
	`__vﬁ©ûe__
("sync" : : : "memory");

43 
	}
}

45 
	#AO_HAVE_n›_fuŒ


	)

48 
AO_INLINE
 

49 
	$AO_lwsync
()

51 
__asm__
 
	`__vﬁ©ûe__
("lwsync" : : : "memory");

52 
	}
}

54 
	#AO_n›_wrôe
(Ë
	`AO_lwsync
()

	)

55 
	#AO_HAVE_n›_wrôe


	)

57 
	#AO_n›_ªad
(Ë
	`AO_lwsync
()

	)

58 
	#AO_HAVE_n›_ªad


	)

67 #i‡
deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

68 
AO_INLINE
 
AO_t


69 
	$AO_lﬂd_acquúe
(vﬁ©ûê
AO_t
 *
addr
)

71 
AO_t
 
ªsu…
;

76 
__asm__
 
	`__vﬁ©ûe__
 (

81 : "Ù" (
ªsu…
)

82 : "m"(*
addr
) : "memory", "cc");

83  
ªsu…
;

84 
	}
}

86 
AO_INLINE
 
AO_t


87 
	$AO_lﬂd_acquúe
(vﬁ©ûê
AO_t
 *
addr
)

89 
AO_t
 
ªsu…
;

94 
__asm__
 
	`__vﬁ©ûe__
 (

99 : "Ù" (
ªsu…
)

100 : "m"(*
addr
) : "memory", "cc");

101  
ªsu…
;

102 
	}
}

104 
	#AO_HAVE_lﬂd_acquúe


	)

108 
AO_INLINE
 

109 
	$AO_°‹e_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆue
)

111 
	`AO_lwsync
();

112 *
addr
 = 
vÆue
;

113 
	}
}

115 
	#AO_HAVE_lﬂd_acquúe


	)

120 #i‡
deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

122 
AO_INLINE
 
AO_TS_VAL_t


123 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
) {

124 
ﬁdvÆ
;

125 
ãmp
 = 1;

127 
__asm__
 
	`__vﬁ©ûe__
(

134 : "=&r"(
ﬁdvÆ
)

135 : "r"(
addr
), "r"(
ãmp
)

138  (
AO_TS_VAL_t
)
ﬁdvÆ
;

139 
	}
}

143 
AO_INLINE
 
AO_TS_VAL_t


144 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
) {

145 
ﬁdvÆ
;

146 
ãmp
 = 1;

148 
__asm__
 
	`__vﬁ©ûe__
(

155 : "=&r"(
ﬁdvÆ
)

156 : "r"(
addr
), "r"(
ãmp
)

159  (
AO_TS_VAL_t
)
ﬁdvÆ
;

160 
	}
}

164 
	#AO_have_ã°_™d_£t


	)

166 
AO_INLINE
 
AO_TS_VAL_t


167 
	$AO_ã°_™d_£t_acquúe
(vﬁ©ûê
AO_TS_t
 *
addr
) {

168 
AO_TS_VAL_t
 
ªsu…
 = 
	`AO_ã°_™d_£t
(
addr
);

169 
	`AO_lwsync
();

170  
ªsu…
;

171 
	}
}

173 
	#AO_HAVE_ã°_™d_£t_acquúe


	)

175 
AO_INLINE
 
AO_TS_VAL_t


176 
	$AO_ã°_™d_£t_ªÀa£
(vﬁ©ûê
AO_TS_t
 *
addr
) {

177 
	`AO_lwsync
();

178  
	`AO_ã°_™d_£t
(
addr
);

179 
	}
}

181 
	#AO_HAVE_ã°_™d_£t_ªÀa£


	)

183 
AO_INLINE
 
AO_TS_VAL_t


184 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
) {

185 
AO_TS_VAL_t
 
ªsu…
;

186 
	`AO_lwsync
();

187 
ªsu…
 = 
	`AO_ã°_™d_£t
(
addr
);

188 
	`AO_lwsync
();

189  
ªsu…
;

190 
	}
}

192 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

194 #i‡
deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
Ë|| deföed(
__64BIT__
)

196 
AO_INLINE
 

197 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

198 
AO_t
 
ﬁdvÆ
;

199 
ªsu…
 = 0;

201 
__asm__
 
	`__vﬁ©ûe__
(

209 : "=&r"(
ﬁdvÆ
), "=&r"(
ªsu…
)

210 : "r"(
addr
), "r"(
√w_vÆ
), "r"(
ﬁd
), "1"(
ªsu…
)

213  
ªsu…
;

214 
	}
}

218 
AO_INLINE
 

219 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

220 
AO_t
 
ﬁdvÆ
;

221 
ªsu…
 = 0;

223 
__asm__
 
	`__vﬁ©ûe__
(

231 : "=&r"(
ﬁdvÆ
), "=&r"(
ªsu…
)

232 : "r"(
addr
), "r"(
√w_vÆ
), "r"(
ﬁd
), "1"(
ªsu…
)

235  
ªsu…
;

236 
	}
}

239 
	#AO_HAVE_com∑ª_™d_sw≠


	)

241 
AO_INLINE
 

242 
	$AO_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

243 
ªsu…
 = 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

244 
	`AO_lwsync
();

245  
ªsu…
;

246 
	}
}

248 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe


	)

250 
AO_INLINE
 

251 
	$AO_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

252 
	`AO_lwsync
();

253  
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

254 
	}
}

256 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£


	)

258 
AO_INLINE
 

259 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

260 
AO_t
 
ªsu…
;

261 
	`AO_lwsync
();

262 
ªsu…
 = 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

263 
	`AO_lwsync
();

264  
ªsu…
;

265 
	}
}

267 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/s390.h

33 
	~"‹dîed_ex˚±_wr.h
"

34 
	~"Æl_Æig√d_©omic_lﬂd_°‹e.h
"

36 
	~"../ã°_™d_£t_t_is_ao_t.h
"

43 
AO_INLINE
 
AO_t
 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
,

44 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

46 
ªtvÆ
;

47 
__asm__
 
	`__vﬁ©ûe__
 (

48 #i‚de‡
__s390x__


55 : "=&d" (
ªtvÆ
), "+d" (
ﬁd
)

56 : "d" (
√w_vÆ
), "a" (
addr
)

58  
ªtvÆ
 == 0;

59 
	}
}

61 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/sparc.h

22 
	~"../Æl_©omic_lﬂd_°‹e.h
"

25 
	~"../‹dîed_ex˚±_wr.h
"

28 
	~"../ã°_™d_£t_t_is_ch¨.h
"

30 
AO_INLINE
 
AO_TS_VAL_t


31 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
) {

32 
ﬁdvÆ
;

34 
__asm__
 
	`__vﬁ©ûe__
("ldstub %1,%0"

35 : "Ù"(
ﬁdvÆ
), "=m"(*
addr
)

36 : "m"(*
addr
) : "memory");

37  
ﬁdvÆ
;

38 
	}
}

40 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/x86.h

24 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

33 
	~"../‹dîed_ex˚±_wr.h
"

35 
	~"../ã°_™d_£t_t_is_ch¨.h
"

37 
	~"../°™d¨d_ao_doubÀ_t.h
"

39 #i‡
deföed
(
AO_USE_PENTIUM4_INSTRS
)

40 
AO_INLINE
 

41 
	$AO_n›_fuŒ
()

43 
__asm__
 
	`__vﬁ©ûe__
("mfence" : : : "memory");

44 
	}
}

46 
	#AO_HAVE_n›_fuŒ


	)

60 
AO_INLINE
 
AO_t


61 
	$AO_„tch_™d_add_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

63 
AO_t
 
ªsu…
;

65 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddl %0, %1" :

66 "Ù" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

68  
ªsu…
;

69 
	}
}

71 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

73 
AO_INLINE
 

74 
	$AO_ch¨_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

76 
ªsu…
;

78 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddb %0, %1" :

79 "=q" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

81  
ªsu…
;

82 
	}
}

84 
	#AO_HAVE_ch¨_„tch_™d_add_fuŒ


	)

86 
AO_INLINE
 

87 
	$AO_sh‹t_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

89 
ªsu…
;

91 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddw %0, %1" :

92 "Ù" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

94  
ªsu…
;

95 
	}
}

97 
	#AO_HAVE_sh‹t_„tch_™d_add_fuŒ


	)

100 
AO_INLINE
 

101 
	$AO_‹_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

103 
__asm__
 
	`__vﬁ©ûe__
 ("lock; orl %1, %0" :

104 "=m" (*
p
Ë: "r" (
ö¸
), "m" (*p) : "memory");

105 
	}
}

107 
	#AO_HAVE_‹_fuŒ


	)

109 
AO_INLINE
 
AO_TS_VAL_t


110 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

112 
ﬁdvÆ
;

114 
__asm__
 
	`__vﬁ©ûe__
("xchgb %0, %1"

115 : "=q"(
ﬁdvÆ
), "=m"(*
addr
)

116 : "0"(0xff), "m"(*
addr
) : "memory");

117  (
AO_TS_VAL_t
)
ﬁdvÆ
;

118 
	}
}

120 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

123 
AO_INLINE
 

124 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
,

125 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

127 
ªsu…
;

128 
__asm__
 
	`__vﬁ©ûe__
("lock; cmpxchgl %3, %0; setz %1"

129 : "=m"(*
addr
), "=q"(
ªsu…
)

130 : "m"(*
addr
), "r" (
√w_vÆ
), "a"(
ﬁd
) : "memory");

131  (Ë
ªsu…
;

132 
	}
}

134 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

138 
AO_INLINE
 

139 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

140 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

141 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

143 
ªsu…
;

144 #i‡
__PIC__


148 
__asm__
 
	`__vﬁ©ûe__
("pushl %%ebx;"

152 : "=m"(*
addr
), "=q"(
ªsu…
)

153 : "m"(*
addr
), "d" (
ﬁd_vÆ2
), "a" (
ﬁd_vÆ1
),

154 "c" (
√w_vÆ2
), "m" (
√w_vÆ1
) : "memory");

160 
__asm__
 
	`__vﬁ©ûe__
("lock; cmpxchg8b %0; setz %1;"

161 : "=m"(*
addr
), "=q"(
ªsu…
)

162 : "m"(*
addr
), "d" (
ﬁd_vÆ2
), "a" (
ﬁd_vÆ1
),

163 "c" (
√w_vÆ2
), "b" (
√w_vÆ1
) : "memory");

165  (Ë
ªsu…
;

166 
	}
}

168 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

170 
	~"../ao_t_is_öt.h
"

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/x86_64.h

24 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

33 
	~"../‹dîed_ex˚±_wr.h
"

35 
	~"../ã°_™d_£t_t_is_ch¨.h
"

37 
	~"../°™d¨d_ao_doubÀ_t.h
"

39 #i‡
deföed
(
AO_USE_PENTIUM4_INSTRS
)

40 
AO_INLINE
 

41 
	$AO_n›_fuŒ
()

43 
__asm__
 
	`__vﬁ©ûe__
("mfence" : : : "memory");

44 
	}
}

46 
	#AO_HAVE_n›_fuŒ


	)

60 
AO_INLINE
 
AO_t


61 
	$AO_„tch_™d_add_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

63 
AO_t
 
ªsu…
;

65 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddq %0, %1" :

66 "Ù" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

68  
ªsu…
;

69 
	}
}

71 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

73 
AO_INLINE
 

74 
	$AO_ch¨_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

76 
ªsu…
;

78 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddb %0, %1" :

79 "=q" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

81  
ªsu…
;

82 
	}
}

84 
	#AO_HAVE_ch¨_„tch_™d_add_fuŒ


	)

86 
AO_INLINE
 

87 
	$AO_sh‹t_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

89 
ªsu…
;

91 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddw %0, %1" :

92 "Ù" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

94  
ªsu…
;

95 
	}
}

97 
	#AO_HAVE_sh‹t_„tch_™d_add_fuŒ


	)

99 
AO_INLINE
 

100 
	$AO_öt_„tch_™d_add_fuŒ
 (vﬁ©ûê*
p
, 
ö¸
)

102 
ªsu…
;

104 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddl %0, %1" :

105 "Ù" (
ªsu…
), "=m" (*
p
Ë: "0" (
ö¸
), "m" (*p)

107  
ªsu…
;

108 
	}
}

110 
	#AO_HAVE_öt_„tch_™d_add_fuŒ


	)

113 
AO_INLINE
 

114 
	$AO_‹_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

116 
__asm__
 
	`__vﬁ©ûe__
 ("lock; orq %1, %0" :

117 "=m" (*
p
Ë: "r" (
ö¸
), "m" (*p) : "memory");

118 
	}
}

120 
	#AO_HAVE_‹_fuŒ


	)

122 
AO_INLINE
 
AO_TS_VAL_t


123 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

125 
ﬁdvÆ
;

127 
__asm__
 
	`__vﬁ©ûe__
("xchgb %0, %1"

128 : "=q"(
ﬁdvÆ
), "=m"(*
addr
)

129 : "0"(0xff), "m"(*
addr
) : "memory");

130  (
AO_TS_VAL_t
)
ﬁdvÆ
;

131 
	}
}

133 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

136 
AO_INLINE
 

137 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
,

138 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

140 
ªsu…
;

141 
__asm__
 
	`__vﬁ©ûe__
("lock; cmpxchgq %3, %0; setz %1"

142 : "=m"(*
addr
), "=q"(
ªsu…
)

143 : "m"(*
addr
), "r" (
√w_vÆ
), "a"(
ﬁd
) : "memory");

144  (Ë
ªsu…
;

145 
	}
}

147 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

149 #ifde‡
AO_CMPXCHG16B_AVAILABLE


158 
AO_INLINE
 

159 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

160 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

161 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

163 
ªsu…
;

164 
__asm__
 
	`__vﬁ©ûe__
("lock; cmpxchg16b %0; setz %1"

165 : "=m"(*
addr
), "=q"(
ªsu…
)

166 : "m"(*
addr
),

167 "d" (
ﬁd_vÆ1
),

168 "a" (
ﬁd_vÆ2
),

169 "c" (
√w_vÆ1
),

170 "b" (
√w_vÆ2
) : "memory");

171  (Ë
ªsu…
;

172 
	}
}

173 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

179 #ifde‡
AO_WEAK_DOUBLE_CAS_EMULATION


180 
AO_com∑ª_doubÀ_™d_sw≠_doubÀ_emuœti⁄
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

181 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

182 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
);

184 
AO_INLINE
 

185 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

186 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

187 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

189  
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_emuœti⁄
(
addr
,

190 
ﬁd_vÆ1
, 
ﬁd_vÆ2
,

191 
√w_vÆ1
, 
√w_vÆ2
);

192 
	}
}

193 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/generic_pthread.h

30 
	~<±hªad.h
>

32 
	~"ã°_™d_£t_t_is_ao_t.h
"

38 
±hªad_muãx_t
 
AO_±_lock
;

40 
AO_INLINE
 

41 
	$AO_n›_fuŒ
()

43 
	`±hªad_muãx_lock
(&
AO_±_lock
);

44 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

45 
	}
}

47 
	#AO_HAVE_n›_fuŒ


	)

49 
AO_INLINE
 
AO_t


50 
	$AO_lﬂd_fuŒ
(vﬁ©ûê
AO_t
 *
addr
)

52 
AO_t
 
ªsu…
;

53 
	`±hªad_muãx_lock
(&
AO_±_lock
);

54 
ªsu…
 = *
addr
;

55 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

56  
ªsu…
;

57 
	}
}

59 
	#AO_HAVE_lﬂd_fuŒ


	)

61 
AO_INLINE
 

62 
	$AO_°‹e_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆ
)

64 
	`±hªad_muãx_lock
(&
AO_±_lock
);

65 *
addr
 = 
vÆ
;

66 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

67 
	}
}

69 
	#AO_HAVE_°‹e_fuŒ


	)

71 
AO_INLINE
 

72 
	$AO_ch¨_lﬂd_fuŒ
(vﬁ©ûê*
addr
)

74 
ªsu…
;

75 
	`±hªad_muãx_lock
(&
AO_±_lock
);

76 
ªsu…
 = *
addr
;

77 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

78  
ªsu…
;

79 
	}
}

81 
	#AO_HAVE_ch¨_lﬂd_fuŒ


	)

83 
AO_INLINE
 

84 
	$AO_ch¨_°‹e_fuŒ
(vﬁ©ûê*
addr
, 
vÆ
)

86 
	`±hªad_muãx_lock
(&
AO_±_lock
);

87 *
addr
 = 
vÆ
;

88 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

89 
	}
}

91 
	#AO_HAVE_ch¨_°‹e_fuŒ


	)

93 
AO_INLINE
 

94 
	$AO_sh‹t_lﬂd_fuŒ
(vﬁ©ûê*
addr
)

96 
ªsu…
;

97 
	`±hªad_muãx_lock
(&
AO_±_lock
);

98 
ªsu…
 = *
addr
;

99 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

100  
ªsu…
;

101 
	}
}

103 
	#AO_HAVE_sh‹t_lﬂd_fuŒ


	)

105 
AO_INLINE
 

106 
	$AO_sh‹t_°‹e_fuŒ
(vﬁ©ûê*
addr
, 
vÆ
)

108 
	`±hªad_muãx_lock
(&
AO_±_lock
);

109 *
addr
 = 
vÆ
;

110 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

111 
	}
}

113 
	#AO_HAVE_sh‹t_°‹e_fuŒ


	)

115 
AO_INLINE
 

116 
	$AO_öt_lﬂd_fuŒ
(vﬁ©ûê*
addr
)

118 
ªsu…
;

119 
	`±hªad_muãx_lock
(&
AO_±_lock
);

120 
ªsu…
 = *
addr
;

121 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

122  
ªsu…
;

123 
	}
}

125 
	#AO_HAVE_öt_lﬂd_fuŒ


	)

127 
AO_INLINE
 

128 
	$AO_öt_°‹e_fuŒ
(vﬁ©ûê*
addr
, 
vÆ
)

130 
	`±hªad_muãx_lock
(&
AO_±_lock
);

131 *
addr
 = 
vÆ
;

132 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

133 
	}
}

135 
	#AO_HAVE_öt_°‹e_fuŒ


	)

137 
AO_INLINE
 
AO_TS_VAL_t


138 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

140 
AO_TS_VAL_t
 
ªsu…
;

141 
	`±hªad_muãx_lock
(&
AO_±_lock
);

142 
ªsu…
 = (
AO_TS_VAL_t
)(*
addr
);

143 *
addr
 = 
AO_TS_SET
;

144 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

145 
	`as£π
(
ªsu…
 =
AO_TS_SET
 ||Ñesu… =
AO_TS_CLEAR
);

146  
ªsu…
;

147 
	}
}

149 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

151 
AO_INLINE
 
AO_t


152 
	$AO_„tch_™d_add_fuŒ
(vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

154 
AO_t
 
tmp
;

156 
	`±hªad_muãx_lock
(&
AO_±_lock
);

157 
tmp
 = *
p
;

158 *
p
 = 
tmp
 + 
ö¸
;

159 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

160  
tmp
;

161 
	}
}

163 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

165 
AO_INLINE
 

166 
	$AO_ch¨_„tch_™d_add_fuŒ
(vﬁ©ûê*
p
, 
ö¸
)

168 
tmp
;

170 
	`±hªad_muãx_lock
(&
AO_±_lock
);

171 
tmp
 = *
p
;

172 *
p
 = 
tmp
 + 
ö¸
;

173 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

174  
tmp
;

175 
	}
}

177 
	#AO_HAVE_ch¨_„tch_™d_add_fuŒ


	)

179 
AO_INLINE
 

180 
	$AO_sh‹t_„tch_™d_add_fuŒ
(vﬁ©ûê*
p
, 
ö¸
)

182 
tmp
;

184 
	`±hªad_muãx_lock
(&
AO_±_lock
);

185 
tmp
 = *
p
;

186 *
p
 = 
tmp
 + 
ö¸
;

187 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

188  
tmp
;

189 
	}
}

191 
	#AO_HAVE_sh‹t_„tch_™d_add_fuŒ


	)

193 
AO_INLINE
 

194 
	$AO_öt_„tch_™d_add_fuŒ
(vﬁ©ûê*
p
, 
ö¸
)

196 
tmp
;

198 
	`±hªad_muãx_lock
(&
AO_±_lock
);

199 
tmp
 = *
p
;

200 *
p
 = 
tmp
 + 
ö¸
;

201 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

202  
tmp
;

203 
	}
}

205 
	#AO_HAVE_öt_„tch_™d_add_fuŒ


	)

207 
AO_INLINE
 

208 
	$AO_‹_fuŒ
(vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

210 
AO_t
 
tmp
;

212 
	`±hªad_muãx_lock
(&
AO_±_lock
);

213 
tmp
 = *
p
;

214 *
p
 = (
tmp
 | 
ö¸
);

215 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

216 
	}
}

218 
	#AO_HAVE_‹_fuŒ


	)

220 
AO_INLINE
 

221 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
,

222 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

224 
	`±hªad_muãx_lock
(&
AO_±_lock
);

225 i‡(*
addr
 =
ﬁd
)

227 *
addr
 = 
√w_vÆ
;

228 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

232 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

234 
	}
}

236 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

241 
AO_t
 
	mAO_vÆ1
;

242 
AO_t
 
	mAO_vÆ2
;

243 } 
	tAO_doubÀ_t
;

245 
	#AO_HAVE_doubÀ_t


	)

247 
AO_INLINE
 

248 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

249 
AO_t
 
ﬁd1
, AO_à
ﬁd2
,

250 
AO_t
 
√w1
, AO_à
√w2
)

252 
	`±hªad_muãx_lock
(&
AO_±_lock
);

253 i‡(
addr
 -> 
AO_vÆ1
 =
ﬁd1
 &&ádd∏-> 
AO_vÆ2
 =
ﬁd2
)

255 
addr
 -> 
AO_vÆ1
 = 
√w1
;

256 
addr
 -> 
AO_vÆ2
 = 
√w2
;

257 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

261 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

263 
	}
}

265 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

267 
AO_INLINE
 

268 
	$AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

269 
AO_t
 
ﬁd1
,

270 
AO_t
 
√w1
, AO_à
√w2
)

272 
	`±hªad_muãx_lock
(&
AO_±_lock
);

273 i‡(
addr
 -> 
AO_vÆ1
 =
ﬁd1
)

275 
addr
 -> 
AO_vÆ1
 = 
√w1
;

276 
addr
 -> 
AO_vÆ2
 = 
√w2
;

277 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

281 
	`±hªad_muãx_u∆ock
(&
AO_±_lock
);

283 
	}
}

285 
	#AO_HAVE_com∑ª_™d_sw≠_doubÀ_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/hpc/hppa.h

26 
	~"../©omic_lﬂd_°‹e.h
"

36 
	~"../‹dîed.h
"

38 
	~<machöe/ölöe.h
>

43 
	sAO_∑_˛óøbÀ_loc
 {

44 
	md©a
[4];

47 #unde‡
AO_TS_INITIALIZER


48 
	#AO_TS_t
 
AO_∑_˛óøbÀ_loc


	)

49 
	#AO_TS_INITIALIZER
 {1,1,1,1}

	)

52 íum {
	mAO_PA_TS_£t
 = 0, 
	mAO_PA_TS_˛ór
 = 1} 
	tAO_PA_TS_vÆ
;

53 
	#AO_TS_VAL_t
 
AO_PA_TS_vÆ


	)

54 
	#AO_TS_CLEAR
 
AO_PA_TS_˛ór


	)

55 
	#AO_TS_SET
 
AO_PA_TS_£t


	)

62 
	#__ldcw
(
a
, 
ªt
) \

63 
	`_LDCWX
(0 , 0 , 
a
 , 
ªt
);

	)

72 
	#__PA_LDCW_ALIGNMENT
 16

	)

74 
	#__ldcw_Æign
(
a
, 
ªt
) { \

75 
ªt
 = (Ë
a
; \

76 
ªt
 +
__PA_LDCW_ALIGNMENT
 - 1; \

77 
ªt
 &~(
__PA_LDCW_ALIGNMENT
 - 1); \

78 }

	)

81 
AO_INLINE
 
AO_TS_VAL_t


82 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 * 
addr
)

84 
ªt
;

85 
a
;

86 
	`__ldcw_Æign
 (
addr
, 
a
);

87 
	`__ldcw
 (
a
, 
ªt
);

88  
ªt
;

89 
	}
}

91 
AO_INLINE
 

92 
	$AO_∑_˛ór
(vﬁ©ûê
AO_TS_t
 * 
addr
)

94 
a
;

95 
	`__ldcw_Æign
 (
addr
,
a
);

96 
	`AO_compûî_b¨rõr
();

97 *(vﬁ©ûê*)
a
 = 1;

98 
	}
}

99 
	#AO_CLEAR
(
addr
Ë
	`AO_∑_˛ór
◊ddr)

	)

101 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/hpc/ia64.h

29 
	~"../Æl_©omic_lﬂd_°‹e.h
"

31 
	~"../Æl_acquúe_ªÀa£_vﬁ©ûe.h
"

33 
	~"../ã°_™d_£t_t_is_ch¨.h
"

35 
	~<machöe/sys/ölöe.h
>

37 #ifde‡
__LP64__


38 
	#AO_T_FASIZE
 
_FASZ_D


	)

39 
	#AO_T_SIZE
 
_SZ_D


	)

41 
	#AO_T_FASIZE
 
_FASZ_W


	)

42 
	#AO_T_SIZE
 
_SZ_W


	)

45 
AO_INLINE
 

46 
	$AO_n›_fuŒ
()

48 
	`_Asm_mf
();

49 
	}
}

50 
	#AO_HAVE_n›_fuŒ


	)

52 
AO_INLINE
 
AO_t


53 
	$AO_„tch_™d_add1_acquúe
 (vﬁ©ûê
AO_t
 *
p
)

55  
	`_Asm_„tchadd
(
AO_T_FASIZE
, 
_SEM_ACQ
, 
p
, 1,

56 
_LDHINT_NONE
, 
_DOWN_MEM_FENCE
);

57 
	}
}

58 
	#AO_HAVE_„tch_™d_add1_acquúe


	)

60 
AO_INLINE
 
AO_t


61 
	$AO_„tch_™d_add1_ªÀa£
 (vﬁ©ûê
AO_t
 *
p
)

63  
	`_Asm_„tchadd
(
AO_T_FASIZE
, 
_SEM_REL
, 
p
, 1,

64 
_LDHINT_NONE
, 
_UP_MEM_FENCE
);

65 
	}
}

67 
	#AO_HAVE_„tch_™d_add1_ªÀa£


	)

69 
AO_INLINE
 
AO_t


70 
	$AO_„tch_™d_sub1_acquúe
 (vﬁ©ûê
AO_t
 *
p
)

72  
	`_Asm_„tchadd
(
AO_T_FASIZE
, 
_SEM_ACQ
, 
p
, -1,

73 
_LDHINT_NONE
, 
_DOWN_MEM_FENCE
);

74 
	}
}

76 
	#AO_HAVE_„tch_™d_sub1_acquúe


	)

78 
AO_INLINE
 
AO_t


79 
	$AO_„tch_™d_sub1_ªÀa£
 (vﬁ©ûê
AO_t
 *
p
)

81  
	`_Asm_„tchadd
(
AO_T_FASIZE
, 
_SEM_REL
, 
p
, -1,

82 
_LDHINT_NONE
, 
_UP_MEM_FENCE
);

83 
	}
}

85 
	#AO_HAVE_„tch_™d_sub1_ªÀa£


	)

87 
AO_INLINE
 

88 
	$AO_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
,

89 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

91 
AO_t
 
ﬁdvÆ
;

93 
	`_Asm_mov_to_¨
(
_AREG_CCV
, 
ﬁd
, 
_DOWN_MEM_FENCE
);

94 
ﬁdvÆ
 = 
	`_Asm_cmpxchg
(
AO_T_SIZE
, 
_SEM_ACQ
, 
addr
,

95 
√w_vÆ
, 
_LDHINT_NONE
, 
_DOWN_MEM_FENCE
);

96  (
ﬁdvÆ
 =
ﬁd
);

97 
	}
}

99 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe


	)

101 
AO_INLINE
 

102 
	$AO_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
,

103 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

105 
AO_t
 
ﬁdvÆ
;

106 
	`_Asm_mov_to_¨
(
_AREG_CCV
, 
ﬁd
, 
_UP_MEM_FENCE
);

107 
ﬁdvÆ
 = 
	`_Asm_cmpxchg
(
AO_T_SIZE
, 
_SEM_REL
, 
addr
,

108 
√w_vÆ
, 
_LDHINT_NONE
, 
_UP_MEM_FENCE
);

110  (
ﬁdvÆ
 =
ﬁd
);

111 
	}
}

113 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£


	)

115 
AO_INLINE
 

116 
	$AO_ch¨_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

117 
ﬁd
, 
√w_vÆ
)

119 
ﬁdvÆ
;

121 
	`_Asm_mov_to_¨
(
_AREG_CCV
, 
ﬁd
, 
_DOWN_MEM_FENCE
);

122 
ﬁdvÆ
 = 
	`_Asm_cmpxchg
(
_SZ_B
, 
_SEM_ACQ
, 
addr
,

123 
√w_vÆ
, 
_LDHINT_NONE
, 
_DOWN_MEM_FENCE
);

124  (
ﬁdvÆ
 =
ﬁd
);

125 
	}
}

127 
	#AO_HAVE_ch¨_com∑ª_™d_sw≠_acquúe


	)

129 
AO_INLINE
 

130 
	$AO_ch¨_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

131 
ﬁd
, 
√w_vÆ
)

133 
ﬁdvÆ
;

134 
	`_Asm_mov_to_¨
(
_AREG_CCV
, 
ﬁd
, 
_UP_MEM_FENCE
);

135 
ﬁdvÆ
 = 
	`_Asm_cmpxchg
(
_SZ_B
, 
_SEM_REL
, 
addr
,

136 
√w_vÆ
, 
_LDHINT_NONE
, 
_UP_MEM_FENCE
);

138  (
ﬁdvÆ
 =
ﬁd
);

139 
	}
}

141 
	#AO_HAVE_ch¨_com∑ª_™d_sw≠_ªÀa£


	)

143 
AO_INLINE
 

144 
	$AO_sh‹t_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

145 
ﬁd
, 
√w_vÆ
)

147 
ﬁdvÆ
;

149 
	`_Asm_mov_to_¨
(
_AREG_CCV
, 
ﬁd
, 
_DOWN_MEM_FENCE
);

150 
ﬁdvÆ
 = 
	`_Asm_cmpxchg
(
_SZ_B
, 
_SEM_ACQ
, 
addr
,

151 
√w_vÆ
, 
_LDHINT_NONE
, 
_DOWN_MEM_FENCE
);

152  (
ﬁdvÆ
 =
ﬁd
);

153 
	}
}

155 
	#AO_HAVE_sh‹t_com∑ª_™d_sw≠_acquúe


	)

157 
AO_INLINE
 

158 
	$AO_sh‹t_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

159 
ﬁd
, 
√w_vÆ
)

161 
ﬁdvÆ
;

162 
	`_Asm_mov_to_¨
(
_AREG_CCV
, 
ﬁd
, 
_UP_MEM_FENCE
);

163 
ﬁdvÆ
 = 
	`_Asm_cmpxchg
(
_SZ_B
, 
_SEM_REL
, 
addr
,

164 
√w_vÆ
, 
_LDHINT_NONE
, 
_UP_MEM_FENCE
);

166  (
ﬁdvÆ
 =
ﬁd
);

167 
	}
}

169 
	#AO_HAVE_sh‹t_com∑ª_™d_sw≠_ªÀa£


	)

171 #i‚de‡
__LP64__


172 
	~"../ao_t_is_öt.h
"

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/ibmc/powerpc.h

17 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

19 
AO_sync
();

20 #¥agm®
mc_func
 
AO_sync
 { "7c0004ac" }

22 
AO_lwsync
();

23 #¥agm®
mc_func
 
AO_lwsync
 { "7c2004ac" }

25 
	#AO_n›_wrôe
(Ë
	`AO_lwsync
()

	)

26 
	#AO_HAVE_n›_wrôe


	)

28 
	#AO_n›_ªad
(Ë
	`AO_lwsync
()

	)

29 
	#AO_HAVE_n›_ªad


	)

33 
AO_INLINE
 
AO_t


34 
	$AO_lﬂd_acquúe
(vﬁ©ûê
AO_t
 *
addr
)

36 
AO_t
 
ªsu…
 = *
addr
;

37 
	`AO_lwsync
();

38  
ªsu…
;

39 
	}
}

41 
	#AO_HAVE_lﬂd_acquúe


	)

43 
AO_INLINE
 

44 
	$AO_°‹e_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆue
)

46 
	`AO_lwsync
();

47 *
addr
 = 
vÆue
;

48 
	}
}

50 
	#AO_HAVE_lﬂd_acquúe


	)

55 
AO_INLINE
 
AO_TS_VAL_t


56 
	$AO_ã°_™d_£t
(vﬁ©ûê
AO_TS_t
 *
addr
) {

57 #îr‹ 
Im∂emít
 
me


58 
	}
}

60 
	#AO_have_ã°_™d_£t


	)

62 
AO_INLINE
 
AO_TS_VAL_t


63 
	$AO_ã°_™d_£t_acquúe
(vﬁ©ûê
AO_TS_t
 *
addr
) {

64 
AO_TS_VAL_t
 
ªsu…
 = 
	`AO_ã°_™d_£t
(
addr
);

65 
	`AO_lwsync
();

66  
ªsu…
;

67 
	}
}

69 
	#AO_HAVE_ã°_™d_£t_acquúe


	)

71 
AO_INLINE
 
AO_TS_VAL_t


72 
	$AO_ã°_™d_£t_ªÀa£
(vﬁ©ûê
AO_TS_t
 *
addr
) {

73 
	`AO_lwsync
();

74  
	`AO_ã°_™d_£t
(
addr
);

75 
	}
}

77 
	#AO_HAVE_ã°_™d_£t_ªÀa£


	)

79 
AO_INLINE
 
AO_TS_VAL_t


80 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
) {

81 
AO_TS_VAL_t
 
ªsu…
;

82 
	`AO_lwsync
();

83 
ªsu…
 = 
	`AO_ã°_™d_£t
(
addr
);

84 
	`AO_lwsync
();

85  
ªsu…
;

86 
	}
}

88 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

90 
AO_INLINE
 
AO_t


91 
	$AO_com∑ª_™d_sw≠
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

92 #îr‹ 
Im∂emít
 
me


93 
	}
}

95 
	#AO_HAVE_com∑ª_™d_sw≠


	)

97 
AO_INLINE
 
AO_t


98 
	$AO_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

99 
AO_t
 
ªsu…
 = 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

100 
	`AO_lwsync
();

101  
ªsu…
;

102 
	}
}

104 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe


	)

106 
AO_INLINE
 
AO_t


107 
	$AO_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

108 
	`AO_lwsync
();

109  
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

110 
	}
}

112 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£


	)

114 
AO_INLINE
 
AO_t


115 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
, AO_à
ﬁd
, AO_à
√w_vÆ
) {

116 
AO_t
 
ªsu…
;

117 
	`AO_lwsync
();

118 
ªsu…
 = 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁd
, 
√w_vÆ
);

119 
	`AO_lwsync
();

120  
ªsu…
;

121 
	}
}

123 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/icc/ia64.h

29 
	~"../Æl_©omic_lﬂd_°‹e.h
"

31 
	~"../ã°_™d_£t_t_is_ch¨.h
"

33 
	~<ü64öåö.h
>

39 
	#AO_INTEL_PTR_t
 *

	)

41 
AO_INLINE
 
AO_t


42 
	$AO_lﬂd_acquúe
(vﬁ©ûê
AO_t
 *
p
)

44  (
AO_t
)(
	`__ld8_acq
((
AO_INTEL_PTR_t
)
p
));

45 
	}
}

46 
	#AO_HAVE_lﬂd_acquúe


	)

48 
AO_INLINE
 

49 
	$AO_°‹e_ªÀa£
(vﬁ©ûê
AO_t
 *
p
, AO_à
vÆ
)

51 
	`__°8_ªl
((
AO_INTEL_PTR_t
)
p
, (
__öt64
)
vÆ
);

52 
	}
}

53 
	#AO_HAVE_°‹e_ªÀa£


	)

55 
AO_INLINE
 

56 
	$AO_ch¨_lﬂd_acquúe
(vﬁ©ûê*
p
)

59  (
	`__ld1_acq
((
AO_INTEL_PTR_t
)
p
));

60 
	}
}

61 
	#AO_HAVE_ch¨_lﬂd_acquúe


	)

63 
AO_INLINE
 

64 
	$AO_ch¨_°‹e_ªÀa£
(vﬁ©ûê*
p
, 
vÆ
)

66 
	`__°1_ªl
((
AO_INTEL_PTR_t
)
p
, 
vÆ
);

67 
	}
}

68 
	#AO_HAVE_ch¨_°‹e_ªÀa£


	)

70 
AO_INLINE
 

71 
	$AO_sh‹t_lﬂd_acquúe
(vﬁ©ûê*
p
)

74  (
	`__ld2_acq
((
AO_INTEL_PTR_t
)
p
));

75 
	}
}

76 
	#AO_HAVE_sh‹t_lﬂd_acquúe


	)

78 
AO_INLINE
 

79 
	$AO_sh‹t_°‹e_ªÀa£
(vﬁ©ûê*
p
, 
vÆ
)

81 
	`__°2_ªl
((
AO_INTEL_PTR_t
)
p
, 
vÆ
);

82 
	}
}

83 
	#AO_HAVE_sh‹t_°‹e_ªÀa£


	)

85 
AO_INLINE
 

86 
	$AO_öt_lﬂd_acquúe
(vﬁ©ûê*
p
)

89  (
	`__ld4_acq
((
AO_INTEL_PTR_t
)
p
));

90 
	}
}

91 
	#AO_HAVE_öt_lﬂd_acquúe


	)

93 
AO_INLINE
 

94 
	$AO_öt_°‹e_ªÀa£
(vﬁ©ûê*
p
, 
vÆ
)

96 
	`__°4_ªl
((
AO_INTEL_PTR_t
)
p
, 
vÆ
);

97 
	}
}

98 
	#AO_HAVE_öt_°‹e_ªÀa£


	)

100 
AO_INLINE
 

101 
	$AO_n›_fuŒ
()

103 
	`__mf
();

104 
	}
}

105 
	#AO_HAVE_n›_fuŒ


	)

107 
AO_INLINE
 
AO_t


108 
	$AO_„tch_™d_add1_acquúe
 (vﬁ©ûê
AO_t
 *
p
)

110  
	`__„tchadd8_acq
((
__öt64
 *)
p
, 1);

111 
	}
}

112 
	#AO_HAVE_„tch_™d_add1_acquúe


	)

114 
AO_INLINE
 
AO_t


115 
	$AO_„tch_™d_add1_ªÀa£
 (vﬁ©ûê
AO_t
 *
p
)

117  
	`__„tchadd8_ªl
((
__öt64
 *)
p
, 1);

118 
	}
}

120 
	#AO_HAVE_„tch_™d_add1_ªÀa£


	)

122 
AO_INLINE
 
AO_t


123 
	$AO_„tch_™d_sub1_acquúe
 (vﬁ©ûê
AO_t
 *
p
)

125  
	`__„tchadd8_acq
((
__öt64
 *)
p
, -1);

126 
	}
}

128 
	#AO_HAVE_„tch_™d_sub1_acquúe


	)

130 
AO_INLINE
 
AO_t


131 
	$AO_„tch_™d_sub1_ªÀa£
 (vﬁ©ûê
AO_t
 *
p
)

133  
	`__„tchadd8_ªl
((
__öt64
 *)
p
, -1);

134 
	}
}

136 
	#AO_HAVE_„tch_™d_sub1_ªÀa£


	)

138 
AO_INLINE
 

139 
	$AO_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê
AO_t
 *
addr
,

140 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

142 
AO_t
 
ﬁdvÆ
;

143 
ﬁdvÆ
 = 
	`_I¡îlockedCom∑ªExch™ge64_acq
(
addr
, 
√w_vÆ
, 
ﬁd
);

144  (
ﬁdvÆ
 =
ﬁd
);

145 
	}
}

147 
	#AO_HAVE_com∑ª_™d_sw≠_acquúe


	)

149 
AO_INLINE
 

150 
	$AO_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê
AO_t
 *
addr
,

151 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

153 
AO_t
 
ﬁdvÆ
;

154 
ﬁdvÆ
 = 
	`_I¡îlockedCom∑ªExch™ge64_ªl
(
addr
, 
√w_vÆ
, 
ﬁd
);

155  (
ﬁdvÆ
 =
ﬁd
);

156 
	}
}

158 
	#AO_HAVE_com∑ª_™d_sw≠_ªÀa£


	)

160 
AO_INLINE
 

161 
	$AO_ch¨_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

162 
ﬁd
, 
√w_vÆ
)

164 
ﬁdvÆ
;

165 
ﬁdvÆ
 = 
	`_I¡îlockedCom∑ªExch™ge8_acq
(
addr
, 
√w_vÆ
, 
ﬁd
);

166  (
ﬁdvÆ
 =
ﬁd
);

167 
	}
}

169 
	#AO_HAVE_ch¨_com∑ª_™d_sw≠_acquúe


	)

171 
AO_INLINE
 

172 
	$AO_ch¨_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

173 
ﬁd
, 
√w_vÆ
)

175 
ﬁdvÆ
;

176 
ﬁdvÆ
 = 
	`_I¡îlockedCom∑ªExch™ge8_ªl
(
addr
, 
√w_vÆ
, 
ﬁd
);

177  (
ﬁdvÆ
 =
ﬁd
);

178 
	}
}

180 
	#AO_HAVE_ch¨_com∑ª_™d_sw≠_ªÀa£


	)

182 
AO_INLINE
 

183 
	$AO_sh‹t_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

184 
ﬁd
, 
√w_vÆ
)

186 
ﬁdvÆ
;

187 
ﬁdvÆ
 = 
	`_I¡îlockedCom∑ªExch™ge16_acq
(
addr
, 
√w_vÆ
, 
ﬁd
);

188  (
ﬁdvÆ
 =
ﬁd
);

189 
	}
}

191 
	#AO_HAVE_sh‹t_com∑ª_™d_sw≠_acquúe


	)

193 
AO_INLINE
 

194 
	$AO_sh‹t_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

195 
ﬁd
, 
√w_vÆ
)

197 
ﬁdvÆ
;

198 
ﬁdvÆ
 = 
	`_I¡îlockedCom∑ªExch™ge16_ªl
(
addr
, 
√w_vÆ
, 
ﬁd
);

199  (
ﬁdvÆ
 =
ﬁd
);

200 
	}
}

202 
	#AO_HAVE_sh‹t_com∑ª_™d_sw≠_ªÀa£


	)

204 
AO_INLINE
 

205 
	$AO_öt_com∑ª_™d_sw≠_acquúe
(vﬁ©ûê*
addr
,

206 
ﬁd
, 
√w_vÆ
)

208 
ﬁdvÆ
;

209 
ﬁdvÆ
 = 
	`_I¡îlockedCom∑ªExch™ge_acq
(
addr
, 
√w_vÆ
, 
ﬁd
);

210  (
ﬁdvÆ
 =
ﬁd
);

211 
	}
}

213 
	#AO_HAVE_öt_com∑ª_™d_sw≠_acquúe


	)

215 
AO_INLINE
 

216 
	$AO_öt_com∑ª_™d_sw≠_ªÀa£
(vﬁ©ûê*
addr
,

217 
ﬁd
, 
√w_vÆ
)

219 
ﬁdvÆ
;

220 
ﬁdvÆ
 = 
	`_I¡îlockedCom∑ªExch™ge_ªl
(
addr
, 
√w_vÆ
, 
ﬁd
);

221  (
ﬁdvÆ
 =
ﬁd
);

222 
	}
}

224 
	#AO_HAVE_öt_com∑ª_™d_sw≠_ªÀa£


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/int_acquire_release_volatile.h

28 #i‡!
deföed
(
AO_GCC_BARRIER
)

29 #i‡
deföed
(
__GNUC__
)

30 
	#AO_GCC_BARRIER
(Ë
	`AO_compûî_b¨rõr
()

	)

32 
	#AO_GCC_BARRIER
()

	)

36 
AO_INLINE
 

37 
	$AO_öt_lﬂd_acquúe
(vﬁ©ûê*
p
)

39 
ªsu…
 = *
p
;

41 
	`AO_GCC_BARRIER
();

42  
ªsu…
;

43 
	}
}

44 
	#AO_HAVE_öt_lﬂd_acquúe


	)

46 
AO_INLINE
 

47 
	$AO_öt_°‹e_ªÀa£
(vﬁ©ûê*
p
, 
vÆ
)

49 
	`AO_GCC_BARRIER
();

51 *
p
 = 
vÆ
;

52 
	}
}

53 
	#AO_HAVE_öt_°‹e_ªÀa£


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/int_aligned_atomic_load_store.h

28 
AO_INLINE
 

29 
	$AO_öt_lﬂd
(vﬁ©ûê*
addr
)

31 
	`as£π
(((
size_t
)
addr
 & (() - 1)) == 0);

34  (*(*)
addr
);

35 
	}
}

37 
	#AO_HAVE_öt_lﬂd


	)

39 
AO_INLINE
 

40 
	$AO_öt_°‹e
(vﬁ©ûê*
addr
, 
√w_vÆ
)

42 
	`as£π
(((
size_t
)
addr
 & (() - 1)) == 0);

43 (*(*)
addr
Ë
√w_vÆ
;

44 
	}
}

46 
	#AO_HAVE_öt_°‹e


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/int_atomic_load_store.h

28 
AO_INLINE
 

29 
	$AO_öt_lﬂd
(vﬁ©ûê*
addr
)

33  (*(*)
addr
);

34 
	}
}

36 
	#AO_HAVE_öt_lﬂd


	)

38 
AO_INLINE
 

39 
	$AO_öt_°‹e
(vﬁ©ûê*
addr
, 
√w_vÆ
)

41 (*(*)
addr
Ë
√w_vÆ
;

42 
	}
}

44 
	#AO_HAVE_öt_°‹e


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/msftc/x86.h

28 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

37 
	~"../‹dîed_ex˚±_wr.h
"

39 
	~"../ã°_™d_£t_t_is_ch¨.h
"

41 
	~<wödows.h
>

45 #i‡
_MSC_VER
 < 1310

47 
	#_I¡îlockedIn¸emít
 
I¡îlockedIn¸emít


	)

48 
	#_I¡îlockedDe¸emít
 
I¡îlockedDe¸emít


	)

49 
	#_I¡îlockedExch™ge
 
I¡îlockedExch™ge


	)

50 
	#_I¡îlockedExch™geAdd
 
I¡îlockedExch™geAdd


	)

51 
	#_I¡îlockedCom∑ªExch™ge
 
I¡îlockedCom∑ªExch™ge


	)

55 #i‡
_MSC_VER
 >= 1400

56 
	~<öåö.h
>

58 #¥agm®
öåösic
 (
_RódWrôeB¨rõr
)

61 #ifde‡
__˝lu•lus


65 
LONG
 
__cde˛
 
_I¡îlockedIn¸emít
(LONG vﬁ©ûê*
Addíd
);

66 
LONG
 
__cde˛
 
_I¡îlockedDe¸emít
(LONG vﬁ©ûê*
Addíd
);

67 
LONG
 
__cde˛
 
_I¡îlockedExch™geAdd
(LONG vﬁ©ûe* 
T¨gë
, LONG 
Addíd
);

68 
LONG
 
__cde˛
 
_I¡îlockedExch™ge
(LONG vﬁ©ûe* 
T¨gë
, LONG 
VÆue
);

69 
LONG
 
__cde˛
 
_I¡îlockedCom∑ªExch™ge
(LONG vﬁ©ûe* 
De°
,

70 
LONG
 
Exch™ge
, LONG 
Comp
);

72 #ifde‡
__˝lu•lus


77 #¥agm®
öåösic
 (
_I¡îlockedIn¸emít
)

78 #¥agm®
öåösic
 (
_I¡îlockedDe¸emít
)

79 #¥agm®
öåösic
 (
_I¡îlockedExch™ge
)

80 #¥agm®
öåösic
 (
_I¡îlockedExch™geAdd
)

81 #¥agm®
öåösic
 (
_I¡îlockedCom∑ªExch™ge
)

92 #i‡
deföed
(
AO_USE_PENTIUM4_INSTRS
)

94 
AO_INLINE
 

95 
	$AO_n›_fuŒ
()

97 
__asm
 { 
m„n˚
 }

98 
	}
}

100 
	#AO_HAVE_n›_fuŒ


	)

110 
AO_INLINE
 
AO_t


111 
	$AO_„tch_™d_add_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

113  
	`_I¡îlockedExch™geAdd
((
LONG
 vﬁ©ûe*)
p
, (LONG)
ö¸
);

114 
	}
}

116 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

118 
AO_INLINE
 
AO_t


119 
	$AO_„tch_™d_add1_fuŒ
 (vﬁ©ûê
AO_t
 *
p
)

121  
	`_I¡îlockedIn¸emít
((
LONG
 vﬁ©ûê*)
p
) - 1;

122 
	}
}

124 
	#AO_HAVE_„tch_™d_add1_fuŒ


	)

126 
AO_INLINE
 
AO_t


127 
	$AO_„tch_™d_sub1_fuŒ
 (vﬁ©ûê
AO_t
 *
p
)

129  
	`_I¡îlockedDe¸emít
((
LONG
 vﬁ©ûê*)
p
) + 1;

130 
	}
}

132 
	#AO_HAVE_„tch_™d_sub1_fuŒ


	)

134 
AO_INLINE
 
AO_TS_VAL_t


135 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

137 
__asm


139 
mov
 
óx
,
AO_TS_SET
 ;

140 
mov
 
ebx
,
addr
 ;

141 
xchg
 
byã
 
±r
 [
ebx
],
Æ
 ;

143 
	}
}

145 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

147 #ifde‡
AO_ASSUME_WINDOWS98


149 
AO_INLINE
 

150 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
,

151 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

153  
	`_I¡îlockedCom∑ªExch™ge
((
LONG
 vﬁ©ûê*)
addr
,

154 (
LONG
)
√w_vÆ
, (LONG)
ﬁd
)

155 =(
LONG
)
ﬁd
;

156 
	}
}

158 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

161 #ifde‡
_WIN64


162 #îr‹ 
wr⁄g
 
¨chôe˘uª


165 #ifde‡
ASSUME_VISTA


169 
	~"../°™d¨d_ao_doubÀ_t.h
"

170 #¥agm®
öåösic
 (
_I¡îlockedCom∑ªExch™ge64
)

172 
AO_INLINE
 

173 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

174 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

175 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

177 
__öt64
 
ﬁdv
 = (__öt64)
ﬁd_vÆ2
 | ((__öt64)
ﬁd_vÆ1
 << 32);

178 
__öt64
 
√wv
 = (__öt64)
√w_vÆ2
 | ((__öt64)
√w_vÆ1
 << 32);

179  
	`_I¡îlockedCom∑ªExch™ge64
((
__öt64
 vﬁ©ûê*)
addr
,

180 
√wv
, 
ﬁdv
) == oldv;

181 
	}
}

182 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

184 #ifde‡
__˝lu•lus


185 
AO_INLINE
 

186 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

187 
AO_doubÀ_t
 
ﬁd_vÆ
,

188 
AO_doubÀ_t
 
√w_vÆ
)

190  
	`_I¡îlockedCom∑ªExch™ge64
((
__öt64
 vﬁ©ûê*)
addr
,

191 
√w_vÆ
.
AO_whﬁe
, 
ﬁd_vÆ
.AO_whole) == old_val.AO_whole;

192 
	}
}

193 
	#AO_HAVE_doubÀ_com∑ª_™d_sw≠_fuŒ


	)

197 
	~"../ao_t_is_öt.h
"

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/msftc/x86_64.h

26 
	~"../Æl_Æig√d_©omic_lﬂd_°‹e.h
"

35 
	~"../‹dîed_ex˚±_wr.h
"

38 
	gFIXME
: 
Nìd
 
to
 
ªim∂emít
 
ã°™d£t


40 
	~"../ã°_™d_£t_t_is_ch¨.h
"

44 
	~"../ã°_™d_£t_t_is_ao_t.h
"

48 
	~<wödows.h
>

53 
	~<öåö.h
>

55 #¥agm®
öåösic
 (
_RódWrôeB¨rõr
)

57 #ifde‡
__˝lu•lus


61 
LONGLONG
 
__cde˛
 
_I¡îlockedIn¸emít64
(LONGLONG vﬁ©ûê*
Addíd
);

62 
LONGLONG
 
__cde˛
 
_I¡îlockedDe¸emít64
(LONGLONG vﬁ©ûê*
Addíd
);

63 
LONGLONG
 
__cde˛
 
_I¡îlockedExch™geAdd64
(LONGLONG vﬁ©ûe* 
T¨gë
,

64 
LONGLONG
 
Addíd
);

65 
LONGLONG
 
__cde˛
 
_I¡îlockedExch™ge64
(LONGLONG vﬁ©ûe* 
T¨gë
,

66 
LONGLONG
 
VÆue
);

67 
LONGLONG
 
__cde˛
 
_I¡îlockedCom∑ªExch™ge64
(LONGLONG vﬁ©ûe* 
De°
,

68 
LONGLONG
 
Exch™ge
,

69 
LONGLONG
 
Comp
);

71 #ifde‡
__˝lu•lus


75 #¥agm®
öåösic
 (
_I¡îlockedIn¸emít64
)

76 #¥agm®
öåösic
 (
_I¡îlockedDe¸emít64
)

77 #¥agm®
öåösic
 (
_I¡îlockedExch™ge64
)

78 #¥agm®
öåösic
 (
_I¡îlockedExch™geAdd64
)

79 #¥agm®
öåösic
 (
_I¡îlockedCom∑ªExch™ge64
)

88 #i‡
deföed
(
AO_USE_PENTIUM4_INSTRS
)

90 
AO_INLINE
 

91 
	$AO_n›_fuŒ
()

93 
__asm
 { 
m„n˚
 }

94 
	}
}

96 
	#AO_HAVE_n›_fuŒ


	)

106 
AO_INLINE
 
AO_t


107 
	$AO_„tch_™d_add_fuŒ
 (vﬁ©ûê
AO_t
 *
p
, AO_à
ö¸
)

109  
	`_I¡îlockedExch™geAdd64
((
LONGLONG
 vﬁ©ûê*)
p
, (LONGLONG)
ö¸
);

110 
	}
}

112 
	#AO_HAVE_„tch_™d_add_fuŒ


	)

114 
AO_INLINE
 
AO_t


115 
	$AO_„tch_™d_add1_fuŒ
 (vﬁ©ûê
AO_t
 *
p
)

117  
	`_I¡îlockedIn¸emít64
((
LONGLONG
 vﬁ©ûê*)
p
) - 1;

118 
	}
}

120 
	#AO_HAVE_„tch_™d_add1_fuŒ


	)

122 
AO_INLINE
 
AO_t


123 
	$AO_„tch_™d_sub1_fuŒ
 (vﬁ©ûê
AO_t
 *
p
)

125  
	`_I¡îlockedDe¸emít64
((
LONGLONG
 vﬁ©ûê*)
p
) + 1;

126 
	}
}

128 
	#AO_HAVE_„tch_™d_sub1_fuŒ


	)

130 
AO_INLINE
 

131 
	$AO_com∑ª_™d_sw≠_fuŒ
(vﬁ©ûê
AO_t
 *
addr
,

132 
AO_t
 
ﬁd
, AO_à
√w_vÆ
)

134  
	`_I¡îlockedCom∑ªExch™ge64
((
LONGLONG
 vﬁ©ûê*)
addr
,

135 (
LONGLONG
)
√w_vÆ
, (LONGLONG)
ﬁd
)

136 =(
LONGLONG
)
ﬁd
;

137 
	}
}

139 
	#AO_HAVE_com∑ª_™d_sw≠_fuŒ


	)

142 
FIXME
: (
__asm
 
nŸ
 
suµ‹ãd
)

143 
AO_INLINE
 
AO_TS_VAL_t


144 
	$AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
)

146 
__asm


148 
mov
 
óx
,
AO_TS_SET
 ;

149 
mov
 
ebx
,
addr
 ;

150 
xchg
 
byã
 
±r
 [
ebx
],
Æ
 ;

152 
	}
}

154 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

156 
FIXME
: (
__asm
 
nŸ
 
suµ‹ãd
)

157 
NEC
 
LE
-
IT
: 
D⁄
't haveá working Win64Énvironment hereátÅhe moment.

158 
AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
 
√eds
 
im∂emíèti⁄
 
Wö64


159 
But
 
thîe
 
is
 
no
 
_I¡îlockedCom∑ªExch™ge128
 
ö
 
the
 
WöAPI
, 
so
 
we


160 
√ed
 
basiˇŒy
 
wh©s
 
giví
 
bñow
.

161 
Also
 
£e
 
gcc
/
x86_64
.
h
 
∑πül
 
ﬁd
 
›ãr⁄
 
w‹k¨ound
:

163 #i‚de‡
AO_CASDOUBLE_MISSING


165 
AO_INLINE
 

166 
	$AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(vﬁ©ûê
AO_doubÀ_t
 *
addr
,

167 
AO_t
 
ﬁd_vÆ1
, AO_à
ﬁd_vÆ2
,

168 
AO_t
 
√w_vÆ1
, AO_à
√w_vÆ2
)

170 
ªsu…
;

171 
__asm


173 
mov
 
rdx
,
QWORD
 
PTR
 [
ﬁd_vÆ
]

174 
mov
 
øx
,
QWORD
 
PTR
 [
ﬁd_vÆ
 + 8]

175 
mov
 
rcx
,
QWORD
 
PTR
 [
√w_vÆ
]

176 
mov
 
rbx
,
QWORD
 
PTR
 [
√w_vÆ
 + 8]

177 
lock
 
cmpxchg16b
 [
addr
]

178 
£tz
 
ªsu…
;

180  
ªsu…
;

181 
	}
}

183 
	#AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/ordered.h

28 
	~"‹dîed_ex˚±_wr.h
"

30 
AO_INLINE
 

31 
	$AO_n›_fuŒ
()

33 
	`AO_compûî_b¨rõr
();

34 
	}
}

36 
	#AO_HAVE_n›_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/ordered_except_wr.h

30 
	~"ªad_‹dîed.h
"

32 
AO_INLINE
 

33 
	$AO_n›_wrôe
()

35 
	`AO_compûî_b¨rõr
();

38 
	}
}

40 
	#AO_HAVE_NOP_WRITE


	)

42 #i‡
deföed
(
AO_HAVE_°‹e
)

44 
AO_INLINE
 

45 
	$AO_°‹e_wrôe
(vﬁ©ûê
AO_t
 *
addr
, AO_à
vÆ
)

47 
	`AO_compûî_b¨rõr
();

48 
	`AO_°‹e
(
addr
, 
vÆ
);

49 
	}
}

50 
	#AO_HAVE_°‹e_wrôe


	)

52 
	#AO_°‹e_ªÀa£
(
addr
, 
vÆ
Ë
	`AO_°‹e_wrôe
◊ddr, vÆ)

	)

53 
	#AO_HAVE_°‹e_ªÀa£


	)

57 #i‡
deföed
(
AO_HAVE_ch¨_°‹e
)

59 
AO_INLINE
 

60 
	$AO_ch¨_°‹e_wrôe
(vﬁ©ûê*
addr
, 
vÆ
)

62 
	`AO_compûî_b¨rõr
();

63 
	`AO_ch¨_°‹e
(
addr
, 
vÆ
);

64 
	}
}

65 
	#AO_HAVE_ch¨_°‹e_wrôe


	)

67 
	#AO_ch¨_°‹e_ªÀa£
(
addr
, 
vÆ
Ë
	`AO_ch¨_°‹e_wrôe
◊ddr, vÆ)

	)

68 
	#AO_HAVE_ch¨_°‹e_ªÀa£


	)

72 #i‡
deföed
(
AO_HAVE_sh‹t_°‹e
)

74 
AO_INLINE
 

75 
	$AO_sh‹t_°‹e_wrôe
(vﬁ©ûê*
addr
, 
vÆ
)

77 
	`AO_compûî_b¨rõr
();

78 
	`AO_sh‹t_°‹e
(
addr
, 
vÆ
);

79 
	}
}

80 
	#AO_HAVE_sh‹t_°‹e_wrôe


	)

82 
	#AO_sh‹t_°‹e_ªÀa£
(
addr
, 
vÆ
Ë
	`AO_sh‹t_°‹e_wrôe
◊ddr, vÆ)

	)

83 
	#AO_HAVE_sh‹t_°‹e_ªÀa£


	)

87 #i‡
deföed
(
AO_HAVE_öt_°‹e
)

89 
AO_INLINE
 

90 
	$AO_öt_°‹e_wrôe
(vﬁ©ûê*
addr
, 
vÆ
)

92 
	`AO_compûî_b¨rõr
();

93 
	`AO_öt_°‹e
(
addr
, 
vÆ
);

94 
	}
}

95 
	#AO_HAVE_öt_°‹e_wrôe


	)

97 
	#AO_öt_°‹e_ªÀa£
(
addr
, 
vÆ
Ë
	`AO_öt_°‹e_wrôe
◊ddr, vÆ)

	)

98 
	#AO_HAVE_öt_°‹e_ªÀa£


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/read_ordered.h

30 
AO_INLINE
 

31 
	$AO_n›_ªad
()

33 
	`AO_compûî_b¨rõr
();

34 
	}
}

36 
	#AO_HAVE_NOP_READ


	)

38 #ifde‡
AO_HAVE_lﬂd


40 
AO_INLINE
 
AO_t


41 
	$AO_lﬂd_ªad
(vﬁ©ûê
AO_t
 *
addr
)

43 
AO_t
 
ªsu…
 = 
	`AO_lﬂd
(
addr
);

44 
	`AO_compûî_b¨rõr
();

45  
ªsu…
;

46 
	}
}

47 
	#AO_HAVE_lﬂd_ªad


	)

49 
	#AO_lﬂd_acquúe
(
addr
Ë
	`AO_lﬂd_ªad
◊ddr)

	)

50 
	#AO_HAVE_lﬂd_acquúe


	)

54 #ifde‡
AO_HAVE_ch¨_lﬂd


56 
AO_INLINE
 
AO_t


57 
	$AO_ch¨_lﬂd_ªad
(vﬁ©ûê*
addr
)

59 
AO_t
 
ªsu…
 = 
	`AO_ch¨_lﬂd
(
addr
);

60 
	`AO_compûî_b¨rõr
();

61  
ªsu…
;

62 
	}
}

63 
	#AO_HAVE_ch¨_lﬂd_ªad


	)

65 
	#AO_ch¨_lﬂd_acquúe
(
addr
Ë
	`AO_ch¨_lﬂd_ªad
◊ddr)

	)

66 
	#AO_HAVE_ch¨_lﬂd_acquúe


	)

70 #ifde‡
AO_HAVE_sh‹t_lﬂd


72 
AO_INLINE
 
AO_t


73 
	$AO_sh‹t_lﬂd_ªad
(vﬁ©ûê*
addr
)

75 
AO_t
 
ªsu…
 = 
	`AO_sh‹t_lﬂd
(
addr
);

76 
	`AO_compûî_b¨rõr
();

77  
ªsu…
;

78 
	}
}

79 
	#AO_HAVE_sh‹t_lﬂd_ªad


	)

81 
	#AO_sh‹t_lﬂd_acquúe
(
addr
Ë
	`AO_sh‹t_lﬂd_ªad
◊ddr)

	)

82 
	#AO_HAVE_sh‹t_lﬂd_acquúe


	)

86 #ifde‡
AO_HAVE_öt_lﬂd


88 
AO_INLINE
 
AO_t


89 
	$AO_öt_lﬂd_ªad
(vﬁ©ûê*
addr
)

91 
AO_t
 
ªsu…
 = 
	`AO_öt_lﬂd
(
addr
);

92 
	`AO_compûî_b¨rõr
();

93  
ªsu…
;

94 
	}
}

95 
	#AO_HAVE_öt_lﬂd_ªad


	)

97 
	#AO_öt_lﬂd_acquúe
(
addr
Ë
	`AO_öt_lﬂd_ªad
◊ddr)

	)

98 
	#AO_HAVE_öt_lﬂd_acquúe


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/short_acquire_release_volatile.h

28 #i‡!
deföed
(
AO_GCC_BARRIER
)

29 #i‡
deföed
(
__GNUC__
)

30 
	#AO_GCC_BARRIER
(Ë
	`AO_compûî_b¨rõr
()

	)

32 
	#AO_GCC_BARRIER
()

	)

36 
AO_INLINE
 

37 
	$AO_sh‹t_lﬂd_acquúe
(vﬁ©ûê*
p
)

39 
ªsu…
 = *
p
;

41 
	`AO_GCC_BARRIER
();

42  
ªsu…
;

43 
	}
}

44 
	#AO_HAVE_sh‹t_lﬂd_acquúe


	)

46 
AO_INLINE
 

47 
	$AO_sh‹t_°‹e_ªÀa£
(vﬁ©ûê*
p
, 
vÆ
)

49 
	`AO_GCC_BARRIER
();

51 *
p
 = 
vÆ
;

52 
	}
}

53 
	#AO_HAVE_sh‹t_°‹e_ªÀa£


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/short_aligned_atomic_load_store.h

28 
AO_INLINE
 

29 
	$AO_sh‹t_lﬂd
(vﬁ©ûê*
addr
)

31 
	`as£π
(((
size_t
)
addr
 & (() - 1)) == 0);

34  (*(*)
addr
);

35 
	}
}

37 
	#AO_HAVE_sh‹t_lﬂd


	)

39 
AO_INLINE
 

40 
	$AO_sh‹t_°‹e
(vﬁ©ûê*
addr
, 
√w_vÆ
)

42 
	`as£π
(((
size_t
)
addr
 & (() - 1)) == 0);

43 (*(*)
addr
Ë
√w_vÆ
;

44 
	}
}

46 
	#AO_HAVE_sh‹t_°‹e


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/short_atomic_load_store.h

28 
AO_INLINE
 

29 
	$AO_sh‹t_lﬂd
(vﬁ©ûê*
addr
)

33  (*(*)
addr
);

34 
	}
}

36 
	#AO_HAVE_sh‹t_lﬂd


	)

38 
AO_INLINE
 

39 
	$AO_sh‹t_°‹e
(vﬁ©ûê*
addr
, 
√w_vÆ
)

41 (*(*)
addr
Ë
√w_vÆ
;

42 
	}
}

44 
	#AO_HAVE_sh‹t_°‹e


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/standard_ao_double_t.h

7 #i‡
deföed
(
__GNUC__
)

8 #i‡
deföed
(
__x86_64__
)

9 
	~<xmmöåö.h
>

10 
__m128
 
	tdoubÀ_±r_°‹age
;

11 
	#AO_HAVE_DOUBLE_PTR_STORAGE


	)

15 #ifde‡
_MSC_VER


16 #ifde‡
_WIN64


17 
__m128
 
	tdoubÀ_±r_°‹age
;

18 
	#AO_HAVE_DOUBLE_PTR_STORAGE


	)

19 #ñi‡
_WIN32


20 
	t__öt64
 
	tdoubÀ_±r_°‹age
;

21 
	#AO_HAVE_DOUBLE_PTR_STORAGE


	)

25 #i‚de‡
AO_HAVE_DOUBLE_PTR_STORAGE


26 
	tdoubÀ_±r_°‹age
;

30 
doubÀ_±r_°‹age
 
	mAO_whﬁe
;

31 °ru˘ {
AO_t
 
	mAO_v1
; AO_à
	mAO_v2
;} 
	mAO_∑πs
;

32 } 
	tAO_doubÀ_t
;

34 
	#AO_HAVE_doubÀ_t


	)

35 
	#AO_vÆ1
 
AO_∑πs
.
AO_v1


	)

36 
	#AO_vÆ2
 
AO_∑πs
.
AO_v2


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/sunc/sparc.h

23 
	~"../Æl_©omic_lﬂd_°‹e.h
"

26 
	~"../‹dîed_ex˚±_wr.h
"

29 
	~"../ã°_™d_£t_t_is_ch¨.h
"

31 
AO_TS_VAL_t


32 
AO_ã°_™d_£t_fuŒ
(vﬁ©ûê
AO_TS_t
 *
addr
);

35 
	#AO_HAVE_ã°_™d_£t_fuŒ


	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/test_and_set_t_is_ao_t.h

29 íum {
	mAO_TS_˛ór
 = 0, 
	mAO_TS_£t
 = 1} 
	tAO_TS_vÆ
;

30 
	#AO_TS_VAL_t
 
AO_TS_vÆ


	)

31 
	#AO_TS_CLEAR
 
AO_TS_˛ór


	)

32 
	#AO_TS_SET
 
AO_TS_£t


	)

34 
	#AO_TS_t
 
AO_t


	)

36 
	#AO_AO_TS_T
 1

	)

	@libatomic_ops-1.2/src/atomic_ops/sysdeps/test_and_set_t_is_char.h

29 
	#AO_TS_t
 

	)

30 íum {
	mAO_BYTE_TS_˛ór
 = 0, 
	mAO_BYTE_TS_£t
 = 0xff} 
	tAO_BYTE_TS_vÆ
;

31 
	#AO_TS_VAL_t
 
AO_BYTE_TS_vÆ


	)

32 
	#AO_TS_CLEAR
 
AO_BYTE_TS_˛ór


	)

33 
	#AO_TS_SET
 
AO_BYTE_TS_£t


	)

35 
	#AO_CHAR_TS_T
 1

	)

	@libatomic_ops-1.2/src/atomic_ops_malloc.c

15 #i‡
deföed
(
HAVE_CONFIG_H
)

16 
	~"c⁄fig.h
"

19 
	#AO_REQUIRE_CAS


	)

20 
	~"©omic_›s_°ack.h
"

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

23 #ifde‡
AO_TRACE_MALLOC


24 
	~<°dio.h
>

25 
	~<±hªad.h
>

42 #i‚de‡
LOG_MAX_SIZE


43 
	#LOG_MAX_SIZE
 16

	)

47 #i‚de‡
ALIGNMENT


48 
	#ALIGNMENT
 16

	)

52 
	#CHUNK_SIZE
 (1 << 
LOG_MAX_SIZE
)

	)

54 #i‚de‡
AO_INITIAL_HEAP_SIZE


55 
	#AO_INITIAL_HEAP_SIZE
 (2*(
LOG_MAX_SIZE
+1)*
CHUNK_SIZE
)

	)

58 
	gAO_öôül_hóp
[
AO_INITIAL_HEAP_SIZE
];

60 vﬁ©ûê
AO_t
 
	göôül_hóp_±r
 = (AO_t)
AO_öôül_hóp
;

61 vﬁ©ûê*
	göôül_hóp_lim
 = 
AO_öôül_hóp
 + 
AO_INITIAL_HEAP_SIZE
;

63 #i‡
deföed
(
HAVE_MMAP
)

65 
	~<sys/ty≥s.h
>

66 
	~<sys/°©.h
>

67 
	~<f˙é.h
>

68 
	~<sys/mm™.h
>

70 vﬁ©ûê
AO_t
 
	gmm≠_íabÀd
 = 0;

73 
	$AO_mÆloc_íabÀ_mm≠
()

75 
	`AO_°‹e
(&
mm≠_íabÀd
, 1);

76 
	}
}

78 *
	$gë_mm≠ed
(
size_t
 
sz
)

80 * 
ªsu…
;

82 
	`as£π
(!(
sz
 & (
CHUNK_SIZE
 - 1)));

83 i‡(!
mm≠_íabÀd
)  0;

84 #i‡
	`deföed
(
MAP_ANONYMOUS
)

85 
ªsu…
 = 
	`mm≠
(0, 
sz
, 
PROT_READ
 | 
PROT_WRITE
,

86 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, 0, 0);

87 #ñi‡
	`deföed
(
MAP_ANON
)

88 
ªsu…
 = 
	`mm≠
(0, 
sz
, 
PROT_READ
 | 
PROT_WRITE
,

89 
MAP_PRIVATE
 | 
MAP_ANON
, -1, 0);

92 
zîo_fd
 = 
	`›í
("/dev/zîo", 
O_RDONLY
);

93 
ªsu…
 = 
	`mm≠
(0, 
sz
, 
PROT_READ
 | 
PROT_WRITE
,

94 
MAP_PRIVATE
, 
zîo_fd
, 0);

95 
	`˛o£
(
zîo_fd
);

98 i‡(
ªsu…
 =
MAP_FAILED
)Ñesult = 0;

99  
ªsu…
;

100 
	}
}

105 
	$AO_mÆloc_œrge
(
size_t
 
sz
)

107 * 
ªsu…
;

109 
sz
 +
ALIGNMENT
;

111 
sz
 = (sz + 
CHUNK_SIZE
 - 1) & ~(CHUNK_SIZE - 1);

112 
ªsu…
 = 
	`gë_mm≠ed
(
sz
);

113 i‡(
ªsu…
 == 0)  0;

114 
ªsu…
 +
ALIGNMENT
;

115 ((
AO_t
 *)
ªsu…
)[-1] = (AO_t)
sz
;

116  
ªsu…
;

117 
	}
}

120 
	$AO_‰ì_œrge
(* 
p
)

122 
AO_t
 
sz
 = ((AO_à*)
p
)[-1];

123 i‡(
	`munm≠
(
p
 - 
ALIGNMENT
, (
size_t
)
sz
) != 0)

124 
	`ab‹t
();

125 
	}
}

131 
	$AO_mÆloc_íabÀ_mm≠
()

133 
	}
}

135 *
	$gë_mm≠ed
(
size_t
 
sz
)

138 
	}
}

141 
	$AO_mÆloc_œrge
(
size_t
 
sz
)

144 
	}
}

147 
	$AO_‰ì_œrge
(* 
p
)

149 
	`ab‹t
();

150 
	}
}

155 
	$gë_chunk
()

157 *
öôül_±r
;

158 *
my_chunk_±r
;

159 * 
my_lim
;

161 
ªåy
:

162 
öôül_±r
 = (*)
	`AO_lﬂd
(&
öôül_hóp_±r
);

163 
my_chunk_±r
 = (*)(((
AO_t
)
öôül_±r
 + (
ALIGNMENT
 - 1))

164 & ~(
ALIGNMENT
 - 1));

165 i‡(
öôül_±r
 !
my_chunk_±r
)

168 
	`AO_com∑ª_™d_sw≠_acquúe
(&
öôül_hóp_±r
, (
AO_t
)
öôül_±r
,

169 (
AO_t
)
my_chunk_±r
);

171 
my_lim
 = 
my_chunk_±r
 + 
CHUNK_SIZE
;

172 i‡(
my_lim
 <
öôül_hóp_lim
)

174 i‡(!
	`AO_com∑ª_™d_sw≠
(&
öôül_hóp_±r
, (
AO_t
)
my_chunk_±r
,

175 (
AO_t
)
my_lim
))

176 
ªåy
;

177  
my_chunk_±r
;

180 
my_chunk_±r
 = 
	`gë_mm≠ed
(
CHUNK_SIZE
);

181 
	`as£π
 (!((
AO_t
)
my_chunk_±r
 & (
ALIGNMENT
-1)));

182  
my_chunk_±r
;

183 
	}
}

187 
AO_°ack_t
 
	gAO_‰ì_li°
[
LOG_MAX_SIZE
+1];

191 
AO_°ack_t
 
	gAO_chunk_‰ì_li°
;

197 
	$add_chunk_as
(* 
chunk
, 
size_t
 
sz
, 
log_sz
)

199 *
fú°
 = (*)
chunk
 + 
ALIGNMENT
 - (
AO_t
);

200 *
limô
 = (*)
chunk
 + 
CHUNK_SIZE
 - 
sz
;

201 *
√xt
, *
p
;

203 
p
 = 
fú°
;Ö <
limô
;Ö = 
√xt
) {

204 
√xt
 = 
p
 + 
sz
;

205 
	`AO_°ack_push
(
AO_‰ì_li°
+
log_sz
, (
AO_t
 *)
p
);

207 
	}
}

209 
	gmsbs
[16] = {0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4};

215 
	$msb
(
size_t
 
s
)

217 
ªsu…
 = 0;

218 i‡((
s
 & 0xff) != s) {

221 i‡((
size_t
Ë> 4 && (
s
 >> 32) != 0)

223 
s
 >>= 32;

224 
ªsu…
 += 32;

226 i‡((
s
 >> 16) != 0)

228 
s
 >>= 16;

229 
ªsu…
 += 16;

231 i‡((
s
 >> 8) != 0)

233 
s
 >>= 8;

234 
ªsu…
 += 8;

237 i‡(
s
 > 15)

239 
s
 >>= 4;

240 
ªsu…
 += 4;

242 
ªsu…
 +
msbs
[
s
];

243  
ªsu…
;

244 
	}
}

247 
	$AO_mÆloc
(
size_t
 
sz
)

249 
AO_t
 *
ªsu…
;

250 
size_t
 
adj_sz
 = 
sz
 + (
AO_t
);

251 
log_sz
;

252 i‡(
sz
 > 
CHUNK_SIZE
)

253  
	`AO_mÆloc_œrge
(
sz
);

254 
log_sz
 = 
	`msb
(
adj_sz
-1);

255 
ªsu…
 = 
	`AO_°ack_p›
(
AO_‰ì_li°
+
log_sz
);

256 0 =
ªsu…
) {

257 * 
chunk
 = 
	`gë_chunk
();

258 i‡(0 =
chunk
)  0;

259 
adj_sz
 = 1 << 
log_sz
;

260 
	`add_chunk_as
(
chunk
, 
adj_sz
, 
log_sz
);

261 
ªsu…
 = 
	`AO_°ack_p›
(
AO_‰ì_li°
+
log_sz
);

263 *
ªsu…
 = 
log_sz
;

264 #ifde‡
AO_TRACE_MALLOC


265 
	`Ârötf
(
°dîr
, "%x: AO_malloc(%lu) = %p\n",

266 ()
	`±hªad_£lf
(), ()
sz
, 
ªsu…
+1);

268  
ªsu…
 + 1;

269 
	}
}

272 
	$AO_‰ì
(*
p
)

274 *
ba£
 = (*)
p
 - (
AO_t
);

275 
log_sz
;

277 i‡(0 =
p
) ;

278 
log_sz
 = *(
AO_t
 *)
ba£
;

279 #ifde‡
AO_TRACE_MALLOC


280 
	`Ârötf
(
°dîr
, "%x: AO_‰ì(%∞sz:%lu)\n", ()
	`±hªad_£lf
(), 
p
,

282 (
log_sz
 > 
LOG_MAX_SIZE
?Üog_sz : (1 <<Üog_sz)));

284 i‡(
log_sz
 > 
LOG_MAX_SIZE
)

285 
	`AO_‰ì_œrge
(
p
);

287 
	`AO_°ack_push
(
AO_‰ì_li°
+
log_sz
, (
AO_t
 *)
ba£
);

288 
	}
}

	@libatomic_ops-1.2/src/atomic_ops_malloc.h

26 #i‚de‡
AO_ATOMIC_H


27 
	#AO_ATOMIC_H


	)

29 
	~<°dlib.h
>

31 
	~"©omic_›s_°ack.h
"

33 #ifde‡
AO_STACK_IS_LOCK_FREE


34 
	#AO_MALLOC_IS_LOCK_FREE


	)

37 
AO_‰ì
(*);

39 * 
AO_mÆloc
(
size_t
);

42 
AO_mÆloc_íabÀ_mm≠
();

	@libatomic_ops-1.2/src/atomic_ops_stack.c

15 #i‡
deföed
(
HAVE_CONFIG_H
)

16 
	~"c⁄fig.h
"

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

21 
	~<as£π.h
>

22 
	#AO_REQUIRE_CAS


	)

23 
	~"©omic_›s_°ack.h
"

25 #i‡
deföed
(
_MSC_VER
) \

26 || 
deföed
(
_WIN32
Ë&& !deföed(
__CYGWIN32__
Ë&& !
	$deföed
(
__CYGWIN__
)

29 
	~<wödows.h
>

31 
AO_t
 
dummy
;

34 
	$AO_•ö
(
n
)

36 
i
;

37 
AO_T
 
j
 = 
	`AO_lﬂd
(&
dummy
);

39 
i
 = 0; i < (2 << 
n
); ++i)

41 
j
 *= 5;

42 
j
 -= 4;

44 
	`AO_°‹e
(&
dummy
, 
j
);

45 
	}
}

47 
	$AO_∑u£
(
n
)

49 i‡(
n
 < 12)

50 
	`AO_•ö
(
n
);

53 
DWORD
 
m£cs
;

56 
m£cs
 = (
n
 > 18? 100 : (1 << (n - 12)));

57 
	`SÀï
(
m£cs
);

59 
	}
}

65 
AO_∑u£
();

69 #ifde‡
AO_USE_ALMOST_LOCK_FREE


92 
	$AO_°ack_push_ex∂icô_aux_ªÀa£
(vﬁ©ûê
AO_t
 *
li°
, AO_à*
x
,

93 
AO_°ack_aux
 *
a
)

95 
i
;

96 
AO_t
 
x_bôs
 = (AO_t)
x
;

97 
AO_t
 
√xt
;

101 
ªåy
:

102 #i‡
AO_BL_SIZE
 == 2

105 
AO_t
 
íåy1
 = 
	`AO_lﬂd
(
a
 -> 
AO_°ack_bl
);

106 
AO_t
 
íåy2
 = 
	`AO_lﬂd
(
a
 -> 
AO_°ack_bl
 + 1);

107 i‡(
íåy1
 =
x_bôs
 || 
íåy2
 == x_bits)

110 ++
x_bôs
;

111 i‡((
x_bôs
 & 
AO_BIT_MASK
) == 0)

114 
x_bôs
 = (
AO_t
)
x
;

115 
ªåy
;

119 
i
 = 0; i < 
AO_BL_SIZE
; ++i)

121 i‡(
	`AO_lﬂd
(
a
 -> 
AO_°ack_bl
 + 
i
Ë=
x_bôs
)

124 ++
x_bôs
;

125 i‡((
x_bôs
 & 
AO_BIT_MASK
) == 0)

128 
x_bôs
 = (
AO_t
)
x
;

129 
ªåy
;

136 
√xt
 = 
	`AO_lﬂd
(
li°
);

137 *
x
 = 
√xt
;

139 !
	`AO_com∑ª_™d_sw≠_ªÀa£
(
li°
, 
√xt
, 
x_bôs
));

140 
	}
}

152 #ifde‡
__i386__


153 
	#PRECHECK
(
a
Ë◊Ë=0 &&

	)

155 
	#PRECHECK
(
a
)

	)

158 
AO_t
 *

159 
	$AO_°ack_p›_ex∂icô_aux_acquúe
(vﬁ©ûê
AO_t
 *
li°
, 
AO_°ack_aux
 * 
a
)

161 
i
;

162 
j
 = 0;

163 
AO_t
 
fú°
;

164 
AO_t
 * 
fú°_±r
;

165 
AO_t
 
√xt
;

167 
ªåy
:

168 
fú°
 = 
	`AO_lﬂd
(
li°
);

169 i‡(0 =
fú°
)  0;

173 
i
 = 0; ; )

175 i‡(
	`PRECHECK
(
a
 -> 
AO_°ack_bl
[
i
])

176 
	`AO_com∑ª_™d_sw≠_acquúe
(
a
->
AO_°ack_bl
+
i
, 0, 
fú°
))

178 ++
i
;

179 i‡–
i
 >
AO_BL_SIZE
 )

181 
i
 = 0;

182 
	`AO_∑u£
(++
j
);

185 
	`as£π
(
i
 >0 && i < 
AO_BL_SIZE
);

186 
	`as£π
(
a
 -> 
AO_°ack_bl
[
i
] =
fú°
);

194 i‡(
fú°
 !
	`AO_lﬂd
(
li°
)) {

195 
	`AO_°‹e_ªÀa£
(
a
->
AO_°ack_bl
+
i
, 0);

196 
ªåy
;

198 
fú°_±r
 = 
	`AO_REAL_NEXT_PTR
(
fú°
);

199 
√xt
 = 
	`AO_lﬂd
(
fú°_±r
);

200 i‡(!
	`AO_com∑ª_™d_sw≠_ªÀa£
(
li°
, 
fú°
, 
√xt
)) {

201 
	`AO_°‹e_ªÀa£
(
a
->
AO_°ack_bl
+
i
, 0);

202 
ªåy
;

204 
	`as£π
(*
li°
 !
fú°
);

214 
	`AO_°‹e_ªÀa£
(
a
->
AO_°ack_bl
+
i
, 0);

215  
fú°_±r
;

216 
	}
}

221 
	#±r
 
AO_vÆ2


	)

222 
	#vîsi⁄
 
AO_vÆ1


	)

224 #i‡
deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
)

226 
	$AO_°ack_push_ªÀa£
(
AO_°ack_t
 *
li°
, 
AO_t
 *
ñemít
)

228 
AO_t
 
√xt
;

231 
√xt
 = 
	`AO_lﬂd
(&(
li°
 -> 
±r
));

232 *
ñemít
 = 
√xt
;

233 } !
AO_com∑ª_™d_sw≠_ªÀa£


234 –&(
li°
 -> 
±r
), 
√xt
, (
AO_t
Ë
ñemít
));

239 
	}
}

241 
AO_t
 *
	$AO_°ack_p›_acquúe
(
AO_°ack_t
 *
li°
)

243 
AO_t
 *
˝å
;

244 
AO_t
 
√xt
;

245 
AO_t
 
cvîsi⁄
;

249 
cvîsi⁄
 = 
	`AO_lﬂd_acquúe
(&(
li°
 -> 
vîsi⁄
));

250 
˝å
 = (
AO_t
 *)
	`AO_lﬂd
(&(
li°
 -> 
±r
));

251 i‡(
˝å
 == 0)  0;

252 
√xt
 = *
˝å
;

253 } !
AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£


254 (
li°
, 
cvîsi⁄
, (
AO_t
Ë
˝å
, cvîsi⁄+1, (AO_tË
√xt
));

255  
˝å
;

256 
	}
}

259 #ñi‡
deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
)

263 #îr‹ 
U¡e°ed
! 
Probably
 
d€¢t
 
w‹k
.

268 
	$AO_°ack_push_ªÀa£
(
AO_°ack_t
 *
li°
, 
AO_t
 *
ñemít
)

270 
AO_t
 
vîsi⁄
;

271 
AO_t
 
√xt_±r
;

275 
vîsi⁄
 = 
	`AO_lﬂd_acquúe
(&(
li°
 -> version));

276 
√xt_±r
 = 
	`AO_lﬂd
(&(
li°
 -> 
±r
));

277 *
ñemít
 = 
√xt_±r
;

278 } !
	`AO_com∑ª_™d_sw≠_doubÀ_ªÀa£
(

279 
li°
, 
vîsi⁄
,

280 
vîsi⁄
+1, (
AO_t
Ë
ñemít
));

281 
	}
}

283 
AO_t
 *
	$AO_°ack_p›_acquúe
(
AO_°ack_t
 *
li°
)

285 
AO_t
 *
˝å
;

286 
AO_t
 
√xt
;

287 
AO_t
 
cvîsi⁄
;

290 
cvîsi⁄
 = 
	`AO_lﬂd_acquúe
(&(
li°
 -> 
vîsi⁄
));

291 
˝å
 = (
AO_t
 *)
	`AO_lﬂd
(&(
li°
 -> 
±r
));

292 i‡(
˝å
 == 0)  0;

293 
√xt
 = *
˝å
;

294 } !
AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£


295 (
li°
, 
cvîsi⁄
, (
AO_t
Ë
˝å
, cvîsi⁄+1, 
√xt
));

296  
˝å
;

297 
	}
}

	@libatomic_ops-1.2/src/atomic_ops_stack.h

29 #i‚de‡
AO_STACK_H


30 
	#AO_STACK_H


	)

32 
	~"©omic_›s.h
"

34 #i‡!
deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
) \

35 && !
deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠
) \

36 && 
	$deföed
(
AO_HAVE_com∑ª_™d_sw≠
)

37 
	#AO_USE_ALMOST_LOCK_FREE


	)

42 
	#AO_STACK_IS_LOCK_FREE


	)

69 #ifde‡
AO_USE_ALMOST_LOCK_FREE


72 #i‡
	`deföed
(
__LP64__
Ë|| deföed(
_LP64
Ë|| deföed(
_WIN64
)

74 
	#AO_N_BITS
 3

	)

76 
	#AO_N_BITS
 2

	)

79 
	#AO_BIT_MASK
 ((1 << 
AO_N_BITS
Ë- 1)

	)

85 #i‚de‡
AO_BL_SIZE


86 
	#AO_BL_SIZE
 2

	)

89 #i‡
AO_BL_SIZE
 > (1 << 
AO_N_BITS
)

90 #îr‹ 
AO_BL_SIZE
 
too
 
big


93 
	sAO__°ack_aux
 {

94 vﬁ©ûê
AO_t
 
AO_°ack_bl
[
AO_BL_SIZE
];

95 } 
	tAO_°ack_aux
;

103 
	#AO_REAL_NEXT_PTR
(
x
Ë(
AO_t
 *)((xË& ~
AO_BIT_MASK
)

	)

109 
	`AO_°ack_push_ex∂icô_aux_ªÀa£
(vﬁ©ûê
AO_t
 *
li°
, AO_à*
x
,

110 
AO_°ack_aux
 *);

112 
AO_t
 *

113 
	`AO_°ack_p›_ex∂icô_aux_acquúe
(vﬁ©ûê
AO_t
 *
li°
, 
AO_°ack_aux
 *);

117 
	sAO__°ack
 {

118 vﬁ©ûê
AO_t
 
AO_±r
;

119 
AO_°ack_aux
 
AO_aux
;

120 } 
	tAO_°ack_t
;

122 
	#AO_STACK_INITIALIZER
 {0
	}

	)
}

124 
AO_INLINE
 
	$AO_°ack_öô
(
AO_°ack_t
 *
li°
)

126 #i‡
AO_BL_SIZE
 == 2

127 
li°
 -> 
AO_aux
.
AO_°ack_bl
[0] = 0;

128 
li°
 -> 
AO_aux
.
AO_°ack_bl
[1] = 0;

130 
i
;

131 
i
 = 0; i < 
AO_BL_SIZE
; ++i)

132 
li°
 -> 
AO_aux
.
AO_°ack_bl
[
i
] = 0;

134 
li°
 -> 
AO_±r
 = 0;

135 
	}
}

139 
	#AO_REAL_HEAD_PTR
(
x
Ë
	`AO_REAL_NEXT_PTR
((x).
AO_±r
)

	)

141 
	#AO_°ack_push_ªÀa£
(
l
, 
e
) \

142 
	`AO_°ack_push_ex∂icô_aux_ªÀa£
(&((
l
)->
AO_±r
), 
e
, &(÷)->
AO_aux
))

	)

143 
	#AO_HAVE_°ack_push_ªÀa£


	)

145 
	#AO_°ack_p›_acquúe
(
l
) \

146 
	`AO_°ack_p›_ex∂icô_aux_acquúe
(&((
l
)->
AO_±r
), &(÷)->
AO_aux
))

	)

147 
	#AO_HAVE_°ack_p›_acquúe


	)

151 #i‚de‡
AO_HAVE_doubÀ_t


154 
	~"©omic_›s/sysdïs/°™d¨d_ao_doubÀ_t.h
"

157 vﬁ©ûê
	tAO_doubÀ_t
 
	tAO_°ack_t
;

160 
	#AO_STACK_INITIALIZER
 {0}

	)

162 
AO_INLINE
 
	$AO_°ack_öô
(
AO_°ack_t
 *
li°
)

164 
li°
 -> 
AO_vÆ1
 = 0;

165 
li°
 -> 
AO_vÆ2
 = 0;

166 
	}
}

168 
	#AO_REAL_HEAD_PTR
(
x
Ë(
AO_t
 *)((x).
AO_vÆ2
)

	)

169 
	#AO_REAL_NEXT_PTR
(
x
Ë(
AO_t
 *)(x)

	)

171 
AO_°ack_push_ªÀa£
(
AO_°ack_t
 *
li°
, 
AO_t
 *
√w_ñemít
);

172 
	#AO_HAVE_°ack_push_ªÀa£


	)

173 
AO_t
 * 
AO_°ack_p›_acquúe
(
AO_°ack_t
 *
li°
);

174 
	#AO_HAVE_°ack_p›_acquúe


	)

178 #i‡
deföed
(
AO_HAVE_°ack_push_ªÀa£
Ë&& !deföed(
AO_HAVE_°ack_push
)

179 
	#AO_°ack_push
(
l
, 
e
Ë
	`AO_°ack_push_ªÀa£
÷,É)

	)

180 
	#AO_HAVE_°ack_push


	)

183 #i‡
deföed
(
AO_HAVE_°ack_p›_acquúe
Ë&& !deföed(
AO_HAVE_°ack_p›
)

184 
	#AO_°ack_p›
(
l
Ë
	`AO_°ack_p›_acquúe
÷)

	)

185 
	#AO_HAVE_°ack_p›


	)

	@libatomic_ops-1.2/src/config.h

5 
	#HAVE_GETPAGESIZE
 1

	)

8 
	#HAVE_INTTYPES_H
 1

	)

11 
	#HAVE_MEMORY_H
 1

	)

14 
	#HAVE_MMAP
 1

	)

17 
	#HAVE_STDINT_H
 1

	)

20 
	#HAVE_STDLIB_H
 1

	)

23 
	#HAVE_STRINGS_H
 1

	)

26 
	#HAVE_STRING_H
 1

	)

29 
	#HAVE_SYS_STAT_H
 1

	)

32 
	#HAVE_SYS_TYPES_H
 1

	)

35 
	#HAVE_UNISTD_H
 1

	)

38 
	#PACKAGE
 "lib©omic_›s"

	)

41 
	#PACKAGE_BUGREPORT
 ""

	)

44 
	#PACKAGE_NAME
 "lib©omic_›s"

	)

47 
	#PACKAGE_STRING
 "lib©omic_›†1.2"

	)

50 
	#PACKAGE_TARNAME
 "lib©omic_›s"

	)

53 
	#PACKAGE_VERSION
 "1.2"

	)

56 
	#STDC_HEADERS
 1

	)

59 
	#VERSION
 "1.2"

	)

	@libatomic_ops-1.2/tests/list_atomic.c

1 
	~"©omic_›s.h
"

15 
	$li°_©omic
()

17 
AO_T
 *
addr
, 
vÆ
, 
√wvÆ
, 
ﬁdvÆ
;

18 
AO_TS_T
 
tßddr
;

19 
ö¸
;

21 #i‡
	`deföed
(
AO_HAVE_n›
)

23 
	`AO_n›
();

27 #i‡
	`deföed
(
AO_HAVE_lﬂd
)

29 
	`AO_lﬂd
(
addr
);

33 #i‡
	`deföed
(
AO_HAVE_°‹e
)

35 
	`AO_°‹e
(
addr
, 
vÆ
);

39 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t
)

41 
	`AO_ã°_™d_£t
(
tßddr
);

45 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1
)

47 
	`AO_„tch_™d_add1
(
addr
);

51 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1
)

53 
	`AO_„tch_™d_sub1
(
addr
);

57 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add
)

59 
	`AO_„tch_™d_add
(
addr
, 
ö¸
);

63 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
)

65 
	`AO_com∑ª_™d_sw≠
(
addr
, 
ﬁdvÆ
, 
√wvÆ
);

69 
	}
}

86 
	$li°_©omic_ªÀa£
()

88 
AO_T
 *
addr
, 
vÆ
, 
√wvÆ
, 
ﬁdvÆ
;

89 
AO_TS_T
 
tßddr
;

90 
ö¸
;

92 #i‡
	`deföed
(
AO_HAVE_n›_ªÀa£
)

94 
	`AO_n›_ªÀa£
();

98 #i‡
	`deföed
(
AO_HAVE_lﬂd_ªÀa£
)

100 
	`AO_lﬂd_ªÀa£
(
addr
);

104 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£
)

106 
	`AO_°‹e_ªÀa£
(
addr
, 
vÆ
);

110 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£
)

112 
	`AO_ã°_™d_£t_ªÀa£
(
tßddr
);

116 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£
)

118 
	`AO_„tch_™d_add1_ªÀa£
(
addr
);

122 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£
)

124 
	`AO_„tch_™d_sub1_ªÀa£
(
addr
);

128 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
)

130 
	`AO_„tch_™d_add_ªÀa£
(
addr
, 
ö¸
);

134 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
)

136 
	`AO_com∑ª_™d_sw≠_ªÀa£
(
addr
, 
ﬁdvÆ
, 
√wvÆ
);

140 
	}
}

157 
	$li°_©omic_acquúe
()

159 
AO_T
 *
addr
, 
vÆ
, 
√wvÆ
, 
ﬁdvÆ
;

160 
AO_TS_T
 
tßddr
;

161 
ö¸
;

163 #i‡
	`deföed
(
AO_HAVE_n›_acquúe
)

165 
	`AO_n›_acquúe
();

169 #i‡
	`deföed
(
AO_HAVE_lﬂd_acquúe
)

171 
	`AO_lﬂd_acquúe
(
addr
);

175 #i‡
	`deföed
(
AO_HAVE_°‹e_acquúe
)

177 
	`AO_°‹e_acquúe
(
addr
, 
vÆ
);

181 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

183 
	`AO_ã°_™d_£t_acquúe
(
tßddr
);

187 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe
)

189 
	`AO_„tch_™d_add1_acquúe
(
addr
);

193 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
)

195 
	`AO_„tch_™d_sub1_acquúe
(
addr
);

199 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe
)

201 
	`AO_„tch_™d_add_acquúe
(
addr
, 
ö¸
);

205 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
)

207 
	`AO_com∑ª_™d_sw≠_acquúe
(
addr
, 
ﬁdvÆ
, 
√wvÆ
);

211 
	}
}

228 
	$li°_©omic_ªad
()

230 
AO_T
 *
addr
, 
vÆ
, 
√wvÆ
, 
ﬁdvÆ
;

231 
AO_TS_T
 
tßddr
;

232 
ö¸
;

234 #i‡
	`deföed
(
AO_HAVE_n›_ªad
)

236 
	`AO_n›_ªad
();

240 #i‡
	`deföed
(
AO_HAVE_lﬂd_ªad
)

242 
	`AO_lﬂd_ªad
(
addr
);

246 #i‡
	`deföed
(
AO_HAVE_°‹e_ªad
)

248 
	`AO_°‹e_ªad
(
addr
, 
vÆ
);

252 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_ªad
)

254 
	`AO_ã°_™d_£t_ªad
(
tßddr
);

258 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_ªad
)

260 
	`AO_„tch_™d_add1_ªad
(
addr
);

264 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªad
)

266 
	`AO_„tch_™d_sub1_ªad
(
addr
);

270 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªad
)

272 
	`AO_„tch_™d_add_ªad
(
addr
, 
ö¸
);

276 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªad
)

278 
	`AO_com∑ª_™d_sw≠_ªad
(
addr
, 
ﬁdvÆ
, 
√wvÆ
);

282 
	}
}

299 
	$li°_©omic_wrôe
()

301 
AO_T
 *
addr
, 
vÆ
, 
√wvÆ
, 
ﬁdvÆ
;

302 
AO_TS_T
 
tßddr
;

303 
ö¸
;

305 #i‡
	`deföed
(
AO_HAVE_n›_wrôe
)

307 
	`AO_n›_wrôe
();

311 #i‡
	`deföed
(
AO_HAVE_lﬂd_wrôe
)

313 
	`AO_lﬂd_wrôe
(
addr
);

317 #i‡
	`deföed
(
AO_HAVE_°‹e_wrôe
)

319 
	`AO_°‹e_wrôe
(
addr
, 
vÆ
);

323 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_wrôe
)

325 
	`AO_ã°_™d_£t_wrôe
(
tßddr
);

329 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_wrôe
)

331 
	`AO_„tch_™d_add1_wrôe
(
addr
);

335 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_wrôe
)

337 
	`AO_„tch_™d_sub1_wrôe
(
addr
);

341 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_wrôe
)

343 
	`AO_„tch_™d_add_wrôe
(
addr
, 
ö¸
);

347 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_wrôe
)

349 
	`AO_com∑ª_™d_sw≠_wrôe
(
addr
, 
ﬁdvÆ
, 
√wvÆ
);

353 
	}
}

370 
	$li°_©omic_fuŒ
()

372 
AO_T
 *
addr
, 
vÆ
, 
√wvÆ
, 
ﬁdvÆ
;

373 
AO_TS_T
 
tßddr
;

374 
ö¸
;

376 #i‡
	`deföed
(
AO_HAVE_n›_fuŒ
)

378 
	`AO_n›_fuŒ
();

382 #i‡
	`deföed
(
AO_HAVE_lﬂd_fuŒ
)

384 
	`AO_lﬂd_fuŒ
(
addr
);

388 #i‡
	`deföed
(
AO_HAVE_°‹e_fuŒ
)

390 
	`AO_°‹e_fuŒ
(
addr
, 
vÆ
);

394 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_fuŒ
)

396 
	`AO_ã°_™d_£t_fuŒ
(
tßddr
);

400 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_fuŒ
)

402 
	`AO_„tch_™d_add1_fuŒ
(
addr
);

406 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_fuŒ
)

408 
	`AO_„tch_™d_sub1_fuŒ
(
addr
);

412 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_fuŒ
)

414 
	`AO_„tch_™d_add_fuŒ
(
addr
, 
ö¸
);

418 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
)

420 
	`AO_com∑ª_™d_sw≠_fuŒ
(
addr
, 
ﬁdvÆ
, 
√wvÆ
);

424 
	}
}

441 
	$li°_©omic_ªÀa£_wrôe
()

443 
AO_T
 *
addr
, 
vÆ
, 
√wvÆ
, 
ﬁdvÆ
;

444 
AO_TS_T
 
tßddr
;

445 
ö¸
;

447 #i‡
	`deföed
(
AO_HAVE_n›_ªÀa£_wrôe
)

449 
	`AO_n›_ªÀa£_wrôe
();

453 #i‡
	`deföed
(
AO_HAVE_lﬂd_ªÀa£_wrôe
)

455 
	`AO_lﬂd_ªÀa£_wrôe
(
addr
);

459 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£_wrôe
)

461 
	`AO_°‹e_ªÀa£_wrôe
(
addr
, 
vÆ
);

465 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£_wrôe
)

467 
	`AO_ã°_™d_£t_ªÀa£_wrôe
(
tßddr
);

471 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£_wrôe
)

473 
	`AO_„tch_™d_add1_ªÀa£_wrôe
(
addr
);

477 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe
)

479 
	`AO_„tch_™d_sub1_ªÀa£_wrôe
(
addr
);

483 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£_wrôe
)

485 
	`AO_„tch_™d_add_ªÀa£_wrôe
(
addr
, 
ö¸
);

489 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£_wrôe
)

491 
	`AO_com∑ª_™d_sw≠_ªÀa£_wrôe
(
addr
, 
ﬁdvÆ
, 
√wvÆ
);

495 
	}
}

512 
	$li°_©omic_acquúe_ªad
()

514 
AO_T
 *
addr
, 
vÆ
, 
√wvÆ
, 
ﬁdvÆ
;

515 
AO_TS_T
 
tßddr
;

516 
ö¸
;

518 #i‡
	`deföed
(
AO_HAVE_n›_acquúe_ªad
)

520 
	`AO_n›_acquúe_ªad
();

524 #i‡
	`deföed
(
AO_HAVE_lﬂd_acquúe_ªad
)

526 
	`AO_lﬂd_acquúe_ªad
(
addr
);

530 #i‡
	`deföed
(
AO_HAVE_°‹e_acquúe_ªad
)

532 
	`AO_°‹e_acquúe_ªad
(
addr
, 
vÆ
);

536 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe_ªad
)

538 
	`AO_ã°_™d_£t_acquúe_ªad
(
tßddr
);

542 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe_ªad
)

544 
	`AO_„tch_™d_add1_acquúe_ªad
(
addr
);

548 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe_ªad
)

550 
	`AO_„tch_™d_sub1_acquúe_ªad
(
addr
);

554 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe_ªad
)

556 
	`AO_„tch_™d_add_acquúe_ªad
(
addr
, 
ö¸
);

560 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe_ªad
)

562 
	`AO_com∑ª_™d_sw≠_acquúe_ªad
(
addr
, 
ﬁdvÆ
, 
√wvÆ
);

566 
	}
}

	@libatomic_ops-1.2/tests/test_atomic.c

15 #i‡
deföed
(
HAVE_CONFIG_H
)

16 
	~"c⁄fig.h
"

20 
	~"run_∑øŒñ.öc
"

22 
	~"ã°_©omic_ö˛ude.h
"

24 #ifde‡
AO_USE_PTHREAD_DEFS


25 
	#NITERS
 100000

	)

27 
	#NITERS
 10000000

	)

30 * 
add1sub1_thr
(* 
id
);

31 
add1sub1_ã°
();

32 * 
acqªl_thr
(*
id
);

33 
acqªl_ã°
();

34 * 
ã°_™d_£t_thr
(* 
id
);

35 
ã°_™d_£t_ã°
();

37 #i‡
deföed
(
AO_HAVE_„tch_™d_add1
Ë&& deföed(
AO_HAVE_„tch_™d_sub1
)

39 
AO_t
 
	gcou¡î
 = 0;

41 * 
	$add1sub1_thr
(* 
id
)

43 
me
 = ()()
id
;

45 
i
;

47 
i
 = 0; i < 
NITERS
; ++i)

48 i‡(
me
 & 1)

49 
	`AO_„tch_™d_sub1
(&
cou¡î
);

51 
	`AO_„tch_™d_add1
(&
cou¡î
);

54 
	}
}

56 
	$add1sub1_ã°
()

58  
cou¡î
 == 0;

59 
	}
}

63 #i‡
deföed
(
AO_HAVE_°‹e_ªÀa£_wrôe
Ë&& deföed(
AO_HAVE_lﬂd_acquúe_ªad
)

66 
AO_t
 
	gcou¡î1
 = 0;

67 
AO_t
 
	gcou¡î2
 = 0;

69 * 
	$acqªl_thr
(*
id
)

71 
me
 = ()()
id
;

73 
i
;

75 
i
 = 0; i < 
NITERS
; ++i)

76 i‡(
me
 & 1)

78 
AO_t
 
my_cou¡î1
;

79 i‡(
me
 != 1)

80 
	`Ârötf
(
°dîr
, "acqrelÅest:Åoo manyÅhreads\n");

81 
my_cou¡î1
 = 
	`AO_lﬂd
(&
cou¡î1
);

82 
	`AO_°‹e
(&
cou¡î1
, 
my_cou¡î1
 + 1);

83 
	`AO_°‹e_ªÀa£_wrôe
(&
cou¡î2
, 
my_cou¡î1
 + 1);

87 
AO_t
 
my_cou¡î1a
, 
my_cou¡î2a
;

88 
AO_t
 
my_cou¡î1b
, 
my_cou¡î2b
;

90 
my_cou¡î2a
 = 
	`AO_lﬂd_acquúe_ªad
(&
cou¡î2
);

91 
my_cou¡î1a
 = 
	`AO_lﬂd
(&
cou¡î1
);

94 
my_cou¡î2b
 = 
	`AO_lﬂd_acquúe_ªad
(&
cou¡î2
);

95 
my_cou¡î1b
 = 
	`AO_lﬂd
(&
cou¡î1
);

96 i‡(
my_cou¡î1a
 < 
my_cou¡î2a
)

98 
	`Ârötf
(
°dîr
, "SawÑelease store out of order: %lu < %lu\n",

99 ()
my_cou¡î1a
, ()
my_cou¡î2a
);

100 
	`ab‹t
();

102 i‡(
my_cou¡î1b
 < 
my_cou¡î2b
)

104 
	`Ârötf
(
°dîr
,

106 ()
my_cou¡î1b
, ()
my_cou¡î2b
);

107 
	`ab‹t
();

112 
	}
}

114 
	$acqªl_ã°
()

116  
cou¡î1
 =
NITERS
 && 
cou¡î2
 == NITERS;

117 
	}
}

121 #i‡
deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

123 
AO_TS_T
 
	glock
 = 
AO_TS_INITIALIZER
;

125 
	glocked_cou¡î
;

126 vﬁ©ûê
	gjunk
 = 13;

128 * 
	$ã°_™d_£t_thr
(* 
id
)

130 
i
;

132 
i
 = 0; i < 
NITERS
/10; ++i)

134 
	`AO_ã°_™d_£t_acquúe
(&
lock
Ë!
AO_TS_CLEAR
);

135 ++
locked_cou¡î
;

136 i‡(
locked_cou¡î
 != 1)

138 
	`Ârötf
(
°dîr
, "Testánd set failure 1, counter = %ld\n",

139 
locked_cou¡î
);

140 
	`ab‹t
();

142 
locked_cou¡î
 *= 2;

143 
locked_cou¡î
 -= 1;

144 
locked_cou¡î
 *= 5;

145 
locked_cou¡î
 -= 4;

146 i‡(
locked_cou¡î
 != 1)

148 
	`Ârötf
(
°dîr
, "Testánd set failure 2, counter = %ld\n",

149 
locked_cou¡î
);

150 
	`ab‹t
();

152 --
locked_cou¡î
;

153 
	`AO_CLEAR
(&
lock
);

155 
junk
 *= 17;

156 
junk
 *= 17;

159 
	}
}

161 
	$ã°_™d_£t_ã°
()

163  
locked_cou¡î
 == 0;

164 
	}
}

168 
	$maö
()

170 
	`ã°_©omic
();

171 
	`ã°_©omic_acquúe
();

172 
	`ã°_©omic_ªÀa£
();

173 
	`ã°_©omic_ªad
();

174 
	`ã°_©omic_wrôe
();

175 
	`ã°_©omic_fuŒ
();

176 
	`ã°_©omic_ªÀa£_wrôe
();

177 
	`ã°_©omic_acquúe_ªad
();

178 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1
Ë&& deföed(
AO_HAVE_„tch_™d_sub1
)

179 
	`run_∑øŒñ
(4, 
add1sub1_thr
, 
add1sub1_ã°
, "add1/sub1");

181 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£_wrôe
Ë&& deföed(
AO_HAVE_lﬂd_acquúe_ªad
)

182 
	`run_∑øŒñ
(3, 
acqªl_thr
, 
acqªl_ã°
,

185 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

186 
	`run_∑øŒñ
(5, 
ã°_™d_£t_thr
, 
ã°_™d_£t_ã°
,

190 
	}
}

	@libatomic_ops-1.2/tests/test_atomic_include.h

8 
ã°_©omic
();

9 
ã°_©omic_ªÀa£
();

10 
ã°_©omic_acquúe
();

11 
ã°_©omic_ªad
();

12 
ã°_©omic_wrôe
();

13 
ã°_©omic_fuŒ
();

14 
ã°_©omic_ªÀa£_wrôe
();

15 
ã°_©omic_acquúe_ªad
();

19 #unde‡
TA_as£π


20 
	#TA_as£π
(
e
) \

21 i‡(!(
e
)Ë{ 
	`Ârötf
(
°dîr
, "Assertion failed %s:%d (barrier: )\n", \

22 
__FILE__
, 
__LINE__
), 
	`exô
(1); }

	)

24 #unde‡
MISSING


25 
	#MISSING
(
«me
) \

26 
	`Ârötf
(
°dîr
, "Missög: %s\n", #«mê"")

	)

28 
	$ã°_©omic
()

30 
AO_t
 
x
;

31 
b
;

32 
s
;

33 
zz
;

34 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t
)

35 
AO_TS_t
 
z
 = 
AO_TS_INITIALIZER
;

37 #i‡
	`deföed
(
AO_HAVE_doubÀ_t
)

38 
AO_doubÀ_t
 
w
;

39 
w
.
AO_vÆ1
 = 0;

40 
w
.
AO_vÆ2
 = 0;

43 #i‡
	`deföed
(
AO_HAVE_n›
)

44 
	`AO_n›
();

46 
	`MISSING
(
AO_n›
);

48 #i‡
	`deföed
(
AO_HAVE_°‹e
)

49 
	`AO_°‹e
(&
x
, 13);

50 
	`TA_as£π
 (
x
 == 13);

52 
	`MISSING
(
AO_°‹e
);

53 
x
 = 13;

55 #i‡
	`deföed
(
AO_HAVE_lﬂd
)

56 
	`TA_as£π
(
	`AO_lﬂd
(&
x
) == 13);

58 
	`MISSING
(
AO_lﬂd
);

60 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t
)

61 
	`as£π
(
	`AO_ã°_™d_£t
(&
z
Ë=
AO_TS_CLEAR
);

62 
	`as£π
(
	`AO_ã°_™d_£t
(&
z
Ë=
AO_TS_SET
);

63 
	`as£π
(
	`AO_ã°_™d_£t
(&
z
Ë=
AO_TS_SET
);

64 
	`AO_CLEAR
(&
z
);

66 
	`MISSING
(
AO_ã°_™d_£t
);

68 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add
)

69 
	`TA_as£π
(
	`AO_„tch_™d_add
(&
x
, 42) == 13);

70 
	`TA_as£π
(
	`AO_„tch_™d_add
(&
x
, -42) == 55);

72 
	`MISSING
(
AO_„tch_™d_add
);

74 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1
)

75 
	`TA_as£π
(
	`AO_„tch_™d_add1
(&
x
) == 13);

77 
	`MISSING
(
AO_„tch_™d_add1
);

78 ++
x
;

80 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1
)

81 
	`TA_as£π
(
	`AO_„tch_™d_sub1
(&
x
) == 14);

83 
	`MISSING
(
AO_„tch_™d_sub1
);

84 --
x
;

86 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e
)

87 
	`AO_sh‹t_°‹e
(&
s
, 13);

89 
	`MISSING
(
AO_sh‹t_°‹e
);

90 
s
 = 13;

92 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd
)

93 
	`TA_as£π
(
	`AO_sh‹t_lﬂd
(&
s
) == 13);

95 
	`MISSING
(
AO_sh‹t_lﬂd
);

97 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add
)

98 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add
(&
s
, 42) == 13);

99 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add
(&
s
, -42) == 55);

101 
	`MISSING
(
AO_sh‹t_„tch_™d_add
);

103 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1
)

104 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add1
(&
s
) == 13);

106 
	`MISSING
(
AO_sh‹t_„tch_™d_add1
);

107 ++
s
;

109 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1
)

110 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_sub1
(&
s
) == 14);

112 
	`MISSING
(
AO_sh‹t_„tch_™d_sub1
);

113 --
s
;

115 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e
)

116 
	`AO_ch¨_°‹e
(&
b
, 13);

118 
	`MISSING
(
AO_ch¨_°‹e
);

119 
b
 = 13;

121 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd
)

122 
	`TA_as£π
(
	`AO_ch¨_lﬂd
(&
b
) == 13);

124 
	`MISSING
(
AO_ch¨_lﬂd
);

126 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add
)

127 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add
(&
b
, 42) == 13);

128 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add
(&
b
, -42) == 55);

130 
	`MISSING
(
AO_ch¨_„tch_™d_add
);

132 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1
)

133 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add1
(&
b
) == 13);

135 
	`MISSING
(
AO_ch¨_„tch_™d_add1
);

136 ++
b
;

138 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1
)

139 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_sub1
(&
b
) == 14);

141 
	`MISSING
(
AO_ch¨_„tch_™d_sub1
);

142 --
b
;

144 #i‡
	`deföed
(
AO_HAVE_öt_°‹e
)

145 
	`AO_öt_°‹e
(&
zz
, 13);

147 
	`MISSING
(
AO_öt_°‹e
);

148 
zz
 = 13;

150 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd
)

151 
	`TA_as£π
(
	`AO_öt_lﬂd
(&
zz
) == 13);

153 
	`MISSING
(
AO_öt_lﬂd
);

155 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add
)

156 
	`TA_as£π
(
	`AO_öt_„tch_™d_add
(&
zz
, 42) == 13);

157 
	`TA_as£π
(
	`AO_öt_„tch_™d_add
(&
zz
, -42) == 55);

159 
	`MISSING
(
AO_öt_„tch_™d_add
);

161 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1
)

162 
	`TA_as£π
(
	`AO_öt_„tch_™d_add1
(&
zz
) == 13);

164 
	`MISSING
(
AO_öt_„tch_™d_add1
);

165 ++
zz
;

167 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1
)

168 
	`TA_as£π
(
	`AO_öt_„tch_™d_sub1
(&
zz
) == 14);

170 
	`MISSING
(
AO_öt_„tch_™d_sub1
);

171 --
zz
;

173 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠
)

174 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠
(&
x
, 14, 42));

175 
	`TA_as£π
(
x
 == 13);

176 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠
(&
x
, 13, 42));

177 
	`TA_as£π
(
x
 == 42);

179 
	`MISSING
(
AO_com∑ª_™d_sw≠
);

181 #i‡
	`deföed
(
AO_HAVE_‹
)

182 
	`AO_‹
(&
x
, 66);

183 
	`TA_as£π
(
x
 == 106);

185 
	`MISSING
(
AO_‹
);

186 
x
 |= 34;

188 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ
)

189 
	`TA_as£π
(!
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(&
w
, 17, 42, 12, 13));

190 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

191 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(&
w
, 0, 0, 12, 13));

192 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

193 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ
(&
w
, 12, 13, 17, 42));

194 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

195 
w
.
AO_vÆ1
 = 0; w.
AO_vÆ2
 = 0;

197 
	`MISSING
(
AO_com∑ª_doubÀ_™d_sw≠_doubÀ
);

199 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ
)

200 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_doubÀ
(&
w
, 17, 12, 13));

201 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

202 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ
(&
w
, 0, 12, 13));

203 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

204 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ
(&
w
, 12, 17, 42));

205 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

207 
	`MISSING
(
AO_com∑ª_™d_sw≠_doubÀ
);

209 
	}
}

222 #unde‡
TA_as£π


223 
	#TA_as£π
(
e
) \

224 i‡(!(
e
)Ë{ 
	`Ârötf
(
°dîr
, "Assertion failed %s:%d (barrier: _release)\n", \

225 
__FILE__
, 
__LINE__
), 
	`exô
(1); }

	)

227 #unde‡
MISSING


228 
	#MISSING
(
«me
) \

229 
	`Ârötf
(
°dîr
, "Missög: %s\n", #«mê"_ªÀa£")

	)

231 
	$ã°_©omic_ªÀa£
()

233 
AO_t
 
x
;

234 
b
;

235 
s
;

236 
zz
;

237 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£
)

238 
AO_TS_t
 
z
 = 
AO_TS_INITIALIZER
;

240 #i‡
	`deföed
(
AO_HAVE_doubÀ_t
)

241 
AO_doubÀ_t
 
w
;

242 
w
.
AO_vÆ1
 = 0;

243 
w
.
AO_vÆ2
 = 0;

246 #i‡
	`deföed
(
AO_HAVE_n›_ªÀa£
)

247 
	`AO_n›_ªÀa£
();

249 
	`MISSING
(
AO_n›
);

251 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£
)

252 
	`AO_°‹e_ªÀa£
(&
x
, 13);

253 
	`TA_as£π
 (
x
 == 13);

255 
	`MISSING
(
AO_°‹e
);

256 
x
 = 13;

258 #i‡
	`deföed
(
AO_HAVE_lﬂd_ªÀa£
)

259 
	`TA_as£π
(
	`AO_lﬂd_ªÀa£
(&
x
) == 13);

261 
	`MISSING
(
AO_lﬂd
);

263 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£
)

264 
	`as£π
(
	`AO_ã°_™d_£t_ªÀa£
(&
z
Ë=
AO_TS_CLEAR
);

265 
	`as£π
(
	`AO_ã°_™d_£t_ªÀa£
(&
z
Ë=
AO_TS_SET
);

266 
	`as£π
(
	`AO_ã°_™d_£t_ªÀa£
(&
z
Ë=
AO_TS_SET
);

267 
	`AO_CLEAR
(&
z
);

269 
	`MISSING
(
AO_ã°_™d_£t
);

271 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£
)

272 
	`TA_as£π
(
	`AO_„tch_™d_add_ªÀa£
(&
x
, 42) == 13);

273 
	`TA_as£π
(
	`AO_„tch_™d_add_ªÀa£
(&
x
, -42) == 55);

275 
	`MISSING
(
AO_„tch_™d_add
);

277 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£
)

278 
	`TA_as£π
(
	`AO_„tch_™d_add1_ªÀa£
(&
x
) == 13);

280 
	`MISSING
(
AO_„tch_™d_add1
);

281 ++
x
;

283 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£
)

284 
	`TA_as£π
(
	`AO_„tch_™d_sub1_ªÀa£
(&
x
) == 14);

286 
	`MISSING
(
AO_„tch_™d_sub1
);

287 --
x
;

289 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£
)

290 
	`AO_sh‹t_°‹e_ªÀa£
(&
s
, 13);

292 
	`MISSING
(
AO_sh‹t_°‹e
);

293 
s
 = 13;

295 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_ªÀa£
)

296 
	`TA_as£π
(
	`AO_sh‹t_lﬂd
(&
s
) == 13);

298 
	`MISSING
(
AO_sh‹t_lﬂd
);

300 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£
)

301 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_ªÀa£
(&
s
, 42) == 13);

302 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_ªÀa£
(&
s
, -42) == 55);

304 
	`MISSING
(
AO_sh‹t_„tch_™d_add
);

306 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£
)

307 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add1_ªÀa£
(&
s
) == 13);

309 
	`MISSING
(
AO_sh‹t_„tch_™d_add1
);

310 ++
s
;

312 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£
)

313 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_sub1_ªÀa£
(&
s
) == 14);

315 
	`MISSING
(
AO_sh‹t_„tch_™d_sub1
);

316 --
s
;

318 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£
)

319 
	`AO_ch¨_°‹e_ªÀa£
(&
b
, 13);

321 
	`MISSING
(
AO_ch¨_°‹e
);

322 
b
 = 13;

324 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd_ªÀa£
)

325 
	`TA_as£π
(
	`AO_ch¨_lﬂd
(&
b
) == 13);

327 
	`MISSING
(
AO_ch¨_lﬂd
);

329 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£
)

330 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_ªÀa£
(&
b
, 42) == 13);

331 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_ªÀa£
(&
b
, -42) == 55);

333 
	`MISSING
(
AO_ch¨_„tch_™d_add
);

335 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£
)

336 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add1_ªÀa£
(&
b
) == 13);

338 
	`MISSING
(
AO_ch¨_„tch_™d_add1
);

339 ++
b
;

341 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£
)

342 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_sub1_ªÀa£
(&
b
) == 14);

344 
	`MISSING
(
AO_ch¨_„tch_™d_sub1
);

345 --
b
;

347 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_ªÀa£
)

348 
	`AO_öt_°‹e_ªÀa£
(&
zz
, 13);

350 
	`MISSING
(
AO_öt_°‹e
);

351 
zz
 = 13;

353 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_ªÀa£
)

354 
	`TA_as£π
(
	`AO_öt_lﬂd
(&
zz
) == 13);

356 
	`MISSING
(
AO_öt_lﬂd
);

358 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£
)

359 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_ªÀa£
(&
zz
, 42) == 13);

360 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_ªÀa£
(&
zz
, -42) == 55);

362 
	`MISSING
(
AO_öt_„tch_™d_add
);

364 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£
)

365 
	`TA_as£π
(
	`AO_öt_„tch_™d_add1_ªÀa£
(&
zz
) == 13);

367 
	`MISSING
(
AO_öt_„tch_™d_add1
);

368 ++
zz
;

370 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£
)

371 
	`TA_as£π
(
	`AO_öt_„tch_™d_sub1_ªÀa£
(&
zz
) == 14);

373 
	`MISSING
(
AO_öt_„tch_™d_sub1
);

374 --
zz
;

376 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£
)

377 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_ªÀa£
(&
x
, 14, 42));

378 
	`TA_as£π
(
x
 == 13);

379 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_ªÀa£
(&
x
, 13, 42));

380 
	`TA_as£π
(
x
 == 42);

382 
	`MISSING
(
AO_com∑ª_™d_sw≠
);

384 #i‡
	`deföed
(
AO_HAVE_‹_ªÀa£
)

385 
	`AO_‹_ªÀa£
(&
x
, 66);

386 
	`TA_as£π
(
x
 == 106);

388 
	`MISSING
(
AO_‹
);

389 
x
 |= 34;

391 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
)

392 
	`TA_as£π
(!
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
(&
w
, 17, 42, 12, 13));

393 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

394 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
(&
w
, 0, 0, 12, 13));

395 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

396 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£
(&
w
, 12, 13, 17, 42));

397 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

398 
w
.
AO_vÆ1
 = 0; w.
AO_vÆ2
 = 0;

400 
	`MISSING
(
AO_com∑ª_doubÀ_™d_sw≠_doubÀ
);

402 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£
)

403 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_doubÀ_ªÀa£
(&
w
, 17, 12, 13));

404 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

405 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_ªÀa£
(&
w
, 0, 12, 13));

406 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

407 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_ªÀa£
(&
w
, 12, 17, 42));

408 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

410 
	`MISSING
(
AO_com∑ª_™d_sw≠_doubÀ
);

412 
	}
}

425 #unde‡
TA_as£π


426 
	#TA_as£π
(
e
) \

427 i‡(!(
e
)Ë{ 
	`Ârötf
(
°dîr
, "Assertion failed %s:%d (barrier: _acquire)\n", \

428 
__FILE__
, 
__LINE__
), 
	`exô
(1); }

	)

430 #unde‡
MISSING


431 
	#MISSING
(
«me
) \

432 
	`Ârötf
(
°dîr
, "Missög: %s\n", #«mê"_acquúe")

	)

434 
	$ã°_©omic_acquúe
()

436 
AO_t
 
x
;

437 
b
;

438 
s
;

439 
zz
;

440 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

441 
AO_TS_t
 
z
 = 
AO_TS_INITIALIZER
;

443 #i‡
	`deföed
(
AO_HAVE_doubÀ_t
)

444 
AO_doubÀ_t
 
w
;

445 
w
.
AO_vÆ1
 = 0;

446 
w
.
AO_vÆ2
 = 0;

449 #i‡
	`deföed
(
AO_HAVE_n›_acquúe
)

450 
	`AO_n›_acquúe
();

452 
	`MISSING
(
AO_n›
);

454 #i‡
	`deföed
(
AO_HAVE_°‹e_acquúe
)

455 
	`AO_°‹e_acquúe
(&
x
, 13);

456 
	`TA_as£π
 (
x
 == 13);

458 
	`MISSING
(
AO_°‹e
);

459 
x
 = 13;

461 #i‡
	`deföed
(
AO_HAVE_lﬂd_acquúe
)

462 
	`TA_as£π
(
	`AO_lﬂd_acquúe
(&
x
) == 13);

464 
	`MISSING
(
AO_lﬂd
);

466 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe
)

467 
	`as£π
(
	`AO_ã°_™d_£t_acquúe
(&
z
Ë=
AO_TS_CLEAR
);

468 
	`as£π
(
	`AO_ã°_™d_£t_acquúe
(&
z
Ë=
AO_TS_SET
);

469 
	`as£π
(
	`AO_ã°_™d_£t_acquúe
(&
z
Ë=
AO_TS_SET
);

470 
	`AO_CLEAR
(&
z
);

472 
	`MISSING
(
AO_ã°_™d_£t
);

474 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe
)

475 
	`TA_as£π
(
	`AO_„tch_™d_add_acquúe
(&
x
, 42) == 13);

476 
	`TA_as£π
(
	`AO_„tch_™d_add_acquúe
(&
x
, -42) == 55);

478 
	`MISSING
(
AO_„tch_™d_add
);

480 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe
)

481 
	`TA_as£π
(
	`AO_„tch_™d_add1_acquúe
(&
x
) == 13);

483 
	`MISSING
(
AO_„tch_™d_add1
);

484 ++
x
;

486 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe
)

487 
	`TA_as£π
(
	`AO_„tch_™d_sub1_acquúe
(&
x
) == 14);

489 
	`MISSING
(
AO_„tch_™d_sub1
);

490 --
x
;

492 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_acquúe
)

493 
	`AO_sh‹t_°‹e_acquúe
(&
s
, 13);

495 
	`MISSING
(
AO_sh‹t_°‹e
);

496 
s
 = 13;

498 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe
)

499 
	`TA_as£π
(
	`AO_sh‹t_lﬂd
(&
s
) == 13);

501 
	`MISSING
(
AO_sh‹t_lﬂd
);

503 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe
)

504 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_acquúe
(&
s
, 42) == 13);

505 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_acquúe
(&
s
, -42) == 55);

507 
	`MISSING
(
AO_sh‹t_„tch_™d_add
);

509 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe
)

510 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add1_acquúe
(&
s
) == 13);

512 
	`MISSING
(
AO_sh‹t_„tch_™d_add1
);

513 ++
s
;

515 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe
)

516 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_sub1_acquúe
(&
s
) == 14);

518 
	`MISSING
(
AO_sh‹t_„tch_™d_sub1
);

519 --
s
;

521 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_acquúe
)

522 
	`AO_ch¨_°‹e_acquúe
(&
b
, 13);

524 
	`MISSING
(
AO_ch¨_°‹e
);

525 
b
 = 13;

527 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd_acquúe
)

528 
	`TA_as£π
(
	`AO_ch¨_lﬂd
(&
b
) == 13);

530 
	`MISSING
(
AO_ch¨_lﬂd
);

532 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe
)

533 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_acquúe
(&
b
, 42) == 13);

534 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_acquúe
(&
b
, -42) == 55);

536 
	`MISSING
(
AO_ch¨_„tch_™d_add
);

538 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe
)

539 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add1_acquúe
(&
b
) == 13);

541 
	`MISSING
(
AO_ch¨_„tch_™d_add1
);

542 ++
b
;

544 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe
)

545 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_sub1_acquúe
(&
b
) == 14);

547 
	`MISSING
(
AO_ch¨_„tch_™d_sub1
);

548 --
b
;

550 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_acquúe
)

551 
	`AO_öt_°‹e_acquúe
(&
zz
, 13);

553 
	`MISSING
(
AO_öt_°‹e
);

554 
zz
 = 13;

556 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_acquúe
)

557 
	`TA_as£π
(
	`AO_öt_lﬂd
(&
zz
) == 13);

559 
	`MISSING
(
AO_öt_lﬂd
);

561 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe
)

562 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_acquúe
(&
zz
, 42) == 13);

563 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_acquúe
(&
zz
, -42) == 55);

565 
	`MISSING
(
AO_öt_„tch_™d_add
);

567 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe
)

568 
	`TA_as£π
(
	`AO_öt_„tch_™d_add1_acquúe
(&
zz
) == 13);

570 
	`MISSING
(
AO_öt_„tch_™d_add1
);

571 ++
zz
;

573 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe
)

574 
	`TA_as£π
(
	`AO_öt_„tch_™d_sub1_acquúe
(&
zz
) == 14);

576 
	`MISSING
(
AO_öt_„tch_™d_sub1
);

577 --
zz
;

579 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe
)

580 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_acquúe
(&
x
, 14, 42));

581 
	`TA_as£π
(
x
 == 13);

582 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_acquúe
(&
x
, 13, 42));

583 
	`TA_as£π
(
x
 == 42);

585 
	`MISSING
(
AO_com∑ª_™d_sw≠
);

587 #i‡
	`deföed
(
AO_HAVE_‹_acquúe
)

588 
	`AO_‹_acquúe
(&
x
, 66);

589 
	`TA_as£π
(
x
 == 106);

591 
	`MISSING
(
AO_‹
);

592 
x
 |= 34;

594 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
)

595 
	`TA_as£π
(!
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(&
w
, 17, 42, 12, 13));

596 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

597 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(&
w
, 0, 0, 12, 13));

598 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

599 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe
(&
w
, 12, 13, 17, 42));

600 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

601 
w
.
AO_vÆ1
 = 0; w.
AO_vÆ2
 = 0;

603 
	`MISSING
(
AO_com∑ª_doubÀ_™d_sw≠_doubÀ
);

605 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe
)

606 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe
(&
w
, 17, 12, 13));

607 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

608 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe
(&
w
, 0, 12, 13));

609 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

610 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe
(&
w
, 12, 17, 42));

611 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

613 
	`MISSING
(
AO_com∑ª_™d_sw≠_doubÀ
);

615 
	}
}

628 #unde‡
TA_as£π


629 
	#TA_as£π
(
e
) \

630 i‡(!(
e
)Ë{ 
	`Ârötf
(
°dîr
, "Assertion failed %s:%d (barrier: _read)\n", \

631 
__FILE__
, 
__LINE__
), 
	`exô
(1); }

	)

633 #unde‡
MISSING


634 
	#MISSING
(
«me
) \

635 
	`Ârötf
(
°dîr
, "Missög: %s\n", #«mê"_ªad")

	)

637 
	$ã°_©omic_ªad
()

639 
AO_t
 
x
;

640 
b
;

641 
s
;

642 
zz
;

643 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_ªad
)

644 
AO_TS_t
 
z
 = 
AO_TS_INITIALIZER
;

646 #i‡
	`deföed
(
AO_HAVE_doubÀ_t
)

647 
AO_doubÀ_t
 
w
;

648 
w
.
AO_vÆ1
 = 0;

649 
w
.
AO_vÆ2
 = 0;

652 #i‡
	`deföed
(
AO_HAVE_n›_ªad
)

653 
	`AO_n›_ªad
();

655 
	`MISSING
(
AO_n›
);

657 #i‡
	`deföed
(
AO_HAVE_°‹e_ªad
)

658 
	`AO_°‹e_ªad
(&
x
, 13);

659 
	`TA_as£π
 (
x
 == 13);

661 
	`MISSING
(
AO_°‹e
);

662 
x
 = 13;

664 #i‡
	`deföed
(
AO_HAVE_lﬂd_ªad
)

665 
	`TA_as£π
(
	`AO_lﬂd_ªad
(&
x
) == 13);

667 
	`MISSING
(
AO_lﬂd
);

669 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_ªad
)

670 
	`as£π
(
	`AO_ã°_™d_£t_ªad
(&
z
Ë=
AO_TS_CLEAR
);

671 
	`as£π
(
	`AO_ã°_™d_£t_ªad
(&
z
Ë=
AO_TS_SET
);

672 
	`as£π
(
	`AO_ã°_™d_£t_ªad
(&
z
Ë=
AO_TS_SET
);

673 
	`AO_CLEAR
(&
z
);

675 
	`MISSING
(
AO_ã°_™d_£t
);

677 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªad
)

678 
	`TA_as£π
(
	`AO_„tch_™d_add_ªad
(&
x
, 42) == 13);

679 
	`TA_as£π
(
	`AO_„tch_™d_add_ªad
(&
x
, -42) == 55);

681 
	`MISSING
(
AO_„tch_™d_add
);

683 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_ªad
)

684 
	`TA_as£π
(
	`AO_„tch_™d_add1_ªad
(&
x
) == 13);

686 
	`MISSING
(
AO_„tch_™d_add1
);

687 ++
x
;

689 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªad
)

690 
	`TA_as£π
(
	`AO_„tch_™d_sub1_ªad
(&
x
) == 14);

692 
	`MISSING
(
AO_„tch_™d_sub1
);

693 --
x
;

695 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_ªad
)

696 
	`AO_sh‹t_°‹e_ªad
(&
s
, 13);

698 
	`MISSING
(
AO_sh‹t_°‹e
);

699 
s
 = 13;

701 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_ªad
)

702 
	`TA_as£π
(
	`AO_sh‹t_lﬂd
(&
s
) == 13);

704 
	`MISSING
(
AO_sh‹t_lﬂd
);

706 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªad
)

707 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_ªad
(&
s
, 42) == 13);

708 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_ªad
(&
s
, -42) == 55);

710 
	`MISSING
(
AO_sh‹t_„tch_™d_add
);

712 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªad
)

713 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add1_ªad
(&
s
) == 13);

715 
	`MISSING
(
AO_sh‹t_„tch_™d_add1
);

716 ++
s
;

718 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªad
)

719 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_sub1_ªad
(&
s
) == 14);

721 
	`MISSING
(
AO_sh‹t_„tch_™d_sub1
);

722 --
s
;

724 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_ªad
)

725 
	`AO_ch¨_°‹e_ªad
(&
b
, 13);

727 
	`MISSING
(
AO_ch¨_°‹e
);

728 
b
 = 13;

730 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd_ªad
)

731 
	`TA_as£π
(
	`AO_ch¨_lﬂd
(&
b
) == 13);

733 
	`MISSING
(
AO_ch¨_lﬂd
);

735 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªad
)

736 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_ªad
(&
b
, 42) == 13);

737 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_ªad
(&
b
, -42) == 55);

739 
	`MISSING
(
AO_ch¨_„tch_™d_add
);

741 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªad
)

742 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add1_ªad
(&
b
) == 13);

744 
	`MISSING
(
AO_ch¨_„tch_™d_add1
);

745 ++
b
;

747 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªad
)

748 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_sub1_ªad
(&
b
) == 14);

750 
	`MISSING
(
AO_ch¨_„tch_™d_sub1
);

751 --
b
;

753 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_ªad
)

754 
	`AO_öt_°‹e_ªad
(&
zz
, 13);

756 
	`MISSING
(
AO_öt_°‹e
);

757 
zz
 = 13;

759 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_ªad
)

760 
	`TA_as£π
(
	`AO_öt_lﬂd
(&
zz
) == 13);

762 
	`MISSING
(
AO_öt_lﬂd
);

764 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªad
)

765 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_ªad
(&
zz
, 42) == 13);

766 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_ªad
(&
zz
, -42) == 55);

768 
	`MISSING
(
AO_öt_„tch_™d_add
);

770 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_ªad
)

771 
	`TA_as£π
(
	`AO_öt_„tch_™d_add1_ªad
(&
zz
) == 13);

773 
	`MISSING
(
AO_öt_„tch_™d_add1
);

774 ++
zz
;

776 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªad
)

777 
	`TA_as£π
(
	`AO_öt_„tch_™d_sub1_ªad
(&
zz
) == 14);

779 
	`MISSING
(
AO_öt_„tch_™d_sub1
);

780 --
zz
;

782 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªad
)

783 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_ªad
(&
x
, 14, 42));

784 
	`TA_as£π
(
x
 == 13);

785 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_ªad
(&
x
, 13, 42));

786 
	`TA_as£π
(
x
 == 42);

788 
	`MISSING
(
AO_com∑ª_™d_sw≠
);

790 #i‡
	`deföed
(
AO_HAVE_‹_ªad
)

791 
	`AO_‹_ªad
(&
x
, 66);

792 
	`TA_as£π
(
x
 == 106);

794 
	`MISSING
(
AO_‹
);

795 
x
 |= 34;

797 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
)

798 
	`TA_as£π
(!
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
(&
w
, 17, 42, 12, 13));

799 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

800 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
(&
w
, 0, 0, 12, 13));

801 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

802 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªad
(&
w
, 12, 13, 17, 42));

803 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

804 
w
.
AO_vÆ1
 = 0; w.
AO_vÆ2
 = 0;

806 
	`MISSING
(
AO_com∑ª_doubÀ_™d_sw≠_doubÀ
);

808 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªad
)

809 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_doubÀ_ªad
(&
w
, 17, 12, 13));

810 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

811 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_ªad
(&
w
, 0, 12, 13));

812 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

813 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_ªad
(&
w
, 12, 17, 42));

814 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

816 
	`MISSING
(
AO_com∑ª_™d_sw≠_doubÀ
);

818 
	}
}

831 #unde‡
TA_as£π


832 
	#TA_as£π
(
e
) \

833 i‡(!(
e
)Ë{ 
	`Ârötf
(
°dîr
, "Assertion failed %s:%d (barrier: _write)\n", \

834 
__FILE__
, 
__LINE__
), 
	`exô
(1); }

	)

836 #unde‡
MISSING


837 
	#MISSING
(
«me
) \

838 
	`Ârötf
(
°dîr
, "Missög: %s\n", #«mê"_wrôe")

	)

840 
	$ã°_©omic_wrôe
()

842 
AO_t
 
x
;

843 
b
;

844 
s
;

845 
zz
;

846 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_wrôe
)

847 
AO_TS_t
 
z
 = 
AO_TS_INITIALIZER
;

849 #i‡
	`deföed
(
AO_HAVE_doubÀ_t
)

850 
AO_doubÀ_t
 
w
;

851 
w
.
AO_vÆ1
 = 0;

852 
w
.
AO_vÆ2
 = 0;

855 #i‡
	`deföed
(
AO_HAVE_n›_wrôe
)

856 
	`AO_n›_wrôe
();

858 
	`MISSING
(
AO_n›
);

860 #i‡
	`deföed
(
AO_HAVE_°‹e_wrôe
)

861 
	`AO_°‹e_wrôe
(&
x
, 13);

862 
	`TA_as£π
 (
x
 == 13);

864 
	`MISSING
(
AO_°‹e
);

865 
x
 = 13;

867 #i‡
	`deföed
(
AO_HAVE_lﬂd_wrôe
)

868 
	`TA_as£π
(
	`AO_lﬂd_wrôe
(&
x
) == 13);

870 
	`MISSING
(
AO_lﬂd
);

872 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_wrôe
)

873 
	`as£π
(
	`AO_ã°_™d_£t_wrôe
(&
z
Ë=
AO_TS_CLEAR
);

874 
	`as£π
(
	`AO_ã°_™d_£t_wrôe
(&
z
Ë=
AO_TS_SET
);

875 
	`as£π
(
	`AO_ã°_™d_£t_wrôe
(&
z
Ë=
AO_TS_SET
);

876 
	`AO_CLEAR
(&
z
);

878 
	`MISSING
(
AO_ã°_™d_£t
);

880 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_wrôe
)

881 
	`TA_as£π
(
	`AO_„tch_™d_add_wrôe
(&
x
, 42) == 13);

882 
	`TA_as£π
(
	`AO_„tch_™d_add_wrôe
(&
x
, -42) == 55);

884 
	`MISSING
(
AO_„tch_™d_add
);

886 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_wrôe
)

887 
	`TA_as£π
(
	`AO_„tch_™d_add1_wrôe
(&
x
) == 13);

889 
	`MISSING
(
AO_„tch_™d_add1
);

890 ++
x
;

892 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_wrôe
)

893 
	`TA_as£π
(
	`AO_„tch_™d_sub1_wrôe
(&
x
) == 14);

895 
	`MISSING
(
AO_„tch_™d_sub1
);

896 --
x
;

898 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_wrôe
)

899 
	`AO_sh‹t_°‹e_wrôe
(&
s
, 13);

901 
	`MISSING
(
AO_sh‹t_°‹e
);

902 
s
 = 13;

904 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_wrôe
)

905 
	`TA_as£π
(
	`AO_sh‹t_lﬂd
(&
s
) == 13);

907 
	`MISSING
(
AO_sh‹t_lﬂd
);

909 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_wrôe
)

910 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_wrôe
(&
s
, 42) == 13);

911 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_wrôe
(&
s
, -42) == 55);

913 
	`MISSING
(
AO_sh‹t_„tch_™d_add
);

915 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_wrôe
)

916 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add1_wrôe
(&
s
) == 13);

918 
	`MISSING
(
AO_sh‹t_„tch_™d_add1
);

919 ++
s
;

921 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_wrôe
)

922 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_sub1_wrôe
(&
s
) == 14);

924 
	`MISSING
(
AO_sh‹t_„tch_™d_sub1
);

925 --
s
;

927 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_wrôe
)

928 
	`AO_ch¨_°‹e_wrôe
(&
b
, 13);

930 
	`MISSING
(
AO_ch¨_°‹e
);

931 
b
 = 13;

933 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd_wrôe
)

934 
	`TA_as£π
(
	`AO_ch¨_lﬂd
(&
b
) == 13);

936 
	`MISSING
(
AO_ch¨_lﬂd
);

938 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_wrôe
)

939 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_wrôe
(&
b
, 42) == 13);

940 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_wrôe
(&
b
, -42) == 55);

942 
	`MISSING
(
AO_ch¨_„tch_™d_add
);

944 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_wrôe
)

945 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add1_wrôe
(&
b
) == 13);

947 
	`MISSING
(
AO_ch¨_„tch_™d_add1
);

948 ++
b
;

950 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_wrôe
)

951 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_sub1_wrôe
(&
b
) == 14);

953 
	`MISSING
(
AO_ch¨_„tch_™d_sub1
);

954 --
b
;

956 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_wrôe
)

957 
	`AO_öt_°‹e_wrôe
(&
zz
, 13);

959 
	`MISSING
(
AO_öt_°‹e
);

960 
zz
 = 13;

962 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_wrôe
)

963 
	`TA_as£π
(
	`AO_öt_lﬂd
(&
zz
) == 13);

965 
	`MISSING
(
AO_öt_lﬂd
);

967 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_wrôe
)

968 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_wrôe
(&
zz
, 42) == 13);

969 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_wrôe
(&
zz
, -42) == 55);

971 
	`MISSING
(
AO_öt_„tch_™d_add
);

973 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_wrôe
)

974 
	`TA_as£π
(
	`AO_öt_„tch_™d_add1_wrôe
(&
zz
) == 13);

976 
	`MISSING
(
AO_öt_„tch_™d_add1
);

977 ++
zz
;

979 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_wrôe
)

980 
	`TA_as£π
(
	`AO_öt_„tch_™d_sub1_wrôe
(&
zz
) == 14);

982 
	`MISSING
(
AO_öt_„tch_™d_sub1
);

983 --
zz
;

985 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_wrôe
)

986 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_wrôe
(&
x
, 14, 42));

987 
	`TA_as£π
(
x
 == 13);

988 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_wrôe
(&
x
, 13, 42));

989 
	`TA_as£π
(
x
 == 42);

991 
	`MISSING
(
AO_com∑ª_™d_sw≠
);

993 #i‡
	`deföed
(
AO_HAVE_‹_wrôe
)

994 
	`AO_‹_wrôe
(&
x
, 66);

995 
	`TA_as£π
(
x
 == 106);

997 
	`MISSING
(
AO_‹
);

998 
x
 |= 34;

1000 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
)

1001 
	`TA_as£π
(!
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
(&
w
, 17, 42, 12, 13));

1002 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

1003 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
(&
w
, 0, 0, 12, 13));

1004 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

1005 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_wrôe
(&
w
, 12, 13, 17, 42));

1006 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

1007 
w
.
AO_vÆ1
 = 0; w.
AO_vÆ2
 = 0;

1009 
	`MISSING
(
AO_com∑ª_doubÀ_™d_sw≠_doubÀ
);

1011 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_wrôe
)

1012 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_doubÀ_wrôe
(&
w
, 17, 12, 13));

1013 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

1014 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_wrôe
(&
w
, 0, 12, 13));

1015 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

1016 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_wrôe
(&
w
, 12, 17, 42));

1017 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

1019 
	`MISSING
(
AO_com∑ª_™d_sw≠_doubÀ
);

1021 
	}
}

1034 #unde‡
TA_as£π


1035 
	#TA_as£π
(
e
) \

1036 i‡(!(
e
)Ë{ 
	`Ârötf
(
°dîr
, "Assertion failed %s:%d (barrier: _full)\n", \

1037 
__FILE__
, 
__LINE__
), 
	`exô
(1); }

	)

1039 #unde‡
MISSING


1040 
	#MISSING
(
«me
) \

1041 
	`Ârötf
(
°dîr
, "Missög: %s\n", #«mê"_fuŒ")

	)

1043 
	$ã°_©omic_fuŒ
()

1045 
AO_t
 
x
;

1046 
b
;

1047 
s
;

1048 
zz
;

1049 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_fuŒ
)

1050 
AO_TS_t
 
z
 = 
AO_TS_INITIALIZER
;

1052 #i‡
	`deföed
(
AO_HAVE_doubÀ_t
)

1053 
AO_doubÀ_t
 
w
;

1054 
w
.
AO_vÆ1
 = 0;

1055 
w
.
AO_vÆ2
 = 0;

1058 #i‡
	`deföed
(
AO_HAVE_n›_fuŒ
)

1059 
	`AO_n›_fuŒ
();

1061 
	`MISSING
(
AO_n›
);

1063 #i‡
	`deföed
(
AO_HAVE_°‹e_fuŒ
)

1064 
	`AO_°‹e_fuŒ
(&
x
, 13);

1065 
	`TA_as£π
 (
x
 == 13);

1067 
	`MISSING
(
AO_°‹e
);

1068 
x
 = 13;

1070 #i‡
	`deföed
(
AO_HAVE_lﬂd_fuŒ
)

1071 
	`TA_as£π
(
	`AO_lﬂd_fuŒ
(&
x
) == 13);

1073 
	`MISSING
(
AO_lﬂd
);

1075 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_fuŒ
)

1076 
	`as£π
(
	`AO_ã°_™d_£t_fuŒ
(&
z
Ë=
AO_TS_CLEAR
);

1077 
	`as£π
(
	`AO_ã°_™d_£t_fuŒ
(&
z
Ë=
AO_TS_SET
);

1078 
	`as£π
(
	`AO_ã°_™d_£t_fuŒ
(&
z
Ë=
AO_TS_SET
);

1079 
	`AO_CLEAR
(&
z
);

1081 
	`MISSING
(
AO_ã°_™d_£t
);

1083 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_fuŒ
)

1084 
	`TA_as£π
(
	`AO_„tch_™d_add_fuŒ
(&
x
, 42) == 13);

1085 
	`TA_as£π
(
	`AO_„tch_™d_add_fuŒ
(&
x
, -42) == 55);

1087 
	`MISSING
(
AO_„tch_™d_add
);

1089 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_fuŒ
)

1090 
	`TA_as£π
(
	`AO_„tch_™d_add1_fuŒ
(&
x
) == 13);

1092 
	`MISSING
(
AO_„tch_™d_add1
);

1093 ++
x
;

1095 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_fuŒ
)

1096 
	`TA_as£π
(
	`AO_„tch_™d_sub1_fuŒ
(&
x
) == 14);

1098 
	`MISSING
(
AO_„tch_™d_sub1
);

1099 --
x
;

1101 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_fuŒ
)

1102 
	`AO_sh‹t_°‹e_fuŒ
(&
s
, 13);

1104 
	`MISSING
(
AO_sh‹t_°‹e
);

1105 
s
 = 13;

1107 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_fuŒ
)

1108 
	`TA_as£π
(
	`AO_sh‹t_lﬂd
(&
s
) == 13);

1110 
	`MISSING
(
AO_sh‹t_lﬂd
);

1112 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_fuŒ
)

1113 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_fuŒ
(&
s
, 42) == 13);

1114 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_fuŒ
(&
s
, -42) == 55);

1116 
	`MISSING
(
AO_sh‹t_„tch_™d_add
);

1118 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_fuŒ
)

1119 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add1_fuŒ
(&
s
) == 13);

1121 
	`MISSING
(
AO_sh‹t_„tch_™d_add1
);

1122 ++
s
;

1124 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_fuŒ
)

1125 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_sub1_fuŒ
(&
s
) == 14);

1127 
	`MISSING
(
AO_sh‹t_„tch_™d_sub1
);

1128 --
s
;

1130 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_fuŒ
)

1131 
	`AO_ch¨_°‹e_fuŒ
(&
b
, 13);

1133 
	`MISSING
(
AO_ch¨_°‹e
);

1134 
b
 = 13;

1136 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd_fuŒ
)

1137 
	`TA_as£π
(
	`AO_ch¨_lﬂd
(&
b
) == 13);

1139 
	`MISSING
(
AO_ch¨_lﬂd
);

1141 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_fuŒ
)

1142 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_fuŒ
(&
b
, 42) == 13);

1143 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_fuŒ
(&
b
, -42) == 55);

1145 
	`MISSING
(
AO_ch¨_„tch_™d_add
);

1147 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_fuŒ
)

1148 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add1_fuŒ
(&
b
) == 13);

1150 
	`MISSING
(
AO_ch¨_„tch_™d_add1
);

1151 ++
b
;

1153 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_fuŒ
)

1154 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_sub1_fuŒ
(&
b
) == 14);

1156 
	`MISSING
(
AO_ch¨_„tch_™d_sub1
);

1157 --
b
;

1159 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_fuŒ
)

1160 
	`AO_öt_°‹e_fuŒ
(&
zz
, 13);

1162 
	`MISSING
(
AO_öt_°‹e
);

1163 
zz
 = 13;

1165 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_fuŒ
)

1166 
	`TA_as£π
(
	`AO_öt_lﬂd
(&
zz
) == 13);

1168 
	`MISSING
(
AO_öt_lﬂd
);

1170 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_fuŒ
)

1171 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_fuŒ
(&
zz
, 42) == 13);

1172 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_fuŒ
(&
zz
, -42) == 55);

1174 
	`MISSING
(
AO_öt_„tch_™d_add
);

1176 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_fuŒ
)

1177 
	`TA_as£π
(
	`AO_öt_„tch_™d_add1_fuŒ
(&
zz
) == 13);

1179 
	`MISSING
(
AO_öt_„tch_™d_add1
);

1180 ++
zz
;

1182 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_fuŒ
)

1183 
	`TA_as£π
(
	`AO_öt_„tch_™d_sub1_fuŒ
(&
zz
) == 14);

1185 
	`MISSING
(
AO_öt_„tch_™d_sub1
);

1186 --
zz
;

1188 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_fuŒ
)

1189 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_fuŒ
(&
x
, 14, 42));

1190 
	`TA_as£π
(
x
 == 13);

1191 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_fuŒ
(&
x
, 13, 42));

1192 
	`TA_as£π
(
x
 == 42);

1194 
	`MISSING
(
AO_com∑ª_™d_sw≠
);

1196 #i‡
	`deföed
(
AO_HAVE_‹_fuŒ
)

1197 
	`AO_‹_fuŒ
(&
x
, 66);

1198 
	`TA_as£π
(
x
 == 106);

1200 
	`MISSING
(
AO_‹
);

1201 
x
 |= 34;

1203 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
)

1204 
	`TA_as£π
(!
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(&
w
, 17, 42, 12, 13));

1205 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

1206 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(&
w
, 0, 0, 12, 13));

1207 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

1208 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_fuŒ
(&
w
, 12, 13, 17, 42));

1209 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

1210 
w
.
AO_vÆ1
 = 0; w.
AO_vÆ2
 = 0;

1212 
	`MISSING
(
AO_com∑ª_doubÀ_™d_sw≠_doubÀ
);

1214 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_fuŒ
)

1215 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(&
w
, 17, 12, 13));

1216 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

1217 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(&
w
, 0, 12, 13));

1218 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

1219 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_fuŒ
(&
w
, 12, 17, 42));

1220 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

1222 
	`MISSING
(
AO_com∑ª_™d_sw≠_doubÀ
);

1224 
	}
}

1237 #unde‡
TA_as£π


1238 
	#TA_as£π
(
e
) \

1239 i‡(!(
e
)Ë{ 
	`Ârötf
(
°dîr
, "Assertion failed %s:%d (barrier: _release_write)\n", \

1240 
__FILE__
, 
__LINE__
), 
	`exô
(1); }

	)

1242 #unde‡
MISSING


1243 
	#MISSING
(
«me
) \

1244 
	`Ârötf
(
°dîr
, "Missög: %s\n", #«mê"_ªÀa£_wrôe")

	)

1246 
	$ã°_©omic_ªÀa£_wrôe
()

1248 
AO_t
 
x
;

1249 
b
;

1250 
s
;

1251 
zz
;

1252 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£_wrôe
)

1253 
AO_TS_t
 
z
 = 
AO_TS_INITIALIZER
;

1255 #i‡
	`deföed
(
AO_HAVE_doubÀ_t
)

1256 
AO_doubÀ_t
 
w
;

1257 
w
.
AO_vÆ1
 = 0;

1258 
w
.
AO_vÆ2
 = 0;

1261 #i‡
	`deföed
(
AO_HAVE_n›_ªÀa£_wrôe
)

1262 
	`AO_n›_ªÀa£_wrôe
();

1264 
	`MISSING
(
AO_n›
);

1266 #i‡
	`deföed
(
AO_HAVE_°‹e_ªÀa£_wrôe
)

1267 
	`AO_°‹e_ªÀa£_wrôe
(&
x
, 13);

1268 
	`TA_as£π
 (
x
 == 13);

1270 
	`MISSING
(
AO_°‹e
);

1271 
x
 = 13;

1273 #i‡
	`deföed
(
AO_HAVE_lﬂd_ªÀa£_wrôe
)

1274 
	`TA_as£π
(
	`AO_lﬂd_ªÀa£_wrôe
(&
x
) == 13);

1276 
	`MISSING
(
AO_lﬂd
);

1278 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_ªÀa£_wrôe
)

1279 
	`as£π
(
	`AO_ã°_™d_£t_ªÀa£_wrôe
(&
z
Ë=
AO_TS_CLEAR
);

1280 
	`as£π
(
	`AO_ã°_™d_£t_ªÀa£_wrôe
(&
z
Ë=
AO_TS_SET
);

1281 
	`as£π
(
	`AO_ã°_™d_£t_ªÀa£_wrôe
(&
z
Ë=
AO_TS_SET
);

1282 
	`AO_CLEAR
(&
z
);

1284 
	`MISSING
(
AO_ã°_™d_£t
);

1286 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_ªÀa£_wrôe
)

1287 
	`TA_as£π
(
	`AO_„tch_™d_add_ªÀa£_wrôe
(&
x
, 42) == 13);

1288 
	`TA_as£π
(
	`AO_„tch_™d_add_ªÀa£_wrôe
(&
x
, -42) == 55);

1290 
	`MISSING
(
AO_„tch_™d_add
);

1292 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_ªÀa£_wrôe
)

1293 
	`TA_as£π
(
	`AO_„tch_™d_add1_ªÀa£_wrôe
(&
x
) == 13);

1295 
	`MISSING
(
AO_„tch_™d_add1
);

1296 ++
x
;

1298 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_ªÀa£_wrôe
)

1299 
	`TA_as£π
(
	`AO_„tch_™d_sub1_ªÀa£_wrôe
(&
x
) == 14);

1301 
	`MISSING
(
AO_„tch_™d_sub1
);

1302 --
x
;

1304 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_ªÀa£_wrôe
)

1305 
	`AO_sh‹t_°‹e_ªÀa£_wrôe
(&
s
, 13);

1307 
	`MISSING
(
AO_sh‹t_°‹e
);

1308 
s
 = 13;

1310 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_ªÀa£_wrôe
)

1311 
	`TA_as£π
(
	`AO_sh‹t_lﬂd
(&
s
) == 13);

1313 
	`MISSING
(
AO_sh‹t_lﬂd
);

1315 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_ªÀa£_wrôe
)

1316 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_ªÀa£_wrôe
(&
s
, 42) == 13);

1317 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_ªÀa£_wrôe
(&
s
, -42) == 55);

1319 
	`MISSING
(
AO_sh‹t_„tch_™d_add
);

1321 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_ªÀa£_wrôe
)

1322 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add1_ªÀa£_wrôe
(&
s
) == 13);

1324 
	`MISSING
(
AO_sh‹t_„tch_™d_add1
);

1325 ++
s
;

1327 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
)

1328 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_sub1_ªÀa£_wrôe
(&
s
) == 14);

1330 
	`MISSING
(
AO_sh‹t_„tch_™d_sub1
);

1331 --
s
;

1333 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_ªÀa£_wrôe
)

1334 
	`AO_ch¨_°‹e_ªÀa£_wrôe
(&
b
, 13);

1336 
	`MISSING
(
AO_ch¨_°‹e
);

1337 
b
 = 13;

1339 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd_ªÀa£_wrôe
)

1340 
	`TA_as£π
(
	`AO_ch¨_lﬂd
(&
b
) == 13);

1342 
	`MISSING
(
AO_ch¨_lﬂd
);

1344 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_ªÀa£_wrôe
)

1345 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_ªÀa£_wrôe
(&
b
, 42) == 13);

1346 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_ªÀa£_wrôe
(&
b
, -42) == 55);

1348 
	`MISSING
(
AO_ch¨_„tch_™d_add
);

1350 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_ªÀa£_wrôe
)

1351 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add1_ªÀa£_wrôe
(&
b
) == 13);

1353 
	`MISSING
(
AO_ch¨_„tch_™d_add1
);

1354 ++
b
;

1356 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_ªÀa£_wrôe
)

1357 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_sub1_ªÀa£_wrôe
(&
b
) == 14);

1359 
	`MISSING
(
AO_ch¨_„tch_™d_sub1
);

1360 --
b
;

1362 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_ªÀa£_wrôe
)

1363 
	`AO_öt_°‹e_ªÀa£_wrôe
(&
zz
, 13);

1365 
	`MISSING
(
AO_öt_°‹e
);

1366 
zz
 = 13;

1368 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_ªÀa£_wrôe
)

1369 
	`TA_as£π
(
	`AO_öt_lﬂd
(&
zz
) == 13);

1371 
	`MISSING
(
AO_öt_lﬂd
);

1373 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_ªÀa£_wrôe
)

1374 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_ªÀa£_wrôe
(&
zz
, 42) == 13);

1375 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_ªÀa£_wrôe
(&
zz
, -42) == 55);

1377 
	`MISSING
(
AO_öt_„tch_™d_add
);

1379 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_ªÀa£_wrôe
)

1380 
	`TA_as£π
(
	`AO_öt_„tch_™d_add1_ªÀa£_wrôe
(&
zz
) == 13);

1382 
	`MISSING
(
AO_öt_„tch_™d_add1
);

1383 ++
zz
;

1385 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_ªÀa£_wrôe
)

1386 
	`TA_as£π
(
	`AO_öt_„tch_™d_sub1_ªÀa£_wrôe
(&
zz
) == 14);

1388 
	`MISSING
(
AO_öt_„tch_™d_sub1
);

1389 --
zz
;

1391 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_ªÀa£_wrôe
)

1392 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_ªÀa£_wrôe
(&
x
, 14, 42));

1393 
	`TA_as£π
(
x
 == 13);

1394 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_ªÀa£_wrôe
(&
x
, 13, 42));

1395 
	`TA_as£π
(
x
 == 42);

1397 
	`MISSING
(
AO_com∑ª_™d_sw≠
);

1399 #i‡
	`deföed
(
AO_HAVE_‹_ªÀa£_wrôe
)

1400 
	`AO_‹_ªÀa£_wrôe
(&
x
, 66);

1401 
	`TA_as£π
(
x
 == 106);

1403 
	`MISSING
(
AO_‹
);

1404 
x
 |= 34;

1406 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe
)

1407 
	`TA_as£π
(!
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe
(&
w
, 17, 42, 12, 13));

1408 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

1409 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe
(&
w
, 0, 0, 12, 13));

1410 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

1411 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_ªÀa£_wrôe
(&
w
, 12, 13, 17, 42));

1412 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

1413 
w
.
AO_vÆ1
 = 0; w.
AO_vÆ2
 = 0;

1415 
	`MISSING
(
AO_com∑ª_doubÀ_™d_sw≠_doubÀ
);

1417 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe
)

1418 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe
(&
w
, 17, 12, 13));

1419 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

1420 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe
(&
w
, 0, 12, 13));

1421 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

1422 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_ªÀa£_wrôe
(&
w
, 12, 17, 42));

1423 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

1425 
	`MISSING
(
AO_com∑ª_™d_sw≠_doubÀ
);

1427 
	}
}

1440 #unde‡
TA_as£π


1441 
	#TA_as£π
(
e
) \

1442 i‡(!(
e
)Ë{ 
	`Ârötf
(
°dîr
, "Assertion failed %s:%d (barrier: _acquire_read)\n", \

1443 
__FILE__
, 
__LINE__
), 
	`exô
(1); }

	)

1445 #unde‡
MISSING


1446 
	#MISSING
(
«me
) \

1447 
	`Ârötf
(
°dîr
, "Missög: %s\n", #«mê"_acquúe_ªad")

	)

1449 
	$ã°_©omic_acquúe_ªad
()

1451 
AO_t
 
x
;

1452 
b
;

1453 
s
;

1454 
zz
;

1455 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe_ªad
)

1456 
AO_TS_t
 
z
 = 
AO_TS_INITIALIZER
;

1458 #i‡
	`deföed
(
AO_HAVE_doubÀ_t
)

1459 
AO_doubÀ_t
 
w
;

1460 
w
.
AO_vÆ1
 = 0;

1461 
w
.
AO_vÆ2
 = 0;

1464 #i‡
	`deföed
(
AO_HAVE_n›_acquúe_ªad
)

1465 
	`AO_n›_acquúe_ªad
();

1467 
	`MISSING
(
AO_n›
);

1469 #i‡
	`deföed
(
AO_HAVE_°‹e_acquúe_ªad
)

1470 
	`AO_°‹e_acquúe_ªad
(&
x
, 13);

1471 
	`TA_as£π
 (
x
 == 13);

1473 
	`MISSING
(
AO_°‹e
);

1474 
x
 = 13;

1476 #i‡
	`deföed
(
AO_HAVE_lﬂd_acquúe_ªad
)

1477 
	`TA_as£π
(
	`AO_lﬂd_acquúe_ªad
(&
x
) == 13);

1479 
	`MISSING
(
AO_lﬂd
);

1481 #i‡
	`deföed
(
AO_HAVE_ã°_™d_£t_acquúe_ªad
)

1482 
	`as£π
(
	`AO_ã°_™d_£t_acquúe_ªad
(&
z
Ë=
AO_TS_CLEAR
);

1483 
	`as£π
(
	`AO_ã°_™d_£t_acquúe_ªad
(&
z
Ë=
AO_TS_SET
);

1484 
	`as£π
(
	`AO_ã°_™d_£t_acquúe_ªad
(&
z
Ë=
AO_TS_SET
);

1485 
	`AO_CLEAR
(&
z
);

1487 
	`MISSING
(
AO_ã°_™d_£t
);

1489 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add_acquúe_ªad
)

1490 
	`TA_as£π
(
	`AO_„tch_™d_add_acquúe_ªad
(&
x
, 42) == 13);

1491 
	`TA_as£π
(
	`AO_„tch_™d_add_acquúe_ªad
(&
x
, -42) == 55);

1493 
	`MISSING
(
AO_„tch_™d_add
);

1495 #i‡
	`deföed
(
AO_HAVE_„tch_™d_add1_acquúe_ªad
)

1496 
	`TA_as£π
(
	`AO_„tch_™d_add1_acquúe_ªad
(&
x
) == 13);

1498 
	`MISSING
(
AO_„tch_™d_add1
);

1499 ++
x
;

1501 #i‡
	`deföed
(
AO_HAVE_„tch_™d_sub1_acquúe_ªad
)

1502 
	`TA_as£π
(
	`AO_„tch_™d_sub1_acquúe_ªad
(&
x
) == 14);

1504 
	`MISSING
(
AO_„tch_™d_sub1
);

1505 --
x
;

1507 #i‡
	`deföed
(
AO_HAVE_sh‹t_°‹e_acquúe_ªad
)

1508 
	`AO_sh‹t_°‹e_acquúe_ªad
(&
s
, 13);

1510 
	`MISSING
(
AO_sh‹t_°‹e
);

1511 
s
 = 13;

1513 #i‡
	`deföed
(
AO_HAVE_sh‹t_lﬂd_acquúe_ªad
)

1514 
	`TA_as£π
(
	`AO_sh‹t_lﬂd
(&
s
) == 13);

1516 
	`MISSING
(
AO_sh‹t_lﬂd
);

1518 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add_acquúe_ªad
)

1519 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_acquúe_ªad
(&
s
, 42) == 13);

1520 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add_acquúe_ªad
(&
s
, -42) == 55);

1522 
	`MISSING
(
AO_sh‹t_„tch_™d_add
);

1524 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_add1_acquúe_ªad
)

1525 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_add1_acquúe_ªad
(&
s
) == 13);

1527 
	`MISSING
(
AO_sh‹t_„tch_™d_add1
);

1528 ++
s
;

1530 #i‡
	`deföed
(
AO_HAVE_sh‹t_„tch_™d_sub1_acquúe_ªad
)

1531 
	`TA_as£π
(
	`AO_sh‹t_„tch_™d_sub1_acquúe_ªad
(&
s
) == 14);

1533 
	`MISSING
(
AO_sh‹t_„tch_™d_sub1
);

1534 --
s
;

1536 #i‡
	`deföed
(
AO_HAVE_ch¨_°‹e_acquúe_ªad
)

1537 
	`AO_ch¨_°‹e_acquúe_ªad
(&
b
, 13);

1539 
	`MISSING
(
AO_ch¨_°‹e
);

1540 
b
 = 13;

1542 #i‡
	`deföed
(
AO_HAVE_ch¨_lﬂd_acquúe_ªad
)

1543 
	`TA_as£π
(
	`AO_ch¨_lﬂd
(&
b
) == 13);

1545 
	`MISSING
(
AO_ch¨_lﬂd
);

1547 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add_acquúe_ªad
)

1548 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_acquúe_ªad
(&
b
, 42) == 13);

1549 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add_acquúe_ªad
(&
b
, -42) == 55);

1551 
	`MISSING
(
AO_ch¨_„tch_™d_add
);

1553 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_add1_acquúe_ªad
)

1554 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_add1_acquúe_ªad
(&
b
) == 13);

1556 
	`MISSING
(
AO_ch¨_„tch_™d_add1
);

1557 ++
b
;

1559 #i‡
	`deföed
(
AO_HAVE_ch¨_„tch_™d_sub1_acquúe_ªad
)

1560 
	`TA_as£π
(
	`AO_ch¨_„tch_™d_sub1_acquúe_ªad
(&
b
) == 14);

1562 
	`MISSING
(
AO_ch¨_„tch_™d_sub1
);

1563 --
b
;

1565 #i‡
	`deföed
(
AO_HAVE_öt_°‹e_acquúe_ªad
)

1566 
	`AO_öt_°‹e_acquúe_ªad
(&
zz
, 13);

1568 
	`MISSING
(
AO_öt_°‹e
);

1569 
zz
 = 13;

1571 #i‡
	`deföed
(
AO_HAVE_öt_lﬂd_acquúe_ªad
)

1572 
	`TA_as£π
(
	`AO_öt_lﬂd
(&
zz
) == 13);

1574 
	`MISSING
(
AO_öt_lﬂd
);

1576 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add_acquúe_ªad
)

1577 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_acquúe_ªad
(&
zz
, 42) == 13);

1578 
	`TA_as£π
(
	`AO_öt_„tch_™d_add_acquúe_ªad
(&
zz
, -42) == 55);

1580 
	`MISSING
(
AO_öt_„tch_™d_add
);

1582 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_add1_acquúe_ªad
)

1583 
	`TA_as£π
(
	`AO_öt_„tch_™d_add1_acquúe_ªad
(&
zz
) == 13);

1585 
	`MISSING
(
AO_öt_„tch_™d_add1
);

1586 ++
zz
;

1588 #i‡
	`deföed
(
AO_HAVE_öt_„tch_™d_sub1_acquúe_ªad
)

1589 
	`TA_as£π
(
	`AO_öt_„tch_™d_sub1_acquúe_ªad
(&
zz
) == 14);

1591 
	`MISSING
(
AO_öt_„tch_™d_sub1
);

1592 --
zz
;

1594 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_acquúe_ªad
)

1595 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_acquúe_ªad
(&
x
, 14, 42));

1596 
	`TA_as£π
(
x
 == 13);

1597 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_acquúe_ªad
(&
x
, 13, 42));

1598 
	`TA_as£π
(
x
 == 42);

1600 
	`MISSING
(
AO_com∑ª_™d_sw≠
);

1602 #i‡
	`deföed
(
AO_HAVE_‹_acquúe_ªad
)

1603 
	`AO_‹_acquúe_ªad
(&
x
, 66);

1604 
	`TA_as£π
(
x
 == 106);

1606 
	`MISSING
(
AO_‹
);

1607 
x
 |= 34;

1609 #i‡
	`deföed
(
AO_HAVE_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
)

1610 
	`TA_as£π
(!
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
(&
w
, 17, 42, 12, 13));

1611 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

1612 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
(&
w
, 0, 0, 12, 13));

1613 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

1614 
	`TA_as£π
(
	`AO_com∑ª_doubÀ_™d_sw≠_doubÀ_acquúe_ªad
(&
w
, 12, 13, 17, 42));

1615 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

1616 
w
.
AO_vÆ1
 = 0; w.
AO_vÆ2
 = 0;

1618 
	`MISSING
(
AO_com∑ª_doubÀ_™d_sw≠_doubÀ
);

1620 #i‡
	`deföed
(
AO_HAVE_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
)

1621 
	`TA_as£π
(!
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
(&
w
, 17, 12, 13));

1622 
	`TA_as£π
(
w
.
AO_vÆ1
 =0 && w.
AO_vÆ2
 == 0);

1623 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
(&
w
, 0, 12, 13));

1624 
	`TA_as£π
(
w
.
AO_vÆ1
 =12 && w.
AO_vÆ2
 == 13);

1625 
	`TA_as£π
(
	`AO_com∑ª_™d_sw≠_doubÀ_acquúe_ªad
(&
w
, 12, 17, 42));

1626 
	`TA_as£π
(
w
.
AO_vÆ1
 =17 && w.
AO_vÆ2
 == 42);

1628 
	`MISSING
(
AO_com∑ª_™d_sw≠_doubÀ
);

1630 
	}
}

	@libatomic_ops-1.2/tests/test_malloc.c

15 #i‡
deföed
(
HAVE_CONFIG_H
)

16 
	~"c⁄fig.h
"

19 
	~"run_∑øŒñ.öc
"

21 
	~<°dlib.h
>

22 
	~<°dio.h
>

23 
	~"©omic_›s_mÆloc.h
"

24 
	#MAX_NTHREADS
 100

	)

25 
	#N_REVERSALS
 1000

	)

26 
	#LENGTH
 1000

	)

28 #ifde‡
USE_STANDARD_MALLOC


29 
	#AO_mÆloc
(
n
Ë
	`mÆloc
“)

	)

30 
	#AO_‰ì
(
p
Ë
	`‰ì
’)

	)

31 
	#AO_mÆloc_íabÀ_mm≠
()

	)

34 
	sli°_node
 {

35 
li°_node
 *
	m√xt
;

36 
	md©a
;

37 } 
	t 
;

39 
 
 *
	$c⁄s
(
d
, 
 
 *
èû
)

41 
size_t
 
exåa
 = 0;

42 
size_t
 
my_exåa
 = 
exåa
;

43 
 
 *
ªsu…
;

44 * 
exåas
;

45 
i
;

47 i‡(
my_exåa
 > 100)

48 
exåa
 = 
my_exåa
 = 0;

50 ++
exåa
;

51 
ªsu…
 = 
	`AO_mÆloc
((
 
Ë+ ()*
my_exåa
);

52 i‡(
ªsu…
 == 0)

54 
	`Ârötf
(
°dîr
, "Out of memory\n");

56 
	`ab‹t
();

59 
ªsu…
 -> 
d©a
 = 
d
;

60 
ªsu…
 -> 
√xt
 = 
èû
;

61 
exåas
 = (*)(
ªsu…
+1);

62 
i
 = 0; i < 
my_exåa
; ++iË
exåas
[i] = 42;

63  
ªsu…
;

64 
	}
}

66 
	$¥öt_li°
(
 
 *
l
)

68 
 
 *
p
;

70 
p
 = 
l
;Ö !0;Ö =Ö -> 
√xt
)

72 
	`Ârötf
(
°dîr
, "%d, ", 
p
 -> 
d©a
);

74 
	`Ârötf
(
°dîr
, "\n");

75 
	}
}

78 
	$check_li°
(
 
 *
l
, 
m
, 
n
)

80 
 
 *
p
;

81 
i
;

83 
p
 = 
l
, 
i
 = 
m
;Ö !0;Ö =Ö -> 
√xt
, ++i)

85 i‡(
i
 !
p
 -> 
d©a
)

87 
	`Ârötf
(
°dîr
, "Found %d,Éx≥˘ed %d\n", 
p
 -> 
d©a
, 
i
);

88 
	`ab‹t
();

91 
	}
}

94 
 
 *

95 
	$make_li°
(
m
, 
n
)

97 i‡(
m
 > 
n
)  0;

98  
	`c⁄s
(
m
, 
	`make_li°
(m+1, 
n
));

99 
	}
}

103 
 
 *

104 
	$ªvî£
(
 
 *
x
,Ü¿*
y
)

106 
 
 * 
ªsu…
;

108 i‡(
x
 =0Ë 
y
;

109 
ªsu…
 = 
	`ªvî£
(
x
 -> 
√xt
, 
	`c⁄s
(x -> 
d©a
, 
y
));

110 
	`AO_‰ì
(
x
);

111  
ªsu…
;

112 
	}
}

114 
	$dummy_ã°
(Ë{  1; 
	}
}

116 
	#LARGE
 200000

	)

118 * 
	$run_⁄e_ã°
(* 
¨g
) {

119 
 
 * 
x
 = 
	`make_li°
(1, 
LENGTH
);

120 
i
;

121 *
p
 = 
	`AO_mÆloc
(
LARGE
);

122 *
q
;

124 i‡(0 =
p
) {

125 
	`Ârötf
(
°dîr
, "AO_malloc(%d) failed: This isÇormal without mmap\n",

126 
LARGE
);

127 
	`AO_‰ì
(
p
);

129 
p
[0] =Ö[
LARGE
/2] =Ö[LARGE-1] = 'a';

130 
q
 = 
	`AO_mÆloc
(
LARGE
);

131 
q
[0] = q[
LARGE
/2] = q[LARGE-1] = 'b';

132 i‡(
p
[0] !'a' ||Ö[
LARGE
/2] != 'a' ||Ö[LARGE-1] != 'a') {

133 
	`Ârötf
(
°dîr
, "FirstÜargeállocation smashed\n");

134 
	`ab‹t
();

136 
	`AO_‰ì
(
p
);

137 i‡(
q
[0] !'b' || q[
LARGE
/2] != 'b' || q[LARGE-1] != 'b') {

138 
	`Ârötf
(
°dîr
, "SecondÜargeállocation smashed\n");

139 
	`ab‹t
();

141 
	`AO_‰ì
(
q
);

144 
x
 = 
	`ªvî£
(x, 0);

145 
	`¥öt_li°
(
x
);

146 
x
 = 
	`ªvî£
(x, 0);

147 
	`¥öt_li°
(
x
);

149 
i
 = 0; i < 
N_REVERSALS
; ++i) {

150 
x
 = 
	`ªvî£
(x, 0);

152 
	`check_li°
(
x
, 1, 
LENGTH
);

154 
	}
}

156 
	$maö
(
¨gc
, **
¨gv
) {

157 
¡hªads
;

158 
ex≥r_n
;

160 i‡(1 =
¨gc
) {

161 #i‡!
	`deföed
(
HAVE_MMAP
)

162 
¡hªads
 = 3;

164 
¡hªads
 = 10;

166 } i‡(2 =
¨gc
) {

167 
¡hªads
 = 
	`©oi
(
¨gv
[1]);

168 i‡(
¡hªads
 < 1 ||Çthªad†> 
MAX_NTHREADS
) {

169 
	`Ârötf
(
°dîr
, "Invalid # ofÅhreadsárgument\n");

170 
	`exô
(1);

173 
	`Ârötf
(
°dîr
, "Ußge: %†[# o‡thªads]\n", 
¨gv
[0]);

174 
	`exô
(1);

176 
	`¥ötf
("Performing %dÑeversals of %dÉlementÜists in %dÅhreads\n",

177 
N_REVERSALS
, 
LENGTH
, 
¡hªads
);

178 
	`AO_mÆloc_íabÀ_mm≠
();

179 
	`run_∑øŒñ
(
¡hªads
, 
run_⁄e_ã°
, 
dummy_ã°
, "AO_malloc/AO_free");

181 
	}
}

	@libatomic_ops-1.2/tests/test_stack.c

15 #i‡
deföed
(
HAVE_CONFIG_H
)

16 
	~"c⁄fig.h
"

19 
	~<±hªad.h
>

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~"©omic_›s.h
"

23 
	~"©omic_›s_°ack.h
"

24 
	#MAX_NTHREADS
 100

	)

26 #i‚de‡
NO_TIMES


27 
	~<time.h
>

28 
	~<sys/time.h
>

31 
	$gë_m£cs
()

33 
timevÆ
 
tv
;

35 
	`gëtimeofday
(&
tv
, 0);

36  ()
tv
.
tv_£c
 * 1000 +Åv.
tv_u£c
/1000;

37 
	}
}

39 
	#gë_m£cs
(Ë0

	)

42 
	sÀ
 {

43 
AO_t
 
	m√xt
;

44 
	md©a
;

45 } 
	tli°_ñemít
;

47 
AO_°ack_t
 
	gthe_li°
 = 
AO_STACK_INITIALIZER
;

49 
	$add_ñemíts
(
n
)

51 
li°_ñemít
 * 
À
;

52 i‡(
n
 == 0) ;

53 
	`add_ñemíts
(
n
-1);

54 
À
 = 
	`mÆloc
((
li°_ñemít
));

55 
À
 -> 
d©a
 = 
n
;

56 
	`AO_°ack_push
(&
the_li°
, (
AO_t
 *)
À
);

57 
	}
}

59 
	$¥öt_li°
()

61 
li°_ñemít
 *
p
;

63 
p
 = (
li°_ñemít
 *)
	`AO_REAL_HEAD_PTR
(
the_li°
);

64 
p
 != 0;

65 
p
 = (
li°_ñemít
 *)
	`AO_REAL_NEXT_PTR
’ -> 
√xt
))

66 
	`¥ötf
("%d\n", 
p
 -> 
d©a
);

67 
	}
}

69 
	gm¨ks
[
MAX_NTHREADS
 * MAX_NTHREADS];

71 
	$check_li°
(
n
)

73 
li°_ñemít
 *
p
;

74 
i
;

76 
i
 = 1; i <
n
; ++iË
m¨ks
[i] = 0;

77 
p
 = (
li°_ñemít
 *)
	`AO_REAL_HEAD_PTR
(
the_li°
);

78 
p
 != 0;

79 
p
 = (
li°_ñemít
 *)
	`AO_REAL_NEXT_PTR
’ -> 
√xt
))

81 i‡(
p
 -> 
d©a
 > 
n
 ||Ö -> data <= 0)

82 
	`Ârötf
(
°dîr
, "FoundÉº⁄eou†li°ÉÀmíà%d\n", 
p
 -> 
d©a
);

83 i‡(
m¨ks
[
p
 -> 
d©a
] != 0)

84 
	`Ârötf
(
°dîr
, "Found du∂iˇãÜi°ÉÀmíà%d\n", 
p
 -> 
d©a
);

85 
m¨ks
[
p
 -> 
d©a
] = 1;

87 
i
 = 1; i <
n
; ++i)

88 i‡(
m¨ks
[
i
] != 1)

89 
	`Ârötf
(
°dîr
, "MissögÜi°ÉÀmíà%d\n", 
i
);

90 
	}
}

92 vﬁ©ûê
AO_t
 
	g›s_≥rf‹med
 = 0;

94 
	#LIMIT
 1000000

	)

97 #ifde‡
AO_HAVE_„tch_™d_add


98 
	#„tch_™d_add
(
addr
, 
vÆ
Ë
	`AO_„tch_™d_add
◊ddr, vÆ)

	)

102 
AO_INLINE
 
AO_t
 
	$„tch_™d_add
(vﬁ©ûê
AO_t
 * 
addr
, AO_à
vÆ
)

104 
AO_t
 
ªsu…
 = 
	`AO_lﬂd
(
addr
);

105 
	`AO_°‹e
(
addr
, 
ªsu…
 + 
vÆ
);

106  
ªsu…
;

107 
	}
}

110 * 
	$run_⁄e_ã°
(* 
¨g
)

112 
li°_ñemít
 * 
t
[
MAX_NTHREADS
 + 1];

113 
li°_ñemít
 * 
aux
;

114 
ödex
 = ()
¨g
;

115 
i
;

116 
j
 = 0;

118 #ifde‡
VERBOSE


119 
	`¥ötf
("°¨tögÅhªad %d\n", 
ödex
);

121 
	`„tch_™d_add
(&
›s_≥rf‹med
, 
ödex
 + 1Ë+ index + 1 < 
LIMIT
)

123 
i
 = 0; i < 
ödex
 + 1; ++i)

125 
t
[
i
] = (
li°_ñemít
 *)
	`AO_°ack_p›
(&
the_li°
);

126 i‡(0 =
t
[
i
])

128 
	`Ârötf
(
°dîr
, "FAILED\n");

129 
	`ab‹t
();

132 
i
 = 0; i < 
ödex
 + 1; ++i)

134 
	`AO_°ack_push
(&
the_li°
, (
AO_t
 *)
t
[
i
]);

136 
j
 +(
ödex
 + 1);

138 #ifde‡
VERBOSE


139 
	`¥ötf
("föishedÅhªad %d: %dÅŸÆ ops\n", 
ödex
, 
j
);

142 
	}
}

144 
	#N_EXPERIMENTS
 1

	)

146 
	gtimes
[
MAX_NTHREADS
 + 1][
N_EXPERIMENTS
];

148 
	$maö
(
¨gc
, **
¨gv
)

150 
¡hªads
;

151 
max_¡hªads
;

152 
ex≥r_n
;

154 i‡(1 =
¨gc
)

155 
max_¡hªads
 = 4;

156 i‡(2 =
¨gc
)

158 
max_¡hªads
 = 
	`©oi
(
¨gv
[1]);

159 i‡(
max_¡hªads
 < 1 || max_¡hªad†> 
MAX_NTHREADS
)

161 
	`Ârötf
(
°dîr
, "Invalid max # ofÅhreadsárgument\n");

162 
	`exô
(1);

167 
	`Ârötf
(
°dîr
, "Ußge: %†[max # o‡thªads]\n", 
¨gv
[0]);

168 
	`exô
(1);

170 
ex≥r_n
 = 0;Éx≥r_¿< 
N_EXPERIMENTS
; ++Éxper_n)

171 
¡hªads
 = 1;Çthªad†<
max_¡hªads
; ++nthreads)

173 
i
;

174 
±hªad_t
 
thªad
[
MAX_NTHREADS
];

175 
li°_Àngth
 = 
¡hªads
*(nthreads+1)/2;

176 
°¨t_time
;

178 
	`add_ñemíts
(
li°_Àngth
);

179 #ifde‡
VERBOSE


180 
	`¥ötf
("Inôü»li° (¡hªad†%d):\n", 
¡hªads
);

181 
	`¥öt_li°
();

183 
›s_≥rf‹med
 = 0;

184 
°¨t_time
 = 
	`gë_m£cs
();

185 
i
 = 1; i < 
¡hªads
; ++i) {

186 
code
;

188 i‡((
code
 = 
	`±hªad_¸óã
(
thªad
+
i
, 0, 
run_⁄e_ã°
,

189 (*)()
i
)) != 0) {

190 
	`Ârötf
(
°dîr
, "Thªad cª©i⁄ faûed %u\n", 
code
);

191 
	`exô
(1);

196 
	`run_⁄e_ã°
(0);

197 
i
 = 1; i < 
¡hªads
; ++i) {

198 
code
;

199 i‡((
code
 = 
	`±hªad_joö
(
thªad
[
i
], 0)) != 0) {

200 
	`Ârötf
(
°dîr
, "Thªad joö faûed %u\n", 
code
);

203 
times
[
¡hªads
][
ex≥r_n
] = ()(
	`gë_m£cs
(Ë- 
°¨t_time
);

204 #ifde‡
VERBOSE


205 
	`¥ötf
("%d %lu\n", 
¡hªads
,

206 ()(
	`gë_m£cs
(Ë- 
°¨t_time
));

207 
	`¥ötf
("finalÜist (should beÑeordered initialÜist):\n");

208 
	`¥öt_li°
();

210 
	`check_li°
(
li°_Àngth
);

211 (
li°_ñemít
 *)
	`AO_°ack_p›
(&
the_li°
));

213 #i‚de‡
NO_TIMES


214 
¡hªads
 = 1;Çthªad†<
max_¡hªads
; ++nthreads)

216 
sum
 = 0;

218 
	`¥ötf
("About %dÖushes + %dÖops in %dÅhreads:",

219 
LIMIT
, LIMIT, 
¡hªads
);

220 
ex≥r_n
 = 0;Éx≥r_¿< 
N_EXPERIMENTS
; ++exper_n)

222 #i‡
	`deföed
(
VERBOSE
)

223 
	`¥ötf
("[%lu] ", 
times
[
¡hªads
][
ex≥r_n
]);

225 
sum
 +
times
[
¡hªads
][
ex≥r_n
];

227 
	`¥ötf
(" %lu m£cs\n", (
sum
 + 
N_EXPERIMENTS
/2)/N_EXPERIMENTS);

231 
	}
}

	@mach_dep.c

15 
	~"¥iv©e/gc_¥iv.h
"

16 
	~<°dio.h
>

17 
	~<£tjmp.h
>

18 #i‡
deföed
(
OS2
Ë|| deföed(
CX_UX
)

19 
	#_£tjmp
(
b
Ë
	`£tjmp
(b)

	)

20 
	#_l⁄gjmp
(
b
,
v
Ë
	`l⁄gjmp
(b,v)

	)

22 #ifde‡
AMIGA


23 #i‚de‡
__GNUC__


24 
	~<dos.h
>

26 
	~<machöe/ªg.h
>

30 #i‡
deföed
(
__MWERKS__
Ë&& !deföed(
POWERPC
)

32 
asm
 
	$PushMacRegi°îs
()

34 
sub
.
w
 #4,
•


35 
move
.
l
 
a2
,(
•
)

36 
j§
 
GC_push_⁄e


37 
move
.
l
 
a3
,(
•
)

38 
j§
 
GC_push_⁄e


39 
move
.
l
 
a4
,(
•
)

40 
j§
 
GC_push_⁄e


41 #i‡!
	`__›ti⁄
(
a6‰ames
)

43 
move
.
l
 
a6
,(
•
)

44 
j§
 
GC_push_⁄e


47 
move
.
l
 
d2
,(
•
)

48 
j§
 
GC_push_⁄e


49 
move
.
l
 
d3
,(
•
)

50 
j§
 
GC_push_⁄e


51 
move
.
l
 
d4
,(
•
)

52 
j§
 
GC_push_⁄e


53 
move
.
l
 
d5
,(
•
)

54 
j§
 
GC_push_⁄e


55 
move
.
l
 
d6
,(
•
)

56 
j§
 
GC_push_⁄e


57 
move
.
l
 
d7
,(
•
)

58 
j§
 
GC_push_⁄e


59 
add
.
w
 #4,
•


60 
πs


61 
	}
}

65 #i‡
deföed
(
SPARC
Ë|| deföed(
IA64
)

68 
±r_t
 
	gGC_ßve_ªgs_ªt_vÆ
;

76 #unde‡
HAVE_PUSH_REGS


78 #i‡
deföed
(
USE_ASM_PUSH_REGS
)

79 
	#HAVE_PUSH_REGS


	)

81 
	$GC_push_ªgs
()

83 #i‡
	`deföed
(
M68K
Ë&& deföed(
AMIGA
)

87 #ifde‡
__GNUC__


88 
	`asm
("subq.w &0x4,%sp");

90 
	`asm
("mov.l %a2,(%sp)");ásm("jsr _GC_push_one");

91 
	`asm
("mov.l %a3,(%sp)");ásm("jsr _GC_push_one");

92 
	`asm
("mov.l %a4,(%sp)");ásm("jsr _GC_push_one");

93 
	`asm
("mov.l %a5,(%sp)");ásm("jsr _GC_push_one");

94 
	`asm
("mov.l %a6,(%sp)");ásm("jsr _GC_push_one");

96 
	`asm
("mov.l %d2,(%sp)");ásm("jsr _GC_push_one");

97 
	`asm
("mov.l %d3,(%sp)");ásm("jsr _GC_push_one");

98 
	`asm
("mov.l %d4,(%sp)");ásm("jsr _GC_push_one");

99 
	`asm
("mov.l %d5,(%sp)");ásm("jsr _GC_push_one");

100 
	`asm
("mov.l %d6,(%sp)");ásm("jsr _GC_push_one");

101 
	`asm
("mov.l %d7,(%sp)");ásm("jsr _GC_push_one");

103 
	`asm
("addq.w &0x4,%sp");

104 
	#HAVE_PUSH_REGS


	)

106 
	`GC_push_⁄e
(
	`gëªg
(
REG_A2
));

107 
	`GC_push_⁄e
(
	`gëªg
(
REG_A3
));

108 #i‚de‡
__SASC


110 
	`GC_push_⁄e
(
	`gëªg
(
REG_A4
));

112 
	`GC_push_⁄e
(
	`gëªg
(
REG_A5
));

113 
	`GC_push_⁄e
(
	`gëªg
(
REG_A6
));

115 
	`GC_push_⁄e
(
	`gëªg
(
REG_D2
));

116 
	`GC_push_⁄e
(
	`gëªg
(
REG_D3
));

117 
	`GC_push_⁄e
(
	`gëªg
(
REG_D4
));

118 
	`GC_push_⁄e
(
	`gëªg
(
REG_D5
));

119 
	`GC_push_⁄e
(
	`gëªg
(
REG_D6
));

120 
	`GC_push_⁄e
(
	`gëªg
(
REG_D7
));

121 
	#HAVE_PUSH_REGS


	)

125 #i‡
	`deföed
(
M68K
Ë&& deföed(
MACOS
)

126 #i‡
	`deföed
(
THINK_C
)

127 
	#PushMacReg
(
ªg
) \

128 
move
.
l
 
ªg
,(
•
) \

129 
j§
 
GC_push_⁄e


	)

130 
asm
 {

131 
sub
.
w
 #4,
•
 ; 
ª£rve
 
•a˚
 
⁄e
 
∑ømëî
.

132 
	`PushMacReg
(
a2
);

133 
	`PushMacReg
(
a3
);

134 
	`PushMacReg
(
a4
);

135 ; 
skù
 
	`a5
 (
globÆs
), 
	`a6
 (
‰ame
 
poöãr
), 
™d
 
	`a7
 (
°ack
Öointer)

136 
	`PushMacReg
(
d2
);

137 
	`PushMacReg
(
d3
);

138 
	`PushMacReg
(
d4
);

139 
	`PushMacReg
(
d5
);

140 
	`PushMacReg
(
d6
);

141 
	`PushMacReg
(
d7
);

142 
add
.
w
 #4,
•
 ; 
fix
 
°ack
.

144 
	#HAVE_PUSH_REGS


	)

145 #unde‡
PushMacReg


147 #i‡
	`deföed
(
__MWERKS__
)

148 
	`PushMacRegi°îs
();

149 
	#HAVE_PUSH_REGS


	)

152 
	}
}

155 #i‡
deföed
(
HAVE_PUSH_REGS
Ë&& deföed(
THREADS
)

156 #îr‹ 
GC_push_ªgs
 
ˇ¬Ÿ
 
be
 
u£d
 
wôh
 
thªads


159 #unde‡
HAVE_PUSH_REGS


162 #i‡!
deföed
(
HAVE_PUSH_REGS
Ë&& deföed(
UNIX_LIKE
)

163 
	~<uc⁄ãxt.h
>

169 
GC_wôh_ˇŒì_ßves_pushed
((*
‚
)(
±r_t
, *),

170 
±r_t
 
¨g
)

172 
w‹d
 
dummy
;

173 * 
c⁄ãxt
 = 0;

175 #i‡
	`deföed
(
HAVE_PUSH_REGS
)

176 
	`GC_push_ªgs
();

177 #ñi‡
	`deföed
(
UNIX_LIKE
Ë&& !deföed(
DARWIN
Ë&& !deföed(
ARM32
) && \

178 !
	`deföed
(
HURD
)

181 
uc⁄ãxt_t
 
˘xt
;

182 i‡(
	`gëc⁄ãxt
(&
˘xt
) < 0)

183 
	`ABORT
 ("Getcontext failed: UseánotherÑegisterÑetrieval method?");

184 
c⁄ãxt
 = &
˘xt
;

185 #i‡
	`deföed
(
SPARC
Ë|| deföed(
IA64
)

190 
GC_ßve_ªgs_ªt_vÆ
 = 
	`GC_ßve_ªgs_ö_°ack
();

193 #ñi‡
	`deföed
(
HAVE_BUILTIN_UNWIND_INIT
)

197 
	`__buûtö_unwöd_öô
();

204 
jmp_buf
 
ªgs
;

205 
w‹d
 * 
i
 = (w‹d *Ë
ªgs
;

206 
±r_t
 
lim
 = (±r_t)(
ªgs
) + (Ñegs);

210 ; (*)
i
 < 
lim
; i++) {

211 *
i
 = 0;

213 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
) \

214 || 
	`deföed
(
UTS4
Ë|| deföed(
LINUX
Ë|| deföed(
EWS4800
)

215 (Ë
	`£tjmp
(
ªgs
);

217 (Ë
	`_£tjmp
(
ªgs
);

225 
	`‚
(
¨g
, 
c⁄ãxt
);

229 
	`GC_no›1
((
w‹d
)(&
dummy
));

230 
	}
}

232 
	$GC_push_ªgs_™d_°ack
(
±r_t
 
cﬁd_gc_‰ame
)

234 
	`GC_wôh_ˇŒì_ßves_pushed
(
GC_push_cuºít_°ack
, 
cﬁd_gc_‰ame
);

235 
	}
}

237 #i‡
deföed
(
ASM_CLEAR_CODE
)

238 #ifde‡
LINT


240 
±r_t
 
	$GC_˛ór_°ack_ö√r
(
¨g
, 
limô
)

241 
±r_t
 
¨g
; 
w‹d
 
limô
;

242 { (
¨g
); 
	}
}

	@malloc.c

16 
	~<°dio.h
>

17 
	~<°rög.h
>

18 
	~<î∫o.h
>

19 
	~"¥iv©e/gc_¥iv.h
"

21 * 
GC_˛ór_°ack
(*);

22 
GC_exãnd_size_m≠
(
size_t
);

26 
GC_boﬁ
 
	$GC_Æloc_ª˛aim_li°
(
obj_köd
 *
köd
)

28 
hblk
 ** 
ªsu…
 = (hblk **)

29 
	`GC_s¸©ch_Æloc
((
MAXOBJGRANULES
+1Ë* (
hblk
 *));

30 i‡(
ªsu…
 =0Ë(
FALSE
);

31 
	`BZERO
(
ªsu…
, (
MAXOBJGRANULES
+1)*(
hblk
 *));

32 
köd
 -> 
ok_ª˛aim_li°
 = 
ªsu…
;

33 (
TRUE
);

34 
	}
}

41 
±r_t
 
	$GC_Æloc_œrge
(
size_t
 
lb
, 
k
, 
Êags
)

43 
hblk
 * 
h
;

44 
w‹d
 
n_blocks
;

45 
±r_t
 
ªsu…
;

48 
lb
 = (lb + 
GRANULE_BYTES
 - 1) & ~(GRANULE_BYTES - 1);

49 
n_blocks
 = 
	`OBJ_SZ_TO_BLOCKS
(
lb
);

50 i‡(!
GC_is_öôülized
Ë
	`GC_öô_ö√r
();

52 if(
GC_ö¸emíèl
 && !
GC_d⁄t_gc
)

53 
	`GC_cﬁÀ˘_a_lôée_ö√r
(()
n_blocks
);

54 
h
 = 
	`GC_Ælochblk
(
lb
, 
k
, 
Êags
);

55 #ifde‡
USE_MUNMAP


56 i‡(0 =
h
) {

57 
	`GC_mîge_unm≠≥d
();

58 
h
 = 
	`GC_Ælochblk
(
lb
, 
k
, 
Êags
);

61 0 =
h
 && 
	`GC_cﬁÀ˘_‹_ex∑nd
(
n_blocks
, (
Êags
 != 0))) {

62 
h
 = 
	`GC_Ælochblk
(
lb
, 
k
, 
Êags
);

64 i‡(
h
 == 0) {

65 
ªsu…
 = 0;

67 
size_t
 
tŸÆ_byãs
 = 
n_blocks
 * 
HBLKSIZE
;

68 i‡(
n_blocks
 > 1) {

69 
GC_œrge_Ælocd_byãs
 +
tŸÆ_byãs
;

70 i‡(
GC_œrge_Ælocd_byãs
 > 
GC_max_œrge_Ælocd_byãs
)

71 
GC_max_œrge_Ælocd_byãs
 = 
GC_œrge_Ælocd_byãs
;

73 
ªsu…
 = 
h
 -> 
hb_body
;

75  
ªsu…
;

76 
	}
}

82 
±r_t
 
	$GC_Æloc_œrge_™d_˛ór
(
size_t
 
lb
, 
k
, 
Êags
)

84 
±r_t
 
ªsu…
 = 
	`GC_Æloc_œrge
(
lb
, 
k
, 
Êags
);

85 
w‹d
 
n_blocks
 = 
	`OBJ_SZ_TO_BLOCKS
(
lb
);

87 i‡(0 =
ªsu…
)  0;

88 i‡(
GC_debuggög_°¨ãd
 || 
GC_obj_köds
[
k
].
ok_öô
) {

90 
	`BZERO
(
ªsu…
, 
n_blocks
 * 
HBLKSIZE
);

92  
ªsu…
;

93 
	}
}

101 * 
	$GC_gíîic_mÆloc_ö√r
(
size_t
 
lb
, 
k
)

103 *
›
;

105 if(
	`SMALL_OBJ
(
lb
)) {

106 
obj_köd
 * 
köd
 = 
GC_obj_köds
 + 
k
;

107 
size_t
 
lg
 = 
GC_size_m≠
[
lb
];

108 ** 
›p
 = &(
köd
 -> 
ok_‰ìli°
[
lg
]);

110 if–(
›
 = *
›p
) == 0 ) {

111 i‡(
GC_size_m≠
[
lb
] == 0) {

112 i‡(!
GC_is_öôülized
Ë
	`GC_öô_ö√r
();

113 i‡(
GC_size_m≠
[
lb
] =0Ë
	`GC_exãnd_size_m≠
(lb);

114 (
	`GC_gíîic_mÆloc_ö√r
(
lb
, 
k
));

116 i‡(
köd
 -> 
ok_ª˛aim_li°
 == 0) {

117 i‡(!
	`GC_Æloc_ª˛aim_li°
(
köd
)Ë
out
;

119 
›
 = 
	`GC_Ælocobj
(
lg
, 
k
);

120 i‡(
›
 =0Ë
out
;

122 *
›p
 = 
	`obj_lök
(
›
);

123 
	`obj_lök
(
›
) = 0;

124 
GC_byãs_Ælocd
 +
	`GRANULES_TO_BYTES
(
lg
);

126 
›
 = (
±r_t
)
	`GC_Æloc_œrge_™d_˛ór
(
	`ADD_SLOP
(
lb
), 
k
, 0);

127 
GC_byãs_Ælocd
 +
lb
;

130 
out
:

131  
›
;

132 
	}
}

137 * 
	$GC_gíîic_mÆloc_ö√r_ign‹e_off_∑ge
(
size_t
 
lb
, 
k
)

139 
w‹d
 
lb_adju°ed
;

140 * 
›
;

142 i‡(
lb
 <
HBLKSIZE
)

143 (
	`GC_gíîic_mÆloc_ö√r
(
lb
, 
k
));

144 
lb_adju°ed
 = 
	`ADD_SLOP
(
lb
);

145 
›
 = 
	`GC_Æloc_œrge_™d_˛ór
(
lb_adju°ed
, 
k
, 
IGNORE_OFF_PAGE
);

146 
GC_byãs_Ælocd
 +
lb_adju°ed
;

147  
›
;

148 
	}
}

150 * 
	$GC_gíîic_mÆloc
(
size_t
 
lb
, 
k
)

152 * 
ªsu…
;

153 
DCL_LOCK_STATE
;

155 i‡(
GC_have_îr‹s
Ë
	`GC_¥öt_Æl_îr‹s
();

156 
	`GC_INVOKE_FINALIZERS
();

157 i‡(
	`SMALL_OBJ
(
lb
)) {

158 
	`LOCK
();

159 
ªsu…
 = 
	`GC_gíîic_mÆloc_ö√r
((
w‹d
)
lb
, 
k
);

160 
	`UNLOCK
();

162 
size_t
 
lw
;

163 
size_t
 
lb_rounded
;

164 
w‹d
 
n_blocks
;

165 
GC_boﬁ
 
öô
;

166 
lw
 = 
	`ROUNDED_UP_WORDS
(
lb
);

167 
lb_rounded
 = 
	`WORDS_TO_BYTES
(
lw
);

168 
n_blocks
 = 
	`OBJ_SZ_TO_BLOCKS
(
lb_rounded
);

169 
öô
 = 
GC_obj_köds
[
k
].
ok_öô
;

170 
	`LOCK
();

171 
ªsu…
 = (
±r_t
)
	`GC_Æloc_œrge
(
lb_rounded
, 
k
, 0);

172 i‡(0 !
ªsu…
) {

173 i‡(
GC_debuggög_°¨ãd
) {

174 
	`BZERO
(
ªsu…
, 
n_blocks
 * 
HBLKSIZE
);

176 #ifde‡
THREADS


179 ((
w‹d
 *)
ªsu…
)[0] = 0;

180 ((
w‹d
 *)
ªsu…
)[1] = 0;

181 ((
w‹d
 *)
ªsu…
)[
lw
-1] = 0;

182 ((
w‹d
 *)
ªsu…
)[
lw
-2] = 0;

186 
GC_byãs_Ælocd
 +
lb_rounded
;

187 
	`UNLOCK
();

188 i‡(
öô
 && !
GC_debuggög_°¨ãd
 && 0 !
ªsu…
) {

189 
	`BZERO
(
ªsu…
, 
n_blocks
 * 
HBLKSIZE
);

192 i‡(0 =
ªsu…
) {

193 ((*
GC_oom_‚
)(
lb
));

195 (
ªsu…
);

197 
	}
}

200 
	#GENERAL_MALLOC
(
lb
,
k
) \

201 
	`GC_˛ór_°ack
(
	`GC_gíîic_mÆloc
(
lb
, 
k
))

	)

206 #ifde‡
THREAD_LOCAL_ALLOC


207 * 
	$GC_c‹e_mÆloc_©omic
(
size_t
 
lb
)

209 * 
	$GC_mÆloc_©omic
(
size_t
 
lb
)

212 *
›
;

213 ** 
›p
;

214 
size_t
 
lg
;

215 
DCL_LOCK_STATE
;

217 if(
	`SMALL_OBJ
(
lb
)) {

218 
lg
 = 
GC_size_m≠
[
lb
];

219 
›p
 = &(
GC_aobj‰ìli°
[
lg
]);

220 
	`LOCK
();

221 if–
	`EXPECT
((
›
 = *
›p
) == 0, 0) ) {

222 
	`UNLOCK
();

223 (
	`GENERAL_MALLOC
((
w‹d
)
lb
, 
PTRFREE
));

225 *
›p
 = 
	`obj_lök
(
›
);

226 
GC_byãs_Ælocd
 +
	`GRANULES_TO_BYTES
(
lg
);

227 
	`UNLOCK
();

228 ((*Ë
›
);

230 (
	`GENERAL_MALLOC
((
w‹d
)
lb
, 
PTRFREE
));

232 
	}
}

236 #ifde‡
__STDC__


237 *
	$GC_°rdup
(c⁄° *
s
)

239 *
	$GC_°rdup
(
s
)

240 *
s
;

243 *
c›y
;

245 i‡(
s
 =
NULL
)  NULL;

246 i‡((
c›y
 = 
	`GC_mÆloc_©omic
(
	`°æí
(
s
Ë+ 1)Ë=
NULL
) {

247 
î∫o
 = 
ENOMEM
;

248  
NULL
;

250 
	`°r˝y
(
c›y
, 
s
);

251  
c›y
;

252 
	}
}

255 #ifde‡
THREAD_LOCAL_ALLOC


256 * 
	$GC_c‹e_mÆloc
(
size_t
 
lb
)

258 * 
	$GC_mÆloc
(
size_t
 
lb
)

261 *
›
;

262 **
›p
;

263 
size_t
 
lg
;

264 
DCL_LOCK_STATE
;

266 if(
	`SMALL_OBJ
(
lb
)) {

267 
lg
 = 
GC_size_m≠
[
lb
];

268 
›p
 = (**)&(
GC_obj‰ìli°
[
lg
]);

269 
	`LOCK
();

270 if–
	`EXPECT
((
›
 = *
›p
) == 0, 0) ) {

271 
	`UNLOCK
();

272 (
	`GENERAL_MALLOC
((
w‹d
)
lb
, 
NORMAL
));

275 
	`GC_ASSERT
(0 =
	`obj_lök
(
›
)

276 || (
w‹d
)
	`obj_lök
(
›
)

277 <(
w‹d
)
GC_gª©e°_∂ausibÀ_hóp_addr


278 && (
w‹d
)
	`obj_lök
(
›
)

279 >(
w‹d
)
GC_Àa°_∂ausibÀ_hóp_addr
);

280 *
›p
 = 
	`obj_lök
(
›
);

281 
	`obj_lök
(
›
) = 0;

282 
GC_byãs_Ælocd
 +
	`GRANULES_TO_BYTES
(
lg
);

283 
	`UNLOCK
();

284  
›
;

286 (
	`GENERAL_MALLOC
(
lb
, 
NORMAL
));

288 
	}
}

290 #ifde‡
REDIRECT_MALLOC


296 #ifde‡
GC_ADD_CALLER


297 
	#RA
 
GC_RETURN_ADDR
,

	)

299 
	#RA


	)

301 
	#GC_debug_mÆloc_ª∂a˚mít
(
lb
) \

302 
	`GC_debug_mÆloc
(
lb
, 
RA
 "unknown", 0)

	)

304 * 
	$mÆloc
(
size_t
 
lb
)

309 #i‡
	`deföed
(
I386
Ë&& deföed(
GC_SOLARIS_THREADS
)

317 i‡(!
GC_is_öôülized
Ë 
	`sbrk
(
lb
);

319 ((*)
	`REDIRECT_MALLOC
(
lb
));

320 
	}
}

322 #i‡
deföed
(
GC_LINUX_THREADS
)

323 
±r_t
 
	gGC_lib±hªad_°¨t
 = 0;

324 
±r_t
 
	gGC_lib±hªad_íd
 = 0;

325 
±r_t
 
	gGC_libld_°¨t
 = 0;

326 
±r_t
 
	gGC_libld_íd
 = 0;

327 
GC_boﬁ
 
GC_ãxt_m≠pög
(*
nm
, 
±r_t
 *
°¨ç
,Öå_à*
ídp
);

330 
	$GC_öô_lib_bounds
()

332 i‡(
GC_lib±hªad_°¨t
 != 0) ;

333 i‡(!
	`GC_ãxt_m≠pög
("libpthread-",

334 &
GC_lib±hªad_°¨t
, &
GC_lib±hªad_íd
)) {

335 
	`WARN
("FailedÅo findÜibpthread.soÅext mapping: Expect crash\n", 0);

339 
GC_lib±hªad_°¨t
 = (
±r_t
)1;

341 i‡(!
	`GC_ãxt_m≠pög
("ld-", &
GC_libld_°¨t
, &
GC_libld_íd
)) {

342 
	`WARN
("FailedÅo findÜd.soÅext mapping: Expect crash\n", 0);

344 
	}
}

347 * 
	$ˇŒoc
(
size_t
 
n
, size_à
lb
)

349 #i‡
	`deföed
(
GC_LINUX_THREADS
)

353 
GC_boﬁ
 
lib_bounds_£t
 = 
FALSE
;

354 
±r_t
 
ˇŒî
 = (±r_t)
	`__buûtö_ªtu∫_addªss
(0);

357 i‡(!
lib_bounds_£t
) {

358 
	`GC_öô_lib_bounds
();

359 
lib_bounds_£t
 = 
TRUE
;

361 i‡(
ˇŒî
 >
GC_lib±hªad_°¨t
 && cÆÀ∏< 
GC_lib±hªad_íd


362 || (
ˇŒî
 >
GC_libld_°¨t
 && cÆÀ∏< 
GC_libld_íd
))

363  
	`GC_mÆloc_uncﬁÀ˘abÀ
(
n
*
lb
);

368 ((*)
	`REDIRECT_MALLOC
(
n
*
lb
));

369 
	}
}

371 #i‚de‡
°rdup


372 
	~<°rög.h
>

373 *
	$°rdup
(c⁄° *
s
)

375 
size_t
 
Àn
 = 
	`°æí
(
s
) + 1;

376 * 
ªsu…
 = ((*)
	`REDIRECT_MALLOC
(
Àn
+1));

377 i‡(
ªsu…
 == 0) {

378 
î∫o
 = 
ENOMEM
;

381 
	`BCOPY
(
s
, 
ªsu…
, 
Àn
+1);

382  
ªsu…
;

383 
	}
}

389 #unde‡
GC_debug_mÆloc_ª∂a˚mít


394 
	$GC_‰ì
(* 
p
)

396 
hblk
 *
h
;

397 
hdr
 *
hhdr
;

398 
size_t
 
sz
;

399 
size_t
 
ngønuÀs
;

400 **
Êh
;

401 
knd
;

402 
obj_köd
 * 
ok
;

403 
DCL_LOCK_STATE
;

405 i‡(
p
 == 0) ;

407 #ifde‡
LOG_ALLOCS


408 
	`GC_îr_¥ötf
("GC_‰ì(%p): %d\n", 
p
, 
GC_gc_no
);

410 
h
 = 
	`HBLKPTR
(
p
);

411 
hhdr
 = 
	`HDR
(
h
);

412 
sz
 = 
hhdr
 -> 
hb_sz
;

413 
ngønuÀs
 = 
	`BYTES_TO_GRANULES
(
sz
);

414 #i‡
	`deföed
(
REDIRECT_MALLOC
) && \

415 (
	`deföed
(
GC_SOLARIS_THREADS
Ë|| deföed(
GC_LINUX_THREADS
) \

416 || 
	`deföed
(
MSWIN32
))

421 i‡(0 =
hhdr
) ;

423 
	`GC_ASSERT
(
	`GC_ba£
(
p
) ==Ö);

424 
knd
 = 
hhdr
 -> 
hb_obj_köd
;

425 
ok
 = &
GC_obj_köds
[
knd
];

426 i‡(
	`EXPECT
((
ngønuÀs
 <
MAXOBJGRANULES
), 1)) {

427 
	`LOCK
();

428 
GC_byãs_‰ìd
 +
sz
;

429 i‡(
	`IS_UNCOLLECTABLE
(
knd
)Ë
GC_n⁄_gc_byãs
 -
sz
;

433 i‡(
ok
 -> 
ok_öô
) {

434 
	`BZERO
((
w‹d
 *)
p
 + 1, 
sz
-(word));

436 
Êh
 = &(
ok
 -> 
ok_‰ìli°
[
ngønuÀs
]);

437 
	`obj_lök
(
p
Ë*
Êh
;

438 *
Êh
 = (
±r_t
)
p
;

439 
	`UNLOCK
();

441 
size_t
 
nblocks
 = 
	`OBJ_SZ_TO_BLOCKS
(
sz
);

442 
	`LOCK
();

443 
GC_byãs_‰ìd
 +
sz
;

444 i‡(
	`IS_UNCOLLECTABLE
(
knd
)Ë
GC_n⁄_gc_byãs
 -
sz
;

445 i‡(
nblocks
 > 1) {

446 
GC_œrge_Ælocd_byãs
 -
nblocks
 * 
HBLKSIZE
;

448 
	`GC_‰ìhblk
(
h
);

449 
	`UNLOCK
();

451 
	}
}

456 #ifde‡
THREADS


457 
	$GC_‰ì_ö√r
(* 
p
)

459 
hblk
 *
h
;

460 
hdr
 *
hhdr
;

461 
size_t
 
sz
;

462 
size_t
 
ngønuÀs
;

463 ** 
Êh
;

464 
knd
;

465 
obj_köd
 * 
ok
;

466 
DCL_LOCK_STATE
;

468 
h
 = 
	`HBLKPTR
(
p
);

469 
hhdr
 = 
	`HDR
(
h
);

470 
knd
 = 
hhdr
 -> 
hb_obj_köd
;

471 
sz
 = 
hhdr
 -> 
hb_sz
;

472 
ngønuÀs
 = 
	`BYTES_TO_GRANULES
(
sz
);

473 
ok
 = &
GC_obj_köds
[
knd
];

474 i‡(
ngønuÀs
 <
MAXOBJGRANULES
) {

475 
GC_byãs_‰ìd
 +
sz
;

476 i‡(
	`IS_UNCOLLECTABLE
(
knd
)Ë
GC_n⁄_gc_byãs
 -
sz
;

477 i‡(
ok
 -> 
ok_öô
) {

478 
	`BZERO
((
w‹d
 *)
p
 + 1, 
sz
-(word));

480 
Êh
 = &(
ok
 -> 
ok_‰ìli°
[
ngønuÀs
]);

481 
	`obj_lök
(
p
Ë*
Êh
;

482 *
Êh
 = (
±r_t
)
p
;

484 
size_t
 
nblocks
 = 
	`OBJ_SZ_TO_BLOCKS
(
sz
);

485 
GC_byãs_‰ìd
 +
sz
;

486 i‡(
	`IS_UNCOLLECTABLE
(
knd
)Ë
GC_n⁄_gc_byãs
 -
sz
;

487 i‡(
nblocks
 > 1) {

488 
GC_œrge_Ælocd_byãs
 -
nblocks
 * 
HBLKSIZE
;

490 
	`GC_‰ìhblk
(
h
);

492 
	}
}

495 #i‡
deföed
(
REDIRECT_MALLOC
Ë&& !deföed(
REDIRECT_FREE
)

496 
	#REDIRECT_FREE
 
GC_‰ì


	)

498 #ifde‡
REDIRECT_FREE


499 
	$‰ì
(* 
p
)

501 #i‡
	`deföed
(
GC_LINUX_THREADS
Ë&& !deföed(
USE_PROC_FOR_LIBRARIES
)

506 
±r_t
 
ˇŒî
 = (±r_t)
	`__buûtö_ªtu∫_addªss
(0);

509 i‡(
ˇŒî
 >
GC_lib±hªad_°¨t
 && cÆÀ∏< 
GC_lib±hªad_íd


510 || (
ˇŒî
 >
GC_libld_°¨t
 && cÆÀ∏< 
GC_libld_íd
)) {

511 
	`GC_‰ì
(
p
);

516 #i‚de‡
IGNORE_FREE


517 
	`REDIRECT_FREE
(
p
);

519 
	}
}

	@mallocx.c

24 
	~<°dio.h
>

25 
	~"¥iv©e/gc_¥iv.h
"

27 
±r_t
 
GC_˛ór_°ack
();

28 
GC_exãnd_size_m≠
();

29 
GC_boﬁ
 
GC_Æloc_ª˛aim_li°
();

34 ** c⁄° 
	gGC_obj‰ìli°_±r
 = 
GC_obj‰ìli°
;

35 ** c⁄° 
	gGC_aobj‰ìli°_±r
 = 
GC_aobj‰ìli°
;

36 ** c⁄° 
	gGC_uobj‰ìli°_±r
 = 
GC_uobj‰ìli°
;

37 #ifde‡
ATOMIC_UNCOLLECTABLE


38 ** c⁄° 
	gGC_auobj‰ìli°_±r
 = 
GC_auobj‰ìli°
;

42 * 
	$GC_gíîic_‹_•ecül_mÆloc
(
size_t
 
lb
, 
knd
)

44 
knd
) {

45 #ifde‡
STUBBORN_ALLOC


46 
STUBBORN
:

47 (
	`GC_mÆloc_°ubb‹n
((
size_t
)
lb
));

49 
PTRFREE
:

50 (
	`GC_mÆloc_©omic
((
size_t
)
lb
));

51 
NORMAL
:

52 (
	`GC_mÆloc
((
size_t
)
lb
));

53 
UNCOLLECTABLE
:

54 (
	`GC_mÆloc_uncﬁÀ˘abÀ
((
size_t
)
lb
));

55 #ifde‡
ATOMIC_UNCOLLECTABLE


56 
AUNCOLLECTABLE
:

57 (
	`GC_mÆloc_©omic_uncﬁÀ˘abÀ
((
size_t
)
lb
));

60 (
	`GC_gíîic_mÆloc
(
lb
,
knd
));

62 
	}
}

69 * 
	$GC_ªÆloc
(* 
p
, 
size_t
 
lb
)

71 
hblk
 * 
h
;

72 
hdr
 * 
hhdr
;

73 
size_t
 
sz
;

74 
size_t
 
‹ig_sz
;

75 
obj_köd
;

77 i‡(
p
 =0Ë(
	`GC_mÆloc
(
lb
));

78 
h
 = 
	`HBLKPTR
(
p
);

79 
hhdr
 = 
	`HDR
(
h
);

80 
sz
 = 
hhdr
 -> 
hb_sz
;

81 
obj_köd
 = 
hhdr
 -> 
hb_obj_köd
;

82 
‹ig_sz
 = 
sz
;

84 i‡(
sz
 > 
MAXOBJBYTES
) {

86 
w‹d
 
des¸
;

88 
sz
 = (sz+
HBLKSIZE
-1Ë& (~
HBLKMASK
);

89 
hhdr
 -> 
hb_sz
 = 
sz
;

90 
des¸
 = 
GC_obj_köds
[
obj_köd
].
ok_des¸ùt‹
;

91 i‡(
GC_obj_köds
[
obj_köd
].
ok_ªloˇã_des¸
Ë
des¸
 +
sz
;

92 
hhdr
 -> 
hb_des¸
 = 
des¸
;

93 #ifde‡
MARK_BIT_PER_OBJ


94 
	`GC_ASSERT
(
hhdr
 -> 
hb_öv_sz
 =
LARGE_INV_SZ
);

96 
	`GC_ASSERT
(
hhdr
 -> 
hb_œrge_block
 &&

97 
hhdr
 -> 
hb_m≠
[
ANY_INDEX
] == 1);

99 i‡(
	`IS_UNCOLLECTABLE
(
obj_köd
)Ë
GC_n⁄_gc_byãs
 +(
sz
 - 
‹ig_sz
);

102 i‡(
	`ADD_SLOP
(
lb
Ë<
sz
) {

103 i‡(
lb
 >(
sz
 >> 1)) {

104 #ifde‡
STUBBORN_ALLOC


105 i‡(
obj_köd
 =
STUBBORN
Ë
	`GC_ch™ge_°ubb‹n
(
p
);

107 i‡(
‹ig_sz
 > 
lb
) {

111 
	`BZERO
(((
±r_t
)
p
Ë+ 
lb
, 
‹ig_sz
 -Üb);

113 (
p
);

116 * 
ªsu…
 =

117 
	`GC_gíîic_‹_•ecül_mÆloc
((
w‹d
)
lb
, 
obj_köd
);

119 i‡(
ªsu…
 == 0) (0);

122 
	`BCOPY
(
p
, 
ªsu…
, 
lb
);

123 #i‚de‡
IGNORE_FREE


124 
	`GC_‰ì
(
p
);

126 (
ªsu…
);

130 * 
ªsu…
 =

131 
	`GC_gíîic_‹_•ecül_mÆloc
((
w‹d
)
lb
, 
obj_köd
);

133 i‡(
ªsu…
 == 0) (0);

134 
	`BCOPY
(
p
, 
ªsu…
, 
sz
);

135 #i‚de‡
IGNORE_FREE


136 
	`GC_‰ì
(
p
);

138 (
ªsu…
);

140 
	}
}

142 #i‡
deföed
(
REDIRECT_MALLOC
Ë&& !deföed(
REDIRECT_REALLOC
)

143 
	#REDIRECT_REALLOC
 
GC_ªÆloc


	)

146 #ifde‡
REDIRECT_REALLOC


149 #ifde‡
GC_ADD_CALLER


150 
	#RA
 
GC_RETURN_ADDR
,

	)

152 
	#RA


	)

154 
	#GC_debug_ªÆloc_ª∂a˚mít
(
p
, 
lb
) \

155 
	`GC_debug_ªÆloc
(
p
, 
lb
, 
RA
 "unknown", 0)

	)

157 * 
	$ªÆloc
(* 
p
, 
size_t
 
lb
)

159 (
	`REDIRECT_REALLOC
(
p
, 
lb
));

160 
	}
}

162 #unde‡
GC_debug_ªÆloc_ª∂a˚mít


169 * 
	$GC_gíîic_mÆloc_ign‹e_off_∑ge
(
size_t
 
lb
, 
k
)

171 *
ªsu…
;

172 
size_t
 
lw
;

173 
size_t
 
lb_rounded
;

174 
w‹d
 
n_blocks
;

175 
GC_boﬁ
 
öô
;

176 
DCL_LOCK_STATE
;

178 i‡(
	`SMALL_OBJ
(
lb
))

179 (
	`GC_gíîic_mÆloc
((
w‹d
)
lb
, 
k
));

180 
lw
 = 
	`ROUNDED_UP_WORDS
(
lb
);

181 
lb_rounded
 = 
	`WORDS_TO_BYTES
(
lw
);

182 
n_blocks
 = 
	`OBJ_SZ_TO_BLOCKS
(
lb_rounded
);

183 
öô
 = 
GC_obj_köds
[
k
].
ok_öô
;

184 i‡(
GC_have_îr‹s
Ë
	`GC_¥öt_Æl_îr‹s
();

185 
	`GC_INVOKE_FINALIZERS
();

186 
	`LOCK
();

187 
ªsu…
 = (
±r_t
)
	`GC_Æloc_œrge
(
	`ADD_SLOP
(
lb
), 
k
, 
IGNORE_OFF_PAGE
);

188 i‡(0 !
ªsu…
) {

189 i‡(
GC_debuggög_°¨ãd
) {

190 
	`BZERO
(
ªsu…
, 
n_blocks
 * 
HBLKSIZE
);

192 #ifde‡
THREADS


195 ((
w‹d
 *)
ªsu…
)[0] = 0;

196 ((
w‹d
 *)
ªsu…
)[1] = 0;

197 ((
w‹d
 *)
ªsu…
)[
lw
-1] = 0;

198 ((
w‹d
 *)
ªsu…
)[
lw
-2] = 0;

202 
GC_byãs_Ælocd
 +
lb_rounded
;

203 
	`UNLOCK
();

204 i‡(0 =
ªsu…
) {

205 ((*
GC_oom_‚
)(
lb
));

207 i‡(
öô
 && !
GC_debuggög_°¨ãd
) {

208 
	`BZERO
(
ªsu…
, 
n_blocks
 * 
HBLKSIZE
);

210 (
ªsu…
);

212 
	}
}

214 * 
	$GC_mÆloc_ign‹e_off_∑ge
(
size_t
 
lb
)

216 ((*)
	`GC_gíîic_mÆloc_ign‹e_off_∑ge
(
lb
, 
NORMAL
));

217 
	}
}

219 * 
	$GC_mÆloc_©omic_ign‹e_off_∑ge
(
size_t
 
lb
)

221 ((*)
	`GC_gíîic_mÆloc_ign‹e_off_∑ge
(
lb
, 
PTRFREE
));

222 
	}
}

226 
	$GC_ö¸_byãs_Ælocd
(
size_t
 
n
)

228 
GC_byãs_Ælocd
 +
n
;

229 
	}
}

232 
	$GC_ö¸_byãs_‰ìd
(
size_t
 
n
)

234 
GC_byãs_‰ìd
 +
n
;

235 
	}
}

237 #i‡
deföed
(
THREADS
)

239 
sig√d_w‹d
 
GC_byãs_found
;

241 #ifde‡
PARALLEL_MARK


242 vﬁ©ûê
sig√d_w‹d
 
	gGC_byãs_Ælocd_tmp
 = 0;

268 
	$GC_gíîic_mÆloc_m™y
(
size_t
 
lb
, 
k
, **
ªsu…
)

270 *
›
;

271 *
p
;

272 **
›p
;

273 
size_t
 
lw
;

274 
size_t
 
lg
;

275 
sig√d_w‹d
 
my_byãs_Ælocd
 = 0;

276 
obj_köd
 * 
ok
 = &(
GC_obj_köds
[
k
]);

277 
DCL_LOCK_STATE
;

279 
	`GC_ASSERT
((
lb
 & (
GRANULE_BYTES
-1)) == 0);

280 i‡(!
	`SMALL_OBJ
(
lb
)) {

281 
›
 = 
	`GC_gíîic_mÆloc
(
lb
, 
k
);

282 if(0 !
›
Ë
	`obj_lök
(op) = 0;

283 *
ªsu…
 = 
›
;

286 
lw
 = 
	`BYTES_TO_WORDS
(
lb
);

287 
lg
 = 
	`BYTES_TO_GRANULES
(
lb
);

288 i‡(
GC_have_îr‹s
Ë
	`GC_¥öt_Æl_îr‹s
();

289 
	`GC_INVOKE_FINALIZERS
();

290 
	`LOCK
();

291 i‡(!
GC_is_öôülized
Ë
	`GC_öô_ö√r
();

293 i‡(
GC_ö¸emíèl
 && !
GC_d⁄t_gc
) {

294 
	`ENTER_GC
();

295 
	`GC_cﬁÀ˘_a_lôée_ö√r
(1);

296 
	`EXIT_GC
();

301 
hblk
 ** 
æh
 = 
ok
 -> 
ok_ª˛aim_li°
;

302 
hblk
 * 
hbp
;

303 
hdr
 * 
hhdr
;

305 
æh
 +
lg
;

306 (
hbp
 = *
æh
) != 0) {

307 
hhdr
 = 
	`HDR
(
hbp
);

308 *
æh
 = 
hhdr
 -> 
hb_√xt
;

309 
	`GC_ASSERT
(
hhdr
 -> 
hb_sz
 =
lb
);

310 
hhdr
 -> 
hb_œ°_ª˛aimed
 = (Ë
GC_gc_no
;

311 #ifde‡
PARALLEL_MARK


313 
sig√d_w‹d
 
my_byãs_Ælocd_tmp
 = 
GC_byãs_Ælocd_tmp
;

315 
	`GC_ASSERT
(
my_byãs_Ælocd_tmp
 >= 0);

319 i‡(
my_byãs_Ælocd_tmp
 != 0) {

320 ()
	`AO_„tch_™d_add
(

321 (vﬁ©ûê
AO_t
 *)(&
GC_byãs_Ælocd_tmp
),

322 (
AO_t
)(-
my_byãs_Ælocd_tmp
));

323 
GC_byãs_Ælocd
 +
my_byãs_Ælocd_tmp
;

326 
	`GC_acquúe_m¨k_lock
();

327 ++ 
GC_Ê_buûdî_cou¡
;

328 
	`UNLOCK
();

329 
	`GC_ªÀa£_m¨k_lock
();

331 
›
 = 
	`GC_ª˛aim_gíîic
(
hbp
, 
hhdr
, 
lb
,

332 
ok
 -> 
ok_öô
, 0, &
my_byãs_Ælocd
);

333 i‡(
›
 != 0) {

338 
GC_byãs_found
 +
my_byãs_Ælocd
;

339 #ifde‡
PARALLEL_MARK


340 *
ªsu…
 = 
›
;

341 ()
	`AO_„tch_™d_add
(

342 (vﬁ©ûê
AO_t
 *)(&
GC_byãs_Ælocd_tmp
),

343 (
AO_t
)(
my_byãs_Ælocd
));

344 
	`GC_acquúe_m¨k_lock
();

345 -- 
GC_Ê_buûdî_cou¡
;

346 i‡(
GC_Ê_buûdî_cou¡
 =0Ë
	`GC_nŸify_Æl_buûdî
();

347 
	`GC_ªÀa£_m¨k_lock
();

348 (Ë
	`GC_˛ór_°ack
(0);

351 
GC_byãs_Ælocd
 +
my_byãs_Ælocd
;

352 
out
;

355 #ifde‡
PARALLEL_MARK


356 
	`GC_acquúe_m¨k_lock
();

357 -- 
GC_Ê_buûdî_cou¡
;

358 i‡(
GC_Ê_buûdî_cou¡
 =0Ë
	`GC_nŸify_Æl_buûdî
();

359 
	`GC_ªÀa£_m¨k_lock
();

360 
	`LOCK
();

370 
›p
 = &(
GC_obj_köds
[
k
].
ok_‰ìli°
[
lg
]);

371 i‡–(
›
 = *
›p
) != 0 ) {

372 *
›p
 = 0;

373 
my_byãs_Ælocd
 = 0;

374 
p
 = 
›
;Ö !0;Ö = 
	`obj_lök
(p)) {

375 
my_byãs_Ælocd
 +
lb
;

376 i‡(
my_byãs_Ælocd
 >
HBLKSIZE
) {

377 *
›p
 = 
	`obj_lök
(
p
);

378 
	`obj_lök
(
p
) = 0;

382 
GC_byãs_Ælocd
 +
my_byãs_Ælocd
;

383 
out
;

387 
hblk
 *
h
 = 
	`GC_Ælochblk
(
lb
, 
k
, 0);

388 i‡(
h
 != 0) {

389 i‡(
	`IS_UNCOLLECTABLE
(
k
)Ë
	`GC_£t_hdr_m¨ks
(
	`HDR
(
h
));

390 
GC_byãs_Ælocd
 +
HBLKSIZE
 - HBLKSIZE % 
lb
;

391 #ifde‡
PARALLEL_MARK


392 
	`GC_acquúe_m¨k_lock
();

393 ++ 
GC_Ê_buûdî_cou¡
;

394 
	`UNLOCK
();

395 
	`GC_ªÀa£_m¨k_lock
();

398 
›
 = 
	`GC_buûd_Ê
(
h
, 
lw
, 
ok
 -> 
ok_öô
, 0);

399 #ifde‡
PARALLEL_MARK


400 *
ªsu…
 = 
›
;

401 
	`GC_acquúe_m¨k_lock
();

402 -- 
GC_Ê_buûdî_cou¡
;

403 i‡(
GC_Ê_buûdî_cou¡
 =0Ë
	`GC_nŸify_Æl_buûdî
();

404 
	`GC_ªÀa£_m¨k_lock
();

405 (Ë
	`GC_˛ór_°ack
(0);

408 
out
;

415 
›
 = 
	`GC_gíîic_mÆloc_ö√r
(
lb
, 
k
);

416 i‡(0 !
›
Ë
	`obj_lök
(op) = 0;

418 
out
:

419 *
ªsu…
 = 
›
;

420 
	`UNLOCK
();

421 (Ë
	`GC_˛ór_°ack
(0);

422 
	}
}

424 * 
	$GC_mÆloc_m™y
(
size_t
 
lb
)

426 *
ªsu…
;

427 
	`GC_gíîic_mÆloc_m™y
(((
lb
 + 
EXTRA_BYTES
 + 
GRANULE_BYTES
-1)

428 & ~(
GRANULE_BYTES
-1)),

429 
NORMAL
, &
ªsu…
);

430  
ªsu…
;

431 
	}
}

438 * 
	$GC_mÆloc_uncﬁÀ˘abÀ
(
size_t
 
lb
)

440 *
›
;

441 **
›p
;

442 
size_t
 
lg
;

443 
DCL_LOCK_STATE
;

445 if–
	`SMALL_OBJ
(
lb
) ) {

446 i‡(
EXTRA_BYTES
 !0 && 
lb
 != 0)Üb--;

449 
lg
 = 
GC_size_m≠
[
lb
];

450 
›p
 = &(
GC_uobj‰ìli°
[
lg
]);

451 
	`LOCK
();

452 if–(
›
 = *
›p
) != 0 ) {

454 *
›p
 = 
	`obj_lök
(
›
);

455 
	`obj_lök
(
›
) = 0;

456 
GC_byãs_Ælocd
 +
	`GRANULES_TO_BYTES
(
lg
);

460 
GC_n⁄_gc_byãs
 +
	`GRANULES_TO_BYTES
(
lg
);

461 
	`UNLOCK
();

463 
	`UNLOCK
();

464 
›
 = (
±r_t
)
	`GC_gíîic_mÆloc
((
w‹d
)
lb
, 
UNCOLLECTABLE
);

467 
	`GC_ASSERT
(0 =
›
 || 
	`GC_is_m¨ked
(op));

468 ((*Ë
›
);

470 
hdr
 * 
hhdr
;

472 
›
 = (
±r_t
)
	`GC_gíîic_mÆloc
((
w‹d
)
lb
, 
UNCOLLECTABLE
);

473 i‡(0 =
›
) (0);

475 
	`GC_ASSERT
(((
w‹d
)
›
 & (
HBLKSIZE
 - 1)) == 0);

476 
hhdr
 = 
	`HDR
((
hbklk
 *)
›
);

480 
lb
 = 
hhdr
 -> 
hb_sz
;

481 
	`LOCK
();

482 
	`£t_m¨k_bô_‰om_hdr
(
hhdr
, 0);

483 
	`GC_ASSERT
(
hhdr
 -> 
hb_n_m¨ks
 == 0);

484 
hhdr
 -> 
hb_n_m¨ks
 = 1;

485 
	`UNLOCK
();

486 ((*Ë
›
);

488 
	}
}

492 
	~<limôs.h
>

494 * 
	$GC_memÆign
(
size_t
 
Æign
, size_à
lb
)

496 
size_t
 
√w_lb
;

497 
size_t
 
off£t
;

498 
±r_t
 
ªsu…
;

500 i‡(
Æign
 <
GRANULE_BYTES
Ë 
	`GC_mÆloc
(
lb
);

501 i‡(
Æign
 >
HBLKSIZE
/2 || 
lb
 >= HBLKSIZE/2) {

502 i‡(
Æign
 > 
HBLKSIZE
Ë 
	`GC_oom_‚
(
LONG_MAX
-1024) ;

503  
	`GC_mÆloc
(
lb
 <
HBLKSIZE
? HBLKSIZE :Üb);

508 
√w_lb
 = 
lb
 + 
Æign
 - 1;

509 
ªsu…
 = 
	`GC_mÆloc
(
√w_lb
);

510 
off£t
 = (
w‹d
)
ªsu…
 % 
Æign
;

511 i‡(
off£t
 != 0) {

512 
off£t
 = 
Æign
 - offset;

513 i‡(!
GC_Æl_öãri‹_poöãrs
) {

514 i‡(
off£t
 >
VALID_OFFSET_SZ
Ë 
	`GC_mÆloc
(
HBLKSIZE
);

515 
	`GC_ªgi°î_di•œ˚mít
(
off£t
);

518 
ªsu…
 = (*Ë((
±r_t
Ïesu… + 
off£t
);

519 
	`GC_ASSERT
((
w‹d
)
ªsu…
 % 
Æign
 == 0);

520  
ªsu…
;

521 
	}
}

523 #ifde‡
ATOMIC_UNCOLLECTABLE


527 * 
	$GC_mÆloc_©omic_uncﬁÀ˘abÀ
(
size_t
 
lb
)

529 *
›
;

530 **
›p
;

531 
size_t
 
lg
;

532 
DCL_LOCK_STATE
;

534 if–
	`SMALL_OBJ
(
lb
) ) {

535 i‡(
EXTRA_BYTES
 !0 && 
lb
 != 0)Üb--;

538 
lg
 = 
GC_size_m≠
[
lb
];

539 
›p
 = &(
GC_auobj‰ìli°
[
lg
]);

540 
	`LOCK
();

541 if–(
›
 = *
›p
) != 0 ) {

543 *
›p
 = 
	`obj_lök
(
›
);

544 
	`obj_lök
(
›
) = 0;

545 
GC_byãs_Ælocd
 +
	`GRANULES_TO_BYTES
(
lg
);

547 
GC_n⁄_gc_byãs
 +
	`GRANULES_TO_BYTES
(
lg
);

548 
	`UNLOCK
();

550 
	`UNLOCK
();

551 
›
 = (
±r_t
)
	`GC_gíîic_mÆloc
(
lb
, 
AUNCOLLECTABLE
);

553 
	`GC_ASSERT
(0 =
›
 || 
	`GC_is_m¨ked
(op));

554 ((*Ë
›
);

556 
hdr
 * 
hhdr
;

558 
›
 = (
±r_t
)
	`GC_gíîic_mÆloc
(
lb
, 
AUNCOLLECTABLE
);

559 i‡(0 =
›
) (0);

561 
	`GC_ASSERT
(((
w‹d
)
›
 & (
HBLKSIZE
 - 1)) == 0);

562 
hhdr
 = 
	`HDR
((
hbklk
 *)
›
);

563 
lb
 = 
hhdr
 -> 
hb_sz
;

565 
	`LOCK
();

566 
	`£t_m¨k_bô_‰om_hdr
(
hhdr
, 0);

567 
	`GC_ASSERT
(
hhdr
 -> 
hb_n_m¨ks
 == 0);

568 
hhdr
 -> 
hb_n_m¨ks
 = 1;

569 
	`UNLOCK
();

570 ((*Ë
›
);

572 
	}
}

	@mark.c

19 
	~<°dio.h
>

20 
	~"¥iv©e/gc_pm¨k.h
"

22 #i‡
deföed
(
MSWIN32
Ë&& deföed(
__GNUC__
)

23 
	~<ex˝t.h
>

28 #ifde‡
__WATCOMC__


29 
	$GC_no›
(*
p
, ...Ë{
	}
}

31 
	$GC_no›
(Ë{
	}
}

35 
	$GC_no›1
(
w‹d
 
x
)

37 vﬁ©ûê
w‹d
 
sök
;

39 
sök
 = 
x
;

40 
	}
}

44 
	gGC_n_m¨k_¥ocs
 = 
GC_RESERVED_MARK_PROCS
;

50 
obj_köd
 
	gGC_obj_köds
[
MAXOBJKINDS
] = {

51  { &
GC_aobj‰ìli°
[0], 0 ,

52 0 | 
GC_DS_LENGTH
, 
FALSE
, FALSE },

53  { &
GC_obj‰ìli°
[0], 0,

54 0 | 
GC_DS_LENGTH
,

55 
TRUE
 , TRUE },

57 { &
GC_uobj‰ìli°
[0], 0,

58 0 | 
GC_DS_LENGTH
, 
TRUE
 , TRUE },

59 #ifde‡
ATOMIC_UNCOLLECTABLE


61 { &
GC_auobj‰ìli°
[0], 0,

62 0 | 
GC_DS_LENGTH
, 
FALSE
 , FALSE },

64 #ifde‡
STUBBORN_ALLOC


65  { &
GC_sobj‰ìli°
[0], 0,

66 0 | 
GC_DS_LENGTH
, 
TRUE
 , TRUE },

70 #ifde‡
ATOMIC_UNCOLLECTABLE


71 #ifde‡
STUBBORN_ALLOC


72 
	gGC_n_köds
 = 5;

74 
	gGC_n_köds
 = 4;

77 #ifde‡
STUBBORN_ALLOC


78 
	gGC_n_köds
 = 4;

80 
	gGC_n_köds
 = 3;

85 #i‚de‡
INITIAL_MARK_STACK_SIZE


86 
	#INITIAL_MARK_STACK_SIZE
 (1*
HBLKSIZE
)

	)

101 
w‹d
 
	gGC_n_ªscuög_∑ges
;

104 
m£
 * 
	gGC_m¨k_°ack
;

106 
m£
 * 
	gGC_m¨k_°ack_limô
;

108 
size_t
 
	gGC_m¨k_°ack_size
 = 0;

110 #ifde‡
PARALLEL_MARK


111 
	~"©omic_›s.h
"

113 
m£
 * vﬁ©ûê
	gGC_m¨k_°ack_t›
;

115 vﬁ©ûê
AO_t
 
	gGC_fú°_n⁄em±y
;

121 
m£
 * 
	gGC_m¨k_°ack_t›
;

124 
hblk
 * 
	gsˇn_±r
;

126 
m¨k_°©e_t
 
	gGC_m¨k_°©e
 = 
MS_NONE
;

128 
GC_boﬁ
 
	gGC_m¨k_°ack_too_smÆl
 = 
FALSE
;

130 
GC_boﬁ
 
	gGC_obje˘s_¨e_m¨ked
 = 
FALSE
;

136 
GC_boﬁ
 
	$GC_cﬁÀ˘i⁄_ö_¥ogªss
()

138 (
GC_m¨k_°©e
 !
MS_NONE
);

139 
	}
}

142 
	$GC_˛ór_hdr_m¨ks
(
hdr
 *
hhdr
)

144 
size_t
 
œ°_bô
 = 
	`FINAL_MARK_BIT
(
hhdr
 -> 
hb_sz
);

146 #ifde‡
USE_MARK_BYTES


147 
	`BZERO
(
hhdr
 -> 
hb_m¨ks
, 
MARK_BITS_SZ
);

148 
hhdr
 -> 
hb_m¨ks
[
œ°_bô
] = 1;

150 
	`BZERO
(
hhdr
 -> 
hb_m¨ks
, 
MARK_BITS_SZ
*(
w‹d
));

151 
	`£t_m¨k_bô_‰om_hdr
(
hhdr
, 
œ°_bô
);

153 
hhdr
 -> 
hb_n_m¨ks
 = 0;

154 
	}
}

157 
	$GC_£t_hdr_m¨ks
(
hdr
 *
hhdr
)

159 
i
;

160 
size_t
 
sz
 = 
hhdr
 -> 
hb_sz
;

161 
size_t
 
n_m¨ks
 = 
	`FINAL_MARK_BIT
(
sz
);

163 #ifde‡
USE_MARK_BYTES


164 
i
 = 0; i <
n_m¨ks
; i +
	`MARK_BIT_OFFSET
(
sz
)) {

165 
hhdr
 -> 
hb_m¨ks
[
i
] = 1;

168 
i
 = 0; i < 
	`divWORDSZ
(
n_m¨ks
 + 
WORDSZ
); ++i) {

169 
hhdr
 -> 
hb_m¨ks
[
i
] = 
ONES
;

172 #ifde‡
MARK_BIT_PER_OBJ


173 
hhdr
 -> 
hb_n_m¨ks
 = 
n_m¨ks
 - 1;

175 
hhdr
 -> 
hb_n_m¨ks
 = 
	`HBLK_OBJS
(
sz
);

177 
	}
}

183 
	$˛ór_m¨ks_f‹_block
(
hblk
 *
h
, 
w‹d
 
dummy
)

185 
hdr
 * 
hhdr
 = 
	`HDR
(
h
);

187 i‡(
	`IS_UNCOLLECTABLE
(
hhdr
 -> 
hb_obj_köd
)) ;

191 
	`GC_˛ór_hdr_m¨ks
(
hhdr
);

192 
	}
}

195 
	$GC_£t_m¨k_bô
(
±r_t
 
p
)

197 
hblk
 *
h
 = 
	`HBLKPTR
(
p
);

198 
hdr
 * 
hhdr
 = 
	`HDR
(
h
);

199 
w‹d
 
bô_no
 = 
	`MARK_BIT_NO
(
p
 - (
±r_t
)
h
, 
hhdr
 -> 
hb_sz
);

201 i‡(!
	`m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
)) {

202 
	`£t_m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
);

203 ++
hhdr
 -> 
hb_n_m¨ks
;

205 
	}
}

207 
	$GC_˛ór_m¨k_bô
(
±r_t
 
p
)

209 
hblk
 *
h
 = 
	`HBLKPTR
(
p
);

210 
hdr
 * 
hhdr
 = 
	`HDR
(
h
);

211 
w‹d
 
bô_no
 = 
	`MARK_BIT_NO
(
p
 - (
±r_t
)
h
, 
hhdr
 -> 
hb_sz
);

213 i‡(
	`m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
)) {

214 
size_t
 
n_m¨ks
;

215 
	`˛ór_m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
);

216 
n_m¨ks
 = 
hhdr
 -> 
hb_n_m¨ks
 - 1;

217 #ifde‡
PARALLEL_MARK


218 i‡(
n_m¨ks
 != 0)

219 
hhdr
 -> 
hb_n_m¨ks
 = 
n_m¨ks
;

224 
hhdr
 -> 
hb_n_m¨ks
 = 
n_m¨ks
;

227 
	}
}

229 
GC_boﬁ
 
	$GC_is_m¨ked
(
±r_t
 
p
)

231 
hblk
 *
h
 = 
	`HBLKPTR
(
p
);

232 
hdr
 * 
hhdr
 = 
	`HDR
(
h
);

233 
w‹d
 
bô_no
 = 
	`MARK_BIT_NO
(
p
 - (
±r_t
)
h
, 
hhdr
 -> 
hb_sz
);

235 ((
GC_boﬁ
)
	`m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
));

236 
	}
}

244 
	$GC_˛ór_m¨ks
()

246 
	`GC_≠∂y_to_Æl_blocks
(
˛ór_m¨ks_f‹_block
, (
w‹d
)0);

247 
GC_obje˘s_¨e_m¨ked
 = 
FALSE
;

248 
GC_m¨k_°©e
 = 
MS_INVALID
;

249 
sˇn_±r
 = 0;

250 
	}
}

255 
	$GC_öôüã_gc
()

257 i‡(
GC_dúty_maöèöed
Ë
	`GC_ªad_dúty
();

258 #ifde‡
STUBBORN_ALLOC


259 
	`GC_ªad_ch™ged
();

261 #ifde‡
CHECKSUMS


263 
	`GC_check_dúty
();

265 i‡(
GC_dúty_maöèöed
Ë
	`GC_check_dúty
();

268 
GC_n_ªscuög_∑ges
 = 0;

269 i‡(
GC_m¨k_°©e
 =
MS_NONE
) {

270 
GC_m¨k_°©e
 = 
MS_PUSH_RESCUERS
;

271 } i‡(
GC_m¨k_°©e
 !
MS_INVALID
) {

272 
	`ABORT
("unexpected state");

275 
sˇn_±r
 = 0;

276 
	}
}

279 
Æloc_m¨k_°ack
(
size_t
);

281 #i‡
deföed
(
MSWIN32
Ë|| deföed(
USE_PROC_FOR_LIBRARIES
Ë&& deföed(
THREADS
)

285 
	#WRAP_MARK_SOME


	)

297 #ifde‡
WRAP_MARK_SOME


302 
GC_boﬁ
 
	$GC_m¨k_some_ö√r
(
±r_t
 
cﬁd_gc_‰ame
)

304 
GC_boﬁ
 
	$GC_m¨k_some
(
±r_t
 
cﬁd_gc_‰ame
)

307 
GC_m¨k_°©e
) {

308 
MS_NONE
:

309 (
FALSE
);

311 
MS_PUSH_RESCUERS
:

312 i‡(
GC_m¨k_°ack_t›


313 >
GC_m¨k_°ack_limô
 - 
INITIAL_MARK_STACK_SIZE
/2) {

317 
GC_m¨k_°ack_too_smÆl
 = 
TRUE
;

318 
	`MARK_FROM_MARK_STACK
();

319 (
FALSE
);

321 
sˇn_±r
 = 
	`GC_push_√xt_m¨ked_dúty
(scan_ptr);

322 i‡(
sˇn_±r
 == 0) {

323 i‡(
GC_¥öt_°©s
) {

324 
	`GC_log_¥ötf
("Marked from %u dirtyÖages\n",

325 
GC_n_ªscuög_∑ges
);

327 
	`GC_push_roŸs
(
FALSE
, 
cﬁd_gc_‰ame
);

328 
GC_obje˘s_¨e_m¨ked
 = 
TRUE
;

329 i‡(
GC_m¨k_°©e
 !
MS_INVALID
) {

330 
GC_m¨k_°©e
 = 
MS_ROOTS_PUSHED
;

334 (
FALSE
);

336 
MS_PUSH_UNCOLLECTABLE
:

337 i‡(
GC_m¨k_°ack_t›


338 >
GC_m¨k_°ack
 + 
GC_m¨k_°ack_size
/4) {

339 #ifde‡
PARALLEL_MARK


342 i‡(
GC_∑øŒñ
Ë
GC_m¨k_°ack_too_smÆl
 = 
TRUE
;

344 
	`MARK_FROM_MARK_STACK
();

345 (
FALSE
);

347 
sˇn_±r
 = 
	`GC_push_√xt_m¨ked_uncﬁÀ˘abÀ
(scan_ptr);

348 i‡(
sˇn_±r
 == 0) {

349 
	`GC_push_roŸs
(
TRUE
, 
cﬁd_gc_‰ame
);

350 
GC_obje˘s_¨e_m¨ked
 = 
TRUE
;

351 i‡(
GC_m¨k_°©e
 !
MS_INVALID
) {

352 
GC_m¨k_°©e
 = 
MS_ROOTS_PUSHED
;

356 (
FALSE
);

358 
MS_ROOTS_PUSHED
:

359 #ifde‡
PARALLEL_MARK


368 i‡(
GC_∑øŒñ
) {

369 
	`GC_do_∑øŒñ_m¨k
();

370 
	`GC_ASSERT
(
GC_m¨k_°ack_t›
 < (
m£
 *)
GC_fú°_n⁄em±y
);

371 
GC_m¨k_°ack_t›
 = 
GC_m¨k_°ack
 - 1;

372 i‡(
GC_m¨k_°ack_too_smÆl
) {

373 
	`Æloc_m¨k_°ack
(2*
GC_m¨k_°ack_size
);

375 i‡(
GC_m¨k_°©e
 =
MS_ROOTS_PUSHED
) {

376 
GC_m¨k_°©e
 = 
MS_NONE
;

377 (
TRUE
);

379 (
FALSE
);

383 i‡(
GC_m¨k_°ack_t›
 >
GC_m¨k_°ack
) {

384 
	`MARK_FROM_MARK_STACK
();

385 (
FALSE
);

387 
GC_m¨k_°©e
 = 
MS_NONE
;

388 i‡(
GC_m¨k_°ack_too_smÆl
) {

389 
	`Æloc_m¨k_°ack
(2*
GC_m¨k_°ack_size
);

391 (
TRUE
);

394 
MS_INVALID
:

395 
MS_PARTIALLY_INVALID
:

396 i‡(!
GC_obje˘s_¨e_m¨ked
) {

397 
GC_m¨k_°©e
 = 
MS_PUSH_UNCOLLECTABLE
;

398 (
FALSE
);

400 i‡(
GC_m¨k_°ack_t›
 >
GC_m¨k_°ack
) {

401 
	`MARK_FROM_MARK_STACK
();

402 (
FALSE
);

404 i‡(
sˇn_±r
 =0 && 
GC_m¨k_°©e
 =
MS_INVALID
) {

407 i‡(
GC_m¨k_°ack_too_smÆl
) {

408 
	`Æloc_m¨k_°ack
(2*
GC_m¨k_°ack_size
);

410 
GC_m¨k_°©e
 = 
MS_PARTIALLY_INVALID
;

412 
sˇn_±r
 = 
	`GC_push_√xt_m¨ked
(scan_ptr);

413 i‡(
sˇn_±r
 =0 && 
GC_m¨k_°©e
 =
MS_PARTIALLY_INVALID
) {

414 
	`GC_push_roŸs
(
TRUE
, 
cﬁd_gc_‰ame
);

415 
GC_obje˘s_¨e_m¨ked
 = 
TRUE
;

416 i‡(
GC_m¨k_°©e
 !
MS_INVALID
) {

417 
GC_m¨k_°©e
 = 
MS_ROOTS_PUSHED
;

420 (
FALSE
);

422 
	`ABORT
("GC_mark_some: bad state");

423 (
FALSE
);

425 
	}
}

428 #i‡
deföed
(
MSWIN32
Ë&& deföed(
__GNUC__
)

431 
EXCEPTION_REGISTRATION
 
	mex_ªg
;

432 *
	mÆt_∑th
;

433 } 
	text_ex_ªgn
;

436 
EXCEPTION_DISPOSITION
 
	$m¨k_ex_h™dÀr
(

437 
_EXCEPTION_RECORD
 *
ex_ªc
,

438 *
e°_‰ame
,

439 
_CONTEXT
 *
c⁄ãxt
,

440 *
di•_˘xt
)

442 i‡(
ex_ªc
->
Ex˚±i⁄Code
 =
STATUS_ACCESS_VIOLATION
) {

443 
ext_ex_ªgn
 *
xî
 = (ext_ex_ªg¿*)
e°_‰ame
;

449 
c⁄ãxt
->
E•
 = c⁄ãxt->
Ebp
;

450 
c⁄ãxt
->
Ebp
 = *((
DWORD
 *)c⁄ãxt->
E•
);

451 
c⁄ãxt
->
E•
 = context->Esp - 8;

455 
c⁄ãxt
->
Eù
 = (
DWORD
 )(
xî
->
Æt_∑th
);

457  
Ex˚±i⁄C⁄töueExecuti⁄
;

460  
Ex˚±i⁄C⁄töueSórch
;

462 
	}
}

465 #ifde‡
GC_WIN32_THREADS


466 
GC_boﬁ
 
GC_°¨ãd_thªad_whûe_°›≥d
();

471 #ifde‡
WRAP_MARK_SOME


472 
GC_boﬁ
 
	$GC_m¨k_some
(
±r_t
 
cﬁd_gc_‰ame
)

474 
GC_boﬁ
 
ªt_vÆ
;

476 #ifde‡
MSWIN32


477 #i‚de‡
__GNUC__


491 
__åy
 {

492 
ªt_vÆ
 = 
	`GC_m¨k_some_ö√r
(
cﬁd_gc_‰ame
);

493 } 
	`__ex˚±
 (
	`GëEx˚±i⁄Code
(Ë=
EXCEPTION_ACCESS_VIOLATION
 ?

494 
EXCEPTION_EXECUTE_HANDLER
 : 
EXCEPTION_CONTINUE_SEARCH
) {

495 
h™dÀ_ex
;

497 #ifde‡
GC_WIN32_THREADS


503 i‡(
	`GC_°¨ãd_thªad_whûe_°›≥d
()Ë
h™dÀ_ex
;

505 
rm_h™dÀr
:

506  
ªt_vÆ
;

514 
ext_ex_ªgn
 
î
;

516 
î
.
Æt_∑th
 = &&
h™dÀ_ex
;

517 
î
.
ex_ªg
.
h™dÀr
 = 
m¨k_ex_h™dÀr
;

518 
asm
 vﬁ©ûê("mov»%%fs:0, %0" : "Ù" (
î
.
ex_ªg
.
¥ev
));

519 
asm
 vﬁ©ûê("mov»%0, %%fs:0" : : "r" (&
î
));

520 
ªt_vÆ
 = 
	`GC_m¨k_some_ö√r
(
cﬁd_gc_‰ame
);

523 i‡(
î
.
Æt_∑th
 == 0)

524 
h™dÀ_ex
;

525 
rm_h™dÀr
:

527 
asm
 vﬁ©ûê("mov %0, %%fs:0" : : "r" (
î
.
ex_ªg
.
¥ev
));

528  
ªt_vÆ
;

537 i‡(
GC_ö¸emíèl
)

538 
	`WARN
("Incremental GC incompatible with /procÑoots\n", 0);

540 
	`GC_£tup_ãmp‹¨y_Áu…_h™dÀr
();

541 if(
	`SETJMP
(
GC_jmp_buf
Ë!0Ë
h™dÀ_ex
;

542 
ªt_vÆ
 = 
	`GC_m¨k_some_ö√r
(
cﬁd_gc_‰ame
);

543 
rm_h™dÀr
:

544 
	`GC_ª£t_Áu…_h™dÀr
();

545  
ªt_vÆ
;

549 
h™dÀ_ex
:

551 i‡(
GC_¥öt_°©s
) {

552 
	`GC_log_¥ötf
("Caught ACCESS_VIOLATION in marker. "

558 
	`GC_övÆid©e_m¨k_°©e
();

559 
sˇn_±r
 = 0;

561 
ªt_vÆ
 = 
FALSE
;

562 
rm_h™dÀr
;

563 
	}
}

567 
GC_boﬁ
 
	$GC_m¨k_°ack_em±y
()

569 (
GC_m¨k_°ack_t›
 < 
GC_m¨k_°ack
);

570 
	}
}

572 
	$GC_övÆid©e_m¨k_°©e
()

574 
GC_m¨k_°©e
 = 
MS_INVALID
;

575 
GC_m¨k_°ack_t›
 = 
GC_m¨k_°ack
-1;

576 
	}
}

578 
m£
 * 
	$GC_sig«l_m¨k_°ack_ovîÊow
(
m£
 *
m•
)

580 
GC_m¨k_°©e
 = 
MS_INVALID
;

581 
GC_m¨k_°ack_too_smÆl
 = 
TRUE
;

582 i‡(
GC_¥öt_°©s
) {

583 
	`GC_log_¥ötf
("Mark stack overflow; current size = %luÉntries\n",

584 
GC_m¨k_°ack_size
);

586 (
m•
 - 
GC_MARK_STACK_DISCARDS
);

587 
	}
}

603 
m£
 * 
	$GC_m¨k_‰om
(
m£
 *
m¨k_°ack_t›
, m£ *
m¨k_°ack
, m£ *
m¨k_°ack_limô
)

605 
sig√d_w‹d
 
¸edô
 = 
HBLKSIZE
;

606 
±r_t
 
cuºít_p
;

607 
w‹d
 
cuºít
;

608 
±r_t
 
limô
;

610 
w‹d
 
des¸
;

611 
±r_t
 
gª©e°_ha
 = 
GC_gª©e°_∂ausibÀ_hóp_addr
;

612 
±r_t
 
Àa°_ha
 = 
GC_Àa°_∂ausibÀ_hóp_addr
;

613 
DECLARE_HDR_CACHE
;

615 
	#SPLIT_RANGE_WORDS
 128

	)

617 
GC_obje˘s_¨e_m¨ked
 = 
TRUE
;

618 
INIT_HDR_CACHE
;

619 #ifde‡
OS2


620 
m¨k_°ack_t›
 >
m¨k_°ack
 && 
¸edô
 >= 0) {

622 (((
±r_t
)
m¨k_°ack_t›
 - (±r_t)
m¨k_°ack
Ë| 
¸edô
)

625 
cuºít_p
 = 
m¨k_°ack_t›
 -> 
m£_°¨t
;

626 
des¸
 = 
m¨k_°ack_t›
 -> 
m£_des¸
;

627 
ªåy
:

633 i‡(
des¸
 & ((~(
	`WORDS_TO_BYTES
(
SPLIT_RANGE_WORDS
Ë- 1)Ë| 
GC_DS_TAGS
)) {

634 
w‹d
 
èg
 = 
des¸
 & 
GC_DS_TAGS
;

636 
èg
) {

637 
GC_DS_LENGTH
:

641 
	`GC_ASSERT
(
des¸
 < (
w‹d
)
GC_gª©e°_∂ausibÀ_hóp_addr


642 - (
w‹d
)
GC_Àa°_∂ausibÀ_hóp_addr
);

643 #ifde‡
ENABLE_TRACE


644 i‡(
GC_åa˚_addr
 >
cuºít_p


645 && 
GC_åa˚_addr
 < 
cuºít_p
 + 
des¸
) {

646 
	`GC_log_¥ötf
("GC:%d Large section; start %pÜen %lu\n",

647 
GC_gc_no
, 
cuºít_p
, (Ë
des¸
);

650 #ifde‡
PARALLEL_MARK


651 
	#SHARE_BYTES
 2048

	)

652 i‡(
des¸
 > 
SHARE_BYTES
 && 
GC_∑øŒñ


653 && 
m¨k_°ack_t›
 < 
m¨k_°ack_limô
 - 1) {

654 
√w_size
 = (
des¸
/2Ë& ~((
w‹d
)-1);

655 
m¨k_°ack_t›
 -> 
m£_°¨t
 = 
cuºít_p
;

656 
m¨k_°ack_t›
 -> 
m£_des¸
 = 
√w_size
 + (
w‹d
);

659 
m¨k_°ack_t›
++;

660 #ifde‡
ENABLE_TRACE


661 i‡(
GC_åa˚_addr
 >
cuºít_p


662 && 
GC_åa˚_addr
 < 
cuºít_p
 + 
des¸
) {

663 
	`GC_log_¥ötf
("GC:%d splitting (parallel) %pát %p\n",

664 
GC_gc_no
, 
cuºít_p
, cuºít_∞+ 
√w_size
);

667 
cuºít_p
 +
√w_size
;

668 
des¸
 -
√w_size
;

669 
ªåy
;

672 
m¨k_°ack_t›
 -> 
m£_°¨t
 =

673 
limô
 = 
cuºít_p
 + 
	`WORDS_TO_BYTES
(
SPLIT_RANGE_WORDS
-1);

674 
m¨k_°ack_t›
 -> 
m£_des¸
 =

675 
des¸
 - 
	`WORDS_TO_BYTES
(
SPLIT_RANGE_WORDS
-1);

676 #ifde‡
ENABLE_TRACE


677 i‡(
GC_åa˚_addr
 >
cuºít_p


678 && 
GC_åa˚_addr
 < 
cuºít_p
 + 
des¸
) {

679 
	`GC_log_¥ötf
("GC:%d splitting %pát %p\n",

680 
GC_gc_no
, 
cuºít_p
, 
limô
);

685 
limô
 +(
w‹d
Ë- 
ALIGNMENT
;

687 
GC_DS_BITMAP
:

688 
m¨k_°ack_t›
--;

689 #ifde‡
ENABLE_TRACE


690 i‡(
GC_åa˚_addr
 >
cuºít_p


691 && 
GC_åa˚_addr
 < 
cuºít_p
 + 
	`WORDS_TO_BYTES
(
WORDSZ
-2)) {

692 
	`GC_log_¥ötf
("GC:%d Tracing from %p bitmap descr %lu\n",

693 
GC_gc_no
, 
cuºít_p
, (Ë
des¸
);

696 
des¸
 &~
GC_DS_TAGS
;

697 
¸edô
 -
	`WORDS_TO_BYTES
(
WORDSZ
/2);

698 
des¸
 != 0) {

699 i‡((
sig√d_w‹d
)
des¸
 < 0) {

700 
cuºít
 = *(
w‹d
 *)
cuºít_p
;

701 
	`FIXUP_POINTER
(
cuºít
);

702 i‡((
±r_t
)
cuºít
 >
Àa°_ha
 && (±r_t)cuºíà< 
gª©e°_ha
) {

703 
	`PREFETCH
((
±r_t
)
cuºít
);

704 #ifde‡
ENABLE_TRACE


705 i‡(
GC_åa˚_addr
 =
cuºít_p
) {

706 
	`GC_log_¥ötf
("GC:%d Considering(3) %p -> %p\n",

707 
GC_gc_no
, 
cuºít_p
, (
±r_t
Ë
cuºít
);

710 
	`PUSH_CONTENTS
((
±r_t
)
cuºít
, 
m¨k_°ack_t›
,

711 
m¨k_°ack_limô
, 
cuºít_p
, 
exô1
);

714 
des¸
 <<= 1;

715 
cuºít_p
 +(
w‹d
);

718 
GC_DS_PROC
:

719 
m¨k_°ack_t›
--;

720 #ifde‡
ENABLE_TRACE


721 i‡(
GC_åa˚_addr
 >
cuºít_p


722 && 
	`GC_ba£
(
cuºít_p
) != 0

723 && 
	`GC_ba£
(
cuºít_p
Ë=GC_ba£(
GC_åa˚_addr
)) {

724 
	`GC_log_¥ötf
("GC:%d Tracing from %pÖroc descr %lu\n",

725 
GC_gc_no
, 
cuºít_p
, (Ë
des¸
);

728 
¸edô
 -
GC_PROC_BYTES
;

729 
m¨k_°ack_t›
 =

730 (*
	`PROC
(
des¸
))

731 ((
w‹d
 *)
cuºít_p
, 
m¨k_°ack_t›
,

732 
m¨k_°ack_limô
, 
	`ENV
(
des¸
));

734 
GC_DS_PER_OBJECT
:

735 i‡((
sig√d_w‹d
)
des¸
 >= 0) {

737 
des¸
 = *(
w‹d
 *)(
cuºít_p
 + des¸ - 
GC_DS_PER_OBJECT
);

741 
±r_t
 
ty≥_des¸
 = *’å_à*)
cuºít_p
;

749 i‡(0 =
ty≥_des¸
) {

751 
m¨k_°ack_t›
--;

754 
des¸
 = *(
w‹d
 *)(
ty≥_des¸


755 - (
des¸
 + (
GC_INDIR_PER_OBJ_BIAS


756 - 
GC_DS_PER_OBJECT
)));

758 i‡(0 =
des¸
) {

761 
m¨k_°ack_t›
--;

764 
ªåy
;

767 
m¨k_°ack_t›
--;

768 
limô
 = 
cuºít_p
 + (
w‹d
)
des¸
;

770 #ifde‡
ENABLE_TRACE


771 i‡(
GC_åa˚_addr
 >
cuºít_p


772 && 
GC_åa˚_addr
 < 
limô
) {

773 
	`GC_log_¥ötf
("GC:%d Tracing from %pÜen %lu\n",

774 
GC_gc_no
, 
cuºít_p
, (Ë
des¸
);

778 
	`GC_ASSERT
(!((
w‹d
)
cuºít_p
 & (
ALIGNMENT
-1)));

779 
¸edô
 -
limô
 - 
cuºít_p
;

780 
limô
 -(
w‹d
);

782 
	#PREF_DIST
 4

	)

784 #i‚de‡
SMALL_CONFIG


785 
w‹d
 
de„ºed
;

794 
	`PREFETCH
(
limô
 - 
PREF_DIST
*
CACHE_LINE_SIZE
);

795 
	`GC_ASSERT
(
limô
 >
cuºít_p
);

796 
de„ºed
 = *(
w‹d
 *)
limô
;

797 
	`FIXUP_POINTER
(
de„ºed
);

798 
limô
 -
ALIGNMENT
;

799 i‡((
±r_t
)
de„ºed
 >
Àa°_ha
 && (±r_t)de„ºed < 
gª©e°_ha
) {

800 
	`PREFETCH
((
±r_t
)
de„ºed
);

803 i‡(
cuºít_p
 > 
limô
Ë
√xt_obje˘
;

806 
de„ºed
 = *(
w‹d
 *)
limô
;

807 
	`FIXUP_POINTER
(
de„ºed
);

808 
limô
 -
ALIGNMENT
;

809 i‡((
±r_t
)
de„ºed
 >
Àa°_ha
 && (±r_t)de„ºed < 
gª©e°_ha
) {

810 
	`PREFETCH
((
±r_t
)
de„ºed
);

813 i‡(
cuºít_p
 > 
limô
Ë
√xt_obje˘
;

817 
cuºít_p
 <
limô
) {

821 
cuºít
 = *(
w‹d
 *)
cuºít_p
;

822 
	`FIXUP_POINTER
(
cuºít
);

823 
	`PREFETCH
(
cuºít_p
 + 
PREF_DIST
*
CACHE_LINE_SIZE
);

824 i‡((
±r_t
)
cuºít
 >
Àa°_ha
 && (±r_t)cuºíà< 
gª©e°_ha
) {

827 
	`PREFETCH
((
±r_t
)
cuºít
);

828 #ifde‡
ENABLE_TRACE


829 i‡(
GC_åa˚_addr
 =
cuºít_p
) {

830 
	`GC_log_¥ötf
("GC:%d Considering(1) %p -> %p\n",

831 
GC_gc_no
, 
cuºít_p
, (
±r_t
Ë
cuºít
);

834 
	`PUSH_CONTENTS
((
±r_t
)
cuºít
, 
m¨k_°ack_t›
,

835 
m¨k_°ack_limô
, 
cuºít_p
, 
exô2
);

837 
cuºít_p
 +
ALIGNMENT
;

840 #i‚de‡
SMALL_CONFIG


844 #ifde‡
ENABLE_TRACE


845 i‡(
GC_åa˚_addr
 =
cuºít_p
) {

846 
	`GC_log_¥ötf
("GC:%d Considering(2) %p -> %p\n",

847 
GC_gc_no
, 
cuºít_p
, (
±r_t
Ë
de„ºed
);

850 
	`PUSH_CONTENTS
((
±r_t
)
de„ºed
, 
m¨k_°ack_t›
,

851 
m¨k_°ack_limô
, 
cuºít_p
, 
exô4
);

852 
√xt_obje˘
:;

856  
m¨k_°ack_t›
;

857 
	}
}

859 #ifde‡
PARALLEL_MARK


862 
GC_boﬁ
 
	gGC_hñp_w™ãd
 = 
FALSE
;

863 
	gGC_hñ≥r_cou¡
 = 0;

864 
	gGC_a˘ive_cou¡
 = 0;

865 
w‹d
 
	gGC_m¨k_no
 = 0;

867 
	#LOCAL_MARK_STACK_SIZE
 
HBLKSIZE


	)

878 
m£
 * 
	$GC_°ól_m¨k_°ack
(
m£
 * 
low
, m£ * 
high
, m£ * 
loˇl
,

879 
max
, 
m£
 **
√xt
)

881 
m£
 *
p
;

882 
m£
 *
t›
 = 
loˇl
 - 1;

883 
i
 = 0;

885 
	`GC_ASSERT
(
high
 >
low
-1 && high -Üow + 1 <
GC_m¨k_°ack_size
);

886 
p
 = 
low
;Ö <
high
 && 
i
 <
max
; ++p) {

887 
w‹d
 
des¸
 = 
	`AO_lﬂd
((vﬁ©ûê
AO_t
 *Ë&(
p
 -> 
m£_des¸
));

888 i‡(
des¸
 != 0) {

890 
	`AO_°‹e_ªÀa£_wrôe
((vﬁ©ûê
AO_t
 *Ë&(
p
 -> 
m£_des¸
), 0);

893 ++
t›
;

894 
t›
 -> 
m£_des¸
 = 
des¸
;

895 
t›
 -> 
m£_°¨t
 = 
p
 -> mse_start;

896 
	`GC_ASSERT
((
t›
 -> 
m£_des¸
 & 
GC_DS_TAGS
Ë!
GC_DS_LENGTH
 ||

897 
t›
 -> 
m£_des¸
 < (
±r_t
)
GC_gª©e°_∂ausibÀ_hóp_addr


898 - (
±r_t
)
GC_Àa°_∂ausibÀ_hóp_addr
);

901 ++
i
;

902 i‡((
des¸
 & 
GC_DS_TAGS
Ë=
GC_DS_LENGTH
Ë
i
 += (descr >> 8);

905 *
√xt
 = 
p
;

906  
t›
;

907 
	}
}

911 
	$GC_ªtu∫_m¨k_°ack
(
m£
 * 
low
, m£ * 
high
)

913 
m£
 * 
my_t›
;

914 
m£
 * 
my_°¨t
;

915 
size_t
 
°ack_size
;

917 i‡(
high
 < 
low
) ;

918 
°ack_size
 = 
high
 - 
low
 + 1;

919 
	`GC_acquúe_m¨k_lock
();

920 
my_t›
 = 
GC_m¨k_°ack_t›
;

921 
my_°¨t
 = 
my_t›
 + 1;

922 i‡(
my_°¨t
 - 
GC_m¨k_°ack
 + 
°ack_size
 > 
GC_m¨k_°ack_size
) {

923 i‡(
GC_¥öt_°©s
) {

924 
	`GC_log_¥ötf
("NoÑoomÅo copy back mark stack.");

926 
GC_m¨k_°©e
 = 
MS_INVALID
;

927 
GC_m¨k_°ack_too_smÆl
 = 
TRUE
;

930 
	`BCOPY
(
low
, 
my_°¨t
, 
°ack_size
 * (
m£
));

931 
	`GC_ASSERT
((
m£
 *)
	`AO_lﬂd
((vﬁ©ûê
AO_t
 *)(&
GC_m¨k_°ack_t›
))

932 =
my_t›
);

933 
	`AO_°‹e_ªÀa£_wrôe
((vﬁ©ûê
AO_t
 *)(&
GC_m¨k_°ack_t›
),

934 (
AO_t
)(
my_t›
 + 
°ack_size
));

937 
	`GC_ªÀa£_m¨k_lock
();

938 
	`GC_nŸify_Æl_m¨kî
();

939 
	}
}

945 
	$GC_do_loˇl_m¨k
(
m£
 *
loˇl_m¨k_°ack
, m£ *
loˇl_t›
)

947 
n
;

948 
	#N_LOCAL_ITERS
 1

	)

950 #ifde‡
GC_ASSERTIONS


952 
	`GC_acquúe_m¨k_lock
();

953 
	`GC_ªÀa£_m¨k_lock
();

956 
n
 = 0;Ç < 
N_LOCAL_ITERS
; ++n) {

957 
loˇl_t›
 = 
	`GC_m¨k_‰om
÷oˇl_t›, 
loˇl_m¨k_°ack
,

958 
loˇl_m¨k_°ack
 + 
LOCAL_MARK_STACK_SIZE
);

959 i‡(
loˇl_t›
 < 
loˇl_m¨k_°ack
) ;

960 i‡(
loˇl_t›
 - 
loˇl_m¨k_°ack
 >
LOCAL_MARK_STACK_SIZE
/2) {

961 
	`GC_ªtu∫_m¨k_°ack
(
loˇl_m¨k_°ack
, 
loˇl_t›
);

965 i‡((
m£
 *)
	`AO_lﬂd
((vﬁ©ûê
AO_t
 *)(&
GC_m¨k_°ack_t›
))

966 < (
m£
 *)
	`AO_lﬂd
(&
GC_fú°_n⁄em±y
)

967 && 
GC_a˘ive_cou¡
 < 
GC_hñ≥r_cou¡


968 && 
loˇl_t›
 > 
loˇl_m¨k_°ack
 + 1) {

974 
m£
 * 
√w_bŸtom
 = 
loˇl_m¨k_°ack


975 + (
loˇl_t›
 - 
loˇl_m¨k_°ack
)/2;

976 
	`GC_ASSERT
(
√w_bŸtom
 > 
loˇl_m¨k_°ack


977 && 
√w_bŸtom
 < 
loˇl_t›
);

978 
	`GC_ªtu∫_m¨k_°ack
(
loˇl_m¨k_°ack
, 
√w_bŸtom
 - 1);

979 
	`memmove
(
loˇl_m¨k_°ack
, 
√w_bŸtom
,

980 (
loˇl_t›
 - 
√w_bŸtom
 + 1Ë* (
m£
));

981 
loˇl_t›
 -(
√w_bŸtom
 - 
loˇl_m¨k_°ack
);

984 
	}
}

986 
	#ENTRIES_TO_GET
 5

	)

988 
	gGC_m¨kîs
 = 2;

997 
	$GC_m¨k_loˇl
(
m£
 *
loˇl_m¨k_°ack
, 
id
)

999 
m£
 * 
my_fú°_n⁄em±y
;

1001 
	`GC_acquúe_m¨k_lock
();

1002 
GC_a˘ive_cou¡
++;

1003 
my_fú°_n⁄em±y
 = (
m£
 *)
	`AO_lﬂd
(&
GC_fú°_n⁄em±y
);

1004 
	`GC_ASSERT
((
m£
 *)
	`AO_lﬂd
(&
GC_fú°_n⁄em±y
Ë>
GC_m¨k_°ack
 &&

1005 (
m£
 *)
	`AO_lﬂd
(&
GC_fú°_n⁄em±y
) <=

1006 (
m£
 *)
	`AO_lﬂd
((vﬁ©ûê
AO_t
 *)(&
GC_m¨k_°ack_t›
)) + 1);

1007 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

1008 
	`GC_log_¥ötf
("Sèπög m¨k hñ≥∏%lu\n", ()
id
);

1009 
	`GC_ªÀa£_m¨k_lock
();

1011 
size_t
 
n_⁄_°ack
;

1012 
size_t
 
n_to_gë
;

1013 
m£
 * 
my_t›
;

1014 
m£
 * 
loˇl_t›
;

1015 
m£
 * 
globÆ_fú°_n⁄em±y
 = (m£ *)
	`AO_lﬂd
(&
GC_fú°_n⁄em±y
);

1017 
	`GC_ASSERT
(
my_fú°_n⁄em±y
 >
GC_m¨k_°ack
 &&

1018 
my_fú°_n⁄em±y
 <=

1019 (
m£
 *)
	`AO_lﬂd
((vﬁ©ûê
AO_t
 *)(&
GC_m¨k_°ack_t›
)) + 1);

1020 
	`GC_ASSERT
(
globÆ_fú°_n⁄em±y
 >
GC_m¨k_°ack
 &&

1021 
globÆ_fú°_n⁄em±y
 <=

1022 (
m£
 *)
	`AO_lﬂd
((vﬁ©ûê
AO_t
 *)(&
GC_m¨k_°ack_t›
)) + 1);

1023 i‡(
my_fú°_n⁄em±y
 < 
globÆ_fú°_n⁄em±y
) {

1024 
my_fú°_n⁄em±y
 = 
globÆ_fú°_n⁄em±y
;

1025 } i‡(
globÆ_fú°_n⁄em±y
 < 
my_fú°_n⁄em±y
) {

1026 
	`AO_com∑ª_™d_sw≠
(&
GC_fú°_n⁄em±y
,

1027 (
AO_t
Ë
globÆ_fú°_n⁄em±y
,

1028 (
AO_t
Ë
my_fú°_n⁄em±y
);

1034 
my_t›
 = (
m£
 *)
	`AO_lﬂd_acquúe
((vﬁ©ûê
AO_t
 *)(&
GC_m¨k_°ack_t›
));

1035 
n_⁄_°ack
 = 
my_t›
 - 
my_fú°_n⁄em±y
 + 1;

1036 i‡(0 =
n_⁄_°ack
) {

1037 
	`GC_acquúe_m¨k_lock
();

1038 
my_t›
 = 
GC_m¨k_°ack_t›
;

1041 
n_⁄_°ack
 = 
my_t›
 - 
my_fú°_n⁄em±y
 + 1;

1042 i‡(0 =
n_⁄_°ack
) {

1043 
GC_a˘ive_cou¡
--;

1044 
	`GC_ASSERT
(
GC_a˘ive_cou¡
 <
GC_hñ≥r_cou¡
);

1047 i‡(0 =
GC_a˘ive_cou¡
Ë
	`GC_nŸify_Æl_m¨kî
();

1048 
GC_a˘ive_cou¡
 > 0

1049 && (
m£
 *)
	`AO_lﬂd
(&
GC_fú°_n⁄em±y
)

1050 > 
GC_m¨k_°ack_t›
) {

1054 
	`GC_waô_m¨kî
();

1056 i‡(
GC_a˘ive_cou¡
 == 0 &&

1057 (
m£
 *)
	`AO_lﬂd
(&
GC_fú°_n⁄em±y
Ë> 
GC_m¨k_°ack_t›
) {

1058 
GC_boﬁ
 
√ed_to_nŸify
 = 
FALSE
;

1065 
GC_hñ≥r_cou¡
--;

1066 i‡(0 =
GC_hñ≥r_cou¡
Ë
√ed_to_nŸify
 = 
TRUE
;

1067 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

1068 
	`GC_log_¥ötf
(

1069 "Föished m¨k hñ≥∏%lu\n", ()
id
);

1070 
	`GC_ªÀa£_m¨k_lock
();

1071 i‡(
√ed_to_nŸify
Ë
	`GC_nŸify_Æl_m¨kî
();

1076 
GC_a˘ive_cou¡
++;

1077 
	`GC_ASSERT
(
GC_a˘ive_cou¡
 > 0);

1078 
	`GC_ªÀa£_m¨k_lock
();

1081 
	`GC_ªÀa£_m¨k_lock
();

1084 
n_to_gë
 = 
ENTRIES_TO_GET
;

1085 i‡(
n_⁄_°ack
 < 2 * 
ENTRIES_TO_GET
Ë
n_to_gë
 = 1;

1086 
loˇl_t›
 = 
	`GC_°ól_m¨k_°ack
(
my_fú°_n⁄em±y
, 
my_t›
,

1087 
loˇl_m¨k_°ack
, 
n_to_gë
,

1088 &
my_fú°_n⁄em±y
);

1089 
	`GC_ASSERT
(
my_fú°_n⁄em±y
 >
GC_m¨k_°ack
 &&

1090 
my_fú°_n⁄em±y
 <=

1091 (
m£
 *)
	`AO_lﬂd
((vﬁ©ûê
AO_t
 *)(&
GC_m¨k_°ack_t›
)) + 1);

1092 
	`GC_do_loˇl_m¨k
(
loˇl_m¨k_°ack
, 
loˇl_t›
);

1094 
	}
}

1100 
	$GC_do_∑øŒñ_m¨k
()

1102 
m£
 
loˇl_m¨k_°ack
[
LOCAL_MARK_STACK_SIZE
];

1104 
	`GC_acquúe_m¨k_lock
();

1105 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

1108 i‡(
GC_hñp_w™ãd
 || 
GC_a˘ive_cou¡
 !0 || 
GC_hñ≥r_cou¡
 != 0)

1109 
	`ABORT
("TriedÅo startÖarallel mark in bad state");

1110 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

1111 
	`GC_log_¥ötf
("Starting marking for markÖhaseÇumber %lu\n",

1112 ()
GC_m¨k_no
);

1113 
GC_fú°_n⁄em±y
 = (
AO_t
)
GC_m¨k_°ack
;

1114 
GC_a˘ive_cou¡
 = 0;

1115 
GC_hñ≥r_cou¡
 = 1;

1116 
GC_hñp_w™ãd
 = 
TRUE
;

1117 
	`GC_ªÀa£_m¨k_lock
();

1118 
	`GC_nŸify_Æl_m¨kî
();

1120 
	`GC_m¨k_loˇl
(
loˇl_m¨k_°ack
, 0);

1121 
	`GC_acquúe_m¨k_lock
();

1122 
GC_hñp_w™ãd
 = 
FALSE
;

1124 
GC_hñ≥r_cou¡
 > 0Ë
	`GC_waô_m¨kî
();

1126 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

1127 
	`GC_log_¥ötf
(

1129 ()
GC_m¨k_no
);

1130 
GC_m¨k_no
++;

1131 
	`GC_ªÀa£_m¨k_lock
();

1132 
	`GC_nŸify_Æl_m¨kî
();

1133 
	}
}

1138 
	$GC_hñp_m¨kî
(
w‹d
 
my_m¨k_no
)

1140 
m£
 
loˇl_m¨k_°ack
[
LOCAL_MARK_STACK_SIZE
];

1141 
my_id
;

1143 i‡(!
GC_∑øŒñ
) ;

1144 
	`GC_acquúe_m¨k_lock
();

1145 
GC_m¨k_no
 < 
my_m¨k_no


1146 || (!
GC_hñp_w™ãd
 && 
GC_m¨k_no
 =
my_m¨k_no
)) {

1147 
	`GC_waô_m¨kî
();

1149 
my_id
 = 
GC_hñ≥r_cou¡
;

1150 i‡(
GC_m¨k_no
 !
my_m¨k_no
 || 
my_id
 >
GC_m¨kîs
) {

1153 
	`GC_ªÀa£_m¨k_lock
();

1156 
GC_hñ≥r_cou¡
 = 
my_id
 + 1;

1157 
	`GC_ªÀa£_m¨k_lock
();

1158 
	`GC_m¨k_loˇl
(
loˇl_m¨k_°ack
, 
my_id
);

1160 
	}
}

1166 
	$Æloc_m¨k_°ack
(
size_t
 
n
)

1168 
m£
 * 
√w_°ack
 = (m£ *)
	`GC_s¸©ch_Æloc
(
n
 * (
GC_ms_íåy
));

1169 #ifde‡
GWW_VDB


1172 
GC_boﬁ
 
GC_ö¸emíèl_©_°ack_Æloc
 = 0;

1173 
GC_boﬁ
 
ªcy˛e_ﬁd
 = (!
GC_ö¸emíèl
 || 
GC_ö¸emíèl_©_°ack_Æloc
);

1175 
GC_ö¸emíèl_©_°ack_Æloc
 = 
GC_ö¸emíèl
;

1177 
	#ªcy˛e_ﬁd
 1

	)

1180 
GC_m¨k_°ack_too_smÆl
 = 
FALSE
;

1181 i‡(
GC_m¨k_°ack_size
 != 0) {

1182 i‡(
√w_°ack
 != 0) {

1183 i‡(
ªcy˛e_ﬁd
) {

1185 
size_t
 
∑ge_off£t
 = (
w‹d
)
GC_m¨k_°ack
 & (
GC_∑ge_size
 - 1);

1186 
size_t
 
size
 = 
GC_m¨k_°ack_size
 * (
GC_ms_íåy
);

1187 
size_t
 
di•l
 = 0;

1189 i‡(0 !
∑ge_off£t
Ë
di•l
 = 
GC_∑ge_size
 -Öage_offset;

1190 
size
 = (sizê- 
di•l
Ë& ~(
GC_∑ge_size
 - 1);

1191 i‡(
size
 > 0) {

1192 
	`GC_add_to_hóp
((
hblk
 *)

1193 ((
w‹d
)
GC_m¨k_°ack
 + 
di•l
), (w‹d)
size
);

1196 
GC_m¨k_°ack
 = 
√w_°ack
;

1197 
GC_m¨k_°ack_size
 = 
n
;

1198 
GC_m¨k_°ack_limô
 = 
√w_°ack
 + 
n
;

1199 i‡(
GC_¥öt_°©s
) {

1200 
	`GC_log_¥ötf
("Grew mark stackÅo %lu frames\n",

1201 (Ë
GC_m¨k_°ack_size
);

1204 i‡(
GC_¥öt_°©s
) {

1205 
	`GC_log_¥ötf
("FailedÅo grow mark stackÅo %lu frames\n",

1206 (Ë
n
);

1210 i‡(
√w_°ack
 == 0) {

1211 
	`GC_îr_¥ötf
("No space for mark stack\n");

1212 
	`EXIT
();

1214 
GC_m¨k_°ack
 = 
√w_°ack
;

1215 
GC_m¨k_°ack_size
 = 
n
;

1216 
GC_m¨k_°ack_limô
 = 
√w_°ack
 + 
n
;

1218 
GC_m¨k_°ack_t›
 = 
GC_m¨k_°ack
-1;

1219 
	}
}

1221 
	$GC_m¨k_öô
()

1223 
	`Æloc_m¨k_°ack
(
INITIAL_MARK_STACK_SIZE
);

1224 
	}
}

1233 
	$GC_push_Æl
(
±r_t
 
bŸtom
,Öå_à
t›
)

1235 
w‹d
 
Àngth
;

1237 
bŸtom
 = (
±r_t
)(((
w‹d
ËbŸtom + 
ALIGNMENT
-1) & ~(ALIGNMENT-1));

1238 
t›
 = (
±r_t
)(((
w‹d
Ët›Ë& ~(
ALIGNMENT
-1));

1239 i‡(
t›
 =0 || 
bŸtom
 ==Åop) ;

1240 
GC_m¨k_°ack_t›
++;

1241 i‡(
GC_m¨k_°ack_t›
 >
GC_m¨k_°ack_limô
) {

1242 
	`ABORT
("unexpected mark stack overflow");

1244 
Àngth
 = 
t›
 - 
bŸtom
;

1245 #i‡
GC_DS_TAGS
 > 
ALIGNMENT
 - 1

1246 
Àngth
 +
GC_DS_TAGS
;

1247 
Àngth
 &~
GC_DS_TAGS
;

1249 
GC_m¨k_°ack_t›
 -> 
m£_°¨t
 = 
bŸtom
;

1250 
GC_m¨k_°ack_t›
 -> 
m£_des¸
 = 
Àngth
;

1251 
	}
}

1263 
GC_push_£À˘ed
(
±r_t
 
bŸtom
,Öå_à
t›
,

1264 (*
dúty_‚
Ë(
hblk
 *),

1265 (*
push_‚
Ë(
±r_t
,Ötr_t))

1267 
hblk
 * 
h
;

1269 
bŸtom
 = (
±r_t
)(((
w‹d
ËbŸtom + 
ALIGNMENT
-1) & ~(ALIGNMENT-1));

1270 
t›
 = (
±r_t
)(((
w‹d
Ët›Ë& ~(
ALIGNMENT
-1));

1272 i‡(
t›
 =0 || 
bŸtom
 ==Åop) ;

1273 
h
 = 
	`HBLKPTR
(
bŸtom
 + 
HBLKSIZE
);

1274 i‡(
t›
 <(
±r_t
Ë
h
) {

1275 i‡((*
dúty_‚
)(
h
-1)) {

1276 (*
push_‚
)(
bŸtom
, 
t›
);

1280 i‡((*
dúty_‚
)(
h
-1)) {

1281 (*
push_‚
)(
bŸtom
, (
±r_t
)
h
);

1283 (
±r_t
)(
h
+1Ë<
t›
) {

1284 i‡((*
dúty_‚
)(
h
)) {

1285 i‡((
w‹d
)(
GC_m¨k_°ack_t›
 - 
GC_m¨k_°ack
)

1286 > 3 * 
GC_m¨k_°ack_size
 / 4) {

1288 (*
push_‚
)((
±r_t
)
h
, 
t›
);

1291 (*
push_‚
)((
±r_t
)
h
, (ptr_t)(h+1));

1294 
h
++;

1296 i‡((
±r_t
)
h
 !
t›
) {

1297 i‡((*
dúty_‚
)(
h
)) {

1298 (*
push_‚
)((
±r_t
)
h
, 
t›
);

1301 i‡(
GC_m¨k_°ack_t›
 >
GC_m¨k_°ack_limô
) {

1302 
	`ABORT
("unexpected mark stack overflow");

1304 
	}
}

1306 #i‚de‡
SMALL_CONFIG


1308 #ifde‡
PARALLEL_MARK


1311 
GC_boﬁ
 
	$GC_åue_func
(
hblk
 *
h
Ë{  
TRUE
; 
	}
}

1312 
	#GC_PUSH_ALL
(
b
,
t
Ë
	`GC_push_£À˘ed
(b,t,
GC_åue_func
,
GC_push_Æl
);

	)

1314 
	#GC_PUSH_ALL
(
b
,
t
Ë
	`GC_push_Æl
(b,t);

	)

1318 
	$GC_push_c⁄dôi⁄Æ
(
±r_t
 
bŸtom
,Öå_à
t›
, 
GC_boﬁ
 
Æl
)

1320 i‡(
Æl
) {

1321 i‡(
GC_dúty_maöèöed
) {

1322 #ifde‡
PROC_VDB


1324 
	`GC_push_£À˘ed
(
bŸtom
, 
t›
, 
GC_∑ge_was_evî_dúty
, 
GC_push_Æl
);

1326 
	`GC_push_Æl
(
bŸtom
, 
t›
);

1329 
	`GC_push_Æl
(
bŸtom
, 
t›
);

1332 
	`GC_push_£À˘ed
(
bŸtom
, 
t›
, 
GC_∑ge_was_dúty
, 
GC_push_Æl
);

1334 
	}
}

1337 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

1338 
__cde˛
 
	$GC_push_⁄e
(
w‹d
 
p
)

1340 
	$GC_push_⁄e
(
w‹d
 
p
)

1343 
	`GC_PUSH_ONE_STACK
((
±r_t
)
p
, 
MARKED_FROM_REGISTER
);

1344 
	}
}

1346 
GC_ms_íåy
 *
	$GC_m¨k_™d_push
(*
obj
,

1347 
m£
 *
m¨k_°ack_±r
,

1348 
m£
 *
m¨k_°ack_limô
,

1349 **
§c
)

1351 
hdr
 * 
hhdr
;

1353 
	`PREFETCH
(
obj
);

1354 
	`GET_HDR
(
obj
, 
hhdr
);

1355 i‡(
	`EXPECT
(
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
),
FALSE
)) {

1356 i‡(
GC_Æl_öãri‹_poöãrs
) {

1357 
hhdr
 = 
	`GC_föd_hódî
(
	`GC_ba£
(
obj
));

1358 i‡(
hhdr
 == 0) {

1359 
	`GC_ADD_TO_BLACK_LIST_NORMAL
(
obj
, 
§c
);

1360  
m¨k_°ack_±r
;

1363 
	`GC_ADD_TO_BLACK_LIST_NORMAL
(
obj
, 
§c
);

1364  
m¨k_°ack_±r
;

1367 i‡(
	`EXPECT
(
	`HBLK_IS_FREE
(
hhdr
),0)) {

1368 
	`GC_ADD_TO_BLACK_LIST_NORMAL
(
obj
, 
§c
);

1369  
m¨k_°ack_±r
;

1372 
	`PUSH_CONTENTS_HDR
(
obj
, 
m¨k_°ack_±r
 , 
m¨k_°ack_limô
,

1373 
§c
, 
was_m¨ked
, 
hhdr
, 
TRUE
);

1374 
was_m¨ked
:

1375  
m¨k_°ack_±r
;

1376 
	}
}

1385 #i‡
deföed
(
PRINT_BLACK_LIST
Ë|| deföed(
KEEP_BACK_PTRS
)

1386 
	$GC_m¨k_™d_push_°ack
(
±r_t
 
p
,Öå_à
sour˚
)

1388 
	$GC_m¨k_™d_push_°ack
(
±r_t
 
p
)

1389 
	#sour˚
 0

	)

1392 
hdr
 * 
hhdr
;

1393 
±r_t
 
r
 = 
p
;

1395 
	`PREFETCH
(
p
);

1396 
	`GET_HDR
(
p
, 
hhdr
);

1397 i‡(
	`EXPECT
(
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
),
FALSE
)) {

1398 i‡(
hhdr
 != 0) {

1399 
r
 = 
	`GC_ba£
(
p
);

1400 
hhdr
 = 
	`HDR
(
r
);

1402 i‡(
hhdr
 == 0) {

1403 
	`GC_ADD_TO_BLACK_LIST_STACK
(
p
, 
sour˚
);

1407 i‡(
	`EXPECT
(
	`HBLK_IS_FREE
(
hhdr
),0)) {

1408 
	`GC_ADD_TO_BLACK_LIST_NORMAL
(
p
, 
§c
);

1411 #i‡
	`deföed
(
MANUAL_VDB
Ë&& deföed(
THREADS
)

1414 
	`GC_dúty
(
p
);

1416 
	`PUSH_CONTENTS_HDR
(
r
, 
GC_m¨k_°ack_t›
, 
GC_m¨k_°ack_limô
,

1417 
sour˚
, 
m¨k_™d_push_exô
, 
hhdr
, 
FALSE
);

1418 
m¨k_™d_push_exô
: ;

1423 
	}
}

1425 #ifde‡
TRACE_BUF


1427 
	#TRACE_ENTRIES
 1000

	)

1429 
	såa˚_íåy
 {

1430 * 
	mköd
;

1431 
w‹d
 
	mgc_no
;

1432 
w‹d
 
	mbyãs_Ælocd
;

1433 
w‹d
 
	m¨g1
;

1434 
w‹d
 
	m¨g2
;

1435 } 
	gGC_åa˚_buf
[
TRACE_ENTRIES
];

1437 
	gGC_åa˚_buf_±r
 = 0;

1439 
	$GC_add_åa˚_íåy
(*
köd
, 
w‹d
 
¨g1
, w‹d 
¨g2
)

1441 
GC_åa˚_buf
[
GC_åa˚_buf_±r
].
köd
 = kind;

1442 
GC_åa˚_buf
[
GC_åa˚_buf_±r
].
gc_no
 = 
GC_gc_no
;

1443 
GC_åa˚_buf
[
GC_åa˚_buf_±r
].
byãs_Ælocd
 = 
GC_byãs_Ælocd
;

1444 
GC_åa˚_buf
[
GC_åa˚_buf_±r
].
¨g1
 =árg1 ^ 0x80000000;

1445 
GC_åa˚_buf
[
GC_åa˚_buf_±r
].
¨g2
 =árg2 ^ 0x80000000;

1446 
GC_åa˚_buf_±r
++;

1447 i‡(
GC_åa˚_buf_±r
 >
TRACE_ENTRIES
) GC_trace_buf_ptr = 0;

1448 
	}
}

1450 
	$GC_¥öt_åa˚
(
w‹d
 
gc_no
, 
GC_boﬁ
 
lock
)

1452 
i
;

1453 
åa˚_íåy
 *
p
;

1455 i‡(
lock
Ë
	`LOCK
();

1456 
i
 = 
GC_åa˚_buf_±r
-1; i != GC_trace_buf_ptr; i--) {

1457 i‡(
i
 < 0Ëò
TRACE_ENTRIES
-1;

1458 
p
 = 
GC_åa˚_buf
 + 
i
;

1459 i‡(
p
 -> 
gc_no
 < gc_nÿ||Ö -> 
köd
 == 0) ;

1460 
	`¥ötf
("Trace:%s (gc:%d,bytes:%d) 0x%X, 0x%X\n",

1461 
p
 -> 
köd
,Ö -> 
gc_no
,Ö -> 
byãs_Ælocd
,

1462 (
p
 -> 
¨g1
Ë^ 0x80000000, (∞-> 
¨g2
) ^ 0x80000000);

1464 
	`¥ötf
("Trace incomplete\n");

1465 i‡(
lock
Ë
	`UNLOCK
();

1466 
	}
}

1475 
	$GC_push_Æl_ógî
(
±r_t
 
bŸtom
,Öå_à
t›
)

1477 
w‹d
 * 
b
 = (w‹d *)(((w‹dË
bŸtom
 + 
ALIGNMENT
-1) & ~(ALIGNMENT-1));

1478 
w‹d
 * 
t
 = (w‹d *)(((w‹dË
t›
Ë& ~(
ALIGNMENT
-1));

1479 
w‹d
 *
p
;

1480 
±r_t
 
q
;

1481 
w‹d
 *
lim
;

1482 
±r_t
 
gª©e°_ha
 = 
GC_gª©e°_∂ausibÀ_hóp_addr
;

1483 
±r_t
 
Àa°_ha
 = 
GC_Àa°_∂ausibÀ_hóp_addr
;

1484 
	#GC_gª©e°_∂ausibÀ_hóp_addr
 
gª©e°_ha


	)

1485 
	#GC_Àa°_∂ausibÀ_hóp_addr
 
Àa°_ha


	)

1487 i‡(
t›
 == 0) ;

1490 
lim
 = 
t
 - 1 ;

1491 
p
 = 
b
;Ö <
lim
;Ö = (
w‹d
 *)(((
±r_t
ÌË+ 
ALIGNMENT
)) {

1492 
q
 = (
±r_t
)(*
p
);

1493 
	`GC_PUSH_ONE_STACK
((
±r_t
)
q
, 
p
);

1495 #unde‡
GC_gª©e°_∂ausibÀ_hóp_addr


1496 #unde‡
GC_Àa°_∂ausibÀ_hóp_addr


1497 
	}
}

1499 #i‚de‡
THREADS


1511 
	$GC_push_Æl_°ack_∑πüŒy_ógî
(
±r_t
 
bŸtom
,Öå_à
t›
,

1512 
±r_t
 
cﬁd_gc_‰ame
)

1514 i‡(!
NEED_FIXUP_POINTER
 && 
GC_Æl_öãri‹_poöãrs
) {

1518 i‡(0 =
cﬁd_gc_‰ame
) {

1519 
	`GC_push_Æl_°ack
(
bŸtom
, 
t›
);

1522 
	`GC_ASSERT
(
bŸtom
 <
cﬁd_gc_‰ame
 && cﬁd_gc_‰amê<
t›
);

1523 #ifde‡
STACK_GROWS_DOWN


1524 
	`GC_push_Æl
(
cﬁd_gc_‰ame
 - (
±r_t
), 
t›
);

1525 
	`GC_push_Æl_ógî
(
bŸtom
, 
cﬁd_gc_‰ame
);

1527 
	`GC_push_Æl
(
bŸtom
, 
cﬁd_gc_‰ame
 + (
±r_t
));

1528 
	`GC_push_Æl_ógî
(
cﬁd_gc_‰ame
, 
t›
);

1531 
	`GC_push_Æl_ógî
(
bŸtom
, 
t›
);

1533 #ifde‡
TRACE_BUF


1534 
	`GC_add_åa˚_íåy
("GC_push_Æl_°ack", 
bŸtom
, 
t›
);

1536 
	}
}

1539 
	$GC_push_Æl_°ack
(
±r_t
 
bŸtom
,Öå_à
t›
)

1541 #i‡
	`deföed
(
THREADS
Ë&& deföed(
MPROTECT_VDB
)

1542 
	`GC_push_Æl_ógî
(
bŸtom
, 
t›
);

1544 i‡(!
NEED_FIXUP_POINTER
 && 
GC_Æl_öãri‹_poöãrs
) {

1545 
	`GC_push_Æl
(
bŸtom
, 
t›
);

1547 
	`GC_push_Æl_ógî
(
bŸtom
, 
t›
);

1550 
	}
}

1552 #i‡!
deföed
(
SMALL_CONFIG
Ë&& !deföed(
USE_MARK_BYTES
) && \

1553 
	$deföed
(
MARK_BIT_PER_GRANULE
)

1554 #i‡
GC_GRANULE_WORDS
 == 1

1555 
	#USE_PUSH_MARKED_ACCELERATORS


	)

1556 
	#PUSH_GRANULE
(
q
) \

1557 { 
±r_t
 
qc⁄ã¡s
 = (±r_t)((
q
)[0]); \

1558 
	`GC_PUSH_ONE_HEAP
(
qc⁄ã¡s
, (
q
)); 
	}

	)
}

1559 #ñi‡
GC_GRANULE_WORDS
 == 2

1560 
	#USE_PUSH_MARKED_ACCELERATORS


	)

1561 
	#PUSH_GRANULE
(
q
) \

1562 { 
±r_t
 
qc⁄ã¡s
 = (±r_t)((
q
)[0]); \

1563 
	`GC_PUSH_ONE_HEAP
(
qc⁄ã¡s
, (
q
)); \

1564 
qc⁄ã¡s
 = (
±r_t
)((
q
)[1]); \

1565 
	`GC_PUSH_ONE_HEAP
(
qc⁄ã¡s
, (
q
)+1); }

	)

1566 #ñi‡
GC_GRANULE_WORDS
 == 4

1567 
	#USE_PUSH_MARKED_ACCELERATORS


	)

1568 
	#PUSH_GRANULE
(
q
) \

1569 { 
±r_t
 
qc⁄ã¡s
 = (±r_t)((
q
)[0]); \

1570 
	`GC_PUSH_ONE_HEAP
(
qc⁄ã¡s
, (
q
)); \

1571 
qc⁄ã¡s
 = (
±r_t
)((
q
)[1]); \

1572 
	`GC_PUSH_ONE_HEAP
(
qc⁄ã¡s
, (
q
)+1); \

1573 
qc⁄ã¡s
 = (
±r_t
)((
q
)[2]); \

1574 
	`GC_PUSH_ONE_HEAP
(
qc⁄ã¡s
, (
q
)+2); \

1575 
qc⁄ã¡s
 = (
±r_t
)((
q
)[3]); \

1576 
	`GC_PUSH_ONE_HEAP
(
qc⁄ã¡s
, (
q
)+3); }

	)

1580 #ifde‡
USE_PUSH_MARKED_ACCELERATORS


1583 
	$GC_push_m¨ked1
(
hblk
 *
h
, 
hdr
 *
hhdr
)

1585 
w‹d
 * 
m¨k_w‹d_addr
 = &(
hhdr
->
hb_m¨ks
[0]);

1586 
w‹d
 *
p
;

1587 
w‹d
 *
∂im
;

1588 
w‹d
 *
q
;

1589 
w‹d
 
m¨k_w‹d
;

1594 
±r_t
 
gª©e°_ha
 = 
GC_gª©e°_∂ausibÀ_hóp_addr
;

1595 
±r_t
 
Àa°_ha
 = 
GC_Àa°_∂ausibÀ_hóp_addr
;

1596 
m£
 * 
m¨k_°ack_t›
 = 
GC_m¨k_°ack_t›
;

1597 
m£
 * 
m¨k_°ack_limô
 = 
GC_m¨k_°ack_limô
;

1598 
	#GC_m¨k_°ack_t›
 
m¨k_°ack_t›


	)

1599 
	#GC_m¨k_°ack_limô
 
m¨k_°ack_limô


	)

1600 
	#GC_gª©e°_∂ausibÀ_hóp_addr
 
gª©e°_ha


	)

1601 
	#GC_Àa°_∂ausibÀ_hóp_addr
 
Àa°_ha


	)

1603 
p
 = (
w‹d
 *)(
h
->
hb_body
);

1604 
∂im
 = (
w‹d
 *)(((w‹d)
h
Ë+ 
HBLKSIZE
);

1607  
p
 < 
∂im
 ) {

1608 
m¨k_w‹d
 = *
m¨k_w‹d_addr
++;

1609 
q
 = 
p
;

1610 
m¨k_w‹d
 != 0) {

1611 i‡(
m¨k_w‹d
 & 1) {

1612 
	`PUSH_GRANULE
(
q
);

1614 
q
 +
GC_GRANULE_WORDS
;

1615 
m¨k_w‹d
 >>= 1;

1617 
p
 +
WORDSZ
*
GC_GRANULE_WORDS
;

1620 #unde‡
GC_gª©e°_∂ausibÀ_hóp_addr


1621 #unde‡
GC_Àa°_∂ausibÀ_hóp_addr


1622 #unde‡
GC_m¨k_°ack_t›


1623 #unde‡
GC_m¨k_°ack_limô


1625 
GC_m¨k_°ack_t›
 = 
m¨k_°ack_t›
;

1626 
	}
}

1629 #i‚de‡
UNALIGNED


1633 
	$GC_push_m¨ked2
(
hblk
 *
h
, 
hdr
 *
hhdr
)

1635 
w‹d
 * 
m¨k_w‹d_addr
 = &(
hhdr
->
hb_m¨ks
[0]);

1636 
w‹d
 *
p
;

1637 
w‹d
 *
∂im
;

1638 
w‹d
 *
q
;

1639 
w‹d
 
m¨k_w‹d
;

1641 
±r_t
 
gª©e°_ha
 = 
GC_gª©e°_∂ausibÀ_hóp_addr
;

1642 
±r_t
 
Àa°_ha
 = 
GC_Àa°_∂ausibÀ_hóp_addr
;

1643 
m£
 * 
m¨k_°ack_t›
 = 
GC_m¨k_°ack_t›
;

1644 
m£
 * 
m¨k_°ack_limô
 = 
GC_m¨k_°ack_limô
;

1646 
	#GC_m¨k_°ack_t›
 
m¨k_°ack_t›


	)

1647 
	#GC_m¨k_°ack_limô
 
m¨k_°ack_limô


	)

1648 
	#GC_gª©e°_∂ausibÀ_hóp_addr
 
gª©e°_ha


	)

1649 
	#GC_Àa°_∂ausibÀ_hóp_addr
 
Àa°_ha


	)

1651 
p
 = (
w‹d
 *)(
h
->
hb_body
);

1652 
∂im
 = (
w‹d
 *)(((w‹d)
h
Ë+ 
HBLKSIZE
);

1655  
p
 < 
∂im
 ) {

1656 
m¨k_w‹d
 = *
m¨k_w‹d_addr
++;

1657 
q
 = 
p
;

1658 
m¨k_w‹d
 != 0) {

1659 i‡(
m¨k_w‹d
 & 1) {

1660 
	`PUSH_GRANULE
(
q
);

1661 
	`PUSH_GRANULE
(
q
 + 
GC_GRANULE_WORDS
);

1663 
q
 +2 * 
GC_GRANULE_WORDS
;

1664 
m¨k_w‹d
 >>= 2;

1666 
p
 +
WORDSZ
*
GC_GRANULE_WORDS
;

1669 #unde‡
GC_gª©e°_∂ausibÀ_hóp_addr


1670 #unde‡
GC_Àa°_∂ausibÀ_hóp_addr


1671 #unde‡
GC_m¨k_°ack_t›


1672 #unde‡
GC_m¨k_°ack_limô


1674 
GC_m¨k_°ack_t›
 = 
m¨k_°ack_t›
;

1675 
	}
}

1677 #i‡
GC_GRANULE_WORDS
 < 4

1682 
	$GC_push_m¨ked4
(
hblk
 *
h
, 
hdr
 *
hhdr
)

1684 
w‹d
 * 
m¨k_w‹d_addr
 = &(
hhdr
->
hb_m¨ks
[0]);

1685 
w‹d
 *
p
;

1686 
w‹d
 *
∂im
;

1687 
w‹d
 *
q
;

1688 
w‹d
 
m¨k_w‹d
;

1690 
±r_t
 
gª©e°_ha
 = 
GC_gª©e°_∂ausibÀ_hóp_addr
;

1691 
±r_t
 
Àa°_ha
 = 
GC_Àa°_∂ausibÀ_hóp_addr
;

1692 
m£
 * 
m¨k_°ack_t›
 = 
GC_m¨k_°ack_t›
;

1693 
m£
 * 
m¨k_°ack_limô
 = 
GC_m¨k_°ack_limô
;

1694 
	#GC_m¨k_°ack_t›
 
m¨k_°ack_t›


	)

1695 
	#GC_m¨k_°ack_limô
 
m¨k_°ack_limô


	)

1696 
	#GC_gª©e°_∂ausibÀ_hóp_addr
 
gª©e°_ha


	)

1697 
	#GC_Àa°_∂ausibÀ_hóp_addr
 
Àa°_ha


	)

1699 
p
 = (
w‹d
 *)(
h
->
hb_body
);

1700 
∂im
 = (
w‹d
 *)(((w‹d)
h
Ë+ 
HBLKSIZE
);

1703  
p
 < 
∂im
 ) {

1704 
m¨k_w‹d
 = *
m¨k_w‹d_addr
++;

1705 
q
 = 
p
;

1706 
m¨k_w‹d
 != 0) {

1707 i‡(
m¨k_w‹d
 & 1) {

1708 
	`PUSH_GRANULE
(
q
);

1709 
	`PUSH_GRANULE
(
q
 + 
GC_GRANULE_WORDS
);

1710 
	`PUSH_GRANULE
(
q
 + 2*
GC_GRANULE_WORDS
);

1711 
	`PUSH_GRANULE
(
q
 + 3*
GC_GRANULE_WORDS
);

1713 
q
 +4 * 
GC_GRANULE_WORDS
;

1714 
m¨k_w‹d
 >>= 4;

1716 
p
 +
WORDSZ
*
GC_GRANULE_WORDS
;

1718 #unde‡
GC_gª©e°_∂ausibÀ_hóp_addr


1719 #unde‡
GC_Àa°_∂ausibÀ_hóp_addr


1720 #unde‡
GC_m¨k_°ack_t›


1721 #unde‡
GC_m¨k_°ack_limô


1722 
GC_m¨k_°ack_t›
 = 
m¨k_°ack_t›
;

1723 
	}
}

1732 
	$GC_push_m¨ked
(
hblk
 *
h
, 
hdr
 *
hhdr
)

1734 
size_t
 
sz
 = 
hhdr
 -> 
hb_sz
;

1735 
w‹d
 
des¸
 = 
hhdr
 -> 
hb_des¸
;

1736 
±r_t
 
p
;

1737 
w‹d
 
bô_no
;

1738 
±r_t
 
lim
;

1739 
m£
 * 
GC_m¨k_°ack_t›_ªg
;

1740 
m£
 * 
m¨k_°ack_limô
 = 
GC_m¨k_°ack_limô
;

1743 i‡((0 | 
GC_DS_LENGTH
Ë=
des¸
) ;

1744 i‡(
	`GC_block_em±y
(
hhdr
) ) ;

1745 
GC_n_ªscuög_∑ges
++;

1746 
GC_obje˘s_¨e_m¨ked
 = 
TRUE
;

1747 i‡(
sz
 > 
MAXOBJBYTES
) {

1748 
lim
 = 
h
 -> 
hb_body
;

1750 
lim
 = (
h
 + 1)->
hb_body
 - 
sz
;

1753 
	`BYTES_TO_GRANULES
(
sz
)) {

1754 #i‡
	`deföed
(
USE_PUSH_MARKED_ACCELERATORS
)

1756 
	`GC_push_m¨ked1
(
h
, 
hhdr
);

1758 #i‡!
	`deföed
(
UNALIGNED
)

1760 
	`GC_push_m¨ked2
(
h
, 
hhdr
);

1762 #i‡
GC_GRANULE_WORDS
 < 4

1764 
	`GC_push_m¨ked4
(
h
, 
hhdr
);

1770 
GC_m¨k_°ack_t›_ªg
 = 
GC_m¨k_°ack_t›
;

1771 
p
 = 
h
 -> 
hb_body
, 
bô_no
 = 0;Ö <
lim
;

1772 
p
 +
sz
, 
bô_no
 +
	`MARK_BIT_OFFSET
(sz)) {

1773 i‡(
	`m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
)) {

1775 
	`PUSH_OBJ
(
p
, 
hhdr
, 
GC_m¨k_°ack_t›_ªg
, 
m¨k_°ack_limô
);

1778 
GC_m¨k_°ack_t›
 = 
GC_m¨k_°ack_t›_ªg
;

1780 
	}
}

1782 #i‚de‡
SMALL_CONFIG


1784 
GC_boﬁ
 
	$GC_block_was_dúty
(
hblk
 *
h
, 
hdr
 *
hhdr
)

1786 
size_t
 
sz
 = 
hhdr
 -> 
hb_sz
;

1788 i‡(
sz
 <
MAXOBJBYTES
) {

1789 (
	`GC_∑ge_was_dúty
(
h
));

1791 
±r_t
 
p
 = (±r_t)
h
;

1792 
p
 < (
±r_t
)
h
 + 
sz
) {

1793 i‡(
	`GC_∑ge_was_dúty
((
hblk
 *)
p
)Ë(
TRUE
);

1794 
p
 +
HBLKSIZE
;

1796 (
FALSE
);

1798 
	}
}

1803 
hblk
 * 
	$GC_push_√xt_m¨ked
(
hblk
 *
h
)

1805 
hdr
 * 
hhdr
 = 
	`HDR
(
h
);

1807 i‡(
	`EXPECT
(
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
), 
FALSE
)) {

1808 
h
 = 
	`GC_√xt_u£d_block
(h);

1809 i‡(
h
 == 0) (0);

1810 
hhdr
 = 
	`GC_föd_hódî
((
±r_t
)
h
);

1812 
	`GC_push_m¨ked
(
h
, 
hhdr
);

1813 (
h
 + 
	`OBJ_SZ_TO_BLOCKS
(
hhdr
 -> 
hb_sz
));

1814 
	}
}

1816 #i‚de‡
SMALL_CONFIG


1818 
hblk
 * 
	$GC_push_√xt_m¨ked_dúty
(
hblk
 *
h
)

1820 
hdr
 * 
hhdr
 = 
	`HDR
(
h
);

1822 i‡(!
GC_dúty_maöèöed
Ë{ 
	`ABORT
("dirty bitsÇot set up"); }

1824 i‡(
	`EXPECT
(
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
), 
FALSE
)) {

1825 
h
 = 
	`GC_√xt_u£d_block
(h);

1826 i‡(
h
 == 0) (0);

1827 
hhdr
 = 
	`GC_föd_hódî
((
±r_t
)
h
);

1829 #ifde‡
STUBBORN_ALLOC


1830 i‡(
hhdr
 -> 
hb_obj_köd
 =
STUBBORN
) {

1831 i‡(
	`GC_∑ge_was_ch™ged
(
h
Ë&& 
	`GC_block_was_dúty
(h, 
hhdr
)) {

1835 i‡(
	`GC_block_was_dúty
(
h
, 
hhdr
)) ;

1838 i‡(
	`GC_block_was_dúty
(
h
, 
hhdr
)) ;

1840 
h
 +
	`OBJ_SZ_TO_BLOCKS
(
hhdr
 -> 
hb_sz
);

1841 
hhdr
 = 
	`HDR
(
h
);

1843 
	`GC_push_m¨ked
(
h
, 
hhdr
);

1844 (
h
 + 
	`OBJ_SZ_TO_BLOCKS
(
hhdr
 -> 
hb_sz
));

1845 
	}
}

1850 
hblk
 * 
	$GC_push_√xt_m¨ked_uncﬁÀ˘abÀ
(
hblk
 *
h
)

1852 
hdr
 * 
hhdr
 = 
	`HDR
(
h
);

1855 i‡(
	`EXPECT
(
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
), 
FALSE
)) {

1856 
h
 = 
	`GC_√xt_u£d_block
(h);

1857 i‡(
h
 == 0) (0);

1858 
hhdr
 = 
	`GC_föd_hódî
((
±r_t
)
h
);

1860 i‡(
hhdr
 -> 
hb_obj_köd
 =
UNCOLLECTABLE
) ;

1861 
h
 +
	`OBJ_SZ_TO_BLOCKS
(
hhdr
 -> 
hb_sz
);

1862 
hhdr
 = 
	`HDR
(
h
);

1864 
	`GC_push_m¨ked
(
h
, 
hhdr
);

1865 (
h
 + 
	`OBJ_SZ_TO_BLOCKS
(
hhdr
 -> 
hb_sz
));

1866 
	}
}

	@mark_rts.c

14 
	~<°dio.h
>

15 
	~"¥iv©e/gc_¥iv.h
"

35 
	gGC_no_dls
 = 0;

37 
	gn_roŸ_£ts
 = 0;

41 #i‡!
deföed
(
NO_DEBUGGING
)

43 
	$GC_¥öt_°©ic_roŸs
()

45 
i
;

46 
size_t
 
tŸÆ
 = 0;

48 
i
 = 0; i < 
n_roŸ_£ts
; i++) {

49 
	`GC_¥ötf
("From %pÅo %p ",

50 
GC_°©ic_roŸs
[
i
].
r_°¨t
,

51 
GC_°©ic_roŸs
[
i
].
r_íd
);

52 i‡(
GC_°©ic_roŸs
[
i
].
r_tmp
) {

53 
	`GC_¥ötf
(" (temporary)\n");

55 
	`GC_¥ötf
("\n");

57 
tŸÆ
 +
GC_°©ic_roŸs
[
i
].
r_íd
 - GC_°©ic_roŸs[i].
r_°¨t
;

59 
	`GC_¥ötf
("TŸÆ size: %ld\n", (Ë
tŸÆ
);

60 i‡(
GC_roŸ_size
 !
tŸÆ
) {

61 
	`GC_¥ötf
("GC_root_size incorrect: %ld!!\n",

62 (Ë
GC_roŸ_size
);

64 
	}
}

70 
GC_boﬁ
 
	$GC_is_°©ic_roŸ
(
±r_t
 
p
)

72 
œ°_roŸ_£t
 = 
MAX_ROOT_SETS
;

73 
i
;

76 i‡(
œ°_roŸ_£t
 < 
n_roŸ_£ts


77 && 
p
 >
GC_°©ic_roŸs
[
œ°_roŸ_£t
].
r_°¨t


78 && 
p
 < 
GC_°©ic_roŸs
[
œ°_roŸ_£t
].
r_íd
Ë(
TRUE
);

79 
i
 = 0; i < 
n_roŸ_£ts
; i++) {

80 i‡(
p
 >
GC_°©ic_roŸs
[
i
].
r_°¨t


81 && 
p
 < 
GC_°©ic_roŸs
[
i
].
r_íd
) {

82 
œ°_roŸ_£t
 = 
i
;

83 (
TRUE
);

86 (
FALSE
);

87 
	}
}

89 #i‡!
deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

100 
INLINE
 
	$π_hash
(
±r_t
 
addr
)

102 
w‹d
 
ªsu…
 = (w‹dË
addr
;

103 #i‡
CPP_WORDSZ
 > 8*
LOG_RT_SIZE


104 
ªsu…
 ^ªsu… >> 8*
LOG_RT_SIZE
;

106 #i‡
CPP_WORDSZ
 > 4*
LOG_RT_SIZE


107 
ªsu…
 ^ªsu… >> 4*
LOG_RT_SIZE
;

109 
ªsu…
 ^ªsu… >> 2*
LOG_RT_SIZE
;

110 
ªsu…
 ^ªsu… >> 
LOG_RT_SIZE
;

111 
ªsu…
 &(
RT_SIZE
-1);

112 (
ªsu…
);

113 
	}
}

117 
roŸs
 * 
	$GC_roŸs_¥e£¡
(
±r_t
 
b
)

119 
h
 = 
	`π_hash
(
b
);

120 
roŸs
 *
p
 = 
GC_roŸ_ödex
[
h
];

122 
p
 != 0) {

123 i‡(
p
 -> 
r_°¨t
 =(
±r_t
)
b
) (p);

124 
p
 =Ö -> 
r_√xt
;

126 (
FALSE
);

127 
	}
}

130 
	$add_roŸs_to_ödex
(
roŸs
 *
p
)

132 
h
 = 
	`π_hash
(
p
 -> 
r_°¨t
);

134 
p
 -> 
r_√xt
 = 
GC_roŸ_ödex
[
h
];

135 
GC_roŸ_ödex
[
h
] = 
p
;

136 
	}
}

140 
	#add_roŸs_to_ödex
(
p
)

	)

147 
w‹d
 
	gGC_roŸ_size
 = 0;

149 
	$GC_add_roŸs
(*
b
, *
e
)

151 
DCL_LOCK_STATE
;

153 i‡(!
GC_is_öôülized
Ë
	`GC_öô
();

154 
	`LOCK
();

155 
	`GC_add_roŸs_ö√r
((
±r_t
)
b
, (±r_t)
e
, 
FALSE
);

156 
	`UNLOCK
();

157 
	}
}

166 
	$GC_add_roŸs_ö√r
(
±r_t
 
b
,Öå_à
e
, 
GC_boﬁ
 
tmp
)

168 
roŸs
 * 
ﬁd
;

170 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

178 
i
;

180 
i
 = 0; i < 
n_roŸ_£ts
; i++) {

181 
ﬁd
 = 
GC_°©ic_roŸs
 + 
i
;

182 i‡(
b
 <
ﬁd
 -> 
r_íd
 && 
e
 >ﬁd -> 
r_°¨t
) {

183 i‡(
b
 < 
ﬁd
 -> 
r_°¨t
) {

184 
ﬁd
 -> 
r_°¨t
 = 
b
;

185 
GC_roŸ_size
 +(
ﬁd
 -> 
r_°¨t
 - 
b
);

187 i‡(
e
 > 
ﬁd
 -> 
r_íd
) {

188 
ﬁd
 -> 
r_íd
 = 
e
;

189 
GC_roŸ_size
 +(
e
 - 
ﬁd
 -> 
r_íd
);

191 
ﬁd
 -> 
r_tmp
 &
tmp
;

195 i‡(
i
 < 
n_roŸ_£ts
) {

197 
roŸs
 *
Ÿhî
;

199 
i
++; i < 
n_roŸ_£ts
; i++) {

200 
Ÿhî
 = 
GC_°©ic_roŸs
 + 
i
;

201 
b
 = 
Ÿhî
 -> 
r_°¨t
;

202 
e
 = 
Ÿhî
 -> 
r_íd
;

203 i‡(
b
 <
ﬁd
 -> 
r_íd
 && 
e
 >ﬁd -> 
r_°¨t
) {

204 i‡(
b
 < 
ﬁd
 -> 
r_°¨t
) {

205 
ﬁd
 -> 
r_°¨t
 = 
b
;

206 
GC_roŸ_size
 +(
ﬁd
 -> 
r_°¨t
 - 
b
);

208 i‡(
e
 > 
ﬁd
 -> 
r_íd
) {

209 
ﬁd
 -> 
r_íd
 = 
e
;

210 
GC_roŸ_size
 +(
e
 - 
ﬁd
 -> 
r_íd
);

212 
ﬁd
 -> 
r_tmp
 &
Ÿhî
 ->Ñ_tmp;

214 
GC_roŸ_size
 -(
Ÿhî
 -> 
r_íd
 - othî -> 
r_°¨t
);

215 
Ÿhî
 -> 
r_°¨t
 = 
GC_°©ic_roŸs
[
n_roŸ_£ts
-1].r_start;

216 
Ÿhî
 -> 
r_íd
 = 
GC_°©ic_roŸs
[
n_roŸ_£ts
-1].r_end;

217 
n_roŸ_£ts
--;

224 
ﬁd
 = 
	`GC_roŸs_¥e£¡
(
b
);

225 i‡(
ﬁd
 != 0) {

226 i‡(
e
 <
ﬁd
 -> 
r_íd
) ;

228 
GC_roŸ_size
 +
e
 - 
ﬁd
 -> 
r_íd
;

229 
ﬁd
 -> 
r_íd
 = 
e
;

233 i‡(
n_roŸ_£ts
 =
MAX_ROOT_SETS
) {

234 
	`ABORT
("Too manyÑoot sets\n");

236 
GC_°©ic_roŸs
[
n_roŸ_£ts
].
r_°¨t
 = (
±r_t
)
b
;

237 
GC_°©ic_roŸs
[
n_roŸ_£ts
].
r_íd
 = (
±r_t
)
e
;

238 
GC_°©ic_roŸs
[
n_roŸ_£ts
].
r_tmp
 = 
tmp
;

239 #i‡!
	`deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

240 
GC_°©ic_roŸs
[
n_roŸ_£ts
].
r_√xt
 = 0;

242 
	`add_roŸs_to_ödex
(
GC_°©ic_roŸs
 + 
n_roŸ_£ts
);

243 
GC_roŸ_size
 +
e
 - 
b
;

244 
n_roŸ_£ts
++;

245 
	}
}

247 
GC_boﬁ
 
	groŸs_wîe_˛óªd
 = 
FALSE
;

249 
	$GC_˛ór_roŸs
 ()

251 
DCL_LOCK_STATE
;

253 i‡(!
GC_is_öôülized
Ë
	`GC_öô
();

254 
	`LOCK
();

255 
roŸs_wîe_˛óªd
 = 
TRUE
;

256 
n_roŸ_£ts
 = 0;

257 
GC_roŸ_size
 = 0;

258 #i‡!
	`deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

260 
i
;

262 
i
 = 0; i < 
RT_SIZE
; i++Ë
GC_roŸ_ödex
[i] = 0;

265 
	`UNLOCK
();

266 
	}
}

269 
	$GC_ªmove_roŸ_©_pos
(
i
)

271 
GC_roŸ_size
 -(
GC_°©ic_roŸs
[
i
].
r_íd
 - GC_°©ic_roŸs[i].
r_°¨t
);

272 
GC_°©ic_roŸs
[
i
].
r_°¨t
 = GC_°©ic_roŸs[
n_roŸ_£ts
-1].r_start;

273 
GC_°©ic_roŸs
[
i
].
r_íd
 = GC_°©ic_roŸs[
n_roŸ_£ts
-1].r_end;

274 
GC_°©ic_roŸs
[
i
].
r_tmp
 = GC_°©ic_roŸs[
n_roŸ_£ts
-1].r_tmp;

275 
n_roŸ_£ts
--;

276 
	}
}

278 #i‡!
deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

279 
	$GC_ªbuûd_roŸ_ödex
()

281 
i
;

283 
i
 = 0; i < 
RT_SIZE
; i++Ë
GC_roŸ_ödex
[i] = 0;

284 
i
 = 0; i < 
n_roŸ_£ts
; i++)

285 
	`add_roŸs_to_ödex
(
GC_°©ic_roŸs
 + 
i
);

286 
	}
}

290 
	$GC_ªmove_tmp_roŸs
()

292 
i
;

294 
i
 = 0; i < 
n_roŸ_£ts
; ) {

295 i‡(
GC_°©ic_roŸs
[
i
].
r_tmp
) {

296 
	`GC_ªmove_roŸ_©_pos
(
i
);

298 
i
++;

301 #i‡!
	`deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

302 
	`GC_ªbuûd_roŸ_ödex
();

304 
	}
}

306 #i‡!
deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

307 
	$GC_ªmove_roŸs
(*
b
, *
e
)

309 
DCL_LOCK_STATE
;

311 
	`LOCK
();

312 
	`GC_ªmove_roŸs_ö√r
((
±r_t
)
b
, (±r_t)
e
);

313 
	`UNLOCK
();

314 
	}
}

317 
	$GC_ªmove_roŸs_ö√r
(
±r_t
 
b
,Öå_à
e
)

319 
i
;

320 
i
 = 0; i < 
n_roŸ_£ts
; ) {

321 i‡(
GC_°©ic_roŸs
[
i
].
r_°¨t
 >
b


322 && 
GC_°©ic_roŸs
[
i
].
r_íd
 <
e
) {

323 
	`GC_ªmove_roŸ_©_pos
(
i
);

325 
i
++;

328 
	`GC_ªbuûd_roŸ_ödex
();

329 
	}
}

332 #i‡
deföed
(
MSWIN32
Ë|| deföed(
_WIN32_WCE_EMULATION
)

335 
GC_boﬁ
 
	$GC_is_tmp_roŸ
(
±r_t
 
p
)

337 
œ°_roŸ_£t
 = 
MAX_ROOT_SETS
;

338 
i
;

340 i‡(
œ°_roŸ_£t
 < 
n_roŸ_£ts


341 && 
p
 >
GC_°©ic_roŸs
[
œ°_roŸ_£t
].
r_°¨t


342 && 
p
 < 
GC_°©ic_roŸs
[
œ°_roŸ_£t
].
r_íd
)

343  
GC_°©ic_roŸs
[
œ°_roŸ_£t
].
r_tmp
;

344 
i
 = 0; i < 
n_roŸ_£ts
; i++) {

345 i‡(
p
 >
GC_°©ic_roŸs
[
i
].
r_°¨t


346 && 
p
 < 
GC_°©ic_roŸs
[
i
].
r_íd
) {

347 
œ°_roŸ_£t
 = 
i
;

348  
GC_°©ic_roŸs
[
i
].
r_tmp
;

351 (
FALSE
);

352 
	}
}

355 
±r_t
 
	$GC_≠¥ox_•
()

357 vﬁ©ûê
w‹d
 
dummy
;

359 
dummy
 = 42;

362 #ifde‡
_MSC_VER


363 #¥agm®
	`w¨nög
(
dißbÀ
:4172)

365 ((
±r_t
)(&
dummy
));

366 #ifde‡
_MSC_VER


367 #¥agm®
	`w¨nög
(:4172)

369 
	}
}

385 
size_t
 
	gGC_ex˛_èbÀ_íåõs
 = 0;

390 
ex˛usi⁄
 * 
	$GC_√xt_ex˛usi⁄
(
±r_t
 
°¨t_addr
)

392 
size_t
 
low
 = 0;

393 
size_t
 
high
 = 
GC_ex˛_èbÀ_íåõs
 - 1;

394 
size_t
 
mid
;

396 
high
 > 
low
) {

397 
mid
 = (
low
 + 
high
) >> 1;

399 i‡((
w‹d
Ë
GC_ex˛_èbÀ
[
mid
].
e_íd
 <(w‹dË
°¨t_addr
) {

400 
low
 = 
mid
 + 1;

402 
high
 = 
mid
;

405 i‡((
w‹d
Ë
GC_ex˛_èbÀ
[
low
].
e_íd
 <(w‹dË
°¨t_addr
)  0;

406  
GC_ex˛_èbÀ
 + 
low
;

407 
	}
}

409 
	$GC_ex˛ude_°©ic_roŸs
(*
°¨t
, *
föish
)

411 
ex˛usi⁄
 * 
√xt
;

412 
size_t
 
√xt_ödex
, 
i
;

414 i‡(0 =
GC_ex˛_èbÀ_íåõs
) {

415 
√xt
 = 0;

417 
√xt
 = 
	`GC_√xt_ex˛usi⁄
(
°¨t
);

419 i‡(0 !
√xt
) {

420 i‡((
w‹d
)(
√xt
 -> 
e_°¨t
Ë< (w‹dË
föish
) {

422 
	`ABORT
("exclusionÑanges overlap");

424 i‡((
w‹d
)(
√xt
 -> 
e_°¨t
Ë=(w‹dË
föish
) {

426 
√xt
 -> 
e_°¨t
 = (
±r_t
)
°¨t
;

429 
√xt_ödex
 = 
√xt
 - 
GC_ex˛_èbÀ
;

430 
i
 = 
GC_ex˛_èbÀ_íåõs
; i > 
√xt_ödex
; --i) {

431 
GC_ex˛_èbÀ
[
i
] = GC_excl_table[i-1];

434 
√xt_ödex
 = 
GC_ex˛_èbÀ_íåõs
;

436 i‡(
GC_ex˛_èbÀ_íåõs
 =
MAX_EXCLUSIONS
Ë
	`ABORT
("Too manyÉxclusions");

437 
GC_ex˛_èbÀ
[
√xt_ödex
].
e_°¨t
 = (
±r_t
)
°¨t
;

438 
GC_ex˛_èbÀ
[
√xt_ödex
].
e_íd
 = (
±r_t
)
föish
;

439 ++
GC_ex˛_èbÀ_íåõs
;

440 
	}
}

443 
	$GC_push_c⁄dôi⁄Æ_wôh_ex˛usi⁄s
(
±r_t
 
bŸtom
,Öå_à
t›
, 
GC_boﬁ
 
Æl
)

445 
ex˛usi⁄
 * 
√xt
;

446 
±r_t
 
ex˛_°¨t
;

448 
bŸtom
 < 
t›
) {

449 
√xt
 = 
	`GC_√xt_ex˛usi⁄
(
bŸtom
);

450 i‡(0 =
√xt
 || (
ex˛_°¨t
 =Çexà-> 
e_°¨t
Ë>
t›
) {

451 
	`GC_push_c⁄dôi⁄Æ
(
bŸtom
, 
t›
, 
Æl
);

454 i‡(
ex˛_°¨t
 > 
bŸtom
Ë
	`GC_push_c⁄dôi⁄Æ
(bŸtom,Éx˛_°¨t, 
Æl
);

455 
bŸtom
 = 
√xt
 -> 
e_íd
;

457 
	}
}

466 
	$GC_push_cuºít_°ack
(
±r_t
 
cﬁd_gc_‰ame
, * 
c⁄ãxt
)

468 #i‡
	`deföed
(
THREADS
)

469 i‡(0 =
cﬁd_gc_‰ame
) ;

470 #ifde‡
STACK_GROWS_DOWN


471 
	`GC_push_Æl_ógî
(
	`GC_≠¥ox_•
(), 
cﬁd_gc_‰ame
);

475 
	`GC_push_Æl_ógî
–
cﬁd_gc_‰ame
, 
	`GC_≠¥ox_•
() );

478 #ifde‡
STACK_GROWS_DOWN


479 
	`GC_push_Æl_°ack_∑πüŒy_ógî
–
	`GC_≠¥ox_•
(), 
GC_°ackbŸtom
,

480 
cﬁd_gc_‰ame
 );

481 #ifde‡
IA64


488 
w‹d
 
GC_ßve_ªgs_ªt_vÆ
;

490 
±r_t
 
b•
 = (±r_tË
GC_ßve_ªgs_ªt_vÆ
;

491 
±r_t
 
cﬁd_gc_bs_poöãr
;

492 i‡(
GC_Æl_öãri‹_poöãrs
) {

493 
cﬁd_gc_bs_poöãr
 = 
b•
 - 2048;

494 i‡(
cﬁd_gc_bs_poöãr
 < 
BACKING_STORE_BASE
) {

495 
cﬁd_gc_bs_poöãr
 = 
BACKING_STORE_BASE
;

497 
	`GC_push_Æl_°ack
(
BACKING_STORE_BASE
, 
cﬁd_gc_bs_poöãr
);

500 
cﬁd_gc_bs_poöãr
 = 
BACKING_STORE_BASE
;

502 
	`GC_push_Æl_ógî
(
cﬁd_gc_bs_poöãr
, 
b•
);

508 
	`GC_push_Æl_°ack_∑πüŒy_ógî
–
GC_°ackbŸtom
, 
	`GC_≠¥ox_•
(),

509 
cﬁd_gc_‰ame
 );

512 
	}
}

514 (*
GC_push_ty≥d_°ru˘uªs
Ë(Ë
NULL
;

520 
	$GC_push_gc_°ru˘uªs
()

522 
	`GC_push_föÆizî_°ru˘uªs
();

523 #i‡
	`deföed
(
THREADS
)

524 
	`GC_push_thªad_°ru˘uªs
();

526 if–
GC_push_ty≥d_°ru˘uªs
 )

527 
	`GC_push_ty≥d_°ru˘uªs
();

528 
	}
}

530 #ifde‡
THREAD_LOCAL_ALLOC


531 
GC_m¨k_thªad_loˇl_‰ì_li°s
();

534 
	$GC_c⁄d_ªgi°î_dy«mic_libørõs
()

536 #i‡
	`deföed
(
DYNAMIC_LOADING
Ë|| deföed(
MSWIN32
Ë|| deföed(
MSWINCE
) \

537 || 
	`deföed
(
PCR
)

538 
	`GC_ªmove_tmp_roŸs
();

539 i‡(!
GC_no_dls
Ë
	`GC_ªgi°î_dy«mic_libørõs
();

541 
GC_no_dls
 = 
TRUE
;

543 
	}
}

554 
	$GC_push_roŸs
(
GC_boﬁ
 
Æl
, 
±r_t
 
cﬁd_gc_‰ame
)

556 
i
;

557 
köd
;

568 #i‡!
	`deföed
(
REGISTER_LIBRARIES_EARLY
)

569 
	`GC_c⁄d_ªgi°î_dy«mic_libørõs
();

573 
i
 = 0; i < 
n_roŸ_£ts
; i++) {

574 
	`GC_push_c⁄dôi⁄Æ_wôh_ex˛usi⁄s
(

575 
GC_°©ic_roŸs
[
i
].
r_°¨t
,

576 
GC_°©ic_roŸs
[
i
].
r_íd
, 
Æl
);

584 
köd
 = 0; köd < 
GC_n_köds
; kind++) {

585 *
ba£
 = 
	`GC_ba£
(
GC_obj_köds
[
köd
].
ok_‰ìli°
);

586 i‡(0 !
ba£
) {

587 
	`GC_£t_m¨k_bô
(
ba£
);

593 i‡(
GC_no_dls
 || 
roŸs_wîe_˛óªd
) {

594 
	`GC_push_gc_°ru˘uªs
();

602 #i‡
	`deföed
(
THREAD_LOCAL_ALLOC
)

603 i‡(
GC_w‹ld_°›≥d
Ë
	`GC_m¨k_thªad_loˇl_‰ì_li°s
();

613 
	`GC_push_ªgs_™d_°ack
(
cﬁd_gc_‰ame
);

615 i‡(
GC_push_Ÿhî_roŸs
 != 0) (*GC_push_other_roots)();

620 
	}
}

	@misc.c

18 
	~<°dio.h
>

19 
	~<limôs.h
>

20 
	~<°d¨g.h
>

21 #i‚de‡
_WIN32_WCE


22 
	~<sig«l.h
>

25 
	#I_HIDE_POINTERS


	)

26 
	~"¥iv©e/gc_pm¨k.h
"

28 #ifde‡
GC_SOLARIS_THREADS


29 
	~<sys/sysˇŒ.h
>

31 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

32 
	#WIN32_LEAN_AND_MEAN


	)

33 
	#NOSERVICE


	)

34 
	~<wödows.h
>

35 
	~<tch¨.h
>

38 #ifde‡
UNIX_LIKE


39 
	~<f˙é.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<sys/°©.h
>

43 
	gGC_log
;

46 #ifde‡
NONSTOP


47 
	~<Êoss.h
>

50 #i‡
deföed
(
THREADS
Ë&& deföed(
PCR
)

51 
	~"û/PCR_IL.h
"

52 
PCR_Th_ML
 
	gGC_Æloˇã_ml
;

57 #i‡
deföed
(
NOSYS
Ë|| deföed(
ECOS
)

58 #unde‡
STACKBASE


63 #ifde‡
DYNAMIC_LOADING


64 
	#GC_REGISTER_MAIN_STATIC_DATA
(Ë
	`GC_ªgi°î_maö_°©ic_d©a
()

	)

66 
	#GC_REGISTER_MAIN_STATIC_DATA
(Ë
TRUE


	)

69 
GC_FAR
 
_GC_¨øys
 
	gGC_¨øys
 ;

72 
GC_boﬁ
 
	gGC_debuggög_°¨ãd
 = 
FALSE
;

75 (*
GC_check_hóp
) () = ((*) ())0;

76 (*
GC_¥öt_Æl_smashed
) () = ((*) ())0;

78 (*
GC_°¨t_ˇŒ_back
) () = ((*) ())0;

80 
±r_t
 
GC_°ackbŸtom
 = 0;

82 #ifde‡
IA64


83 
±r_t
 
GC_ªgi°î_°ackbŸtom
 = 0;

86 
GC_boﬁ
 
GC_d⁄t_gc
 = 0;

88 
GC_boﬁ
 
GC_d⁄t_¥ecﬁÀ˘
 = 0;

90 
GC_boﬁ
 
GC_quõt
 = 0;

92 #i‚de‡
SMALL_CONFIG


93 
GC_boﬁ
 
GC_¥öt_°©s
 = 0;

96 
GC_boﬁ
 
GC_¥öt_back_height
 = 0;

98 #i‚de‡
NO_DEBUGGING


99 
GC_boﬁ
 
GC_dump_ªguœæy
 = 0;

102 #ifde‡
KEEP_BACK_PTRS


103 
GC_backåa˚s
 = 0;

107 #ifde‡
FIND_LEAK


108 
GC_föd_Àak
 = 1;

110 
GC_föd_Àak
 = 0;

113 #ifde‡
ALL_INTERIOR_POINTERS


114 
GC_Æl_öãri‹_poöãrs
 = 1;

116 
GC_Æl_öãri‹_poöãrs
 = 0;

119 
GC_œrge_Æloc_w¨n_öãrvÆ
 = 5;

122 
GC_œrge_Æloc_w¨n_suµªs£d
 = 0;

126 * 
	$GC_deÁu…_oom_‚
(
size_t
 
byãs_ªque°ed
)

129 
	}
}

131 * (*
	gGC_oom_‚
Ë(
size_t
 
	gbyãs_ªque°ed
Ë
GC_deÁu…_oom_‚
;

133 * 
	$GC_¥oje˘2
(*
¨g1
, *
¨g2
)

135  
¨g2
;

136 
	}
}

143 
	$GC_öô_size_m≠
()

145 
i
;

149 
GC_size_m≠
[0] = 1;

150 
i
 = 1; i <
	`GRANULES_TO_BYTES
(
TINY_FREELISTS
-1Ë- 
EXTRA_BYTES
; i++) {

151 
GC_size_m≠
[
i
] = 
	`ROUNDED_UP_GRANULES
(i);

152 
	`GC_ASSERT
(
GC_size_m≠
[
i
] < 
TINY_FREELISTS
);

155 
	}
}

161 
	$GC_exãnd_size_m≠
(
size_t
 
i
)

163 
size_t
 
‹ig_gønuÀ_sz
 = 
	`ROUNDED_UP_GRANULES
(
i
);

164 
size_t
 
gønuÀ_sz
 = 
‹ig_gønuÀ_sz
;

165 
size_t
 
byã_sz
 = 
	`GRANULES_TO_BYTES
(
gønuÀ_sz
);

169 
size_t
 
smÆÀr_th™_i
 = 
byã_sz
 - (byte_sz >> 3);

170 
size_t
 
much_smÆÀr_th™_i
 = 
byã_sz
 - (byte_sz >> 2);

171 
size_t
 
low_limô
;

173 
size_t
 
j
;

175 i‡(
GC_size_m≠
[
smÆÀr_th™_i
] == 0) {

176 
low_limô
 = 
much_smÆÀr_th™_i
;

177 
GC_size_m≠
[
low_limô
] != 0)Üow_limit++;

179 
low_limô
 = 
smÆÀr_th™_i
 + 1;

180 
GC_size_m≠
[
low_limô
] != 0)Üow_limit++;

181 
gønuÀ_sz
 = 
	`ROUNDED_UP_GRANULES
(
low_limô
);

182 
gønuÀ_sz
 += granule_sz >> 3;

183 i‡(
gønuÀ_sz
 < 
‹ig_gønuÀ_sz
) granule_sz = orig_granule_sz;

188 
gønuÀ_sz
 += 1;

189 
gønuÀ_sz
 &= ~1;

190 i‡(
gønuÀ_sz
 > 
MAXOBJGRANULES
) {

191 
gønuÀ_sz
 = 
MAXOBJGRANULES
;

196 
size_t
 
numbî_of_objs
 = 
HBLK_GRANULES
/
gønuÀ_sz
;

197 
gønuÀ_sz
 = 
HBLK_GRANULES
/
numbî_of_objs
;

198 
gønuÀ_sz
 &= ~1;

200 
byã_sz
 = 
	`GRANULES_TO_BYTES
(
gønuÀ_sz
);

203 
byã_sz
 -
EXTRA_BYTES
;

205 
j
 = 
low_limô
; j <
byã_sz
; j++Ë
GC_size_m≠
[j] = 
gønuÀ_sz
;

206 
	}
}

217 
w‹d
 
	gGC_°ack_œ°_˛óªd
 = 0;

218 #ifde‡
THREADS


219 
	#BIG_CLEAR_SIZE
 2048

	)

220 
	#SMALL_CLEAR_SIZE
 256

	)

222 
	#CLEAR_SIZE
 213

	)

223 
	#DEGRADE_RATE
 50

	)

225 
±r_t
 
	gGC_mö_•
;

228 
±r_t
 
	gGC_high_w©î
;

232 
w‹d
 
	gGC_byãs_Ælocd_©_ª£t
;

234 #i‡
deföed
(
ASM_CLEAR_CODE
)

235 *
GC_˛ór_°ack_ö√r
(*, 
±r_t
);

239 * 
	$GC_˛ór_°ack_ö√r
(*
¨g
, 
±r_t
 
limô
)

241 
w‹d
 
dummy
[
CLEAR_SIZE
];

243 
	`BZERO
(
dummy
, 
CLEAR_SIZE
*(
w‹d
));

244 i‡((
±r_t
)(
dummy
Ë
COOLER_THAN
 
limô
) {

245 (Ë
	`GC_˛ór_°ack_ö√r
(
¨g
, 
limô
);

249 
	`GC_no›1
((
w‹d
)
dummy
);

250 (
¨g
);

251 
	}
}

257 * 
	$GC_˛ór_°ack
(*
¨g
)

259 
±r_t
 
•
 = 
	`GC_≠¥ox_•
();

260 #ifde‡
THREADS


261 
w‹d
 
dummy
[
SMALL_CLEAR_SIZE
];

262 
øndom_no
 = 0;

267 
±r_t
 
limô
;

269 
	#SLOP
 400

	)

273 
	#GC_SLOP
 4000

	)

276 
	#CLEAR_THRESHOLD
 100000

	)

284 #ifde‡
THREADS


285 i‡(++
øndom_no
 % 13 == 0) {

286 
limô
 = 
•
;

287 
	`MAKE_HOTTER
(
limô
, 
BIG_CLEAR_SIZE
*(
w‹d
));

288 
limô
 = (
±r_t
)((
w‹d
)limit & ~0xf);

291  
	`GC_˛ór_°ack_ö√r
(
¨g
, 
limô
);

293 
	`BZERO
(
dummy
, 
SMALL_CLEAR_SIZE
*(
w‹d
));

294  
¨g
;

297 i‡(
GC_gc_no
 > 
GC_°ack_œ°_˛óªd
) {

299 i‡(
GC_°ack_œ°_˛óªd
 =0Ë
GC_high_w©î
 = (
±r_t
)
GC_°ackbŸtom
;

300 
GC_mö_•
 = 
GC_high_w©î
;

301 
GC_°ack_œ°_˛óªd
 = 
GC_gc_no
;

302 
GC_byãs_Ælocd_©_ª£t
 = 
GC_byãs_Ælocd
;

305 
	`MAKE_COOLER
(
GC_high_w©î
, 
	`WORDS_TO_BYTES
(
DEGRADE_RATE
Ë+ 
GC_SLOP
);

306 i‡(
•
 
HOTTER_THAN
 
GC_high_w©î
) {

307 
GC_high_w©î
 = 
•
;

309 
	`MAKE_HOTTER
(
GC_high_w©î
, 
GC_SLOP
);

310 
limô
 = 
GC_mö_•
;

311 
	`MAKE_HOTTER
(
limô
, 
SLOP
);

312 i‡(
•
 
COOLER_THAN
 
limô
) {

313 
limô
 = (
±r_t
)((
w‹d
)limit & ~0xf);

316 
GC_mö_•
 = 
•
;

317 (
	`GC_˛ór_°ack_ö√r
(
¨g
, 
limô
));

318 } i‡(
GC_byãs_Ælocd
 - 
GC_byãs_Ælocd_©_ª£t
 > 
CLEAR_THRESHOLD
) {

320 
GC_mö_•
 = 
•
;

321 
	`MAKE_HOTTER
(
GC_mö_•
, 
CLEAR_THRESHOLD
/4);

322 i‡(
GC_mö_•
 
HOTTER_THAN
 
GC_high_w©î
) GC_min_sp = GC_high_water;

323 
GC_byãs_Ælocd_©_ª£t
 = 
GC_byãs_Ælocd
;

325 (
¨g
);

327 
	}
}

332 * 
	$GC_ba£
(* 
p
)

334 
±r_t
 
r
;

335 
hblk
 *
h
;

336 
bŸtom_ödex
 *
bi
;

337 
hdr
 *
ˇndid©e_hdr
;

338 
±r_t
 
limô
;

340 
r
 = 
p
;

341 i‡(!
GC_is_öôülized
)  0;

342 
h
 = 
	`HBLKPTR
(
r
);

343 
	`GET_BI
(
r
, 
bi
);

344 
ˇndid©e_hdr
 = 
	`HDR_FROM_BI
(
bi
, 
r
);

345 i‡(
ˇndid©e_hdr
 == 0) (0);

348 
	`IS_FORWARDING_ADDR_OR_NIL
(
ˇndid©e_hdr
)) {

349 
h
 = 
	`FORWARDED_ADDR
(h,
ˇndid©e_hdr
);

350 
r
 = (
±r_t
)
h
;

351 
ˇndid©e_hdr
 = 
	`HDR
(
h
);

353 i‡(
	`HBLK_IS_FREE
(
ˇndid©e_hdr
)) (0);

355 
r
 = (
±r_t
)((
w‹d
Ï & ~(
	`WORDS_TO_BYTES
(1) - 1));

357 
size_t
 
off£t
 = 
	`HBLKDISPL
(
r
);

358 
sig√d_w‹d
 
sz
 = 
ˇndid©e_hdr
 -> 
hb_sz
;

359 
size_t
 
obj_di•l
 = 
off£t
 % 
sz
;

361 
r
 -
obj_di•l
;

362 
limô
 = 
r
 + 
sz
;

363 i‡(
limô
 > (
±r_t
)(
h
 + 1Ë&& 
sz
 <
HBLKSIZE
) {

366 i‡((
±r_t
)
p
 >
limô
) (0);

368 ((*)
r
);

369 
	}
}

375 
size_t
 
	$GC_size
(* 
p
)

377 
hdr
 * 
hhdr
 = 
	`HDR
(
p
);

379  
hhdr
 -> 
hb_sz
;

380 
	}
}

382 
size_t
 
	$GC_gë_hóp_size
()

384  
GC_hópsize
;

385 
	}
}

387 
size_t
 
	$GC_gë_‰ì_byãs
()

389  
GC_œrge_‰ì_byãs
;

390 
	}
}

392 
size_t
 
	$GC_gë_byãs_sö˚_gc
()

394  
GC_byãs_Ælocd
;

395 
	}
}

397 
size_t
 
	$GC_gë_tŸÆ_byãs
()

399  
GC_byãs_Ælocd
+
GC_byãs_Ælocd_bef‹e_gc
;

400 
	}
}

402 
GC_boﬁ
 
	gGC_is_öôülized
 = 
FALSE
;

404 #i‡
deföed
(
PARALLEL_MARK
Ë|| deföed(
THREAD_LOCAL_ALLOC
)

405 
GC_öô_∑øŒñ
();

409 
	$GC_öô
()

412 
	`GC_öô_ö√r
();

414 
	}
}

416 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

417 
CRITICAL_SECTION
 
	gGC_wrôe_cs
;

420 #ifde‡
MSWIN32


421 
GC_öô_wö32
();

424 
GC_£çagesize
();

426 #ifde‡
MSWIN32


427 
GC_boﬁ
 
GC_no_wö32_dŒs
;

429 
	#GC_no_wö32_dŒs
 
FALSE


	)

432 
	$GC_exô_check
()

434 
	`GC_gcﬁÀ˘
();

435 
	}
}

437 #ifde‡
SEARCH_FOR_DATA_START


438 
GC_öô_löux_d©a_°¨t
();

441 #ifde‡
UNIX_LIKE


443 
GC_£t_™d_ßve_Áu…_h™dÀr
((*
h™dÀr
)());

445 
	$lo›ög_h™dÀr
(
sig
)

446 
sig
;

448 
	`GC_îr_¥ötf
("Caughàsig«»%d:Üo›ög i¿h™dÀr\n", 
sig
);

450 
	}
}

452 
GC_boﬁ
 
	gö°ÆÀd_lo›ög_h™dÀr
 = 
FALSE
;

454 
	$maybe_ö°Æl_lo›ög_h™dÀr
()

458 i‡(!
ö°ÆÀd_lo›ög_h™dÀr
 && 0 !
	`GETENV
("GC_LOOP_ON_ABORT")) {

459 
	`GC_£t_™d_ßve_Áu…_h™dÀr
(
lo›ög_h™dÀr
);

460 
ö°ÆÀd_lo›ög_h™dÀr
 = 
TRUE
;

462 
	}
}

466 
	#maybe_ö°Æl_lo›ög_h™dÀr
()

	)

470 #i‡
deföed
(
GC_PTHREADS
Ë|| deföed(
GC_WIN32_THREADS
)

471 
GC_thr_öô
();

474 
	$GC_öô_ö√r
()

476 #i‡!
	`deföed
(
THREADS
Ë&& deföed(
GC_ASSERTIONS
)

477 
w‹d
 
dummy
;

479 
w‹d
 
öôül_hóp_sz
 = (w‹d)
MINHINCR
;

481 i‡(
GC_is_öôülized
) ;

489 #ifde‡
THREADS


490 
	`GC_ASSERT
(!
GC_√ed_to_lock
);

492 #i‡
	`deföed
(
GC_WIN32_THREADS
Ë&& !deföed(
GC_PTHREADS
)

493 i‡(!
GC_is_öôülized
) {

494 
	`BOOL
 (
WINAPI
 *
p‚
Ë(
LPCRITICAL_SECTION
, 
DWORD
Ë
NULL
;

495 
HMODULE
 
hK32
 = 
	`GëModuÀH™dÀA
("kernel32.dll");

496 i‡(
hK32
)

497 
p‚
 = (
	`BOOL
 (
WINAPI
 *Ë(
LPCRITICAL_SECTION
, 
DWORD
))

498 
	`GëProcAddªss
 (
hK32
,

500 i‡(
p‚
)

501 
	`p‚
(&
GC_Æloˇã_ml
, 4000);

503 
	`InôülizeCrôiˇlSe˘i⁄
 (&
GC_Æloˇã_ml
);

506 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

507 
	`InôülizeCrôiˇlSe˘i⁄
(&
GC_wrôe_cs
);

509 #i‡(!
	`deföed
(
SMALL_CONFIG
))

510 i‡(0 !
	`GETENV
("GC_PRINT_STATS")) {

511 
GC_¥öt_°©s
 = 1;

513 i‡(0 !
	`GETENV
("GC_PRINT_VERBOSE_STATS")) {

514 
GC_¥öt_°©s
 = 
VERBOSE
;

516 #i‡
	`deföed
(
UNIX_LIKE
)

518 * 
fûe_«me
 = 
	`GETENV
("GC_LOG_FILE");

519 i‡(0 !
fûe_«me
) {

520 
log_d
 = 
	`›í
(
fûe_«me
, 
O_CREAT
|
O_WRONLY
|
O_APPEND
, 0666);

521 i‡(
log_d
 < 0) {

522 
	`GC_log_¥ötf
("FaûedÅÿ›í %†a†log fûe\n", 
fûe_«me
);

524 
GC_log
 = 
log_d
;

530 #i‚de‡
NO_DEBUGGING


531 i‡(0 !
	`GETENV
("GC_DUMP_REGULARLY")) {

532 
GC_dump_ªguœæy
 = 1;

535 #ifde‡
KEEP_BACK_PTRS


537 * 
backåa˚s_°rög
 = 
	`GETENV
("GC_BACKTRACES");

538 i‡(0 !
backåa˚s_°rög
) {

539 
GC_backåa˚s
 = 
	`©ﬁ
(
backåa˚s_°rög
);

540 i‡(
backåa˚s_°rög
[0] ='\0'Ë
GC_backåa˚s
 = 1;

544 i‡(0 !
	`GETENV
("GC_FIND_LEAK")) {

545 
GC_föd_Àak
 = 1;

546 
	`©exô
(
GC_exô_check
);

548 i‡(0 !
	`GETENV
("GC_ALL_INTERIOR_POINTERS")) {

549 
GC_Æl_öãri‹_poöãrs
 = 1;

551 i‡(0 !
	`GETENV
("GC_DONT_GC")) {

552 
GC_d⁄t_gc
 = 1;

554 i‡(0 !
	`GETENV
("GC_PRINT_BACK_HEIGHT")) {

555 
GC_¥öt_back_height
 = 1;

557 i‡(0 !
	`GETENV
("GC_NO_BLACKLIST_WARNING")) {

558 
GC_œrge_Æloc_w¨n_öãrvÆ
 = 
LONG_MAX
;

561 * 
addr_°rög
 = 
	`GETENV
("GC_TRACE");

562 i‡(0 !
addr_°rög
) {

563 #i‚de‡
ENABLE_TRACE


564 
	`WARN
("TracingÇotÉnabled: Ignoring GC_TRACE value\n", 0);

566 #ifde‡
STRTOULL


567 
addr
 = 
	`°πouŒ
(
addr_°rög
, 
NULL
, 16);

569 
addr
 = 
	`°πoul
(
addr_°rög
, 
NULL
, 16);

571 i‡(
addr
 < 0x1000)

572 
	`WARN
("U∆ikñyÅø˚áddªss: 0x%lx\n", (
GC_w‹d
)
addr
);

573 
GC_åa˚_addr
 = (
±r_t
)
addr
;

578 * 
time_limô_°rög
 = 
	`GETENV
("GC_PAUSE_TIME_TARGET");

579 i‡(0 !
time_limô_°rög
) {

580 
time_limô
 = 
	`©ﬁ
(
time_limô_°rög
);

581 i‡(
time_limô
 < 5) {

582 
	`WARN
("GC_PAUSE_TIME_TARGETÉnvironment variable valueÅoo small "

585 
GC_time_limô
 = 
time_limô
;

590 * 
öãrvÆ_°rög
 = 
	`GETENV
("GC_LARGE_ALLOC_WARN_INTERVAL");

591 i‡(0 !
öãrvÆ_°rög
) {

592 
öãrvÆ
 = 
	`©ﬁ
(
öãrvÆ_°rög
);

593 i‡(
öãrvÆ
 <= 0) {

594 
	`WARN
("GC_LARGE_ALLOC_WARN_INTERVALÉnvironment variable has "

597 
GC_œrge_Æloc_w¨n_öãrvÆ
 = 
öãrvÆ
;

601 
	`maybe_ö°Æl_lo›ög_h™dÀr
();

603 i‡(
ALIGNMENT
 > 
GC_DS_TAGS
 && 
EXTRA_BYTES
 != 0) {

604 
GC_obj_köds
[
NORMAL
].
ok_des¸ùt‹
 = ((
w‹d
)(-
ALIGNMENT
Ë| 
GC_DS_LENGTH
);

606 
	`GC_£çagesize
();

607 
	`GC_ex˛ude_°©ic_roŸs
(
begöGC_¨øys
, 
ídGC_¨øys
);

608 
	`GC_ex˛ude_°©ic_roŸs
(
begöGC_obj_köds
, 
ídGC_obj_köds
);

609 #ifde‡
SEPARATE_GLOBALS


610 
	`GC_ex˛ude_°©ic_roŸs
(
begöGC_obj‰ìli°
, 
ídGC_obj‰ìli°
);

611 
	`GC_ex˛ude_°©ic_roŸs
(
begöGC_aobj‰ìli°
, 
ídGC_aobj‰ìli°
);

613 #ifde‡
MSWIN32


614 
	`GC_öô_wö32
();

616 #i‡
	`deföed
(
USE_PROC_FOR_LIBRARIES
Ë&& deföed(
GC_LINUX_THREADS
)

617 
	`WARN
("USE_PROC_FOR_LIBRARIES + GC_LINUX_THREADSÖerformsÖoorly.\n", 0);

622 #i‡
	`deföed
(
SEARCH_FOR_DATA_START
)

623 
	`GC_öô_löux_d©a_°¨t
();

625 #i‡(
	`deföed
(
NETBSD
Ë|| deföed(
OPENBSD
)Ë&& deföed(
__ELF__
)

626 
	`GC_öô_√tbsd_ñf
();

628 #i‡!
	`deföed
(
THREADS
Ë|| deföed(
GC_PTHREADS
Ë|| deföed(
GC_WIN32_THREADS
) \

629 || 
	`deföed
(
GC_SOLARIS_THREADS
)

630 i‡(
GC_°ackbŸtom
 == 0) {

631 
GC_°ackbŸtom
 = 
	`GC_gë_maö_°ack_ba£
();

632 #i‡(
	`deföed
(
LINUX
Ë|| deföed(
HPUX
)Ë&& deföed(
IA64
)

633 
GC_ªgi°î_°ackbŸtom
 = 
	`GC_gë_ªgi°î_°ack_ba£
();

636 #i‡(
	`deföed
(
LINUX
Ë|| deföed(
HPUX
)Ë&& deföed(
IA64
)

637 i‡(
GC_ªgi°î_°ackbŸtom
 == 0) {

638 
	`WARN
("GC_register_stackbottom should be set with GC_stackbottom\n", 0);

642 
GC_ªgi°î_°ackbŸtom
 = 
	`GC_gë_ªgi°î_°ack_ba£
();

648 
	`GC_STATIC_ASSERT
( (
±r_t
Ë=(
w‹d
));

649 
	`GC_STATIC_ASSERT
( (
sig√d_w‹d
Ë=(
w‹d
));

650 
	`GC_STATIC_ASSERT
( (
hblk
Ë=
HBLKSIZE
);

651 #i‚de‡
THREADS


652 #ifde‡
STACK_GROWS_DOWN


653 
	`GC_ASSERT
((
w‹d
)(&
dummy
Ë<(w‹d)
GC_°ackbŸtom
);

655 
	`GC_ASSERT
((
w‹d
)(&
dummy
Ë>(w‹d)
GC_°ackbŸtom
);

658 #i‡!
	`deföed
(
_AUX_SOURCE
Ë|| deföed(
__GNUC__
)

659 
	`GC_ASSERT
((
w‹d
)(-1) > (word)0);

662 
	`GC_ASSERT
((
±r_t
)(
w‹d
)(-1) > (ptr_t)0);

664 
	`GC_ASSERT
((
sig√d_w‹d
)(-1) < (signed_word)0);

665 #i‡!
	`deföed
(
SMALL_CONFIG
)

666 i‡(
GC_ö¸emíèl
 || 0 !
	`GETENV
("GC_ENABLE_INCREMENTAL")) {

668 
	`GC_£çagesize
();

671 
	`GC_dúty_öô
();

672 
	`GC_ASSERT
(
GC_byãs_Ælocd
 == 0)

673 
GC_ö¸emíèl
 = 
TRUE
;

679 i‡(
	`GC_REGISTER_MAIN_STATIC_DATA
()Ë
	`GC_ªgi°î_d©a_£gmíts
();

680 
	`GC_öô_hódîs
();

681 
	`GC_bl_öô
();

682 
	`GC_m¨k_öô
();

684 * 
sz_°r
 = 
	`GETENV
("GC_INITIAL_HEAP_SIZE");

685 i‡(
sz_°r
 !
NULL
) {

686 
öôül_hóp_sz
 = 
	`©oi
(
sz_°r
);

687 i‡(
öôül_hóp_sz
 <
MINHINCR
 * 
HBLKSIZE
) {

688 
	`WARN
("Bad initial heap size %s - ignoring it.\n",

689 
sz_°r
);

691 
öôül_hóp_sz
 = 
	`divHBLKSZ
(initial_heap_sz);

695 * 
sz_°r
 = 
	`GETENV
("GC_MAXIMUM_HEAP_SIZE");

696 i‡(
sz_°r
 !
NULL
) {

697 
w‹d
 
max_hóp_sz
 = (w‹d)
	`©ﬁ
(
sz_°r
);

698 i‡(
max_hóp_sz
 < 
öôül_hóp_sz
 * 
HBLKSIZE
) {

699 
	`WARN
("Bad maximum heap size %s - ignoring it.\n",

700 
sz_°r
);

702 i‡(0 =
GC_max_ªåõs
) GC_max_retries = 2;

703 
	`GC_£t_max_hóp_size
(
max_hóp_sz
);

706 i‡(!
	`GC_ex∑nd_hp_ö√r
(
öôül_hóp_sz
)) {

707 
	`GC_îr_¥ötf
("Can't start up:ÇotÉnough memory\n");

708 
	`EXIT
();

710 
	`GC_öôülize_off£ts
();

711 
	`GC_ªgi°î_di•œ˚mít_ö√r
(0L);

712 #i‡
	`deföed
(
GC_LINUX_THREADS
Ë&& deföed(
REDIRECT_MALLOC
)

713 i‡(!
GC_Æl_öãri‹_poöãrs
) {

715 
	`GC_ªgi°î_di•œ˚mít_ö√r
((*));

718 
	`GC_öô_size_m≠
();

719 #ifde‡
PCR


720 i‡(
	`PCR_IL_Lock
(
PCR_Boﬁ_Ál£
, 
PCR_ÆlSigsBlocked
, 
PCR_waôF‹evî
)

721 !
PCR_ERes_okay
) {

722 
	`ABORT
("Can'tÜockÜoad state\n");

723 } i‡(
	`PCR_IL_U∆ock
(Ë!
PCR_ERes_okay
) {

724 
	`ABORT
("Can't unlockÜoad state\n");

726 
	`PCR_IL_U∆ock
();

727 
	`GC_p¸_ö°Æl
();

729 
GC_is_öôülized
 = 
TRUE
;

730 #i‡
	`deföed
(
GC_PTHREADS
Ë|| deföed(
GC_WIN32_THREADS
)

731 
	`GC_thr_öô
();

733 
COND_DUMP
;

735 i‡(!
GC_d⁄t_¥ecﬁÀ˘
 || 
GC_ö¸emíèl
Ë
	`GC_gcﬁÀ˘_ö√r
();

736 #ifde‡
STUBBORN_ALLOC


737 
	`GC_°ubb‹n_öô
();

740 #ifde‡
LINT


742 * 
GC_c›yright
[];

743 
	`GC_ªad
();

744 
	`GC_ªgi°î_föÆizî_no_‹dî
();

746 
	`GC_no›
(
GC_c›yright
, 
GC_föd_hódî
,

747 
GC_push_⁄e
, 
GC_ˇŒ_wôh_Æloc_lock
, 
GC_ªad
,

748 
GC_d⁄t_ex∑nd
,

749 #i‚de‡
NO_DEBUGGING


750 
GC_dump
,

752 
GC_ªgi°î_föÆizî_no_‹dî
);

758 #i‡
	`deföed
(
PARALLEL_MARK
Ë|| deföed(
THREAD_LOCAL_ALLOC
)

763 
	`GC_öô_∑øŒñ
();

767 #i‡
	`deföed
(
DYNAMIC_LOADING
Ë&& deföed(
DARWIN
)

771 
	`GC_öô_dyld
();

772 
	`GC_öô_dyld
();

775 
	}
}

777 
	$GC_íabÀ_ö¸emíèl
()

779 #i‡!
	`deföed
(
SMALL_CONFIG
Ë&& !deföed(
KEEP_BACK_PTRS
)

783 i‡(!
GC_föd_Àak
) {

784 
DCL_LOCK_STATE
;

786 
	`LOCK
();

787 i‡(
GC_ö¸emíèl
Ë
out
;

788 
	`GC_£çagesize
();

790 
	`maybe_ö°Æl_lo›ög_h™dÀr
();

791 
GC_ö¸emíèl
 = 
TRUE
;

792 i‡(!
GC_is_öôülized
) {

793 
	`GC_öô_ö√r
();

795 
	`GC_dúty_öô
();

797 i‡(!
GC_dúty_maöèöed
Ë
out
;

798 i‡(
GC_d⁄t_gc
) {

800 
	`UNLOCK
();

803 i‡(
GC_byãs_Ælocd
 > 0) {

805 
	`GC_gcﬁÀ˘_ö√r
();

809 
	`GC_ªad_dúty
();

810 
out
:

811 
	`UNLOCK
();

813 
	`GC_öô
();

816 
	`GC_öô
();

818 
	}
}

821 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

822 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
_DEBUG
)

823 
	~<¸tdbg.h
>

825 #ifde‡
OLD_WIN32_LOG_FILE


826 
	#LOG_FILE
 
	`_T
("gc.log")

	)

829 
HANDLE
 
	gGC_°dout
 = 0;

831 
	$GC_deöô
()

833 i‡(
GC_is_öôülized
) {

834 
	`DñëeCrôiˇlSe˘i⁄
(&
GC_wrôe_cs
);

836 
	}
}

838 #i‚de‡
THREADS


839 
	#GC_√ed_to_lock
 0

	)

841 
	$GC_wrôe
(c⁄° *
buf
, 
size_t
 
Àn
)

843 
BOOL
 
tmp
;

844 
DWORD
 
wrôãn
;

845 i‡(
Àn
 == 0)

847 i‡(
GC_√ed_to_lock
Ë
	`E¡îCrôiˇlSe˘i⁄
(&
GC_wrôe_cs
);

848 i‡(
GC_°dout
 =
INVALID_HANDLE_VALUE
) {

849 i‡(
GC_√ed_to_lock
Ë
	`LóveCrôiˇlSe˘i⁄
(&
GC_wrôe_cs
);

851 } i‡(
GC_°dout
 == 0) {

852 * 
fûe_«me
 = 
	`GETENV
("GC_LOG_FILE");

853 
logP©h
[
_MAX_PATH
 + 5];

855 i‡(0 =
fûe_«me
) {

856 #ifde‡
OLD_WIN32_LOG_FILE


857 
	`°r˝y
(
logP©h
, 
LOG_FILE
);

859 
	`GëModuÀFûeName
(
NULL
, 
logP©h
, 
_MAX_PATH
);

860 
	`°rˇt
(
logP©h
, ".log");

862 
fûe_«me
 = 
logP©h
;

864 
GC_°dout
 = 
	`Cª©eFûe
(
logP©h
, 
GENERIC_WRITE
,

865 
FILE_SHARE_READ
,

866 
NULL
, 
CREATE_ALWAYS
, 
FILE_FLAG_WRITE_THROUGH
,

867 
NULL
);

868 i‡(
GC_°dout
 =
INVALID_HANDLE_VALUE
)

869 
	`ABORT
("Open ofÜog file failed");

871 
tmp
 = 
	`WrôeFûe
(
GC_°dout
, 
buf
, (
DWORD
)
Àn
, &
wrôãn
, 
NULL
);

872 i‡(!
tmp
)

873 
	`DebugBªak
();

874 #i‡
	`deföed
(
_MSC_VER
Ë&& deföed(
_DEBUG
)

875 
	`_CπDbgRï‹t
(
_CRT_WARN
, 
NULL
, 0, NULL, "%.*s", 
Àn
, 
buf
);

877 i‡(
GC_√ed_to_lock
Ë
	`LóveCrôiˇlSe˘i⁄
(&
GC_wrôe_cs
);

878  
tmp
 ? ()
wrôãn
 : -1;

879 
	}
}

880 #unde‡
GC_√ed_to_lock


884 #i‡
deföed
(
OS2
Ë|| deföed(
MACOS
)

885 
FILE
 * 
	gGC_°dout
 = 
NULL
;

886 
FILE
 * 
	gGC_°dîr
 = 
NULL
;

887 
FILE
 * 
	gGC_log
 = 
NULL
;

888 
	gGC_tmp
;

890 
	$GC_£t_fûes
()

892 i‡(
GC_°dout
 =
NULL
) {

893 
GC_°dout
 = 
°dout
;

895 i‡(
GC_°dîr
 =
NULL
) {

896 
GC_°dîr
 = 
°dîr
;

898 i‡(
GC_log
 =
NULL
) {

899 
GC_log
 = 
°dîr
;

901 
	}
}

904 #i‡!
deföed
(
OS2
Ë&& !deföed(
MACOS
Ë&& !deföed(
MSWIN32
Ë&& !deföed(
MSWINCE
)

905 
	gGC_°dout
 = 1;

906 
	gGC_°dîr
 = 2;

907 
	gGC_log
 = 2;

908 #i‡!
deföed
(
AMIGA
)

909 
	~<uni°d.h
>

913 #i‡!
deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
Ë&& !deföed(
OS2
) \

914 && !
deföed
(
MACOS
Ë&& !deföed(
ECOS
Ë&& !
	$deföed
(
NOSYS
)

915 
	$GC_wrôe
(
fd
, 
buf
, 
Àn
)

916 
fd
;

917 c⁄° *
buf
;

918 
size_t
 
Àn
;

920 
byãs_wrôãn
 = 0;

921 
ªsu…
;

923 
byãs_wrôãn
 < 
Àn
) {

924 #ifde‡
GC_SOLARIS_THREADS


925 
ªsu…
 = 
	`sysˇŒ
(
SYS_wrôe
, 
fd
, 
buf
 + 
byãs_wrôãn
,

926 
Àn
 - 
byãs_wrôãn
);

928 
ªsu…
 = 
	`wrôe
(
fd
, 
buf
 + 
byãs_wrôãn
, 
Àn
 - bytes_written);

930 i‡(-1 =
ªsu…
) (result);

931 
byãs_wrôãn
 +
ªsu…
;

933 (
byãs_wrôãn
);

934 
	}
}

937 #ifde‡
ECOS


938 
	$GC_wrôe
(
fd
, 
buf
, 
Àn
)

940 
	`_Jv_düg_wrôe
 (
buf
, 
Àn
);

941  
Àn
;

942 
	}
}

945 #ifde‡
NOSYS


946 
	$GC_wrôe
(
fd
, 
buf
, 
Àn
)

949  
Àn
;

950 
	}
}

954 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

956 
	#WRITE
(
f
, 
buf
, 
Àn
Ë
	`GC_wrôe
(buf,Üí)

	)

958 #i‡
deföed
(
OS2
Ë|| deföed(
MACOS
)

959 
	#WRITE
(
f
, 
buf
, 
Àn
Ë(
	`GC_£t_fûes
(), \

960 
GC_tmp
 = 
	`fwrôe
((
buf
), 1, (
Àn
), (
f
)), \

961 
	`fÊush
(
f
), 
GC_tmp
)

	)

963 
	#WRITE
(
f
, 
buf
, 
Àn
Ë
	`GC_wrôe
((f), (buf), (Àn))

	)

967 
	#BUFSZ
 1024

	)

968 #ifde‡
_MSC_VER


969 
	#v¢¥ötf
 
_v¢¥ötf


	)

976 
	$GC_¥ötf
(c⁄° *
f‹m©
, ...)

978 
va_li°
 
¨gs
;

979 
buf
[
BUFSZ
+1];

981 
	`va_°¨t
(
¨gs
, 
f‹m©
);

982 i‡(
GC_quõt
) ;

983 
buf
[
BUFSZ
] = 0x15;

984 (Ë
	`v¢¥ötf
(
buf
, 
BUFSZ
, 
f‹m©
, 
¨gs
);

985 
	`va_íd
(
¨gs
);

986 i‡(
buf
[
BUFSZ
] !0x15Ë
	`ABORT
("GC_printf clobbered stack");

987 i‡(
	`WRITE
(
GC_°dout
, 
buf
, 
	`°æí
(buf)Ë< 0Ë
	`ABORT
("writeÅo stdout failed");

988 
	}
}

990 
	$GC_îr_¥ötf
(c⁄° *
f‹m©
, ...)

992 
va_li°
 
¨gs
;

993 
buf
[
BUFSZ
+1];

995 
	`va_°¨t
(
¨gs
, 
f‹m©
);

996 
buf
[
BUFSZ
] = 0x15;

997 (Ë
	`v¢¥ötf
(
buf
, 
BUFSZ
, 
f‹m©
, 
¨gs
);

998 
	`va_íd
(
¨gs
);

999 i‡(
buf
[
BUFSZ
] !0x15Ë
	`ABORT
("GC_printf clobbered stack");

1000 i‡(
	`WRITE
(
GC_°dîr
, 
buf
, 
	`°æí
(buf)Ë< 0Ë
	`ABORT
("writeÅo stderr failed");

1001 
	}
}

1003 
	$GC_log_¥ötf
(c⁄° *
f‹m©
, ...)

1005 
va_li°
 
¨gs
;

1006 
buf
[
BUFSZ
+1];

1008 
	`va_°¨t
(
¨gs
, 
f‹m©
);

1009 
buf
[
BUFSZ
] = 0x15;

1010 (Ë
	`v¢¥ötf
(
buf
, 
BUFSZ
, 
f‹m©
, 
¨gs
);

1011 
	`va_íd
(
¨gs
);

1012 i‡(
buf
[
BUFSZ
] !0x15Ë
	`ABORT
("GC_printf clobbered stack");

1013 i‡(
	`WRITE
(
GC_log
, 
buf
, 
	`°æí
(buf)Ë< 0Ë
	`ABORT
("writeÅoÜog failed");

1014 
	}
}

1016 
	$GC_îr_puts
(c⁄° *
s
)

1018 i‡(
	`WRITE
(
GC_°dîr
, 
s
, 
	`°æí
(s)Ë< 0Ë
	`ABORT
("writeÅo stderr failed");

1019 
	}
}

1021 #i‡
deföed
(
LINUX
Ë&& !deföed(
SMALL_CONFIG
)

1022 
	$GC_îr_wrôe
(
buf
, 
Àn
)

1023 c⁄° *
buf
;

1024 
size_t
 
Àn
;

1026 i‡(
	`WRITE
(
GC_°dîr
, 
buf
, 
Àn
Ë< 0Ë
	`ABORT
("writeÅo stderr failed");

1027 
	}
}

1030 
	$GC_deÁu…_w¨n_¥oc
(*
msg
, 
GC_w‹d
 
¨g
)

1032 
	`GC_îr_¥ötf
(
msg
, 
¨g
);

1033 
	}
}

1035 
GC_w¨n_¥oc
 
	gGC_cuºít_w¨n_¥oc
 = 
GC_deÁu…_w¨n_¥oc
;

1037 
GC_w¨n_¥oc
 
	$GC_£t_w¨n_¥oc
(
GC_w¨n_¥oc
 
p
)

1039 
GC_w¨n_¥oc
 
ªsu…
;

1041 #ifde‡
GC_WIN32_THREADS


1042 
	`GC_ASSERT
(
GC_is_öôülized
);

1044 
	`LOCK
();

1045 
ªsu…
 = 
GC_cuºít_w¨n_¥oc
;

1046 
GC_cuºít_w¨n_¥oc
 = 
p
;

1047 
	`UNLOCK
();

1048 (
ªsu…
);

1049 
	}
}

1051 
GC_w‹d
 
	$GC_£t_‰ì_•a˚_divis‹
 (
GC_w‹d
 
vÆue
)

1053 
GC_w‹d
 
ﬁd
 = 
GC_‰ì_•a˚_divis‹
;

1054 
GC_‰ì_•a˚_divis‹
 = 
vÆue
;

1055  
ﬁd
;

1056 
	}
}

1058 #i‚de‡
PCR


1059 
	$GC_ab‹t
(c⁄° *
msg
)

1061 #i‡
	`deföed
(
MSWIN32
)

1062 (Ë
	`MesßgeBoxA
(
NULL
, 
msg
, "F©ÆÉº‹ i¿gc", 
MB_ICONERROR
|
MB_OK
);

1064 
	`GC_îr_¥ötf
("%s\n", 
msg
);

1066 i‡(
	`GETENV
("GC_LOOP_ON_ABORT"Ë!
NULL
) {

1073 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

1074 
	`DebugBªak
();

1076 (Ë
	`ab‹t
();

1078 
	}
}

1081 
	$GC_íabÀ
()

1083 
	`LOCK
();

1084 
GC_d⁄t_gc
--;

1085 
	`UNLOCK
();

1086 
	}
}

1088 
	$GC_dißbÀ
()

1090 
	`LOCK
();

1091 
GC_d⁄t_gc
++;

1092 
	`UNLOCK
();

1093 
	}
}

1096 ** 
	$GC_√w_‰ì_li°_ö√r
()

1098 *
ªsu…
 = 
	`GC_INTERNAL_MALLOC
((
MAXOBJGRANULES
+1)*(
±r_t
),

1099 
PTRFREE
);

1100 i‡(
ªsu…
 =0Ë
	`ABORT
("FailedÅoállocate freelist forÇew kind");

1101 
	`BZERO
(
ªsu…
, (
MAXOBJGRANULES
+1)*(
±r_t
));

1102  
ªsu…
;

1103 
	}
}

1105 ** 
	$GC_√w_‰ì_li°
()

1107 *
ªsu…
;

1108 
	`LOCK
();

1109 
ªsu…
 = 
	`GC_√w_‰ì_li°_ö√r
();

1110 
	`UNLOCK
();

1111  
ªsu…
;

1112 
	}
}

1114 
	$GC_√w_köd_ö√r
(**
Ê
, 
GC_w‹d
 
des¸
, 
adju°
, 
˛ór
)

1116 
ªsu…
 = 
GC_n_köds
++;

1118 i‡(
GC_n_köds
 > 
MAXOBJKINDS
Ë
	`ABORT
("Too many kinds");

1119 
GC_obj_köds
[
ªsu…
].
ok_‰ìli°
 = 
Ê
;

1120 
GC_obj_köds
[
ªsu…
].
ok_ª˛aim_li°
 = 0;

1121 
GC_obj_köds
[
ªsu…
].
ok_des¸ùt‹
 = 
des¸
;

1122 
GC_obj_köds
[
ªsu…
].
ok_ªloˇã_des¸
 = 
adju°
;

1123 
GC_obj_köds
[
ªsu…
].
ok_öô
 = 
˛ór
;

1124  
ªsu…
;

1125 
	}
}

1127 
	$GC_√w_köd
(**
Ê
, 
GC_w‹d
 
des¸
, 
adju°
, 
˛ór
)

1129 
ªsu…
;

1130 
	`LOCK
();

1131 
ªsu…
 = 
	`GC_√w_köd_ö√r
(
Ê
, 
des¸
, 
adju°
, 
˛ór
);

1132 
	`UNLOCK
();

1133  
ªsu…
;

1134 
	}
}

1136 
	$GC_√w_¥oc_ö√r
(
GC_m¨k_¥oc
 
¥oc
)

1138 
ªsu…
 = 
GC_n_m¨k_¥ocs
++;

1140 i‡(
GC_n_m¨k_¥ocs
 > 
MAX_MARK_PROCS
Ë
	`ABORT
("Too many markÖrocedures");

1141 
GC_m¨k_¥ocs
[
ªsu…
] = 
¥oc
;

1142  
ªsu…
;

1143 
	}
}

1145 
	$GC_√w_¥oc
(
GC_m¨k_¥oc
 
¥oc
)

1147 
ªsu…
;

1148 
	`LOCK
();

1149 
ªsu…
 = 
	`GC_√w_¥oc_ö√r
(
¥oc
);

1150 
	`UNLOCK
();

1151  
ªsu…
;

1152 
	}
}

1154 
GC_API
 * 
	$GC_ˇŒ_wôh_°ack_ba£
(
GC_°ack_ba£_func
 
‚
, *
¨g
)

1156 
dummy
;

1157 
GC_°ack_ba£
 
ba£
;

1159 
ba£
.
mem_ba£
 = (*)&
dummy
;

1160 #ifde‡
IA64


1161 
ba£
.
ªg_ba£
 = (*)
	`GC_ßve_ªgs_ö_°ack
();

1165  
	`‚
(&
ba£
, 
¨g
);

1166 
	}
}

1168 #i‡!
deföed
(
NO_DEBUGGING
)

1170 
	$GC_dump
()

1172 
	`GC_¥ötf
("***StaticÑoots:\n");

1173 
	`GC_¥öt_°©ic_roŸs
();

1174 
	`GC_¥ötf
("\n***Heap sections:\n");

1175 
	`GC_¥öt_hóp_£˘s
();

1176 
	`GC_¥ötf
("\n***Free blocks:\n");

1177 
	`GC_¥öt_hblk‰ìli°
();

1178 
	`GC_¥ötf
("\n***Blocks in use:\n");

1179 
	`GC_¥öt_block_li°
();

1180 
	`GC_¥ötf
("\n***Finalization statistics:\n");

1181 
	`GC_¥öt_föÆiz©i⁄_°©s
();

1182 
	}
}

	@msvc_dbg.c

22 #i‚de‡
_M_AMD64


26 
	~"¥iv©e/msvc_dbg.h
"

28 
	#WIN32_LEAN_AND_MEAN


	)

29 
	~<wödows.h
>

31 #¥agm®
∑ck
(
push
, 8)

32 
	~<imagehÕ.h
>

33 #¥agm®
∑ck
(
p›
)

35 #¥agm®
commít
(
lib
, "dbghelp.lib")

36 #¥agm®
›timize
("gy", 
off
)

38 #ifde‡
_WIN64


39 
ULONG_PTR
 
	tULONG_ADDR
;

41 
ULONG
 
	tULONG_ADDR
;

44 
HANDLE
 
	$GëSymH™dÀ
()

46 
HANDLE
 
symH™dÀ
 = 
NULL
;

47 i‡(!
symH™dÀ
) {

48 
BOOL
 
bRë
 = 
	`SymInôülize
(
symH™dÀ
 = 
	`GëCuºítPro˚ss
(), 
NULL
, 
FALSE
);

49 i‡(
bRë
) {

50 
DWORD
 
dwO±i⁄s
 = 
	`SymGëO±i⁄s
();

51 
dwO±i⁄s
 &~
SYMOPT_UNDNAME
;

52 
dwO±i⁄s
 |
SYMOPT_LOAD_LINES
;

53 
	`SymSëO±i⁄s
(
dwO±i⁄s
);

56  
symH™dÀ
;

57 
	}
}

59 * 
CALLBACK
 
	$Fun˘i⁄TabÀAc˚ss
(
HANDLE
 
hPro˚ss
, 
ULONG_ADDR
 
dwAddrBa£
)

61  
	`SymFun˘i⁄TabÀAc˚ss
(
hPro˚ss
, 
dwAddrBa£
);

62 
	}
}

64 
ULONG_ADDR
 
CALLBACK
 
	$GëModuÀBa£
(
HANDLE
 
hPro˚ss
, 
ULONG_ADDR
 
dwAddªss
)

66 
MEMORY_BASIC_INFORMATION
 
mem‹yInfo
;

67 
ULONG_ADDR
 
dwAddrBa£
 = 
	`SymGëModuÀBa£
(
hPro˚ss
, 
dwAddªss
);

68 i‡(
dwAddrBa£
) {

69  
dwAddrBa£
;

71 i‡(
	`VútuÆQuîyEx
(
hPro˚ss
, (*)(
ULONG_PTR
)
dwAddªss
, &
mem‹yInfo
, (memoryInfo))) {

72 
fûeP©h
[
_MAX_PATH
];

73 
curDú
[
_MAX_PATH
];

74 
exeP©h
[
_MAX_PATH
];

75 
DWORD
 
size
 = 
	`GëModuÀFûeNameA
((
HINSTANCE
)
mem‹yInfo
.
AŒoˇti⁄Ba£
, 
fûeP©h
, (filePath));

78 
	`GëCuºítDúe˘‹yA
((
curDú
), curDir);

79 
	`GëModuÀFûeNameA
(
NULL
, 
exeP©h
, (exePath));

80 #i‡
	`deföed
(
_MSC_VER
) && _MSC_VER == 1200

82 
	`°rˇt
(
exeP©h
, "\\..");

84 
	`°rˇt_s
(
exeP©h
, (exePath), "\\..");

86 
	`SëCuºítDúe˘‹yA
(
exeP©h
);

87 #ifde‡
_DEBUG


88 
	`GëCuºítDúe˘‹yA
((
exeP©h
),ÉxePath);

90 
	`SymLﬂdModuÀ
(
hPro˚ss
, 
NULL
, 
size
 ? 
fûeP©h
 : NULL, NULL, (
ULONG_ADDR
)(
ULONG_PTR
)
mem‹yInfo
.
AŒoˇti⁄Ba£
, 0);

91 
	`SëCuºítDúe˘‹yA
(
curDú
);

93  (
ULONG_ADDR
)(
ULONG_PTR
)
mem‹yInfo
.
AŒoˇti⁄Ba£
;

94 
	}
}

96 
ULONG_ADDR
 
	$CheckAddªss
(* 
addªss
)

98 
ULONG_ADDR
 
dwAddªss
 = (ULONG_ADDR)(
ULONG_PTR
)
addªss
;

99 
	`GëModuÀBa£
(
	`GëSymH™dÀ
(), 
dwAddªss
);

100  
dwAddªss
;

101 
	}
}

103 
size_t
 
	$GëSèckFømes
(
size_t
 
skù
, * 
‰ames
[], size_à
maxFømes
)

105 
HANDLE
 
hPro˚ss
 = 
	`GëSymH™dÀ
();

106 
HANDLE
 
hThªad
 = 
	`GëCuºítThªad
();

107 
CONTEXT
 
c⁄ãxt
;

108 
c⁄ãxt
.
C⁄ãxtFœgs
 = 
CONTEXT_FULL
;

109 i‡(!
	`GëThªadC⁄ãxt
(
hThªad
, &
c⁄ãxt
)) {

113 #i‡
	`deföed
(
_M_IX86
)

114 
__asm
 
mov
 
c⁄ãxt
.
Ebp
, 
ebp


116  
	`GëSèckFømesFromC⁄ãxt
(
hPro˚ss
, 
hThªad
, &
c⁄ãxt
, 
skù
 + 1, 
‰ames
, 
maxFømes
);

117 
	}
}

119 
size_t
 
	$GëSèckFømesFromC⁄ãxt
(
HANDLE
 
hPro˚ss
, HANDLE 
hThªad
, 
CONTEXT
* 
c⁄ãxt
, 
size_t
 
skù
, * 
‰ames
[], size_à
maxFømes
)

121 
size_t
 
‰ameIndex
;

122 
DWORD
 
machöeTy≥
;

123 
STACKFRAME
 
°ackFøme
 = { 0 };

124 
°ackFøme
.
AddrPC
.
Mode
 = 
AddrModeFœt
;

125 #i‡
	`deföed
(
_M_IX86
)

126 
machöeTy≥
 = 
IMAGE_FILE_MACHINE_I386
;

127 
°ackFøme
.
AddrPC
.
Off£t
 = 
c⁄ãxt
->
Eù
;

128 
°ackFøme
.
AddrSèck
.
Mode
 = 
AddrModeFœt
;

129 
°ackFøme
.
AddrSèck
.
Off£t
 = 
c⁄ãxt
->
E•
;

130 
°ackFøme
.
AddrFøme
.
Mode
 = 
AddrModeFœt
;

131 
°ackFøme
.
AddrFøme
.
Off£t
 = 
c⁄ãxt
->
Ebp
;

132 #ñi‡
	`deföed
(
_M_MRX000
)

133 
machöeTy≥
 = 
IMAGE_FILE_MACHINE_R4000
;

134 
°ackFøme
.
AddrPC
.
Off£t
 = 
c⁄ãxt
->
Fú
;

135 #ñi‡
	`deföed
(
_M_ALPHA
)

136 
machöeTy≥
 = 
IMAGE_FILE_MACHINE_ALPHA
;

137 
°ackFøme
.
AddrPC
.
Off£t
 = ()
c⁄ãxt
->
Fú
;

138 #ñi‡
	`deföed
(
_M_PPC
)

139 
machöeTy≥
 = 
IMAGE_FILE_MACHINE_POWERPC
;

140 
°ackFøme
.
AddrPC
.
Off£t
 = 
c⁄ãxt
->
I¨
;

141 #ñi‡
	`deföed
(
_M_IA64
)

142 
machöeTy≥
 = 
IMAGE_FILE_MACHINE_IA64
;

143 
°ackFøme
.
AddrPC
.
Off£t
 = 
c⁄ãxt
->
StIIP
;

144 #ñi‡
	`deföed
(
_M_ALPHA64
)

145 
machöeTy≥
 = 
IMAGE_FILE_MACHINE_ALPHA64
;

146 
°ackFøme
.
AddrPC
.
Off£t
 = 
c⁄ãxt
->
Fú
;

148 #îr‹ 
Unknown
 
CPU


150 
‰ameIndex
 = 0; fømeIndex < 
maxFømes
; ) {

151 
BOOL
 
bRë
 = 
	`SèckWÆk
(
machöeTy≥
, 
hPro˚ss
, 
hThªad
, &
°ackFøme
, &
c⁄ãxt
, 
NULL
, 
Fun˘i⁄TabÀAc˚ss
, 
GëModuÀBa£
, NULL);

152 i‡(!
bRë
) {

155 i‡(
skù
) {

156 
skù
--;

158 
‰ames
[
‰ameIndex
++] = (*)(
ULONG_PTR
)
°ackFøme
.
AddrPC
.
Off£t
;

161  
‰ameIndex
;

162 
	}
}

164 
size_t
 
	$GëModuÀNameFromAddªss
(* 
addªss
, * 
moduÀName
, 
size_t
 
size
)

166 i‡(
size
Ë*
moduÀName
 = 0;

168 c⁄° * 
sour˚Name
;

169 
IMAGEHLP_MODULE
 
moduÀInfo
 = {  (moduleInfo) };

170 i‡(!
	`SymGëModuÀInfo
(
	`GëSymH™dÀ
(), 
	`CheckAddªss
(
addªss
), &
moduÀInfo
)) {

173 
sour˚Name
 = 
	`°ºchr
(
moduÀInfo
.
ImageName
, '\\');

174 i‡(
sour˚Name
) {

175 
sour˚Name
++;

177 
sour˚Name
 = 
moduÀInfo
.
ImageName
;

179 i‡(
size
) {

180 
	`°∫˝y
(
moduÀName
, 
sour˚Name
, 
size
)[size - 1] = 0;

182  
	`°æí
(
sour˚Name
);

184 
	}
}

186 
size_t
 
	$GëModuÀNameFromSèck
(
size_t
 
skù
, * 
moduÀName
, size_à
size
)

188 * 
addªss
 = 
NULL
;

189 
	`GëSèckFømes
(
skù
 + 1, &
addªss
, 1);

190 i‡(
addªss
) {

191  
	`GëModuÀNameFromAddªss
(
addªss
, 
moduÀName
, 
size
);

194 
	}
}

196 
size_t
 
	$GëSymbﬁNameFromAddªss
(* 
addªss
, * 
symbﬁName
, 
size_t
 
size
, size_t* 
off£tByãs
)

198 i‡(
size
Ë*
symbﬁName
 = 0;

199 i‡(
off£tByãs
) *offsetBytes = 0;

200 
__åy
 {

201 
ULONG_ADDR
 
dwOff£t
 = 0;

203 
IMAGEHLP_SYMBOL
 
sym
;

204 
symNameBuf„r
[(
IMAGEHLP_SYMBOL
Ë+ 
MAX_SYM_NAME
];

205 } 
u
;

206 
u
.
sym
.
SizeOfSåu˘
 = (u.sym);

207 
u
.
sym
.
MaxNameLígth
 = (u.
symNameBuf„r
) - (u.sym);

209 i‡(!
	`SymGëSymFromAddr
(
	`GëSymH™dÀ
(), 
	`CheckAddªss
(
addªss
), &
dwOff£t
, &
u
.
sym
)) {

212 c⁄° * 
sour˚Name
 = 
u
.
sym
.
Name
;

213 
undName
[1024];

214 i‡(
	`UnDec‹©eSymbﬁName
(
u
.
sym
.
Name
, 
undName
, (undName), 
UNDNAME_NO_MS_KEYWORDS
 | 
UNDNAME_NO_ACCESS_SPECIFIERS
)) {

215 
sour˚Name
 = 
undName
;

216 } i‡(
	`SymUnDName
(&
u
.
sym
, 
undName
, (undName))) {

217 
sour˚Name
 = 
undName
;

219 i‡(
off£tByãs
) {

220 *
off£tByãs
 = 
dwOff£t
;

222 i‡(
size
) {

223 
	`°∫˝y
(
symbﬁName
, 
sour˚Name
, 
size
)[size - 1] = 0;

225  
	`°æí
(
sour˚Name
);

227 } 
	`__ex˚±
 (
EXCEPTION_EXECUTE_HANDLER
) {

228 
	`SëLa°Eº‹
(
	`GëEx˚±i⁄Code
());

231 
	}
}

233 
size_t
 
	$GëSymbﬁNameFromSèck
(
size_t
 
skù
, * 
symbﬁName
, size_à
size
, size_t* 
off£tByãs
)

235 * 
addªss
 = 
NULL
;

236 
	`GëSèckFømes
(
skù
 + 1, &
addªss
, 1);

237 i‡(
addªss
) {

238  
	`GëSymbﬁNameFromAddªss
(
addªss
, 
symbﬁName
, 
size
, 
off£tByãs
);

241 
	}
}

243 
size_t
 
	$GëFûeLöeFromAddªss
(* 
addªss
, * 
fûeName
, 
size_t
 
size
, size_t* 
löeNumbî
, size_t* 
off£tByãs
)

245 i‡(
size
Ë*
fûeName
 = 0;

246 i‡(
löeNumbî
) *lineNumber = 0;

247 i‡(
off£tByãs
) *offsetBytes = 0;

249 * 
sour˚Name
;

250 
IMAGEHLP_LINE
 
löe
 = {  (line) };

251 
ULONG_PTR
 
dwOff£t
 = 0;

252 i‡(!
	`SymGëLöeFromAddr
(
	`GëSymH™dÀ
(), 
	`CheckAddªss
(
addªss
), &
dwOff£t
, &
löe
)) {

255 i‡(
löeNumbî
) {

256 *
löeNumbî
 = 
löe
.
LöeNumbî
;

258 i‡(
off£tByãs
) {

259 *
off£tByãs
 = 
dwOff£t
;

261 
sour˚Name
 = 
löe
.
FûeName
;

263 i‡(
size
) {

264 
	`°∫˝y
(
fûeName
, 
sour˚Name
, 
size
)[size - 1] = 0;

266  
	`°æí
(
sour˚Name
);

268 
	}
}

270 
size_t
 
	$GëFûeLöeFromSèck
(
size_t
 
skù
, * 
fûeName
, size_à
size
, size_t* 
löeNumbî
, size_t* 
off£tByãs
)

272 * 
addªss
 = 
NULL
;

273 
	`GëSèckFømes
(
skù
 + 1, &
addªss
, 1);

274 i‡(
addªss
) {

275  
	`GëFûeLöeFromAddªss
(
addªss
, 
fûeName
, 
size
, 
löeNumbî
, 
off£tByãs
);

278 
	}
}

280 
size_t
 
	$GëDes¸ùti⁄FromAddªss
(* 
addªss
, c⁄° * 
f‹m©
, * 
buf„r
, 
size_t
 
size
)

282 *c⁄° 
begö
 = 
buf„r
;

283 *c⁄° 
íd
 = 
buf„r
 + 
size
;

284 
size_t
 
löe_numbî
 = 0;

285 
°r
[128];

287 i‡(
size
) {

288 *
buf„r
 = 0;

290 
buf„r
 +
	`GëFûeLöeFromAddªss
(
addªss
, buf„r, 
size
, &
löe_numbî
, 
NULL
);

291 
size
 = 
íd
 < 
buf„r
 ? 0 :Énd - buffer;

293 i‡(
löe_numbî
) {

294 
	`w•rötf
(
°r
, "(%dË: ", 
löe_numbî
);

295 i‡(
size
) {

296 
	`°∫˝y
(
buf„r
, 
°r
, 
size
)[size - 1] = 0;

298 
buf„r
 +
	`°æí
(
°r
);

299 
size
 = 
íd
 < 
buf„r
 ? 0 :Énd - buffer;

302 i‡(
size
) {

303 
	`°∫˝y
(
buf„r
, "© ", 
size
)[size - 1] = 0;

305 
buf„r
 +
	`°æí
("at ");

306 
size
 = 
íd
 < 
buf„r
 ? 0 :Énd - buffer;

308 
buf„r
 +
	`GëSymbﬁNameFromAddªss
(
addªss
, buf„r, 
size
, 
NULL
);

309 
size
 = 
íd
 < 
buf„r
 ? 0 :Énd - buffer;

311 i‡(
size
) {

312 
	`°∫˝y
(
buf„r
, " i¿", 
size
)[size - 1] = 0;

314 
buf„r
 +
	`°æí
(" in ");

315 
size
 = 
íd
 < 
buf„r
 ? 0 :Énd - buffer;

317 
buf„r
 +
	`GëModuÀNameFromAddªss
(
addªss
, buf„r, 
size
);

318 
size
 = 
íd
 < 
buf„r
 ? 0 :Énd - buffer;

320  
buf„r
 - 
begö
;

321 
	}
}

323 
size_t
 
	$GëDes¸ùti⁄FromSèck
(*c⁄° 
‰ames
[], 
size_t
 
cou¡
, c⁄° * 
f‹m©
, * 
des¸ùti⁄
[], size_à
size
)

325 *c⁄° 
begö
 = (*)
des¸ùti⁄
;

326 *c⁄° 
íd
 = 
begö
 + 
size
;

327 * 
buf„r
 = 
begö
 + (
cou¡
 + 1) * (*);

328 
size_t
 
i
;

329 
i
 = 0; i < 
cou¡
; ++i) {

330 i‡(
des¸ùti⁄
Ëdes¸ùti⁄[
i
] = 
buf„r
;

331 
size
 = 
íd
 < 
buf„r
 ? 0 :Énd - buffer;

332 
buf„r
 +1 + 
	`GëDes¸ùti⁄FromAddªss
(
‰ames
[
i
], 
NULL
, buf„r, 
size
);

334 i‡(
des¸ùti⁄
Ëdes¸ùti⁄[
cou¡
] = 
NULL
;

335  
buf„r
 - 
begö
;

336 
	}
}

340 
	$backåa˚
(* 
addªs£s
[], 
cou¡
)

342  
	`GëSèckFømes
(1, 
addªs£s
, 
cou¡
);

343 
	}
}

345 ** 
	$backåa˚_symbﬁs
(*c⁄°* 
addªs£s
, 
cou¡
)

347 
size_t
 
size
 = 
	`GëDes¸ùti⁄FromSèck
(
addªs£s
, 
cou¡
, 
NULL
, NULL, 0);

348 ** 
symbﬁs
 = (**)
	`mÆloc
(
size
);

349 
	`GëDes¸ùti⁄FromSèck
(
addªs£s
, 
cou¡
, 
NULL
, 
symbﬁs
, 
size
);

350  
symbﬁs
;

351 
	}
}

	@new_hblk.c

22 
	~<°dio.h
>

23 
	~"¥iv©e/gc_¥iv.h
"

25 #i‚de‡
SMALL_CONFIG


31 
±r_t
 
	$GC_buûd_Ê_˛ór2
(
hblk
 *
h
, 
±r_t
 
oÊ
)

33 
w‹d
 * 
p
 = (w‹d *)(
h
 -> 
hb_body
);

34 
w‹d
 * 
lim
 = (w‹d *)(
h
 + 1);

36 
p
[0] = (
w‹d
)
oÊ
;

37 
p
[1] = 0;

38 
p
[2] = (
w‹d
)p;

39 
p
[3] = 0;

40 
p
 += 4;

41 ; 
p
 < 
lim
;Ö += 4) {

42 
p
[0] = (
w‹d
)(p-2);

43 
p
[1] = 0;

44 
p
[2] = (
w‹d
)p;

45 
p
[3] = 0;

47 ((
±r_t
)(
p
-2));

48 
	}
}

51 
±r_t
 
	$GC_buûd_Ê_˛ór4
(
hblk
 *
h
, 
±r_t
 
oÊ
)

53 
w‹d
 * 
p
 = (w‹d *)(
h
 -> 
hb_body
);

54 
w‹d
 * 
lim
 = (w‹d *)(
h
 + 1);

56 
p
[0] = (
w‹d
)
oÊ
;

57 
p
[1] = 0;

58 
p
[2] = 0;

59 
p
[3] = 0;

60 
p
 += 4;

61 ; 
p
 < 
lim
;Ö += 4) {

62 
	`PREFETCH_FOR_WRITE
((
±r_t
)(
p
+64));

63 
p
[0] = (
w‹d
)(p-4);

64 
p
[1] = 0;

65 
	`CLEAR_DOUBLE
(
p
+2);

67 ((
±r_t
)(
p
-4));

68 
	}
}

71 
±r_t
 
	$GC_buûd_Ê2
(
hblk
 *
h
, 
±r_t
 
oÊ
)

73 
w‹d
 * 
p
 = (w‹d *)(
h
 -> 
hb_body
);

74 
w‹d
 * 
lim
 = (w‹d *)(
h
 + 1);

76 
p
[0] = (
w‹d
)
oÊ
;

77 
p
[2] = (
w‹d
)p;

78 
p
 += 4;

79 ; 
p
 < 
lim
;Ö += 4) {

80 
p
[0] = (
w‹d
)(p-2);

81 
p
[2] = (
w‹d
)p;

83 ((
±r_t
)(
p
-2));

84 
	}
}

87 
±r_t
 
	$GC_buûd_Ê4
(
hblk
 *
h
, 
±r_t
 
oÊ
)

89 
w‹d
 * 
p
 = (w‹d *)(
h
 -> 
hb_body
);

90 
w‹d
 * 
lim
 = (w‹d *)(
h
 + 1);

92 
p
[0] = (
w‹d
)
oÊ
;

93 
p
[4] = (
w‹d
)p;

94 
p
 += 8;

95 ; 
p
 < 
lim
;Ö += 8) {

96 
	`PREFETCH_FOR_WRITE
((
±r_t
)(
p
+64));

97 
p
[0] = (
w‹d
)(p-4);

98 
p
[4] = (
w‹d
)p;

100 ((
±r_t
)(
p
-4));

101 
	}
}

112 
±r_t
 
	$GC_buûd_Ê
(
hblk
 *
h
, 
size_t
 
sz
, 
GC_boﬁ
 
˛ór
, 
±r_t
 
li°
)

114 
w‹d
 *
p
, *
¥ev
;

115 
w‹d
 *
œ°_obje˘
;

121 
	`PREFETCH_FOR_WRITE
((
±r_t
)
h
);

122 
	`PREFETCH_FOR_WRITE
((
±r_t
)
h
 + 128);

123 
	`PREFETCH_FOR_WRITE
((
±r_t
)
h
 + 256);

124 
	`PREFETCH_FOR_WRITE
((
±r_t
)
h
 + 378);

127 #i‚de‡
SMALL_CONFIG


128 
sz
) {

129 2: i‡(
˛ór
) {

130  
	`GC_buûd_Ê_˛ór2
(
h
, 
li°
);

132  
	`GC_buûd_Ê2
(
h
, 
li°
);

134 4: i‡(
˛ór
) {

135  
	`GC_buûd_Ê_˛ór4
(
h
, 
li°
);

137  
	`GC_buûd_Ê4
(
h
, 
li°
);

145 i‡(
˛ór
Ë
	`BZERO
(
h
, 
HBLKSIZE
);

148 
p
 = (
w‹d
 *)(
h
 -> 
hb_body
Ë+ 
sz
;

149 
¥ev
 = (
w‹d
 *)(
h
 -> 
hb_body
);

150 
œ°_obje˘
 = (
w‹d
 *)((*)
h
 + 
HBLKSIZE
);

151 
œ°_obje˘
 -
sz
;

155 
p
 <
œ°_obje˘
) {

157 
	`obj_lök
(
p
Ë(
±r_t
)
¥ev
;

158 
¥ev
 = 
p
;

159 
p
 +
sz
;

161 
p
 -
sz
;

167 
	`obj_lök
(
h
 -> 
hb_body
Ë
li°
;

168  ((
±r_t
)
p
);

169 
	}
}

179 
	$GC_√w_hblk
(
size_t
 
gøn
, 
köd
)

181 
hblk
 *
h
;

182 
GC_boﬁ
 
˛ór
 = 
GC_obj_köds
[
köd
].
ok_öô
;

185 
	`GC_STATIC_ASSERT
(( (
hblk
)Ë=
HBLKSIZE
);

187 i‡(
GC_debuggög_°¨ãd
Ë
˛ór
 = 
TRUE
;

190 
h
 = 
	`GC_Ælochblk
(
	`GRANULES_TO_BYTES
(
gøn
), 
köd
, 0);

191 i‡(
h
 == 0) ;

194 i‡(
	`IS_UNCOLLECTABLE
(
köd
)Ë
	`GC_£t_hdr_m¨ks
(
	`HDR
(
h
));

197 
GC_obj_köds
[
köd
].
ok_‰ìli°
[
gøn
] =

198 
	`GC_buûd_Ê
(
h
, 
	`GRANULES_TO_WORDS
(
gøn
), 
˛ór
,

199 
GC_obj_köds
[
köd
].
ok_‰ìli°
[
gøn
]);

200 
	}
}

	@obj_map.c

22 
	~"¥iv©e/gc_¥iv.h
"

27 
	$GC_ªgi°î_di•œ˚mít
(
size_t
 
off£t
)

29 
DCL_LOCK_STATE
;

31 
	`LOCK
();

32 
	`GC_ªgi°î_di•œ˚mít_ö√r
(
off£t
);

33 
	`UNLOCK
();

34 
	}
}

36 
	$GC_ªgi°î_di•œ˚mít_ö√r
(
size_t
 
off£t
)

38 i‡(
off£t
 >
VALID_OFFSET_SZ
) {

39 
	`ABORT
("BadárgumentÅo GC_register_displacement");

41 i‡(!
GC_vÆid_off£ts
[
off£t
]) {

42 
GC_vÆid_off£ts
[
off£t
] = 
TRUE
;

43 
GC_modws_vÆid_off£ts
[
off£t
 % (
w‹d
)] = 
TRUE
;

45 
	}
}

47 #ifde‡
MARK_BIT_PER_GRANULE


51 
GC_boﬁ
 
	$GC_add_m≠_íåy
(
size_t
 
gønuÀs
)

53 
di•l
;

54 * 
√w_m≠
;

56 i‡(
gønuÀs
 > 
	`BYTES_TO_GRANULES
(
MAXOBJBYTES
)) granules = 0;

57 i‡(
GC_obj_m≠
[
gønuÀs
] != 0) {

58 (
TRUE
);

60 
√w_m≠
 = (*)
	`GC_s¸©ch_Æloc
(
MAP_LEN
 * ());

61 i‡(
√w_m≠
 =0Ë(
FALSE
);

62 i‡(
GC_¥öt_°©s
)

63 
	`GC_log_¥ötf
("Adding block map for size of %u granules (%u bytes)\n",

64 ()
gønuÀs
, ()(
	`GRANULES_TO_BYTES
(granules)));

65 i‡(
gønuÀs
 == 0) {

66 
di•l
 = 0; di•»< 
	`BYTES_TO_GRANULES
(
HBLKSIZE
); displ++) {

67 
√w_m≠
[
di•l
] = 1;

70 
di•l
 = 0; di•»< 
	`BYTES_TO_GRANULES
(
HBLKSIZE
); displ++) {

71 
√w_m≠
[
di•l
] = ()(di•»% 
gønuÀs
);

74 
GC_obj_m≠
[
gønuÀs
] = 
√w_m≠
;

75 (
TRUE
);

76 
	}
}

79 
GC_boﬁ
 
	goff£ts_öôülized
 = 
FALSE
;

81 
	$GC_öôülize_off£ts
()

83 i‡(!
off£ts_öôülized
) {

84 
i
;

85 i‡(
GC_Æl_öãri‹_poöãrs
) {

86 
i
 = 0; i < 
VALID_OFFSET_SZ
; ++iË
GC_vÆid_off£ts
[i] = 
TRUE
;

88 
off£ts_öôülized
 = 
TRUE
;

90 
	}
}

	@os_dep.c

17 
	~"¥iv©e/gc_¥iv.h
"

18 #ifde‡
THREADS


19 
	~"©omic_›s.h
"

22 #i‡
deföed
(
LINUX
Ë&& !deföed(
POWERPC
)

23 
	~<löux/vîsi⁄.h
>

24 #i‡(
LINUX_VERSION_CODE
 <= 0x10400)

29 
	#__KERNEL__


	)

30 
	~<asm/sig«l.h
>

31 #unde‡
__KERNEL__


37 
	~<„©uªs.h
>

38 #i‡2 <
__GLIBC__


39 #i‡2 =
__GLIBC__
 && 0 =
__GLIBC_MINOR__


42 
	~<sigc⁄ãxt.h
>

47 
	~<asm/sigc⁄ãxt.h
>

51 #i‡!
deföed
(
OS2
Ë&& !deföed(
PCR
Ë&& !deföed(
AMIGA
Ë&& !deföed(
MACOS
) \

52 && !
	$deföed
(
MSWINCE
)

53 
	~<sys/ty≥s.h
>

54 #i‡!
	`deföed
(
MSWIN32
)

55 
	~<uni°d.h
>

59 
	~<°dio.h
>

60 #i‡
	`deföed
(
MSWINCE
)

61 
	#SIGSEGV
 0

	)

63 
	~<sig«l.h
>

66 #ifde‡
UNIX_LIKE


67 
	~<f˙é.h
>

70 #i‡
	`deföed
(
LINUX
Ë|| deföed(
LINUX_STACKBOTTOM
)

71 
	~<˘y≥.h
>

77 #ifde‡
AMIGA


78 
	#GC_AMIGA_DEF


	)

79 
	~"AmigaOS.c
"

80 #unde‡
GC_AMIGA_DEF


83 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
Ë|| deföed(
CYGWIN32
)

84 
	#WIN32_LEAN_AND_MEAN


	)

85 
	#NOSERVICE


	)

86 
	~<wödows.h
>

91 #ifde‡
MACOS


92 
	~<Pro˚s£s.h
>

95 #ifde‡
IRIX5


96 
	~<sys/uio.h
>

97 
	~<mÆloc.h
>

100 #i‡
	`deföed
(
LINUX
Ë|| deföed(
FREEBSD
Ë|| deföed(
SOLARIS
Ë|| deföed(
IRIX5
) \

101 || 
	`deföed
(
USE_MMAP
Ë|| 
	$deföed
(
USE_MUNMAP
)

102 
	#MMAP_SUPPORTED


	)

105 #i‡
	`deföed
(
MMAP_SUPPORTED
Ë|| deföed(
ADD_HEAP_GUARD_PAGES
)

106 #i‡
	`deföed
(
USE_MUNMAP
Ë&& !deföed(
USE_MMAP
)

107 --> 
USE_MUNMAP
 
ªquúes
 
USE_MMAP


109 
	~<sys/ty≥s.h
>

110 
	~<sys/mm™.h
>

111 
	~<sys/°©.h
>

112 
	~<î∫o.h
>

115 #ifde‡
DARWIN


117 
	~<mach-o/gë£˘.h
>

120 #ifde‡
DJGPP


123 
	tˇddr_t
;

126 #ifde‡
PCR


127 
	~"û/PCR_IL.h
"

128 
	~"th/PCR_ThCé.h
"

129 
	~"mm/PCR_MM.h
"

132 #i‡!
	`deföed
(
NO_EXECUTE_PERMISSION
)

133 
	#OPT_PROT_EXEC
 
PROT_EXEC


	)

135 
	#OPT_PROT_EXEC
 0

	)

138 #i‡
	`deföed
(
LINUX
) && \

139 (
	`deföed
(
USE_PROC_FOR_LIBRARIES
Ë|| deföed(
IA64
Ë|| !
	$deföed
(
SMALL_CONFIG
))

140 
	#NEED_PROC_MAPS


	)

143 #ifde‡
NEED_PROC_MAPS


148 
	#READ
 
ªad


	)

152 
ssize_t
 
	$GC_ª≥©_ªad
(
fd
, *
buf
, 
size_t
 
cou¡
)

154 
ssize_t
 
num_ªad
 = 0;

155 
ssize_t
 
ªsu…
;

157 
num_ªad
 < 
cou¡
) {

158 
ªsu…
 = 
	`READ
(
fd
, 
buf
 + 
num_ªad
, 
cou¡
 -Çum_read);

159 i‡(
ªsu…
 < 0) Ñesult;

160 i‡(
ªsu…
 == 0) ;

161 
num_ªad
 +
ªsu…
;

163  
num_ªad
;

164 
	}
}

169 
size_t
 
	$GC_gë_fûe_Àn
(
f
)

171 
size_t
 
tŸÆ
 = 0;

172 
ssize_t
 
ªsu…
;

173 
	#GET_FILE_LEN_BUF_SZ
 500

	)

174 
buf
[
GET_FILE_LEN_BUF_SZ
];

177 
ªsu…
 = 
	`ªad
(
f
, 
buf
, 
GET_FILE_LEN_BUF_SZ
);

178 i‡(
ªsu…
 == -1)  0;

179 
tŸÆ
 +
ªsu…
;

180 } 
ªsu…
 > 0);

181  
tŸÆ
;

182 
	}
}

184 
size_t
 
	$GC_gë_m≠s_Àn
()

186 
f
 = 
	`›í
("/¥oc/£lf/m≠s", 
O_RDONLY
);

187 
size_t
 
ªsu…
 = 
	`GC_gë_fûe_Àn
(
f
);

188 
	`˛o£
(
f
);

189  
ªsu…
;

190 
	}
}

198 * 
	$GC_gë_m≠s
()

200 
f
;

201 
ªsu…
;

202 
öô_buf
[1];

203 *
m≠s_buf
 = 
öô_buf
;

204 
size_t
 
m≠s_buf_sz
 = 1;

205 
size_t
 
m≠s_size
, 
ﬁd_m≠s_size
 = 0;

208 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

226 #ifde‡
THREADS


227 
m≠s_size
 = 
	`GC_gë_m≠s_Àn
();

228 i‡(0 =
m≠s_size
)  0;

230 
m≠s_size
 = 4000;

237 
m≠s_size
 >
m≠s_buf_sz
) {

239 
m≠s_size
 >
m≠s_buf_sz
) maps_buf_sz *= 2;

240 
m≠s_buf
 = 
	`GC_s¸©ch_Æloc
(
m≠s_buf_sz
);

241 #ifde‡
THREADS


245 
m≠s_size
 = 
	`GC_gë_m≠s_Àn
();

246 i‡(0 =
m≠s_size
)  0;

248 i‡(
m≠s_buf
 == 0)  0;

250 
	`GC_ASSERT
(
m≠s_buf_sz
 >
m≠s_size
 + 1);

251 
f
 = 
	`›í
("/¥oc/£lf/m≠s", 
O_RDONLY
);

252 i‡(-1 =
f
)  0;

253 #ifde‡
THREADS


254 
ﬁd_m≠s_size
 = 
m≠s_size
;

256 
m≠s_size
 = 0;

258 
ªsu…
 = 
	`GC_ª≥©_ªad
(
f
, 
m≠s_buf
, 
m≠s_buf_sz
-1);

259 i‡(
ªsu…
 <= 0)  0;

260 
m≠s_size
 +
ªsu…
;

261 } 
ªsu…
 =
m≠s_buf_sz
-1);

262 
	`˛o£
(
f
);

263 #ifde‡
THREADS


264 i‡(
m≠s_size
 > 
ﬁd_m≠s_size
) {

265 
	`GC_îr_¥ötf
("Old maps size = %d,Çew maps size = %d\n",

266 
ﬁd_m≠s_size
, 
m≠s_size
);

267 
	`ABORT
("Unexpectedásynchronous /proc/self/maps growth: "

271 } 
m≠s_size
 >
m≠s_buf_sz
 || m≠s_sizê< 
ﬁd_m≠s_size
);

273 
m≠s_buf
[
m≠s_size
] = '\0';

276  
m≠s_buf
;

277 
	}
}

299 *
	$GC_∑r£_m≠_íåy
(*
buf_±r
, 
±r_t
 *
°¨t
,Öå_à*
íd
,

300 **
¥Ÿ
, *
maj_dev
,

301 **
m≠pög_«me
)

303 *
°¨t_°¨t
, *
íd_°¨t
, *
maj_dev_°¨t
;

304 *
p
;

305 *
ídp
;

307 i‡(
buf_±r
 =
NULL
 || *buf_ptr == '\0') {

308  
NULL
;

311 
p
 = 
buf_±r
;

312 
	`is•a˚
(*
p
)) ++p;

313 
°¨t_°¨t
 = 
p
;

314 
	`GC_ASSERT
(
	`isxdigô
(*
°¨t_°¨t
));

315 *
°¨t
 = (
±r_t
)
	`°πoul
(
°¨t_°¨t
, &
ídp
, 16); 
p
 =Éndp;

316 
	`GC_ASSERT
(*
p
=='-');

318 ++
p
;

319 
íd_°¨t
 = 
p
;

320 
	`GC_ASSERT
(
	`isxdigô
(*
íd_°¨t
));

321 *
íd
 = (
±r_t
)
	`°πoul
(
íd_°¨t
, &
ídp
, 16); 
p
 =Éndp;

322 
	`GC_ASSERT
(
	`is•a˚
(*
p
));

324 
	`is•a˚
(*
p
)) ++p;

325 
	`GC_ASSERT
(*
p
 == 'r' || *p == '-');

326 *
¥Ÿ
 = 
p
;

328 !
	`is•a˚
(*
p
)) ++p; isspace(*p)) ++p;

329 
	`GC_ASSERT
(
	`isxdigô
(*
p
));

331 !
	`is•a˚
(*
p
)) ++p; isspace(*p)) ++p;

332 
maj_dev_°¨t
 = 
p
;

333 
	`GC_ASSERT
(
	`isxdigô
(*
maj_dev_°¨t
));

334 *
maj_dev
 = 
	`°πoul
(
maj_dev_°¨t
, 
NULL
, 16);

336 i‡(
m≠pög_«me
 == 0) {

337 *
p
 && *p++ != '\n');

339 *
p
 && *p != '\n' && *p != '/' && *p != '[')Ö++;

340 *
m≠pög_«me
 = 
p
;

341 *
p
 && *p++ != '\n');

344  
p
;

345 
	}
}

351 
GC_boﬁ
 
	$GC_í˛osög_m≠pög
(
±r_t
 
addr
,Öå_à*
°¨ç
,Öå_à*
ídp
)

353 *
¥Ÿ
;

354 
±r_t
 
my_°¨t
, 
my_íd
;

355 
maj_dev
;

356 *
m≠s
 = 
	`GC_gë_m≠s
();

357 *
buf_±r
 = 
m≠s
;

359 i‡(0 =
m≠s
Ë(
FALSE
);

361 
buf_±r
 = 
	`GC_∑r£_m≠_íåy
(buf_±r, &
my_°¨t
, &
my_íd
,

362 &
¥Ÿ
, &
maj_dev
, 0);

364 i‡(
buf_±r
 =
NULL
Ë 
FALSE
;

365 i‡(
¥Ÿ
[1] ='w' && 
maj_dev
 == 0) {

366 i‡(
my_íd
 > 
addr
 && 
my_°¨t
 <=áddr) {

367 *
°¨ç
 = 
my_°¨t
;

368 *
ídp
 = 
my_íd
;

369  
TRUE
;

373  
FALSE
;

374 
	}
}

376 #i‡
deföed
(
REDIRECT_MALLOC
)

379 
GC_boﬁ
 
	$GC_ãxt_m≠pög
(*
nm
, 
±r_t
 *
°¨ç
,Öå_à*
ídp
)

381 
size_t
 
nm_Àn
 = 
	`°æí
(
nm
);

382 *
¥Ÿ
;

383 *
m≠_∑th
;

384 
±r_t
 
my_°¨t
, 
my_íd
;

385 
maj_dev
;

386 *
m≠s
 = 
	`GC_gë_m≠s
();

387 *
buf_±r
 = 
m≠s
;

389 i‡(0 =
m≠s
Ë(
FALSE
);

391 
buf_±r
 = 
	`GC_∑r£_m≠_íåy
(buf_±r, &
my_°¨t
, &
my_íd
,

392 &
¥Ÿ
, &
maj_dev
, &
m≠_∑th
);

394 i‡(
buf_±r
 =
NULL
Ë 
FALSE
;

395 i‡(
¥Ÿ
[0] == 'r' &&Örot[1] == '-' &&Örot[2] == 'x') {

396 *
p
 = 
m≠_∑th
;

398 *
p
 != '\0' && *p != '\n' && *p != ' ' && *p != '\t') ++p;

399 *
p
 !'/' &&Ö >
m≠_∑th
) --p;

400 ++
p
;

401 i‡(
	`°∫cmp
(
nm
, 
p
, 
nm_Àn
) == 0) {

402 *
°¨ç
 = 
my_°¨t
;

403 *
ídp
 = 
my_íd
;

404  
TRUE
;

408  
FALSE
;

409 
	}
}

412 #ifde‡
IA64


413 
±r_t
 
	$backög_°‹e_ba£_‰om_¥oc
()

415 
±r_t
 
my_°¨t
, 
my_íd
;

416 i‡(!
	`GC_í˛osög_m≠pög
(
	`GC_ßve_ªgs_ö_°ack
(), &
my_°¨t
, &
my_íd
)) {

417 i‡(
GC_¥öt_°©s
) {

418 
	`GC_log_¥ötf
("FailedÅo find backing store base from /proc\n");

422  
my_°¨t
;

423 
	}
}

428 #i‡
deföed
(
SEARCH_FOR_DATA_START
)

434 #i‡
deföed
(
LINUX
Ë|| deföed(
HURD
)

440 #¥agm®
wók
 
__d©a_°¨t


441 
__d©a_°¨t
[];

442 #¥agm®
wók
 
d©a_°¨t


443 
d©a_°¨t
[];

445 
_íd
[];

447 
±r_t
 
	gGC_d©a_°¨t
;

449 
	$GC_öô_löux_d©a_°¨t
()

451 
±r_t
 
	`GC_föd_limô
’å_t, 
GC_boﬁ
);

453 #i‡
	`deföed
(
LINUX
Ë|| deföed(
HURD
)

455 i‡((
±r_t
)
__d©a_°¨t
 != 0) {

456 
GC_d©a_°¨t
 = (
±r_t
)(
__d©a_°¨t
);

459 i‡((
±r_t
)
d©a_°¨t
 != 0) {

460 
GC_d©a_°¨t
 = (
±r_t
)(
d©a_°¨t
);

464 
GC_d©a_°¨t
 = 
	`GC_föd_limô
((
±r_t
)(
_íd
), 
FALSE
);

465 
	}
}

468 #ifde‡
ECOS


470 #i‚de‡
ECOS_GC_MEMORY_SIZE


471 
	#ECOS_GC_MEMORY_SIZE
 (448 * 1024)

	)

478 
	gmem‹y
[
ECOS_GC_MEMORY_SIZE
];

479 *
	gbrk
 = 
mem‹y
;

481 *
	$töy_sbrk
(
±rdiff_t
 
ö¸emít
)

483 *
p
 = 
brk
;

485 
brk
 +
ö¸emít
;

487 i‡(
brk
 > 
mem‹y
 +  memory)

489 
brk
 -
ö¸emít
;

490  
NULL
;

493  
p
;

494 
	}
}

495 
	#sbrk
 
töy_sbrk


	)

498 #i‡(
deföed
(
NETBSD
Ë|| deföed(
OPENBSD
)Ë&& deföed(
__ELF__
)

499 
±r_t
 
	gGC_d©a_°¨t
;

501 
	$GC_öô_√tbsd_ñf
()

503 
±r_t
 
	`GC_föd_limô
’å_t, 
GC_boﬁ
);

504 **
ívú⁄
;

507 
GC_d©a_°¨t
 = 
	`GC_föd_limô
((
±r_t
)&
ívú⁄
, 
FALSE
);

508 
	}
}

511 #ifde‡
OS2


513 
	~<°ddef.h
>

515 #i‡!
deföed
(
__IBMC__
Ë&& !deföed(
__WATCOMC__
)

517 
	sexe_hdr
 {

518 
	mmagic_numbî
;

519 
	m∑ddög
[29];

520 
	m√w_exe_off£t
;

523 
	#E_MAGIC
(
x
Ë(x).
magic_numbî


	)

524 
	#EMAGIC
 0x5A4D

	)

525 
	#E_LFANEW
(
x
Ë(x).
√w_exe_off£t


	)

527 
	se32_exe
 {

528 
	mmagic_numbî
[2];

529 
	mbyã_‹dî
;

530 
	mw‹d_‹dî
;

531 
	mexe_f‹m©_Àvñ
;

532 
	m˝u
;

533 
	mos
;

534 
	m∑ddög1
[13];

535 
	mobje˘_èbÀ_off£t
;

536 
	mobje˘_cou¡
;

537 
	m∑ddög2
[31];

540 
	#E32_MAGIC1
(
x
Ë(x).
magic_numbî
[0]

	)

541 
	#E32MAGIC1
 'L'

	)

542 
	#E32_MAGIC2
(
x
Ë(x).
magic_numbî
[1]

	)

543 
	#E32MAGIC2
 'X'

	)

544 
	#E32_BORDER
(
x
Ë(x).
byã_‹dî


	)

545 
	#E32LEBO
 0

	)

546 
	#E32_WORDER
(
x
Ë(x).
w‹d_‹dî


	)

547 
	#E32LEWO
 0

	)

548 
	#E32_CPU
(
x
Ë(x).
˝u


	)

549 
	#E32CPU286
 1

	)

550 
	#E32_OBJTAB
(
x
Ë(x).
obje˘_èbÀ_off£t


	)

551 
	#E32_OBJCNT
(
x
Ë(x).
obje˘_cou¡


	)

553 
	so32_obj
 {

554 
	msize
;

555 
	mba£
;

556 
	mÊags
;

557 
	m∑gem≠
;

558 
	mm≠size
;

559 
	mª£rved
;

562 
	#O32_FLAGS
(
x
Ë(x).
Êags


	)

563 
	#OBJREAD
 0x0001L

	)

564 
	#OBJWRITE
 0x0002L

	)

565 
	#OBJINVALID
 0x0080L

	)

566 
	#O32_SIZE
(
x
Ë(x).
size


	)

567 
	#O32_BASE
(
x
Ë(x).
ba£


	)

572 #i‚de‡
WORD


573 
	#WORD
 

	)

575 #i‚de‡
DWORD


576 
	#DWORD
 

	)

579 
	#EXE386
 1

	)

580 
	~<√wexe.h
>

581 
	~<exe386.h
>

585 
	#INCL_DOSEXCEPTIONS


	)

586 
	#INCL_DOSPROCESS


	)

587 
	#INCL_DOSERRORS


	)

588 
	#INCL_DOSMODULEMGR


	)

589 
	#INCL_DOSMEMMGR


	)

590 
	~<os2.h
>

595 
	$GC_dißbÀ_sig«ls
()

597 
ULONG
 
√°
;

599 
	`DosE¡îMu°Com∂ëe
(&
√°
);

600 i‡(
√°
 !1Ë
	`ABORT
("nested GC_disable_signals");

601 
	}
}

603 
	$GC_íabÀ_sig«ls
()

605 
ULONG
 
√°
;

607 
	`DosExôMu°Com∂ëe
(&
√°
);

608 i‡(
√°
 !0Ë
	`ABORT
("GC_enable_signals");

609 
	}
}

614 #i‡!
deföed
(
PCR
Ë&& !deföed(
AMIGA
Ë&& !deföed(
MSWIN32
) \

615 && !
deföed
(
MSWINCE
) \

616 && !
deföed
(
MACOS
Ë&& !deföed(
DJGPP
Ë&& !deföed(
DOS4GW
) \

617 && !
deföed
(
NOSYS
Ë&& !
	$deföed
(
ECOS
)

621 
	#SIGSET_T
 

	)

622 
	#SIG_DEL
(
£t
, 
sig«l
Ë(£tË&~(
	`sigmask
(sig«l))

	)

623 
	#SIG_FILL
(
£t
Ë(£tË0x7fffffff

	)

627 
	#SIGSETMASK
(
ﬁd
, 
√w
Ë(ﬁdË
	`sig£tmask
“ew)

	)

631 
	#SIGSET_T
 
sig£t_t


	)

632 
	#SIG_DEL
(
£t
, 
sig«l
Ë
	`sigdñ£t
(&(£t), (sig«l))

	)

633 
	#SIG_FILL
(
£t
Ë
	`sigfûl£t
(&£t)

	)

634 
	#SIGSETMASK
(
ﬁd
, 
√w
Ë
	`sig¥ocmask
(
SIG_SETMASK
, &“ew), &(ﬁd))

	)

637 
GC_boﬁ
 
mask_öôülized
 = 
FALSE
;

639 
SIGSET_T
 
√w_mask
;

641 
SIGSET_T
 
ﬁd_mask
;

643 
SIGSET_T
 
dummy
;

645 #i‡
	`deföed
(
GC_ASSERTIONS
Ë&& !deföed(
THREADS
)

646 
	#CHECK_SIGNALS


	)

647 
GC_sig_dißbÀd
 = 0;

650 
	$GC_dißbÀ_sig«ls
()

652 i‡(!
mask_öôülized
) {

653 
	`SIG_FILL
(
√w_mask
);

655 
	`SIG_DEL
(
√w_mask
, 
SIGSEGV
);

656 
	`SIG_DEL
(
√w_mask
, 
SIGILL
);

657 
	`SIG_DEL
(
√w_mask
, 
SIGQUIT
);

658 #ifde‡
SIGBUS


659 
	`SIG_DEL
(
√w_mask
, 
SIGBUS
);

661 #ifde‡
SIGIOT


662 
	`SIG_DEL
(
√w_mask
, 
SIGIOT
);

664 #ifde‡
SIGEMT


665 
	`SIG_DEL
(
√w_mask
, 
SIGEMT
);

667 #ifde‡
SIGTRAP


668 
	`SIG_DEL
(
√w_mask
, 
SIGTRAP
);

670 
mask_öôülized
 = 
TRUE
;

672 #ifde‡
CHECK_SIGNALS


673 i‡(
GC_sig_dißbÀd
 !0Ë
	`ABORT
("Nested disables");

674 
GC_sig_dißbÀd
++;

676 
	`SIGSETMASK
(
ﬁd_mask
,
√w_mask
);

677 
	}
}

679 
	$GC_íabÀ_sig«ls
()

681 #ifde‡
CHECK_SIGNALS


682 i‡(
GC_sig_dißbÀd
 !1Ë
	`ABORT
("UnmatchedÉnable");

683 
GC_sig_dißbÀd
--;

685 
	`SIGSETMASK
(
dummy
,
ﬁd_mask
);

686 
	}
}

693 #i‡
deföed
 (
DOS4GW
)

694 
	$GC_dißbÀ_sig«ls
(Ë{ 
	}
}

695 
	$GC_íabÀ_sig«ls
(Ë{ 
	}
}

699 
w‹d
 
	gGC_∑ge_size
;

701 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

702 
	$GC_£çagesize
()

704 
	`GëSy°emInfo
(&
GC_sysöfo
);

705 
GC_∑ge_size
 = 
GC_sysöfo
.
dwPageSize
;

706 
	}
}

709 #i‡
deföed
(
MPROTECT_VDB
Ë|| deföed(
PROC_VDB
Ë|| deföed(
USE_MMAP
)

710 
	$GC_£çagesize
()

712 
GC_∑ge_size
 = 
	`GETPAGESIZE
();

713 
	}
}

716 
	$GC_£çagesize
()

718 
GC_∑ge_size
 = 
HBLKSIZE
;

719 
	}
}

729 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
Ë|| deföed(
CYGWIN32
)

730 
	#is_wrôabÀ
(
¥Ÿ
Ë(’rŸË=
PAGE_READWRITE
 \

731 || (
¥Ÿ
Ë=
PAGE_WRITECOPY
 \

732 || (
¥Ÿ
Ë=
PAGE_EXECUTE_READWRITE
 \

733 || (
¥Ÿ
Ë=
PAGE_EXECUTE_WRITECOPY
)

	)

738 
w‹d
 
	$GC_gë_wrôabÀ_Àngth
(
±r_t
 
p
,Öå_à*
ba£
)

740 
MEMORY_BASIC_INFORMATION
 
buf
;

741 
w‹d
 
ªsu…
;

742 
w‹d
 
¥Ÿe˘
;

744 
ªsu…
 = 
	`VútuÆQuîy
(
p
, &
buf
, (buf));

745 i‡(
ªsu…
 !(
buf
)Ë
	`ABORT
("Weird VirtualQueryÑesult");

746 i‡(
ba£
 !0Ë*ba£ = (
±r_t
)(
buf
.
AŒoˇti⁄Ba£
);

747 
¥Ÿe˘
 = (
buf
.
PrŸe˘
 & ~(
PAGE_GUARD
 | 
PAGE_NOCACHE
));

748 i‡(!
	`is_wrôabÀ
(
¥Ÿe˘
)) {

751 i‡(
buf
.
Sèã
 !
MEM_COMMIT
) (0);

752 (
buf
.
Regi⁄Size
);

753 
	}
}

755 
GC_API
 
	$GC_gë_°ack_ba£
(
GC_°ack_ba£
 *
sb
)

757 
dummy
;

758 
±r_t
 
•
 = (±r_t)(&
dummy
);

759 
±r_t
 
åunc_•
 = (±r_t)((
w‹d
)
•
 & ~(
GC_∑ge_size
 - 1));

760 
w‹d
 
size
 = 
	`GC_gë_wrôabÀ_Àngth
(
åunc_•
, 0);

762 
sb
 -> 
mem_ba£
 = 
åunc_•
 + 
size
;

763  
GC_SUCCESS
;

764 
	}
}

766 
	#HAVE_GET_STACK_BASE


	)

769 
±r_t
 
	$GC_gë_maö_°ack_ba£
()

771 
GC_°ack_ba£
 
sb
;

773 
	`GC_gë_°ack_ba£
(&
sb
);

774  (
±r_t
)
sb
.
mem_ba£
;

775 
	}
}

779 #ifde‡
BEOS


780 
	~<kî√l/OS.h
>

781 
±r_t
 
	$GC_gë_maö_°ack_ba£
(){

782 
thªad_öfo
 
th
;

783 
	`gë_thªad_öfo
(
	`föd_thªad
(
NULL
),&
th
);

784  
th
.
°ack_íd
;

785 
	}
}

789 #ifde‡
OS2


791 
±r_t
 
	$GC_gë_maö_°ack_ba£
()

793 
PTIB
 
±ib
;

794 
PPIB
 
µib
;

796 i‡(
	`DosGëInfoBlocks
(&
±ib
, &
µib
Ë!
NO_ERROR
) {

797 
	`GC_îr_¥ötf
("DosGetInfoBlocks failed\n");

798 
	`ABORT
("DosGetInfoBlocks failed\n");

800 ((
±r_t
)(
±ib
 -> 
tib_p°acklimô
));

801 
	}
}

805 #ifde‡
AMIGA


806 
	#GC_AMIGA_SB


	)

807 
	~"AmigaOS.c
"

808 #unde‡
GC_AMIGA_SB


811 #i‡
deföed
(
NEED_FIND_LIMIT
Ë|| deföed(
UNIX_LIKE
)

813 (*
	th™dÀr
)();

815 #i‡
	`deföed
(
SUNOS5SIGS
Ë|| deföed(
IRIX5
Ë|| deföed(
OSF1
) \

816 || 
	`deföed
(
HURD
Ë|| 
	$deföed
(
NETBSD
)

817 
siga˘i⁄
 
ﬁd_£gv_a˘
;

818 #i‡
	`deföed
(
_sig¨gs
Ë || deföed(
HPUX
) \

819 || 
	`deföed
(
HURD
Ë|| 
	$deföed
(
NETBSD
)

820 
siga˘i⁄
 
ﬁd_bus_a˘
;

823 
h™dÀr
 
ﬁd_£gv_h™dÀr
, 
ﬁd_bus_h™dÀr
;

826 
	$GC_£t_™d_ßve_Áu…_h™dÀr
(
h™dÀr
 
h
)

828 #i‡
	`deföed
(
SUNOS5SIGS
Ë|| deföed(
IRIX5
) \

829 || 
	`deföed
(
OSF1
Ë|| deföed(
HURD
Ë|| deföed(
NETBSD
)

830 
siga˘i⁄
 
a˘
;

832 
a˘
.
ß_h™dÀr
 = 
h
;

835 
a˘
.
ß_Êags
 = 
SA_RESTART
 | 
SA_NODEFER
;

837 
a˘
.
ß_Êags
 = 
SA_RESTART
;

840 (Ë
	`sigem±y£t
(&
a˘
.
ß_mask
);

841 #ifde‡
GC_IRIX_THREADS


844 (Ë
	`siga˘i⁄
(
SIGSEGV
, 0, &
ﬁd_£gv_a˘
);

845 (Ë
	`siga˘i⁄
(
SIGSEGV
, &
a˘
, 0);

847 (Ë
	`siga˘i⁄
(
SIGSEGV
, &
a˘
, &
ﬁd_£gv_a˘
);

848 #i‡
	`deföed
(
IRIX5
Ë&& deföed(
_sig¨gs
) \

849 || 
	`deföed
(
HPUX
Ë|| deföed(
HURD
Ë|| deföed(
NETBSD
)

853 (Ë
	`siga˘i⁄
(
SIGBUS
, &
a˘
, &
ﬁd_bus_a˘
);

857 
ﬁd_£gv_h™dÀr
 = 
	`sig«l
(
SIGSEGV
, 
h
);

858 #ifde‡
SIGBUS


859 
ﬁd_bus_h™dÀr
 = 
	`sig«l
(
SIGBUS
, 
h
);

862 
	}
}

865 #i‡
deföed
(
NEED_FIND_LIMIT
) || \

866 
deföed
(
USE_PROC_FOR_LIBRARIES
Ë&& 
	$deföed
(
THREADS
)

868 
	#MIN_PAGE_SIZE
 256

	)

871 
	$GC_Áu…_h™dÀr
(
sig
)

873 
	`LONGJMP
(
GC_jmp_buf
, 1);

874 
	}
}

876 
	$GC_£tup_ãmp‹¨y_Áu…_h™dÀr
()

880 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

881 
	`GC_£t_™d_ßve_Áu…_h™dÀr
(
GC_Áu…_h™dÀr
);

882 
	}
}

884 
	$GC_ª£t_Áu…_h™dÀr
()

886 #i‡
	`deföed
(
SUNOS5SIGS
Ë|| deföed(
IRIX5
) \

887 || 
	`deföed
(
OSF1
Ë|| deföed(
HURD
Ë|| deföed(
NETBSD
)

888 (Ë
	`siga˘i⁄
(
SIGSEGV
, &
ﬁd_£gv_a˘
, 0);

889 #i‡
	`deföed
(
IRIX5
Ë&& deföed(
_sig¨gs
) \

890 || 
	`deföed
(
HPUX
Ë|| deföed(
HURD
Ë|| deföed(
NETBSD
)

891 (Ë
	`siga˘i⁄
(
SIGBUS
, &
ﬁd_bus_a˘
, 0);

894 (Ë
	`sig«l
(
SIGSEGV
, 
ﬁd_£gv_h™dÀr
);

895 #ifde‡
SIGBUS


896 (Ë
	`sig«l
(
SIGBUS
, 
ﬁd_bus_h™dÀr
);

899 
	}
}

905 
±r_t
 
	$GC_föd_limô_wôh_bound
(
±r_t
 
p
, 
GC_boﬁ
 
up
,Öå_à
bound
)

907 vﬁ©ûê
±r_t
 
ªsu…
;

913 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

914 
	`GC_£tup_ãmp‹¨y_Áu…_h™dÀr
();

915 i‡(
	`SETJMP
(
GC_jmp_buf
) == 0) {

916 
ªsu…
 = (
±r_t
)(((
w‹d
)(
p
))

917 & ~(
MIN_PAGE_SIZE
-1));

919 i‡(
up
) {

920 
ªsu…
 +
MIN_PAGE_SIZE
;

921 i‡(
ªsu…
 >
bound
)  bound;

923 
ªsu…
 -
MIN_PAGE_SIZE
;

924 i‡(
ªsu…
 <
bound
)  bound;

926 
	`GC_no›1
((
w‹d
)(*
ªsu…
));

929 
	`GC_ª£t_Áu…_h™dÀr
();

930 i‡(!
up
) {

931 
ªsu…
 +
MIN_PAGE_SIZE
;

933 (
ªsu…
);

934 
	}
}

936 
±r_t
 
	$GC_föd_limô
(
±r_t
 
p
, 
GC_boﬁ
 
up
)

938 i‡(
up
) {

939  
	`GC_föd_limô_wôh_bound
(
p
, 
up
, (
±r_t
)(
w‹d
)(-1));

941  
	`GC_föd_limô_wôh_bound
(
p
, 
up
, 0);

943 
	}
}

946 #i‡
deföed
(
ECOS
Ë|| deföed(
NOSYS
)

947 
±r_t
 
	$GC_gë_maö_°ack_ba£
()

949  
STACKBOTTOM
;

950 
	}
}

953 #ifde‡
HPUX_STACKBOTTOM


955 
	~<sys/∑øm.h
>

956 
	~<sys/p°©.h
>

958 
±r_t
 
	$GC_gë_ªgi°î_°ack_ba£
()

960 
p°_vm_°©us
 
vm_°©us
;

962 
i
 = 0;

963 
	`p°©_gë¥ocvm
(&
vm_°©us
, (vm_°©us), 0, 
i
++) == 1) {

964 i‡(
vm_°©us
.
p°_ty≥
 =
PS_RSESTACK
) {

965  (
±r_t
Ë
vm_°©us
.
p°_vaddr
;

970  (
±r_t
)(((
w‹d
)
GC_°ackbŸtom
 - 
BACKING_STORE_DISPLACEMENT
 - 1)

971 & ~(
BACKING_STORE_ALIGNMENT
 - 1));

972 
	}
}

976 #ifde‡
LINUX_STACKBOTTOM


978 
	~<sys/ty≥s.h
>

979 
	~<sys/°©.h
>

981 
	#STAT_SKIP
 27

	)

984 #ifde‡
USE_LIBC_PRIVATES


985 #¥agm®
wók
 
__libc_°ack_íd


986 
±r_t
 
__libc_°ack_íd
;

989 #ifde‡
IA64


990 #ifde‡
USE_LIBC_PRIVATES


991 #¥agm®
wók
 
__libc_ü64_ªgi°î_backög_°‹e_ba£


992 
±r_t
 
__libc_ü64_ªgi°î_backög_°‹e_ba£
;

995 
±r_t
 
	$GC_gë_ªgi°î_°ack_ba£
()

997 
±r_t
 
ªsu…
;

999 #ifde‡
USE_LIBC_PRIVATES


1000 i‡(0 !&
__libc_ü64_ªgi°î_backög_°‹e_ba£


1001 && 0 !
__libc_ü64_ªgi°î_backög_°‹e_ba£
) {

1006  
__libc_ü64_ªgi°î_backög_°‹e_ba£
;

1009 
ªsu…
 = 
	`backög_°‹e_ba£_‰om_¥oc
();

1010 i‡(0 =
ªsu…
) {

1011 
ªsu…
 = 
	`GC_föd_limô
(
	`GC_ßve_ªgs_ö_°ack
(), 
FALSE
);

1016  
ªsu…
;

1017 
	}
}

1020 
±r_t
 
	$GC_löux_°ack_ba£
()

1025 
	#STAT_BUF_SIZE
 4096

	)

1026 
	#STAT_READ
 
ªad


	)

1028 
°©_buf
[
STAT_BUF_SIZE
];

1029 
f
;

1030 
c
;

1031 
w‹d
 
ªsu…
 = 0;

1032 
size_t
 
i
, 
buf_off£t
 = 0;

1039 #ifde‡
USE_LIBC_PRIVATES


1040 i‡(0 !&
__libc_°ack_íd
 && 0 != __libc_stack_end ) {

1041 #i‡
	`deföed
(
IA64
)

1044 i‡(((
w‹d
)
__libc_°ack_íd
 & 0xfff) + 0x10 < 0x1000) {

1045  
__libc_°ack_íd
 + 0x10;

1048 #ñi‡
	`deföed
(
SPARC
)

1053 i‡(
__libc_°ack_íd
 !(
±r_t
) ()0x1)

1054  
__libc_°ack_íd
;

1056  
__libc_°ack_íd
;

1060 
f
 = 
	`›í
("/¥oc/£lf/°©", 
O_RDONLY
);

1061 i‡(
f
 < 0 || 
	`STAT_READ
(f, 
°©_buf
, 
STAT_BUF_SIZE
Ë< 2 * 
STAT_SKIP
) {

1062 
	`ABORT
("Couldn'tÑead /proc/self/stat");

1064 
c
 = 
°©_buf
[
buf_off£t
++];

1067 
i
 = 0; i < 
STAT_SKIP
; ++i) {

1068 
	`is•a˚
(
c
)Ë¯
°©_buf
[
buf_off£t
++];

1069 !
	`is•a˚
(
c
)Ë¯
°©_buf
[
buf_off£t
++];

1071 
	`is•a˚
(
c
)Ë¯
°©_buf
[
buf_off£t
++];

1072 
	`isdigô
(
c
)) {

1073 
ªsu…
 *= 10;

1074 
ªsu…
 +
c
 - '0';

1075 
c
 = 
°©_buf
[
buf_off£t
++];

1077 
	`˛o£
(
f
);

1078 i‡(
ªsu…
 < 0x10000000Ë
	`ABORT
("Absurd stack bottom value");

1079  (
±r_t
)
ªsu…
;

1080 
	}
}

1084 #ifde‡
FREEBSD_STACKBOTTOM


1089 
	~<uni°d.h
>

1090 
	~<sys/ty≥s.h
>

1091 
	~<sys/sys˘l.h
>

1093 
±r_t
 
	$GC_‰ìbsd_°ack_ba£
()

1095 
nm
[2] = {
CTL_KERN
, 
KERN_USRSTACK
};

1096 
±r_t
 
ba£
;

1097 
size_t
 
Àn
 = (
±r_t
);

1098 
r
 = 
	`sys˘l
(
nm
, 2, &
ba£
, &
Àn
, 
NULL
, 0);

1100 i‡(
r
Ë
	`ABORT
("Error getting stack base");

1102  
ba£
;

1103 
	}
}

1107 #i‡!
deföed
(
BEOS
Ë&& !deföed(
AMIGA
Ë&& !deföed(
MSWIN32
) \

1108 && !
deföed
(
MSWINCE
Ë&& !deföed(
OS2
Ë&& !deföed(
NOSYS
Ë&& !deföed(
ECOS
) \

1109 && !
	$deföed
(
CYGWIN32
)

1111 
±r_t
 
	$GC_gë_maö_°ack_ba£
()

1113 #i‡
	`deföed
(
HEURISTIC1
Ë|| deföed(
HEURISTIC2
)

1114 
w‹d
 
dummy
;

1116 
±r_t
 
ªsu…
;

1118 
	#STACKBOTTOM_ALIGNMENT_M1
 ((
w‹d
)
STACK_GRAN
 - 1)

	)

1120 #ifde‡
STACKBOTTOM


1121 (
STACKBOTTOM
);

1123 #ifde‡
HEURISTIC1


1124 #ifde‡
STACK_GROWS_DOWN


1125 
ªsu…
 = (
±r_t
)((((
w‹d
)(&
dummy
))

1126 + 
STACKBOTTOM_ALIGNMENT_M1
)

1127 & ~
STACKBOTTOM_ALIGNMENT_M1
);

1129 
ªsu…
 = (
±r_t
)(((
w‹d
)(&
dummy
))

1130 & ~
STACKBOTTOM_ALIGNMENT_M1
);

1133 #ifde‡
LINUX_STACKBOTTOM


1134 
ªsu…
 = 
	`GC_löux_°ack_ba£
();

1136 #ifde‡
FREEBSD_STACKBOTTOM


1137 
ªsu…
 = 
	`GC_‰ìbsd_°ack_ba£
();

1139 #ifde‡
HEURISTIC2


1140 #ifde‡
STACK_GROWS_DOWN


1141 
ªsu…
 = 
	`GC_föd_limô
((
±r_t
)(&
dummy
), 
TRUE
);

1142 #ifde‡
HEURISTIC2_LIMIT


1143 i‡(
ªsu…
 > 
HEURISTIC2_LIMIT


1144 && (
±r_t
)(&
dummy
Ë< 
HEURISTIC2_LIMIT
) {

1145 
ªsu…
 = 
HEURISTIC2_LIMIT
;

1149 
ªsu…
 = 
	`GC_föd_limô
((
±r_t
)(&
dummy
), 
FALSE
);

1150 #ifde‡
HEURISTIC2_LIMIT


1151 i‡(
ªsu…
 < 
HEURISTIC2_LIMIT


1152 && (
±r_t
)(&
dummy
Ë> 
HEURISTIC2_LIMIT
) {

1153 
ªsu…
 = 
HEURISTIC2_LIMIT
;

1159 #ifde‡
STACK_GROWS_DOWN


1160 i‡(
ªsu…
 =0Ëªsu… = (
±r_t
)(
sig√d_w‹d
)(-(ptr_t));

1162 (
ªsu…
);

1164 
	}
}

1168 #i‡
deföed
(
GC_LINUX_THREADS
Ë&& !deföed(
HAVE_GET_STACK_BASE
)

1170 
	~<±hªad.h
>

1172 #ifde‡
IA64


1173 
±r_t
 
GC_gª©e°_°ack_ba£_bñow
’å_à
bound
);

1177 
	$GC_gë_°ack_ba£
(
GC_°ack_ba£
 *
b
)

1179 
±hªad_©å_t
 
©å
;

1180 
size_t
 
size
;

1182 i‡(
	`±hªad_gë©å_≈
(
	`±hªad_£lf
(), &
©å
) != 0) {

1183 
	`WARN
("pthread_getattr_np failed\n", 0);

1184  
GC_UNIMPLEMENTED
;

1186 i‡(
	`±hªad_©å_gë°ack
(&
©å
, &(
b
 -> 
mem_ba£
), &
size
) != 0) {

1187 
	`ABORT
("pthread_attr_getstack failed");

1189 #ifde‡
STACK_GROWS_DOWN


1190 
b
 -> 
mem_ba£
 = (*)(b -> mem_ba£Ë+ 
size
;

1192 #ifde‡
IA64


1197 
	`LOCK
();

1199 
±r_t
 
b•
 = 
	`GC_ßve_ªgs_ö_°ack
();

1200 
±r_t
 
√xt_°ack
 = 
	`GC_gª©e°_°ack_ba£_bñow
(
b•
);

1201 i‡(0 =
√xt_°ack
) {

1202 
b
 -> 
ªg_ba£
 = 
	`GC_föd_limô
(
b•
, 
FALSE
);

1206 
b
 -> 
ªg_ba£
 = 
	`GC_föd_limô_wôh_bound
(
b•
, 
FALSE
, 
√xt_°ack
);

1209 
	`UNLOCK
();

1211  
GC_SUCCESS
;

1212 
	}
}

1214 
	#HAVE_GET_STACK_BASE


	)

1218 #i‚de‡
HAVE_GET_STACK_BASE


1226 
	$GC_gë_°ack_ba£
(
GC_°ack_ba£
 *
b
)

1228 
dummy
;

1230 #ifde‡
NEED_FIND_LIMIT


1231 #ifde‡
STACK_GROWS_DOWN


1232 
b
 -> 
mem_ba£
 = 
	`GC_föd_limô
((
±r_t
)(&
dummy
), 
TRUE
);

1233 #ifde‡
IA64


1234 
b
 -> 
ªg_ba£
 = 
	`GC_föd_limô
(
	`GC_ßve_ªgs_ö_°ack
(), 
FALSE
);

1237 
b
 -> 
mem_ba£
 = 
	`GC_föd_limô
(&
dummy
, 
FALSE
);

1239  
GC_SUCCESS
;

1241  
GC_UNIMPLEMENTED
;

1243 
	}
}

1254 #ifde‡
OS2


1256 
	$GC_ªgi°î_d©a_£gmíts
()

1258 
PTIB
 
±ib
;

1259 
PPIB
 
µib
;

1260 
HMODULE
 
moduÀ_h™dÀ
;

1261 
	#PBUFSIZ
 512

	)

1262 
UCHAR
 
∑th
[
PBUFSIZ
];

1263 
FILE
 * 
myexefûe
;

1264 
exe_hdr
 
hdrdos
;

1265 
e32_exe
 
hdr386
;

1266 
o32_obj
 
£g
;

1267 
n£gs
;

1270 i‡(
	`DosGëInfoBlocks
(&
±ib
, &
µib
Ë!
NO_ERROR
) {

1271 
	`GC_îr_¥ötf
("DosGetInfoBlocks failed\n");

1272 
	`ABORT
("DosGetInfoBlocks failed\n");

1274 
moduÀ_h™dÀ
 = 
µib
 -> 
pib_hmã
;

1275 i‡(
	`DosQuîyModuÀName
(
moduÀ_h™dÀ
, 
PBUFSIZ
, 
∑th
Ë!
NO_ERROR
) {

1276 
	`GC_îr_¥ötf
("DosQueryModuleName failed\n");

1277 
	`ABORT
("DosGetInfoBlocks failed\n");

1279 
myexefûe
 = 
	`f›í
(
∑th
, "rb");

1280 i‡(
myexefûe
 == 0) {

1281 
	`GC_îr_puts
("Couldn't openÉxecutable ");

1282 
	`GC_îr_puts
(
∑th
); GC_err_puts("\n");

1283 
	`ABORT
("FailedÅo openÉxecutable\n");

1285 i‡(
	`‰ód
((*)(&
hdrdos
), 1,  hdrdos, 
myexefûe
) <  hdrdos) {

1286 
	`GC_îr_puts
("Couldn'tÑead MSDOS header from ");

1287 
	`GC_îr_puts
(
∑th
); GC_err_puts("\n");

1288 
	`ABORT
("Couldn'tÑead MSDOS header");

1290 i‡(
	`E_MAGIC
(
hdrdos
Ë!
EMAGIC
) {

1291 
	`GC_îr_puts
("Executable has wrong DOS magicÇumber: ");

1292 
	`GC_îr_puts
(
∑th
); GC_err_puts("\n");

1293 
	`ABORT
("Bad DOS magicÇumber");

1295 i‡(
	`f£ek
(
myexefûe
, 
	`E_LFANEW
(
hdrdos
), 
SEEK_SET
) != 0) {

1296 
	`GC_îr_puts
("SeekÅoÇew header failed in ");

1297 
	`GC_îr_puts
(
∑th
); GC_err_puts("\n");

1298 
	`ABORT
("Bad DOS magicÇumber");

1300 i‡(
	`‰ód
((*)(&
hdr386
), 1,  hdr386, 
myexefûe
) <  hdr386) {

1301 
	`GC_îr_puts
("Couldn'tÑead MSDOS header from ");

1302 
	`GC_îr_puts
(
∑th
); GC_err_puts("\n");

1303 
	`ABORT
("Couldn'tÑead OS/2 header");

1305 i‡(
	`E32_MAGIC1
(
hdr386
Ë!
E32MAGIC1
 || 
	`E32_MAGIC2
(hdr386Ë!
E32MAGIC2
) {

1306 
	`GC_îr_puts
("Executable has wrong OS/2 magicÇumber:");

1307 
	`GC_îr_puts
(
∑th
); GC_err_puts("\n");

1308 
	`ABORT
("Bad OS/2 magicÇumber");

1310 i‡–
	`E32_BORDER
(
hdr386
Ë!
E32LEBO
 || 
	`E32_WORDER
(hdr386Ë!
E32LEWO
) {

1311 
	`GC_îr_puts
("Executable %s has wrong byte order: ");

1312 
	`GC_îr_puts
(
∑th
); GC_err_puts("\n");

1313 
	`ABORT
("Bad byte order");

1315 i‡–
	`E32_CPU
(
hdr386
Ë=
E32CPU286
) {

1316 
	`GC_îr_puts
("GC can't handle 80286Éxecutables: ");

1317 
	`GC_îr_puts
(
∑th
); GC_err_puts("\n");

1318 
	`EXIT
();

1320 i‡(
	`f£ek
(
myexefûe
, 
	`E_LFANEW
(
hdrdos
Ë+ 
	`E32_OBJTAB
(
hdr386
),

1321 
SEEK_SET
) != 0) {

1322 
	`GC_îr_puts
("SeekÅo objectÅable failed: ");

1323 
	`GC_îr_puts
(
∑th
); GC_err_puts("\n");

1324 
	`ABORT
("SeekÅo objectÅable failed");

1326 
n£gs
 = 
	`E32_OBJCNT
(
hdr386
);Çsegs > 0;Çsegs--) {

1327 
Êags
;

1328 i‡(
	`‰ód
((*)(&
£g
), 1,  seg, 
myexefûe
) <  seg) {

1329 
	`GC_îr_puts
("Couldn'tÑead objÅableÉntry from ");

1330 
	`GC_îr_puts
(
∑th
); GC_err_puts("\n");

1331 
	`ABORT
("Couldn'tÑead objÅableÉntry");

1333 
Êags
 = 
	`O32_FLAGS
(
£g
);

1334 i‡(!(
Êags
 & 
OBJWRITE
)) ;

1335 i‡(!(
Êags
 & 
OBJREAD
)) ;

1336 i‡(
Êags
 & 
OBJINVALID
) {

1337 
	`GC_îr_¥ötf
("Object with invalidÖages?\n");

1340 
	`GC_add_roŸs_ö√r
(
	`O32_BASE
(
£g
), O32_BASE(£g)+
	`O32_SIZE
(£g), 
FALSE
);

1342 
	}
}

1346 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

1348 #ifde‡
MSWIN32


1356 
GC_boﬁ
 
	gGC_no_wö32_dŒs
 = 
FALSE
;

1361 #i‡
deföed
(
GWW_VDB
)

1363 #i‚de‡
_BASETSD_H_


1364 
ULONG
 * 
	tPULONG_PTR
;

1366 
	$UINT
 (
	tWINAPI
 * 
	tGëWrôeW©ch_ty≥
)(

1367 
	tDWORD
, 
	tPVOID
, 
	tSIZE_T
, PVOID*, 
	tPULONG_PTR
, 
	tPULONG
);

1368 
GëWrôeW©ch_ty≥
 
GëWrôeW©ch_func
;

1369 
DWORD
 
GëWrôeW©ch_Æloc_Êag
;

1371 
	#GC_GWW_AVAILABLE
(Ë(
GëWrôeW©ch_func
 !
NULL
)

	)

1373 
	$dëe˘_GëWrôeW©ch
()

1375 
GC_boﬁ
 
d⁄e
;

1376 i‡(
d⁄e
)

1379 
GëWrôeW©ch_func
 = (
GëWrôeW©ch_ty≥
)

1380 
	`GëProcAddªss
(
	`GëModuÀH™dÀ
("kernel32.dll"), "GetWriteWatch");

1381 i‡(
GëWrôeW©ch_func
 !
NULL
) {

1385 * 
∑ge
 = 
	`VútuÆAŒoc
(
NULL
, 
GC_∑ge_size
,

1386 
MEM_WRITE_WATCH
 | 
MEM_RESERVE
,

1387 
PAGE_READWRITE
);

1388 i‡(
∑ge
 !
NULL
) {

1389 
PVOID
 
∑ges
[16];

1390 
ULONG_PTR
 
cou¡
 = 16;

1391 
DWORD
 
∑ge_size
;

1395 i‡(
	`GëWrôeW©ch_func
(
WRITE_WATCH_FLAG_RESET
,

1396 
∑ge
, 
GC_∑ge_size
,

1397 
∑ges
,

1398 &
cou¡
,

1399 &
∑ge_size
) != 0) {

1401 
GëWrôeW©ch_func
 = 
NULL
;

1403 
GëWrôeW©ch_Æloc_Êag
 = 
MEM_WRITE_WATCH
;

1405 
	`VútuÆFªe
(
∑ge
, 
GC_∑ge_size
, 
MEM_RELEASE
);

1408 
GëWrôeW©ch_func
 = 
NULL
;

1411 i‡(
GC_¥öt_°©s
) {

1412 i‡(
GëWrôeW©ch_func
 =
NULL
) {

1413 
	`GC_log_¥ötf
("DidÇot findá usable GetWriteWatch()\n");

1415 
	`GC_log_¥ötf
("Using GetWriteWatch()\n");

1418 
d⁄e
 = 
TRUE
;

1419 
	}
}

1423 
GC_boﬁ
 
	gGC_w¡
 = 
FALSE
;

1426 
	$GC_öô_wö32
()

1431 
DWORD
 
v
 = 
	`GëVîsi⁄
();

1432 
GC_w¡
 = !(
v
 & 0x80000000);

1433 
GC_no_wö32_dŒs
 |((!
GC_w¡
Ë&& (
v
 & 0xff) <= 3);

1434 
	}
}

1439 
±r_t
 
	$GC_Àa°_des¸ibed_addªss
(
±r_t
 
°¨t
)

1441 
MEMORY_BASIC_INFORMATION
 
buf
;

1442 
size_t
 
ªsu…
;

1443 
LPVOID
 
limô
;

1444 
±r_t
 
p
;

1445 
LPVOID
 
q
;

1447 
limô
 = 
GC_sysöfo
.
ÕMöimumAµliˇti⁄Addªss
;

1448 
p
 = (
±r_t
)((
w‹d
)
°¨t
 & ~(
GC_∑ge_size
 - 1));

1450 
q
 = (
LPVOID
)(
p
 - 
GC_∑ge_size
);

1451 i‡((
±r_t
)
q
 > (±r_t)
p
 || q < 
limô
) ;

1452 
ªsu…
 = 
	`VútuÆQuîy
(
q
, &
buf
, (buf));

1453 i‡(
ªsu…
 !(
buf
Ë|| buf.
AŒoˇti⁄Ba£
 == 0) ;

1454 
p
 = (
±r_t
)(
buf
.
AŒoˇti⁄Ba£
);

1456  
p
;

1457 
	}
}

1460 #i‚de‡
REDIRECT_MALLOC


1471 
	sGC_mÆloc_hóp_li°
 {

1472 * 
	mÆloˇti⁄_ba£
;

1473 
GC_mÆloc_hóp_li°
 *
	m√xt
;

1474 } *
	gGC_mÆloc_hóp_l
 = 0;

1478 
GC_boﬁ
 
	$GC_is_mÆloc_hóp_ba£
(
±r_t
 
p
)

1480 
GC_mÆloc_hóp_li°
 *
q
 = 
GC_mÆloc_hóp_l
;

1482 0 !
q
) {

1483 i‡(
q
 -> 
Æloˇti⁄_ba£
 =
p
Ë 
TRUE
;

1484 
q
 = q -> 
√xt
;

1486  
FALSE
;

1487 
	}
}

1489 *
	$GC_gë_Æloˇti⁄_ba£
(*
p
)

1491 
MEMORY_BASIC_INFORMATION
 
buf
;

1492 
size_t
 
ªsu…
 = 
	`VútuÆQuîy
(
p
, &
buf
, (buf));

1493 i‡(
ªsu…
 !(
buf
)) {

1494 
	`ABORT
("Weird VirtualQueryÑesult");

1496  
buf
.
AŒoˇti⁄Ba£
;

1497 
	}
}

1499 
size_t
 
	gGC_max_roŸ_size
 = 100000;

1501 
	$GC_add_cuºít_mÆloc_hóp
()

1503 
GC_mÆloc_hóp_li°
 *
√w_l
 =

1504 
	`mÆloc
((
GC_mÆloc_hóp_li°
));

1505 * 
ˇndid©e
 = 
	`GC_gë_Æloˇti⁄_ba£
(
√w_l
);

1507 i‡(
√w_l
 == 0) ;

1508 i‡(
	`GC_is_mÆloc_hóp_ba£
(
ˇndid©e
)) {

1510 
size_t
 
ªq_size
 = 10000;

1512 *
p
 = 
	`mÆloc
(
ªq_size
);

1513 i‡(0 =
p
Ë{ 
	`‰ì
(
√w_l
); ; }

1514 
ˇndid©e
 = 
	`GC_gë_Æloˇti⁄_ba£
(
p
);

1515 
	`‰ì
(
p
);

1516 
ªq_size
 *= 2;

1517 } 
	`GC_is_mÆloc_hóp_ba£
(
ˇndid©e
)

1518 && 
ªq_size
 < 
GC_max_roŸ_size
/10 &&Ñeq_size < 500000);

1519 i‡(
	`GC_is_mÆloc_hóp_ba£
(
ˇndid©e
)) {

1520 
	`‰ì
(
√w_l
); ;

1523 i‡(
GC_¥öt_°©s
)

1524 
	`GC_log_¥ötf
("FoundÇew system malloc AllocationBaseát %p\n",

1525 
ˇndid©e
);

1526 
√w_l
 -> 
Æloˇti⁄_ba£
 = 
ˇndid©e
;

1527 
√w_l
 -> 
√xt
 = 
GC_mÆloc_hóp_l
;

1528 
GC_mÆloc_hóp_l
 = 
√w_l
;

1529 
	}
}

1534 
GC_boﬁ
 
	$GC_is_hóp_ba£
 (
±r_t
 
p
)

1537 
i
;

1539 #i‚de‡
REDIRECT_MALLOC


1540 i‡(
GC_roŸ_size
 > 
GC_max_roŸ_size
) GC_max_root_size = GC_root_size;

1541 i‡(
	`GC_is_mÆloc_hóp_ba£
(
p
)Ë 
TRUE
;

1543 
i
 = 0; i < 
GC_n_hóp_ba£s
; i++) {

1544 i‡(
GC_hóp_ba£s
[
i
] =
p
Ë 
TRUE
;

1546  
FALSE
 ;

1547 
	}
}

1549 #ifde‡
MSWIN32


1550 
	$GC_ªgi°î_roŸ_£˘i⁄
(
±r_t
 
°©ic_roŸ
)

1552 
MEMORY_BASIC_INFORMATION
 
buf
;

1553 
size_t
 
ªsu…
;

1554 
DWORD
 
¥Ÿe˘
;

1555 
LPVOID
 
p
;

1556 * 
ba£
;

1557 * 
limô
, * 
√w_limô
;

1559 i‡(!
GC_no_wö32_dŒs
) ;

1560 
p
 = 
ba£
 = 
limô
 = 
	`GC_Àa°_des¸ibed_addªss
(
°©ic_roŸ
);

1561 
p
 < 
GC_sysöfo
.
ÕMaximumAµliˇti⁄Addªss
) {

1562 
ªsu…
 = 
	`VútuÆQuîy
(
p
, &
buf
, (buf));

1563 i‡(
ªsu…
 !(
buf
Ë|| buf.
AŒoˇti⁄Ba£
 == 0

1564 || 
	`GC_is_hóp_ba£
(
buf
.
AŒoˇti⁄Ba£
)) ;

1565 
√w_limô
 = (*)
p
 + 
buf
.
Regi⁄Size
;

1566 
¥Ÿe˘
 = 
buf
.
PrŸe˘
;

1567 i‡(
buf
.
Sèã
 =
MEM_COMMIT


1568 && 
	`is_wrôabÀ
(
¥Ÿe˘
)) {

1569 i‡((*)
p
 =
limô
) {

1570 
limô
 = 
√w_limô
;

1572 i‡(
ba£
 !
limô
Ë
	`GC_add_roŸs_ö√r
(ba£,Üimô, 
FALSE
);

1573 
ba£
 = 
p
;

1574 
limô
 = 
√w_limô
;

1577 i‡(
p
 > (
LPVOID
)
√w_limô
 ) ;

1578 
p
 = (
LPVOID
)
√w_limô
;

1580 i‡(
ba£
 !
limô
Ë
	`GC_add_roŸs_ö√r
(ba£,Üimô, 
FALSE
);

1581 
	}
}

1584 
	$GC_ªgi°î_d©a_£gmíts
()

1586 #ifde‡
MSWIN32


1587 
dummy
;

1588 
	`GC_ªgi°î_roŸ_£˘i⁄
((
±r_t
)(&
dummy
));

1590 
	}
}

1594 #i‡(
deföed
(
SVR4
Ë|| deföed(
AUX
Ë|| deföed(
DGUX
) \

1595 || (
deföed
(
LINUX
Ë&& deföed(
SPARC
))Ë&& !
	$deföed
(
PCR
)

1596 
±r_t
 
	$GC_SysVGëD©aSèπ
(
size_t
 
max_∑ge_size
, 
±r_t
 
ëext_addr
)

1598 
w‹d
 
ãxt_íd
 = ((w‹d)(
ëext_addr
) + (word) - 1)

1599 & ~((
w‹d
) - 1);

1601 
w‹d
 
√xt_∑ge
 = ((
ãxt_íd
 + (w‹d)
max_∑ge_size
 - 1)

1602 & ~((
w‹d
)
max_∑ge_size
 - 1));

1603 
w‹d
 
∑ge_off£t
 = (
ãxt_íd
 & ((w‹d)
max_∑ge_size
 - 1));

1604 vﬁ©ûê* 
ªsu…
 = (*)(
√xt_∑ge
 + 
∑ge_off£t
);

1608 
	`GC_£tup_ãmp‹¨y_Áu…_h™dÀr
();

1609 i‡(
	`SETJMP
(
GC_jmp_buf
) == 0) {

1611 *
ªsu…
 = *result;

1612 
	`GC_ª£t_Áu…_h™dÀr
();

1614 
	`GC_ª£t_Áu…_h™dÀr
();

1620 
ªsu…
 = (*)
	`GC_föd_limô
((
±r_t
)(
DATAEND
), 
FALSE
);

1622 ((
±r_t
)
ªsu…
);

1623 
	}
}

1626 #i‡
deföed
(
FREEBSD
Ë&& (deföed(
I386
Ë|| deföed(
X86_64
Ë|| deföed(
powîpc
Ë|| deföed(
__powîpc__
)Ë&& !deföed(
PCR
)

1632 
±r_t
 
	$GC_FªeBSDGëD©aSèπ
(
size_t
 
max_∑ge_size
, 
±r_t
 
ëext_addr
)

1634 
w‹d
 
ãxt_íd
 = ((w‹d)(
ëext_addr
) + (word) - 1)

1635 & ~((
w‹d
) - 1);

1637 vﬁ©ûê
w‹d
 
√xt_∑ge
 = (
ãxt_íd
 + (w‹d)
max_∑ge_size
 - 1)

1638 & ~((
w‹d
)
max_∑ge_size
 - 1);

1639 vﬁ©ûê
±r_t
 
ªsu…
 = (±r_t)
ãxt_íd
;

1640 
	`GC_£tup_ãmp‹¨y_Áu…_h™dÀr
();

1641 i‡(
	`SETJMP
(
GC_jmp_buf
) == 0) {

1644 ; 
√xt_∑ge
 < (
w‹d
)(
DATAEND
);Çext_∑gê+(w‹d)
max_∑ge_size
)

1645 *(vﬁ©ûê*)
√xt_∑ge
;

1646 
	`GC_ª£t_Áu…_h™dÀr
();

1648 
	`GC_ª£t_Áu…_h™dÀr
();

1650 
ªsu…
 = 
	`GC_föd_limô
((
±r_t
)(
DATAEND
), 
FALSE
);

1652 (
ªsu…
);

1653 
	}
}

1658 #ifde‡
AMIGA


1660 
	#GC_AMIGA_DS


	)

1661 
	~"AmigaOS.c
"

1662 #unde‡
GC_AMIGA_DS


1666 
	$GC_ªgi°î_d©a_£gmíts
()

1668 #i‡!
	`deföed
(
PCR
Ë&& !deföed(
MACOS
)

1669 #i‡
	`deföed
(
REDIRECT_MALLOC
Ë&& deföed(
GC_SOLARIS_THREADS
)

1675 
ˇddr_t
 
	`sbrk
();

1677 
	`GC_add_roŸs_ö√r
(
DATASTART
, (
±r_t
)
	`sbrk
(0), 
FALSE
);

1679 
	`GC_add_roŸs_ö√r
(
DATASTART
, (
±r_t
)(
DATAEND
), 
FALSE
);

1680 #i‡
	`deföed
(
DATASTART2
)

1681 
	`GC_add_roŸs_ö√r
(
DATASTART2
, (
±r_t
)(
DATAEND2
), 
FALSE
);

1685 #i‡
	`deföed
(
MACOS
)

1687 #i‡
	`deföed
(
THINK_C
)

1688 * 
	`GC_MacGëD©aSèπ
();

1690 
	`GC_add_roŸs_ö√r
((
±r_t
)
	`GC_MacGëD©aSèπ
(),

1691 (
±r_t
)
	`LMGëCuºítA5
(), 
FALSE
);

1693 #i‡
	`deföed
(
__MWERKS__
)

1694 #i‡!
__POWERPC__


1695 * 
	`GC_MacGëD©aSèπ
();

1697 #i‡
	`__›ti⁄
(
Ár_d©a
)

1698 * 
	`GC_MacGëD©aEnd
();

1701 
	`GC_add_roŸs_ö√r
((
±r_t
)
	`GC_MacGëD©aSèπ
(),

1702 (
±r_t
)
	`LMGëCuºítA5
(), 
FALSE
);

1704 #i‡
	`__›ti⁄
(
Ár_d©a
)

1706 
	`GC_add_roŸs_ö√r
((
±r_t
)
	`LMGëCuºítA5
(),

1707 (
±r_t
)
	`GC_MacGëD©aEnd
(), 
FALSE
);

1710 
__d©a_°¨t__
[], 
__d©a_íd__
[];

1711 
	`GC_add_roŸs_ö√r
((
±r_t
)&
__d©a_°¨t__
,

1712 (
±r_t
)&
__d©a_íd__
, 
FALSE
);

1721 
	}
}

1731 #i‡!
deföed
(
OS2
Ë&& !deföed(
PCR
Ë&& !deföed(
AMIGA
) \

1732 && !
deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
) \

1733 && !
deföed
(
MACOS
Ë&& !deföed(
DOS4GW
Ë&& !
	$deföed
(
NONSTOP
)

1735 
	#SBRK_ARG_T
 
±rdiff_t


	)

1737 #i‡
	`deföed
(
MMAP_SUPPORTED
)

1739 #ifde‡
USE_MMAP_FIXED


1740 
	#GC_MMAP_FLAGS
 
MAP_FIXED
 | 
MAP_PRIVATE


	)

1744 
	#GC_MMAP_FLAGS
 
MAP_PRIVATE


	)

1747 #ifde‡
USE_MMAP_ANON


1748 
	#zîo_fd
 -1

	)

1749 #i‡
	`deföed
(
MAP_ANONYMOUS
)

1750 
	#OPT_MAP_ANON
 
MAP_ANONYMOUS


	)

1752 
	#OPT_MAP_ANON
 
MAP_ANON


	)

1755 
zîo_fd
;

1756 
	#OPT_MAP_ANON
 0

	)

1759 #i‚de‡
HEAP_START


1760 
	#HEAP_START
 0

	)

1763 
±r_t
 
	$GC_unix_mm≠_gë_mem
(
w‹d
 
byãs
)

1765 *
ªsu…
;

1766 
±r_t
 
œ°_addr
 = 
HEAP_START
;

1768 #i‚de‡
USE_MMAP_ANON


1769 
GC_boﬁ
 
öôülized
 = 
FALSE
;

1771 i‡(!
öôülized
) {

1772 
zîo_fd
 = 
	`›í
("/dev/zîo", 
O_RDONLY
);

1773 
	`f˙é
(
zîo_fd
, 
F_SETFD
, 
FD_CLOEXEC
);

1774 
öôülized
 = 
TRUE
;

1778 i‡(
byãs
 & (
GC_∑ge_size
 -1)Ë
	`ABORT
("Bad GET_MEMárg");

1779 
ªsu…
 = 
	`mm≠
(
œ°_addr
, 
byãs
, 
PROT_READ
 | 
PROT_WRITE
 | 
OPT_PROT_EXEC
,

1780 
GC_MMAP_FLAGS
 | 
OPT_MAP_ANON
, 
zîo_fd
, 0 );

1781 i‡(
ªsu…
 =
MAP_FAILED
) (0);

1782 
œ°_addr
 = (
±r_t
)
ªsu…
 + 
byãs
 + 
GC_∑ge_size
 - 1;

1783 
œ°_addr
 = (
±r_t
)((
w‹d
Óa°_add∏& ~(
GC_∑ge_size
 - 1));

1784 #i‡!
	`deföed
(
LINUX
)

1785 i‡(
œ°_addr
 == 0) {

1789 
	`munm≠
(
ªsu…
, (
size_t
)(-
GC_∑ge_size
) - (size_t)result);

1791  
	`GC_unix_mm≠_gë_mem
(
byãs
);

1794 
	`GC_ASSERT
(
œ°_addr
 != 0);

1796 ((
±r_t
)
ªsu…
);

1797 
	}
}

1801 #i‡
deföed
(
USE_MMAP
)

1803 
±r_t
 
	$GC_unix_gë_mem
(
w‹d
 
byãs
)

1805  
	`GC_unix_mm≠_gë_mem
(
byãs
);

1806 
	}
}

1810 
±r_t
 
	$GC_unix_sbrk_gë_mem
(
w‹d
 
byãs
)

1812 
±r_t
 
ªsu…
;

1813 #ifde‡
IRIX5


1816 
	`__LOCK_MALLOC
();

1819 
±r_t
 
cur_brk
 = (±r_t)
	`sbrk
(0);

1820 
SBRK_ARG_T
 
lsbs
 = (
w‹d
)
cur_brk
 & (
GC_∑ge_size
-1);

1822 i‡((
SBRK_ARG_T
)
byãs
 < 0) {

1823 
ªsu…
 = 0;

1824 
out
;

1826 i‡(
lsbs
 != 0) {

1827 if((
±r_t
)
	`sbrk
(
GC_∑ge_size
 - 
lsbs
) == (ptr_t)(-1)) {

1828 
ªsu…
 = 0;

1829 
out
;

1832 #ifde‡
ADD_HEAP_GUARD_PAGES


1836 
±r_t
 
gu¨d
 = (±r_t)
	`sbrk
((
SBRK_ARG_T
)
GC_∑ge_size
);

1837 i‡(
	`m¥Ÿe˘
(
gu¨d
, 
GC_∑ge_size
, 
PROT_NONE
) != 0)

1838 
	`ABORT
("ADD_HEAP_GUARD_PAGES: mprotect failed");

1841 
ªsu…
 = (
±r_t
)
	`sbrk
((
SBRK_ARG_T
)
byãs
);

1842 i‡(
ªsu…
 =(
±r_t
)(-1))Ñesult = 0;

1844 
out
:

1845 #ifde‡
IRIX5


1846 
	`__UNLOCK_MALLOC
();

1848 (
ªsu…
);

1849 
	}
}

1851 #i‡
deföed
(
MMAP_SUPPORTED
)

1854 
±r_t
 
	$GC_unix_gë_mem
(
w‹d
 
byãs
)

1856 
GC_boﬁ
 
sbrk_Áûed
 = 
FALSE
;

1857 
±r_t
 
ªsu…
 = 0;

1859 i‡(!
sbrk_Áûed
Ë
ªsu…
 = 
	`GC_unix_sbrk_gë_mem
(
byãs
);

1860 i‡(0 =
ªsu…
) {

1861 
sbrk_Áûed
 = 
TRUE
;

1862 
ªsu…
 = 
	`GC_unix_mm≠_gë_mem
(
byãs
);

1864 i‡(0 =
ªsu…
) {

1866 
ªsu…
 = 
	`GC_unix_sbrk_gë_mem
(
byãs
);

1868  
ªsu…
;

1869 
	}
}

1873 
±r_t
 
	$GC_unix_gë_mem
(
w‹d
 
byãs
)

1875  
	`GC_unix_sbrk_gë_mem
(
byãs
);

1876 
	}
}

1884 #ifde‡
OS2


1886 * 
	$os2_Æloc
(
size_t
 
byãs
)

1888 * 
ªsu…
;

1890 i‡(
	`DosAŒocMem
(&
ªsu…
, 
byãs
, 
PAG_EXECUTE
 | 
PAG_READ
 |

1891 
PAG_WRITE
 | 
PAG_COMMIT
)

1892 !
NO_ERROR
) {

1895 i‡(
ªsu…
 =0Ë(
	`os2_Æloc
(
byãs
));

1896 (
ªsu…
);

1897 
	}
}

1902 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

1903 
SYSTEM_INFO
 
	gGC_sysöfo
;

1906 #ifde‡
MSWIN32


1908 #ifde‡
USE_GLOBAL_ALLOC


1909 
	#GLOBAL_ALLOC_TEST
 1

	)

1911 
	#GLOBAL_ALLOC_TEST
 
GC_no_wö32_dŒs


	)

1914 
w‹d
 
	gGC_n_hóp_ba£s
 = 0;

1916 
w‹d
 
	gGC_mem_t›_down
 = 0;

1920 
±r_t
 
	$GC_wö32_gë_mem
(
w‹d
 
byãs
)

1922 
±r_t
 
ªsu…
;

1924 i‡(
GLOBAL_ALLOC_TEST
) {

1928 
ªsu…
 = (
±r_t
Ë
	`GlobÆAŒoc
(0, 
byãs
 + 
HBLKSIZE
);

1929 
ªsu…
 = (
±r_t
)(((
w‹d
Ïesu… + 
HBLKSIZE
 - 1) & ~(HBLKSIZE-1));

1944 
ªsu…
 = (
±r_t
Ë
	`VútuÆAŒoc
(
NULL
, 
byãs
 + 1,

1945 #ifde‡
GWW_VDB


1946 
GëWrôeW©ch_Æloc_Êag
 |

1948 
MEM_COMMIT
 | 
MEM_RESERVE


1949 | 
GC_mem_t›_down
,

1950 
PAGE_EXECUTE_READWRITE
);

1952 i‡(
	`HBLKDISPL
(
ªsu…
Ë!0Ë
	`ABORT
("Bad VirtualAllocÑesult");

1955 i‡(
GC_n_hóp_ba£s
 >
MAX_HEAP_SECTS
Ë
	`ABORT
("Too many heap sections");

1956 i‡(0 !
ªsu…
Ë
GC_hóp_ba£s
[
GC_n_hóp_ba£s
++] =Ñesult;

1957 (
ªsu…
);

1958 
	}
}

1960 
	$GC_wö32_‰ì_hóp
()

1962 i‡(
GC_no_wö32_dŒs
) {

1963 
GC_n_hóp_ba£s
 > 0) {

1964 
	`GlobÆFªe
 (
GC_hóp_ba£s
[--
GC_n_hóp_ba£s
]);

1965 
GC_hóp_ba£s
[
GC_n_hóp_ba£s
] = 0;

1968 
	}
}

1971 #ifde‡
AMIGA


1972 
	#GC_AMIGA_AM


	)

1973 
	~"AmigaOS.c
"

1974 #unde‡
GC_AMIGA_AM


1978 #ifde‡
MSWINCE


1979 
w‹d
 
	gGC_n_hóp_ba£s
 = 0;

1981 
±r_t
 
	$GC_wö˚_gë_mem
(
w‹d
 
byãs
)

1983 
±r_t
 
ªsu…
;

1984 
w‹d
 
i
;

1987 
byãs
 = (byã†+ 
GC_∑ge_size
-1) & ~(GC_page_size-1);

1990 
i
 = 0; i < 
GC_n_hóp_ba£s
; i++) {

1991 i‡(((
w‹d
)(-(
sig√d_w‹d
)
GC_hóp_Àngths
[
i
])

1992 & (
GC_sysöfo
.
dwAŒoˇti⁄Gønuœrôy
-1))

1993 >
byãs
) {

1994 
ªsu…
 = 
GC_hóp_ba£s
[
i
] + 
GC_hóp_Àngths
[i];

1999 i‡(
i
 =
GC_n_hóp_ba£s
) {

2001 
w‹d
 
ªs_byãs
 = (
byãs
 + 
GC_sysöfo
.
dwAŒoˇti⁄Gønuœrôy
-1)

2002 & ~(
GC_sysöfo
.
dwAŒoˇti⁄Gønuœrôy
-1);

2007 
ªsu…
 = (
±r_t
Ë
	`VútuÆAŒoc
(
NULL
, 
ªs_byãs
,

2008 
MEM_RESERVE
 | 
MEM_TOP_DOWN
,

2009 
PAGE_EXECUTE_READWRITE
);

2010 i‡(
	`HBLKDISPL
(
ªsu…
Ë!0Ë
	`ABORT
("Bad VirtualAllocÑesult");

2013 i‡(
GC_n_hóp_ba£s
 >
MAX_HEAP_SECTS
Ë
	`ABORT
("Too many heap sections");

2014 
GC_hóp_ba£s
[
GC_n_hóp_ba£s
] = 
ªsu…
;

2015 
GC_hóp_Àngths
[
GC_n_hóp_ba£s
] = 0;

2016 
GC_n_hóp_ba£s
++;

2020 
ªsu…
 = (
±r_t
Ë
	`VútuÆAŒoc
‘esu…, 
byãs
,

2021 
MEM_COMMIT
,

2022 
PAGE_EXECUTE_READWRITE
);

2023 i‡(
ªsu…
 !
NULL
) {

2024 i‡(
	`HBLKDISPL
(
ªsu…
Ë!0Ë
	`ABORT
("Bad VirtualAllocÑesult");

2025 
GC_hóp_Àngths
[
i
] +
byãs
;

2028 (
ªsu…
);

2029 
	}
}

2032 #ifde‡
USE_MUNMAP


2039 #i‡!
deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

2041 
	~<uni°d.h
>

2042 
	~<sys/mm™.h
>

2043 
	~<sys/°©.h
>

2044 
	~<sys/ty≥s.h
>

2051 
±r_t
 
	$GC_unm≠_°¨t
(
±r_t
 
°¨t
, 
size_t
 
byãs
)

2053 
±r_t
 
ªsu…
 = 
°¨t
;

2055 
ªsu…
 +
GC_∑ge_size
 - 1;

2056 
ªsu…
 = (
±r_t
)((
w‹d
Ïesu… & ~(
GC_∑ge_size
 - 1));

2057 i‡(
ªsu…
 + 
GC_∑ge_size
 > 
°¨t
 + 
byãs
)  0;

2058  
ªsu…
;

2059 
	}
}

2063 
±r_t
 
	$GC_unm≠_íd
(
±r_t
 
°¨t
, 
size_t
 
byãs
)

2065 
±r_t
 
íd_addr
 = 
°¨t
 + 
byãs
;

2066 
íd_addr
 = (
±r_t
)((
w‹d
Înd_add∏& ~(
GC_∑ge_size
 - 1));

2067  
íd_addr
;

2068 
	}
}

2081 
	$GC_unm≠
(
±r_t
 
°¨t
, 
size_t
 
byãs
)

2083 
±r_t
 
°¨t_addr
 = 
	`GC_unm≠_°¨t
(
°¨t
, 
byãs
);

2084 
±r_t
 
íd_addr
 = 
	`GC_unm≠_íd
(
°¨t
, 
byãs
);

2085 
w‹d
 
Àn
 = 
íd_addr
 - 
°¨t_addr
;

2086 i‡(0 =
°¨t_addr
) ;

2087 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

2088 
Àn
 != 0) {

2089 
MEMORY_BASIC_INFORMATION
 
mem_öfo
;

2090 
GC_w‹d
 
‰ì_Àn
;

2091 i‡(
	`VútuÆQuîy
(
°¨t_addr
, &
mem_öfo
, (mem_info))

2092 !(
mem_öfo
))

2093 
	`ABORT
("Weird VirtualQueryÑesult");

2094 
‰ì_Àn
 = (
Àn
 < 
mem_öfo
.
Regi⁄Size
) ?Üen : mem_info.RegionSize;

2095 i‡(!
	`VútuÆFªe
(
°¨t_addr
, 
‰ì_Àn
, 
MEM_DECOMMIT
))

2096 
	`ABORT
("VirtualFree failed");

2097 
GC_unm≠≥d_byãs
 +
‰ì_Àn
;

2098 
°¨t_addr
 +
‰ì_Àn
;

2099 
Àn
 -
‰ì_Àn
;

2105 * 
ªsu…
;

2106 
ªsu…
 = 
	`mm≠
(
°¨t_addr
, 
Àn
, 
PROT_NONE
,

2107 
MAP_PRIVATE
 | 
MAP_FIXED
 | 
OPT_MAP_ANON
,

2108 
zîo_fd
, 0 );

2109 i‡(
ªsu…
 !(*)
°¨t_addr
Ë
	`ABORT
("mmap(...PROT_NONE...) failed");

2111 
GC_unm≠≥d_byãs
 +
Àn
;

2113 
	}
}

2116 
	$GC_ªm≠
(
±r_t
 
°¨t
, 
size_t
 
byãs
)

2118 
±r_t
 
°¨t_addr
 = 
	`GC_unm≠_°¨t
(
°¨t
, 
byãs
);

2119 
±r_t
 
íd_addr
 = 
	`GC_unm≠_íd
(
°¨t
, 
byãs
);

2120 
w‹d
 
Àn
 = 
íd_addr
 - 
°¨t_addr
;

2122 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

2123 
±r_t
 
ªsu…
;

2125 i‡(0 =
°¨t_addr
) ;

2126 
Àn
 != 0) {

2127 
MEMORY_BASIC_INFORMATION
 
mem_öfo
;

2128 
GC_w‹d
 
Æloc_Àn
;

2129 i‡(
	`VútuÆQuîy
(
°¨t_addr
, &
mem_öfo
, (mem_info))

2130 !(
mem_öfo
))

2131 
	`ABORT
("Weird VirtualQueryÑesult");

2132 
Æloc_Àn
 = (
Àn
 < 
mem_öfo
.
Regi⁄Size
) ?Üen : mem_info.RegionSize;

2133 
ªsu…
 = 
	`VútuÆAŒoc
(
°¨t_addr
, 
Æloc_Àn
,

2134 
MEM_COMMIT
,

2135 
PAGE_EXECUTE_READWRITE
);

2136 i‡(
ªsu…
 !
°¨t_addr
) {

2137 
	`ABORT
("VirtualAllocÑemapping failed");

2139 
GC_unm≠≥d_byãs
 -
Æloc_Àn
;

2140 
°¨t_addr
 +
Æloc_Àn
;

2141 
Àn
 -
Æloc_Àn
;

2145 
ªsu…
;

2147 i‡(0 =
°¨t_addr
) ;

2148 
ªsu…
 = 
	`m¥Ÿe˘
(
°¨t_addr
, 
Àn
,

2149 
PROT_READ
 | 
PROT_WRITE
 | 
OPT_PROT_EXEC
);

2150 i‡(
ªsu…
 != 0) {

2151 
	`GC_îr_¥ötf
(

2153 
°¨t_addr
, ()
Àn
, 
î∫o
);

2154 
	`ABORT
("MprotectÑemapping failed");

2156 
GC_unm≠≥d_byãs
 -
Àn
;

2158 
	}
}

2164 
	$GC_unm≠_g≠
(
±r_t
 
°¨t1
, 
size_t
 
byãs1
,Öå_à
°¨t2
, size_à
byãs2
)

2166 
±r_t
 
°¨t1_addr
 = 
	`GC_unm≠_°¨t
(
°¨t1
, 
byãs1
);

2167 
±r_t
 
íd1_addr
 = 
	`GC_unm≠_íd
(
°¨t1
, 
byãs1
);

2168 
±r_t
 
°¨t2_addr
 = 
	`GC_unm≠_°¨t
(
°¨t2
, 
byãs2
);

2169 
±r_t
 
íd2_addr
 = 
	`GC_unm≠_íd
(
°¨t2
, 
byãs2
);

2170 
±r_t
 
°¨t_addr
 = 
íd1_addr
;

2171 
±r_t
 
íd_addr
 = 
°¨t2_addr
;

2172 
size_t
 
Àn
;

2173 
	`GC_ASSERT
(
°¨t1
 + 
byãs1
 =
°¨t2
);

2174 i‡(0 =
°¨t1_addr
Ë
°¨t_addr
 = 
	`GC_unm≠_°¨t
(
°¨t1
, 
byãs1
 + 
byãs2
);

2175 i‡(0 =
°¨t2_addr
Ë
íd_addr
 = 
	`GC_unm≠_íd
(
°¨t1
, 
byãs1
 + 
byãs2
);

2176 i‡(0 =
°¨t_addr
) ;

2177 
Àn
 = 
íd_addr
 - 
°¨t_addr
;

2178 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

2179 
Àn
 != 0) {

2180 
MEMORY_BASIC_INFORMATION
 
mem_öfo
;

2181 
GC_w‹d
 
‰ì_Àn
;

2182 i‡(
	`VútuÆQuîy
(
°¨t_addr
, &
mem_öfo
, (mem_info))

2183 !(
mem_öfo
))

2184 
	`ABORT
("Weird VirtualQueryÑesult");

2185 
‰ì_Àn
 = (
Àn
 < 
mem_öfo
.
Regi⁄Size
) ?Üen : mem_info.RegionSize;

2186 i‡(!
	`VútuÆFªe
(
°¨t_addr
, 
‰ì_Àn
, 
MEM_DECOMMIT
))

2187 
	`ABORT
("VirtualFree failed");

2188 
GC_unm≠≥d_byãs
 +
‰ì_Àn
;

2189 
°¨t_addr
 +
‰ì_Àn
;

2190 
Àn
 -
‰ì_Àn
;

2193 i‡(
Àn
 !0 && 
	`munm≠
(
°¨t_addr
,ÜíË!0Ë
	`ABORT
("munmap failed");

2194 
GC_unm≠≥d_byãs
 +
Àn
;

2196 
	}
}

2203 #i‚de‡
THREADS


2204 (*
GC_push_Ÿhî_roŸs
)() = 0;

2207 #ifde‡
PCR


2208 
PCR_ERes
 
	$GC_push_thªad_°ack
(
PCR_Th_T
 *
t
, 
PCR_Any
 
dummy
)

2210 
PCR_ThCé_TInfoRï
 
öfo
;

2211 
PCR_ERes
 
ªsu…
;

2213 
öfo
.
ti_°kLow
 = info.
ti_°kHi
 = 0;

2214 
ªsu…
 = 
	`PCR_ThCé_GëInfo
(
t
, &
öfo
);

2215 
	`GC_push_Æl_°ack
((
±r_t
)(
öfo
.
ti_°kLow
), (±r_t)(öfo.
ti_°kHi
));

2216 (
ªsu…
);

2217 
	}
}

2222 
PCR_ERes
 
	$GC_push_ﬁd_obj
(*
p
, 
size_t
 
size
, 
PCR_Any
 
d©a
)

2224 
	`GC_push_Æl_°ack
((
±r_t
)
p
, (±r_tÌ + 
size
);

2225 (
PCR_ERes_okay
);

2226 
	}
}

2229 
	$GC_deÁu…_push_Ÿhî_roŸs
()

2233 
PCR_MM_ProcsRï
 * 
GC_ﬁd_Æloˇt‹
;

2235 i‡((*(
GC_ﬁd_Æloˇt‹
->
mmp_íumî©e
))(
PCR_Boﬁ_Ál£
,

2236 
GC_push_ﬁd_obj
, 0)

2237 !
PCR_ERes_okay
) {

2238 
	`ABORT
("Old objectÉnumeration failed");

2242 i‡(
	`PCR_ERes_IsEº
(

2243 
	`PCR_ThCé_AµlyToAŒOthîThªads
(
GC_push_thªad_°ack
,0))

2244 || 
	`PCR_ERes_IsEº
(
	`GC_push_thªad_°ack
(
	`PCR_Th_CuºThªad
(), 0))) {

2245 
	`ABORT
("Thread stack marking failed\n");

2247 
	}
}

2252 #i‡
deföed
(
GC_PTHREADS
Ë|| deföed(
GC_WIN32_THREADS
)

2254 
GC_push_Æl_°acks
();

2256 
	$GC_deÁu…_push_Ÿhî_roŸs
()

2258 
	`GC_push_Æl_°acks
();

2259 
	}
}

2263 (*
GC_push_Ÿhî_roŸs
)(Ë
GC_deÁu…_push_Ÿhî_roŸs
;

2306 
GC_boﬁ
 
GC_dúty_maöèöed
 = 
FALSE
;

2308 #i‡
	`deföed
(
PROC_VDB
Ë|| deföed(
GWW_VDB
)

2311 
	$GC_‹_∑ges
(
∑ge_hash_èbÀ
 
pht1
,Öage_hash_èbÀ 
pht2
)

2313 
i
;

2315 
i
 = 0; i < 
PHT_SIZE
; i++Ë
pht1
[i] |
pht2
[i];

2316 
	}
}

2320 #ifde‡
GWW_VDB


2322 
	#GC_GWW_BUF_LEN
 1024

	)

2323 
PVOID
 
	ggww_buf
[
GC_GWW_BUF_LEN
];

2325 #ifde‡
MPROTECT_VDB


2326 
GC_boﬁ
 
	$GC_gww_dúty_öô
()

2328 
	`dëe˘_GëWrôeW©ch
();

2329  
	`GC_GWW_AVAILABLE
();

2330 
	}
}

2332 
	$GC_dúty_öô
()

2334 
	`dëe˘_GëWrôeW©ch
();

2335 
GC_dúty_maöèöed
 = 
	`GC_GWW_AVAILABLE
();

2336 
	}
}

2339 #ifde‡
MPROTECT_VDB


2340 
	$GC_gww_ªad_dúty
()

2342 
	$GC_ªad_dúty
()

2345 
w‹d
 
i
;

2347 
	`BZERO
(
GC_grungy_∑ges
, (GC_grungy_pages));

2349 
i
 = 0; i !
GC_n_hóp_£˘s
; ++i) {

2350 
ULONG_PTR
 
cou¡
;

2353 
PVOID
 * 
∑ges
, * 
∑ges_íd
;

2354 
DWORD
 
∑ge_size
;

2356 
∑ges
 = 
gww_buf
;

2357 
cou¡
 = 
GC_GWW_BUF_LEN
;

2375 i‡(
	`GëWrôeW©ch_func
(
WRITE_WATCH_FLAG_RESET
,

2376 
GC_hóp_£˘s
[
i
].
hs_°¨t
,

2377 
GC_hóp_£˘s
[
i
].
hs_byãs
,

2378 
∑ges
,

2379 &
cou¡
,

2380 &
∑ge_size
) != 0) {

2381 
w¨n_cou¡
 = 0;

2382 
j
;

2383 
hblk
 * 
°¨t
 = (hblk *)
GC_hóp_£˘s
[
i
].
hs_°¨t
;

2384 
hblk
 *
œ°_w¨√d
 = 0;

2385 
size_t
 
nblocks
 = 
	`divHBLKSZ
(
GC_hóp_£˘s
[
i
].
hs_byãs
);

2387 i‡–
i
 !0 && 
œ°_w¨√d
 !
°¨t
 && 
w¨n_cou¡
++ < 5) {

2388 
œ°_w¨√d
 = 
°¨t
;

2389 
	`WARN
(

2391 "FÆlög backÅÿm¨kögáŒÖage†dúty\n", 
°¨t
);

2393 
j
 = 0; j < 
nblocks
; ++j) {

2394 
w‹d
 
hash
 = 
	`PHT_HASH
(
°¨t
 + 
j
);

2395 
	`£t_pht_íåy_‰om_ödex
(
GC_grungy_∑ges
, 
hash
);

2397 
cou¡
 = 1;

2399 
∑ges_íd
 = 
∑ges
 + 
cou¡
;

2400 
∑ges
 !
∑ges_íd
) {

2401 
hblk
 * 
h
 = (hblk *Ë*
∑ges
++;

2402 
hblk
 * 
h_íd
 = (hblk *Ë((*Ë
h
 + 
∑ge_size
);

2404 
	`£t_pht_íåy_‰om_ödex
(
GC_grungy_∑ges
, 
	`PHT_HASH
(
h
));

2405 ++
h
 < 
h_íd
);

2408 } 
cou¡
 =
GC_GWW_BUF_LEN
);

2411 
	`GC_‹_∑ges
(
GC_wrôãn_∑ges
, 
GC_grungy_∑ges
);

2412 
	}
}

2414 #ifde‡
MPROTECT_VDB


2415 
GC_boﬁ
 
	$GC_gww_∑ge_was_dúty
(
hblk
 * 
h
)

2417 
GC_boﬁ
 
	$GC_∑ge_was_dúty
(
hblk
 * 
h
)

2420  
	`HDR
(
h
Ë=0 || 
	`gë_pht_íåy_‰om_ödex
(
GC_grungy_∑ges
, 
	`PHT_HASH
(h));

2421 
	}
}

2423 #ifde‡
MPROTECT_VDB


2424 
GC_boﬁ
 
	$GC_gww_∑ge_was_evî_dúty
(
hblk
 * 
h
)

2426 
GC_boﬁ
 
	$GC_∑ge_was_evî_dúty
(
hblk
 * 
h
)

2429  
	`HDR
(
h
Ë=0 || 
	`gë_pht_íåy_‰om_ödex
(
GC_wrôãn_∑ges
, 
	`PHT_HASH
(h));

2430 
	}
}

2432 #i‚de‡
MPROTECT_VDB


2433 
	$GC_ªmove_¥Ÿe˘i⁄
(
hblk
 *
h
, 
w‹d
 
nblocks
, 
GC_boﬁ
 
is_±r‰ì
)

2434 {
	}
}

2439 #ifde‡
DEFAULT_VDB


2448 
	$GC_dúty_öô
()

2450 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

2451 
	`GC_log_¥ötf
("Initializing DEFAULT_VDB...\n");

2452 
GC_dúty_maöèöed
 = 
TRUE
;

2453 
	}
}

2457 
	$GC_ªad_dúty
()

2458 {
	}
}

2465 
GC_boﬁ
 
	$GC_∑ge_was_dúty
(
hblk
 *
h
)

2467 (
TRUE
);

2468 
	}
}

2479 
GC_boﬁ
 
	$GC_∑ge_was_evî_dúty
(
hblk
 *
h
)

2481 (
TRUE
);

2482 
	}
}

2492 
	$GC_ªmove_¥Ÿe˘i⁄
(
hblk
 *
h
, 
w‹d
 
nblocks
, 
GC_boﬁ
 
is_±r‰ì
)

2494 
	}
}

2498 #ifde‡
MANUAL_VDB


2501 
	$GC_dúty_öô
()

2503 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

2504 
	`GC_log_¥ötf
("Initializing MANUAL_VDB...\n");

2506 
GC_dúty_maöèöed
 = 
TRUE
;

2507 
	}
}

2511 
	$GC_ªad_dúty
()

2513 
	`BCOPY
((
w‹d
 *)
GC_dúty_∑ges
, 
GC_grungy_∑ges
,

2514 ( 
GC_dúty_∑ges
));

2515 
	`BZERO
((
w‹d
 *)
GC_dúty_∑ges
, ( GC_dirty_pages));

2516 
	}
}

2523 
GC_boﬁ
 
	$GC_∑ge_was_dúty
(
hblk
 *
h
)

2525 
w‹d
 
ödex
;

2527 
ödex
 = 
	`PHT_HASH
(
h
);

2528 (
	`HDR
(
h
Ë=0 || 
	`gë_pht_íåy_‰om_ödex
(
GC_grungy_∑ges
, 
ödex
));

2529 
	}
}

2533 
GC_boﬁ
 
	$GC_∑ge_was_evî_dúty
(
hblk
 *
h
)

2536 (
TRUE
);

2537 
	}
}

2541 
	$GC_dúty
(
±r_t
 
p
)

2543 
w‹d
 
ödex
 = 
	`PHT_HASH
(
p
);

2544 
	`async_£t_pht_íåy_‰om_ödex
(
GC_dúty_∑ges
, 
ödex
);

2545 
	}
}

2548 
	$GC_ªmove_¥Ÿe˘i⁄
(
hblk
 *
h
, 
w‹d
 
nblocks
, 
GC_boﬁ
 
is_±r‰ì
)

2550 
	}
}

2555 #ifde‡
MPROTECT_VDB


2577 #i‡!
deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
Ë&& !deföed(
DARWIN
)

2579 
	~<sys/mm™.h
>

2580 
	~<sig«l.h
>

2581 
	~<sys/sysˇŒ.h
>

2583 
	#PROTECT
(
addr
, 
Àn
) \

2584 i‡(
	`m¥Ÿe˘
((
ˇddr_t
)(
addr
), (
size_t
)(
Àn
), \

2585 
PROT_READ
 | 
OPT_PROT_EXEC
) < 0) { \

2586 
	`ABORT
("mprotect failed"); \

2587 }

	)

2588 
	#UNPROTECT
(
addr
, 
Àn
) \

2589 i‡(
	`m¥Ÿe˘
((
ˇddr_t
)(
addr
), (
size_t
)(
Àn
), \

2590 
PROT_WRITE
 | 
PROT_READ
 | 
OPT_PROT_EXEC
 ) < 0) { \

2591 
	`ABORT
("un-mprotect failed"); \

2592 }

	)

2596 #ifde‡
DARWIN


2599 
	~<mach/vm_m≠.h
>

2600 
mach_p‹t_t
 
	gGC_èsk_£lf
;

2601 
	#PROTECT
(
addr
,
Àn
) \

2602 if(
	`vm_¥Ÿe˘
(
GC_èsk_£lf
,(
vm_addªss_t
)(
addr
),(
vm_size_t
)(
Àn
), \

2603 
FALSE
,
VM_PROT_READ
Ë!
KERN_SUCCESS
) { \

2604 
	`ABORT
("vm_portect failed"); \

2605 }

	)

2606 
	#UNPROTECT
(
addr
,
Àn
) \

2607 if(
	`vm_¥Ÿe˘
(
GC_èsk_£lf
,(
vm_addªss_t
)(
addr
),(
vm_size_t
)(
Àn
), \

2608 
FALSE
,
VM_PROT_READ
|
VM_PROT_WRITE
Ë!
KERN_SUCCESS
) { \

2609 
	`ABORT
("vm_portect failed"); \

2610 }

	)

2613 #i‚de‡
MSWINCE


2614 
	~<sig«l.h
>

2617 
DWORD
 
	g¥Ÿe˘_junk
;

2618 
	#PROTECT
(
addr
, 
Àn
) \

2619 i‡(!
	`VútuÆPrŸe˘
((
addr
), (
Àn
), 
PAGE_EXECUTE_READ
, \

2620 &
¥Ÿe˘_junk
)) { \

2621 
DWORD
 
œ°_îr‹
 = 
	`GëLa°Eº‹
(); \

2622 
	`GC_¥ötf
("La°Éº‹ code: %lx\n", 
œ°_îr‹
); \

2623 
	`ABORT
("VirtualProtect failed"); \

2624 }

	)

2625 
	#UNPROTECT
(
addr
, 
Àn
) \

2626 i‡(!
	`VútuÆPrŸe˘
((
addr
), (
Àn
), 
PAGE_EXECUTE_READWRITE
, \

2627 &
¥Ÿe˘_junk
)) { \

2628 
	`ABORT
("un-VirtualProtect failed"); \

2629 }

	)

2633 #i‡
deföed
(
MSWIN32
)

2634 
LPTOP_LEVEL_EXCEPTION_FILTER
 
	tSIG_HNDLR_PTR
;

2635 #unde‡
SIG_DFL


2636 
	#SIG_DFL
 (
LPTOP_LEVEL_EXCEPTION_FILTER
Ë(-1)

	)

2637 #ñi‡
deföed
(
MSWINCE
)

2638 
	$LONG
 (
	tWINAPI
 *
	tSIG_HNDLR_PTR
)(
	t_EXCEPTION_POINTERS
 *);

2639 #unde‡
SIG_DFL


2640 
	#SIG_DFL
 (
SIG_HNDLR_PTR
Ë(-1)

	)

2641 #ñi‡
	`deföed
(
DARWIN
)

2642 (* 
	tSIG_HNDLR_PTR
)();

2644 (* 
	tSIG_HNDLR_PTR
)(, 
	tsigöfo_t
 *, *);

2645 (* 
	tPLAIN_HNDLR_PTR
)();

2648 #i‡
	`deföed
(
__GLIBC__
)

2649 #i‡
__GLIBC__
 < 2 || __GLIBC__ =2 && 
__GLIBC_MINOR__
 < 2

2650 #îr‹ 
glibc
 
too
 
ﬁd
?

2654 #i‚de‡
DARWIN


2655 
SIG_HNDLR_PTR
 
GC_ﬁd_bus_h™dÀr
;

2656 
GC_boﬁ
 
GC_ﬁd_bus_h™dÀr_u£d_si
;

2657 
SIG_HNDLR_PTR
 
GC_ﬁd_£gv_h™dÀr
;

2659 
GC_boﬁ
 
GC_ﬁd_£gv_h™dÀr_u£d_si
;

2662 #i‡
	`deföed
(
THREADS
)

2670 #ifde‡
AO_HAVE_ã°_™d_£t_acquúe


2671 vﬁ©ûê
AO_TS_t
 
Áu…_h™dÀr_lock
 = 0;

2672 
	$async_£t_pht_íåy_‰om_ödex
(vﬁ©ûê
∑ge_hash_èbÀ
 
db
, 
size_t
 
ödex
) {

2673 
	`AO_ã°_™d_£t_acquúe
(&
Áu…_h™dÀr_lock
Ë=
AO_TS_SET
) {}

2676 
	`£t_pht_íåy_‰om_ödex
(
db
, 
ödex
);

2677 
	`AO_CLEAR
(&
Áu…_h™dÀr_lock
);

2678 
	}
}

2680 #îr‹ 
No
 
ã°_™d_£t
 
›î©i⁄
: 
I¡rodu˚s
 
a
 
ø˚
.

2689 vﬁ©ûê
w‹d
 
	gcuºíéy_upd©ög
 = 0;

2690 
	$async_£t_pht_íåy_‰om_ödex
(vﬁ©ûê
∑ge_hash_èbÀ
 
db
, 
size_t
 
ödex
) {

2691 
upd©e_dummy
;

2692 
cuºíéy_upd©ög
 = (
w‹d
)(&
upd©e_dummy
);

2693 
	`£t_pht_íåy_‰om_ödex
(
db
, 
ödex
);

2696 i‡(
cuºíéy_upd©ög
 !(
w‹d
)(&
upd©e_dummy
)) {

2697 
	`£t_pht_íåy_‰om_ödex_ß„
(
db
, 
ödex
);

2705 
	}
}

2708 
	#async_£t_pht_íåy_‰om_ödex
(
db
, 
ödex
) \

2709 
	`£t_pht_íåy_‰om_ödex
(
db
, 
ödex
)

	)

2712 #i‡!
deföed
(
DARWIN
)

2713 
	~<î∫o.h
>

2714 #i‡
deföed
(
FREEBSD
)

2715 
	#SIG_OK
 
TRUE


	)

2716 
	#CODE_OK
 (
code
 =
BUS_PAGE_FAULT
)

	)

2717 #ñi‡
deföed
(
OSF1
)

2718 
	#SIG_OK
 (
sig
 =
SIGSEGV
)

	)

2719 
	#CODE_OK
 (
code
 =2 )

	)

2720 #ñi‡
deföed
(
IRIX5
)

2721 
	#SIG_OK
 (
sig
 =
SIGSEGV
)

	)

2722 
	#CODE_OK
 (
code
 =
EACCES
)

	)

2723 #ñi‡
deföed
(
HURD
)

2724 
	#SIG_OK
 (
sig
 =
SIGBUS
 || sig =
SIGSEGV
)

	)

2725 
	#CODE_OK
 
TRUE


	)

2726 #ñi‡
deföed
(
LINUX
)

2727 
	#SIG_OK
 (
sig
 =
SIGSEGV
)

	)

2728 
	#CODE_OK
 
TRUE


	)

2732 #ñi‡
deföed
(
HPUX
)

2733 
	#SIG_OK
 (
sig
 =
SIGSEGV
 || sig =
SIGBUS
)

	)

2734 
	#CODE_OK
 (
si
 -> 
si_code
 =
SEGV_ACCERR
) \

2735 || (
si
 -> 
si_code
 =
BUS_ADRERR
) \

2736 || (
si
 -> 
si_code
 =
BUS_UNKNOWN
) \

2737 || (
si
 -> 
si_code
 =
SEGV_UNKNOWN
) \

2738 || (
si
 -> 
si_code
 =
BUS_OBJERR
)

	)

2739 #ñi‡
deföed
(
FREEBSD
)

2740 
	#SIG_OK
 (
sig
 =
SIGBUS
)

	)

2741 
	#CODE_OK
 (
si
 -> 
si_code
 =
BUS_PAGE_FAULT
)

	)

2742 #ñi‡
deföed
(
SUNOS5SIGS
)

2743 
	#SIG_OK
 (
sig
 =
SIGSEGV
)

	)

2744 
	#CODE_OK
 (
si
 -> 
si_code
 =
SEGV_ACCERR
)

	)

2745 #ñi‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

2746 
	#SIG_OK
 (
exc_öfo
 -> 
Ex˚±i⁄Rec‹d
 -> 
Ex˚±i⁄Code
 \

2747 =
STATUS_ACCESS_VIOLATION
)

	)

2748 
	#CODE_OK
 (
exc_öfo
 -> 
Ex˚±i⁄Rec‹d
 -> 
Ex˚±i⁄Inf‹m©i⁄
[0] \

2749 =1Ë

	)

2752 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

2753 
LONG
 
WINAPI
 
	$GC_wrôe_Áu…_h™dÀr
(
_EXCEPTION_POINTERS
 *
exc_öfo
)

2755 
	~<uc⁄ãxt.h
>

2757 
	$GC_wrôe_Áu…_h™dÀr
(
sig
, 
sigöfo_t
 *
si
, *
øw_sc
)

2760 #i‡!
	`deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

2761 
code
 = 
si
 -> 
si_code
;

2762 
uc⁄ãxt_t
 * 
s˝
 = (uc⁄ãxt_à*)
øw_sc
;

2764 *
addr
 = 
si
 -> 
si_addr
;

2766 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

2767 * 
addr
 = (*Ë(
exc_öfo
 -> 
Ex˚±i⁄Rec‹d


2768 -> 
Ex˚±i⁄Inf‹m©i⁄
[1]);

2769 
	#sig
 
SIGSEGV


	)

2771 
i
;

2773 i‡(
SIG_OK
 && 
CODE_OK
) {

2774 
hblk
 * 
h
 =

2775 (
hblk
 *)((
w‹d
)
addr
 & ~(
GC_∑ge_size
-1));

2776 
GC_boﬁ
 
ö_Ælocd_block
;

2778 #ifde‡
SUNOS5SIGS


2780 
ö_Ælocd_block
 = 
FALSE
;

2781 
i
 = 0; i < 
	`divHBLKSZ
(
GC_∑ge_size
); i++) {

2782 i‡(
	`HDR
(
h
+
i
) != 0) {

2783 
ö_Ælocd_block
 = 
TRUE
;

2787 
ö_Ælocd_block
 = (
	`HDR
(
addr
) != 0);

2789 i‡(!
ö_Ælocd_block
) {

2795 
SIG_HNDLR_PTR
 
ﬁd_h™dÀr
;

2796 
GC_boﬁ
 
u£d_si
;

2798 i‡(
sig
 =
SIGSEGV
) {

2799 
ﬁd_h™dÀr
 = 
GC_ﬁd_£gv_h™dÀr
;

2800 
u£d_si
 = 
GC_ﬁd_£gv_h™dÀr_u£d_si
;

2802 
ﬁd_h™dÀr
 = 
GC_ﬁd_bus_h™dÀr
;

2803 
u£d_si
 = 
GC_ﬁd_bus_h™dÀr_u£d_si
;

2805 i‡(
ﬁd_h™dÀr
 =(
SIG_HNDLR_PTR
)
SIG_DFL
) {

2806 #i‡!
	`deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

2807 
	`GC_îr_¥ötf
("SegÁu…áà%p\n", 
addr
);

2808 
	`ABORT
("Unexpected busÉrror or segmentation fault");

2810 (
EXCEPTION_CONTINUE_SEARCH
);

2818 #ifde‡
MSWIN32


2819 ((*
ﬁd_h™dÀr
)(
exc_öfo
));

2821 i‡(
u£d_si
)

2822 ((
SIG_HNDLR_PTR
)
ﬁd_h™dÀr
Ë(
sig
, 
si
, 
øw_sc
);

2825 ((
PLAIN_HNDLR_PTR
)
ﬁd_h™dÀr
Ë(
sig
);

2830 
	`UNPROTECT
(
h
, 
GC_∑ge_size
);

2842 
i
 = 0; i < 
	`divHBLKSZ
(
GC_∑ge_size
); i++) {

2843 
size_t
 
ödex
 = 
	`PHT_HASH
(
h
+
i
);

2845 
	`async_£t_pht_íåy_‰om_ödex
(
GC_dúty_∑ges
, 
ödex
);

2849 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

2850 (
EXCEPTION_CONTINUE_EXECUTION
);

2855 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

2856  
EXCEPTION_CONTINUE_SEARCH
;

2858 
	`GC_îr_¥ötf
("SegÁu…áà%p\n", 
addr
);

2859 
	`ABORT
("Unexpected busÉrror or segmentation fault");

2861 
	}
}

2870 
	$GC_ªmove_¥Ÿe˘i⁄
(
hblk
 *
h
, 
w‹d
 
nblocks
, 
GC_boﬁ
 
is_±r‰ì
)

2872 
hblk
 * 
h_åunc
;

2873 
hblk
 * 
h_íd
;

2874 
hblk
 * 
cuºít
;

2875 
GC_boﬁ
 
found_˛ón
;

2877 #i‡
	`deföed
(
GWW_VDB
)

2878 i‡(
	`GC_GWW_AVAILABLE
()) ;

2880 i‡(!
GC_dúty_maöèöed
) ;

2881 
h_åunc
 = (
hblk
 *)((
w‹d
)
h
 & ~(
GC_∑ge_size
-1));

2882 
h_íd
 = (
hblk
 *)(((
w‹d
)(
h
 + 
nblocks
Ë+ 
GC_∑ge_size
-1)

2883 & ~(
GC_∑ge_size
-1));

2884 
found_˛ón
 = 
FALSE
;

2885 
cuºít
 = 
h_åunc
; cuºíà< 
h_íd
; ++current) {

2886 
size_t
 
ödex
 = 
	`PHT_HASH
(
cuºít
);

2888 i‡(!
is_±r‰ì
 || 
cuºít
 < 
h
 || cuºíà>h + 
nblocks
) {

2889 
	`async_£t_pht_íåy_‰om_ödex
(
GC_dúty_∑ges
, 
ödex
);

2892 
	`UNPROTECT
(
h_åunc
, (
±r_t
)
h_íd
 - (ptr_t)h_trunc);

2893 
	}
}

2895 #i‡!
deföed
(
DARWIN
)

2896 
	$GC_dúty_öô
()

2898 #i‡!
	`deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

2899 
siga˘i⁄
 
a˘
, 
ﬁda˘
;

2900 
a˘
.
ß_Êags
 = 
SA_RESTART
 | 
SA_SIGINFO
;

2901 
a˘
.
ß_siga˘i⁄
 = 
GC_wrôe_Áu…_h™dÀr
;

2902 ()
	`sigem±y£t
(&
a˘
.
ß_mask
);

2903 #ifde‡
SIG_SUSPEND


2907 ()
	`sigadd£t
(&
a˘
.
ß_mask
, 
SIG_SUSPEND
);

2910 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

2911 
	`GC_log_¥ötf
(

2913 
GC_dúty_maöèöed
 = 
TRUE
;

2914 i‡(
GC_∑ge_size
 % 
HBLKSIZE
 != 0) {

2915 
	`GC_îr_¥ötf
("Page sizeÇot multiple of HBLKSIZE\n");

2916 
	`ABORT
("Page sizeÇot multiple of HBLKSIZE");

2918 #i‡!
	`deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
)

2919 #i‡
	`deföed
(
GC_IRIX_THREADS
)

2920 
	`siga˘i⁄
(
SIGSEGV
, 0, &
ﬁda˘
);

2921 
	`siga˘i⁄
(
SIGSEGV
, &
a˘
, 0);

2924 
ªs
 = 
	`siga˘i⁄
(
SIGSEGV
, &
a˘
, &
ﬁda˘
);

2925 i‡(
ªs
 !0Ë
	`ABORT
("Sigaction failed");

2928 i‡(
ﬁda˘
.
ß_Êags
 & 
SA_SIGINFO
) {

2929 
GC_ﬁd_£gv_h™dÀr
 = 
ﬁda˘
.
ß_siga˘i⁄
;

2930 
GC_ﬁd_£gv_h™dÀr_u£d_si
 = 
TRUE
;

2932 
GC_ﬁd_£gv_h™dÀr
 = (
SIG_HNDLR_PTR
)
ﬁda˘
.
ß_h™dÀr
;

2933 
GC_ﬁd_£gv_h™dÀr_u£d_si
 = 
FALSE
;

2935 i‡(
GC_ﬁd_£gv_h™dÀr
 =(
SIG_HNDLR_PTR
)
SIG_IGN
) {

2936 
	`GC_îr_¥ötf
("Previously ignored segmentation violation!?");

2937 
GC_ﬁd_£gv_h™dÀr
 = (
SIG_HNDLR_PTR
)
SIG_DFL
;

2939 i‡(
GC_ﬁd_£gv_h™dÀr
 !(
SIG_HNDLR_PTR
)
SIG_DFL
) {

2940 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

2941 
	`GC_log_¥ötf
("Replaced other SIGSEGV handler\n");

2944 #i‡
	`deföed
(
HPUX
Ë|| deföed(
LINUX
Ë|| deföed(
HURD
) \

2945 || (
	`deföed
(
FREEBSD
Ë&& deföed(
SUNOS5SIGS
))

2946 
	`siga˘i⁄
(
SIGBUS
, &
a˘
, &
ﬁda˘
);

2947 i‡(
ﬁda˘
.
ß_Êags
 & 
SA_SIGINFO
) {

2948 
GC_ﬁd_bus_h™dÀr
 = 
ﬁda˘
.
ß_siga˘i⁄
;

2949 
GC_ﬁd_bus_h™dÀr_u£d_si
 = 
TRUE
;

2951 
GC_ﬁd_bus_h™dÀr
 = (
SIG_HNDLR_PTR
)
ﬁda˘
.
ß_h™dÀr
;

2952 
GC_ﬁd_bus_h™dÀr_u£d_si
 = 
FALSE
;

2954 i‡(
GC_ﬁd_bus_h™dÀr
 =(
SIG_HNDLR_PTR
)
SIG_IGN
) {

2955 
	`GC_îr_¥ötf
("Previously ignored busÉrror!?");

2956 
GC_ﬁd_bus_h™dÀr
 = (
SIG_HNDLR_PTR
)
SIG_DFL
;

2958 i‡(
GC_ﬁd_bus_h™dÀr
 !(
SIG_HNDLR_PTR
)
SIG_DFL
) {

2959 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

2960 
	`GC_log_¥ötf
("Replaced other SIGBUS handler\n");

2963 #i‡
	`deföed
(
MSWIN32
)

2964 #i‡
	`deföed
(
GWW_VDB
)

2965 i‡(
	`GC_gww_dúty_öô
())

2968 
GC_ﬁd_£gv_h™dÀr
 = 
	`SëUnh™dÀdEx˚±i⁄Fûãr
(
GC_wrôe_Áu…_h™dÀr
);

2969 i‡(
GC_ﬁd_£gv_h™dÀr
 !
NULL
) {

2970 i‡(
GC_¥öt_°©s
)

2971 
	`GC_log_¥ötf
("Replaced other UnhandledExceptionFilter\n");

2973 
GC_ﬁd_£gv_h™dÀr
 = 
SIG_DFL
;

2976 
	}
}

2979 
	$GC_ö¸emíèl_¥Ÿe˘i⁄_√eds
()

2981 i‡(
GC_∑ge_size
 =
HBLKSIZE
) {

2982  
GC_PROTECTS_POINTER_HEAP
;

2984  
GC_PROTECTS_POINTER_HEAP
 | 
GC_PROTECTS_PTRFREE_HEAP
;

2986 
	}
}

2988 
	#HAVE_INCREMENTAL_PROTECTION_NEEDS


	)

2990 
	#IS_PTRFREE
(
hhdr
Ë((hhdr)->
hb_des¸
 =0)

	)

2992 
	#PAGE_ALIGNED
(
x
Ë!((
w‹d
)(xË& (
GC_∑ge_size
 - 1))

	)

2993 
	$GC_¥Ÿe˘_hóp
()

2995 
±r_t
 
°¨t
;

2996 
size_t
 
Àn
;

2997 
hblk
 * 
cuºít
;

2998 
hblk
 * 
cuºít_°¨t
;

2999 
hblk
 * 
limô
;

3000 
i
;

3001 
GC_boﬁ
 
¥Ÿe˘_Æl
 =

3002 (0 !(
	`GC_ö¸emíèl_¥Ÿe˘i⁄_√eds
(Ë& 
GC_PROTECTS_PTRFREE_HEAP
));

3003 
i
 = 0; i < 
GC_n_hóp_£˘s
; i++) {

3004 
°¨t
 = 
GC_hóp_£˘s
[
i
].
hs_°¨t
;

3005 
Àn
 = 
GC_hóp_£˘s
[
i
].
hs_byãs
;

3006 i‡(
¥Ÿe˘_Æl
) {

3007 
	`PROTECT
(
°¨t
, 
Àn
);

3009 
	`GC_ASSERT
(
	`PAGE_ALIGNED
(
Àn
))

3010 
	`GC_ASSERT
(
	`PAGE_ALIGNED
(
°¨t
))

3011 
cuºít_°¨t
 = 
cuºít
 = (
hblk
 *)
°¨t
;

3012 
limô
 = (
hblk
 *)(
°¨t
 + 
Àn
);

3013 
cuºít
 < 
limô
) {

3014 
hdr
 * 
hhdr
;

3015 
w‹d
 
nhblks
;

3016 
GC_boﬁ
 
is_±r‰ì
;

3018 
	`GC_ASSERT
(
	`PAGE_ALIGNED
(
cuºít
));

3019 
	`GET_HDR
(
cuºít
, 
hhdr
);

3020 i‡(
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
)) {

3025 
	`GC_ASSERT
(
cuºít_°¨t
 =
cuºít
);

3026 
cuºít_°¨t
 = ++
cuºít
;

3029 i‡(
	`HBLK_IS_FREE
(
hhdr
)) {

3030 
	`GC_ASSERT
(
	`PAGE_ALIGNED
(
hhdr
 -> 
hb_sz
));

3031 
nhblks
 = 
	`divHBLKSZ
(
hhdr
 -> 
hb_sz
);

3032 
is_±r‰ì
 = 
TRUE
;

3034 
nhblks
 = 
	`OBJ_SZ_TO_BLOCKS
(
hhdr
 -> 
hb_sz
);

3035 
is_±r‰ì
 = 
	`IS_PTRFREE
(
hhdr
);

3037 i‡(
is_±r‰ì
) {

3038 i‡(
cuºít_°¨t
 < 
cuºít
) {

3039 
	`PROTECT
(
cuºít_°¨t
, (
±r_t
)
cuºít
 - (ptr_t)current_start);

3041 
cuºít_°¨t
 = (
cuºít
 +
nhblks
);

3043 
cuºít
 +
nhblks
;

3046 i‡(
cuºít_°¨t
 < 
cuºít
) {

3047 
	`PROTECT
(
cuºít_°¨t
, (
±r_t
)
cuºít
 - (ptr_t)current_start);

3051 
	}
}

3055 
	$GC_ªad_dúty
()

3057 #i‡
	`deföed
(
GWW_VDB
)

3058 i‡(
	`GC_GWW_AVAILABLE
()) {

3059 
	`GC_gww_ªad_dúty
();

3063 
	`BCOPY
((
w‹d
 *)
GC_dúty_∑ges
, 
GC_grungy_∑ges
,

3064 ( 
GC_dúty_∑ges
));

3065 
	`BZERO
((
w‹d
 *)
GC_dúty_∑ges
, ( GC_dirty_pages));

3066 
	`GC_¥Ÿe˘_hóp
();

3067 
	}
}

3069 
GC_boﬁ
 
	$GC_∑ge_was_dúty
(
hblk
 *
h
)

3071 
w‹d
 
ödex
;

3073 #i‡
	`deföed
(
GWW_VDB
)

3074 i‡(
	`GC_GWW_AVAILABLE
())

3075  
	`GC_gww_∑ge_was_dúty
(
h
);

3078 
ödex
 = 
	`PHT_HASH
(
h
);

3079 (
	`HDR
(
h
Ë=0 || 
	`gë_pht_íåy_‰om_ödex
(
GC_grungy_∑ges
, 
ödex
));

3080 
	}
}

3090 
GC_boﬁ
 
	gsysˇŒ_acquúed_lock
 = 
FALSE
;

3093 
	$GC_begö_sysˇŒ
()

3097 i‡(!
	`I_HOLD_LOCK
()) {

3098 
	`LOCK
();

3099 
sysˇŒ_acquúed_lock
 = 
TRUE
;

3101 
	}
}

3103 
	$GC_íd_sysˇŒ
()

3105 i‡(
sysˇŒ_acquúed_lock
) {

3106 
sysˇŒ_acquúed_lock
 = 
FALSE
;

3107 
	`UNLOCK
();

3109 
	}
}

3111 
	$GC_u≈rŸe˘_ønge
(
±r_t
 
addr
, 
w‹d
 
Àn
)

3113 
hblk
 * 
°¨t_block
;

3114 
hblk
 * 
íd_block
;

3115 
hblk
 *
h
;

3116 
±r_t
 
obj_°¨t
;

3118 i‡(!
GC_dúty_maöèöed
) ;

3119 
obj_°¨t
 = 
	`GC_ba£
(
addr
);

3120 i‡(
obj_°¨t
 == 0) ;

3121 i‡(
	`GC_ba£
(
addr
 + 
Àn
 - 1Ë!
obj_°¨t
) {

3122 
	`ABORT
("GC_unprotect_range(range biggerÅhan object)");

3124 
°¨t_block
 = (
hblk
 *)((
w‹d
)
addr
 & ~(
GC_∑ge_size
 - 1));

3125 
íd_block
 = (
hblk
 *)((
w‹d
)(
addr
 + 
Àn
 - 1Ë& ~(
GC_∑ge_size
 - 1));

3126 
íd_block
 +
GC_∑ge_size
/
HBLKSIZE
 - 1;

3127 
h
 = 
°¨t_block
; h <
íd_block
; h++) {

3128 
w‹d
 
ödex
 = 
	`PHT_HASH
(
h
);

3130 
	`async_£t_pht_íåy_‰om_ödex
(
GC_dúty_∑ges
, 
ödex
);

3132 
	`UNPROTECT
(
°¨t_block
,

3133 ((
±r_t
)
íd_block
 - (±r_t)
°¨t_block
Ë+ 
HBLKSIZE
);

3134 
	}
}

3142 #i‡!
deföed
(
MSWIN32
Ë&& !deföed(
MSWINCE
Ë&& !deföed(
GC_USE_LD_WRAP
)

3152 
	~<uni°d.h
>

3153 
	~<sys/uio.h
>

3154 
ssize_t
 
	$ªad
(
fd
, *
buf
, 
size_t
 
nbyã
)

3156 
ªsu…
;

3158 
	`GC_begö_sysˇŒ
();

3159 
	`GC_u≈rŸe˘_ønge
(
buf
, (
w‹d
)
nbyã
);

3160 #i‡
	`deföed
(
IRIX5
Ë|| deföed(
GC_LINUX_THREADS
)

3167 
iovec
 
iov
;

3169 
iov
.
iov_ba£
 = 
buf
;

3170 
iov
.
iov_Àn
 = 
nbyã
;

3171 
ªsu…
 = 
	`ªadv
(
fd
, &
iov
, 1);

3174 #i‡
	`deföed
(
HURD
)

3175 
ªsu…
 = 
	`__ªad
(
fd
, 
buf
, 
nbyã
);

3180 
ªsu…
 = 
	`sysˇŒ
(
SYS_ªad
, 
fd
, 
buf
, 
nbyã
, 0, 0);

3183 
	`GC_íd_sysˇŒ
();

3184 (
ªsu…
);

3185 
	}
}

3188 #i‡
deföed
(
GC_USE_LD_WRAP
Ë&& !deföed(
THREADS
)

3194 
	~<uni°d.h
>

3195 
ssize_t
 
	$__wøp_ªad
(
fd
, *
buf
, 
size_t
 
nbyã
)

3197 
ªsu…
;

3199 
	`GC_begö_sysˇŒ
();

3200 
	`GC_u≈rŸe˘_ønge
(
buf
, (
w‹d
)
nbyã
);

3201 
ªsu…
 = 
	`__ªÆ_ªad
(
fd
, 
buf
, 
nbyã
);

3202 
	`GC_íd_sysˇŒ
();

3203 (
ªsu…
);

3204 
	}
}

3213 
GC_boﬁ
 
	$GC_∑ge_was_evî_dúty
(
hblk
 *
h
)

3215 #i‡
	`deföed
(
GWW_VDB
)

3216 i‡(
	`GC_GWW_AVAILABLE
())

3217  
	`GC_gww_∑ge_was_evî_dúty
(
h
);

3219 (
TRUE
);

3220 
	}
}

3224 #ifde‡
PROC_VDB


3237 
	~<î∫o.h
>

3238 
	~<sys/ty≥s.h
>

3239 
	~<sys/sig«l.h
>

3240 
	~<sys/Áu….h
>

3241 
	~<sys/sysˇŒ.h
>

3242 
	~<sys/¥ocfs.h
>

3243 
	~<sys/°©.h
>

3245 
	#INITIAL_BUF_SZ
 16384

	)

3246 
w‹d
 
	gGC_¥oc_buf_size
 = 
INITIAL_BUF_SZ
;

3247 *
	gGC_¥oc_buf
;

3249 
	gGC_¥oc_fd
;

3251 
	$GC_dúty_öô
()

3253 
fd
;

3254 
buf
[30];

3256 
GC_dúty_maöèöed
 = 
TRUE
;

3257 i‡(
GC_byãs_Ælocd
 !0 || 
GC_byãs_Ælocd_bef‹e_gc
 != 0) {

3258 
i
;

3260 
i
 = 0; i < 
PHT_SIZE
; i++Ë
GC_wrôãn_∑ges
[i] = (
w‹d
)(-1);

3261 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

3262 
	`GC_log_¥ötf
(

3265 (
GC_byãs_Ælocd
 + 
GC_byãs_Ælocd_bef‹e_gc
));

3267 
	`•rötf
(
buf
, "/¥oc/%d", 
	`gëpid
());

3268 
fd
 = 
	`›í
(
buf
, 
O_RDONLY
);

3269 i‡(
fd
 < 0) {

3270 
	`ABORT
("/proc open failed");

3272 
GC_¥oc_fd
 = 
	`sysˇŒ
(
SYS_io˘l
, 
fd
, 
PIOCOPENPD
, 0);

3273 
	`˛o£
(
fd
);

3274 
	`sysˇŒ
(
SYS_f˙é
, 
GC_¥oc_fd
, 
F_SETFD
, 
FD_CLOEXEC
);

3275 i‡(
GC_¥oc_fd
 < 0) {

3276 
	`ABORT
("/proc ioctl failed");

3278 
GC_¥oc_buf
 = 
	`GC_s¸©ch_Æloc
(
GC_¥oc_buf_size
);

3279 
	}
}

3283 
	$GC_ªmove_¥Ÿe˘i⁄
(
h
, 
nblocks
, 
is_±r‰ì
)

3284 
hblk
 *
h
;

3285 
w‹d
 
nblocks
;

3286 
GC_boﬁ
 
is_±r‰ì
;

3288 
	}
}

3290 
	#READ
(
fd
,
buf
,
nbyãs
Ë
	`ªad
(fd, buf,Çbyãs)

	)

3292 
	$GC_ªad_dúty
()

3294 
ps
, 
≈
;

3295 
nm≠s
;

3296 
±r_t
 
vaddr
;

3297 
¥asm≠
 * 
m≠
;

3298 * 
buÂ
;

3299 
±r_t
 
cuºít_addr
, 
limô
;

3300 
i
;

3302 
	`BZERO
(
GC_grungy_∑ges
, ( GC_grungy_pages));

3304 
buÂ
 = 
GC_¥oc_buf
;

3305 i‡(
	`READ
(
GC_¥oc_fd
, 
buÂ
, 
GC_¥oc_buf_size
) <= 0) {

3306 i‡(
GC_¥öt_°©s
)

3307 
	`GC_log_¥ötf
("/procÑead failed: GC_proc_buf_size = %lu\n",

3308 ()
GC_¥oc_buf_size
);

3311 
w‹d
 
√w_size
 = 2 * 
GC_¥oc_buf_size
;

3312 * 
√w_buf
 = 
	`GC_s¸©ch_Æloc
(
√w_size
);

3314 i‡(
√w_buf
 != 0) {

3315 
GC_¥oc_buf
 = 
buÂ
 = 
√w_buf
;

3316 
GC_¥oc_buf_size
 = 
√w_size
;

3318 i‡(
	`READ
(
GC_¥oc_fd
, 
buÂ
, 
GC_¥oc_buf_size
) <= 0) {

3319 
	`WARN
("Insufficient space for /procÑead\n", 0);

3321 
	`mem£t
(
GC_grungy_∑ges
, 0xff,  (
∑ge_hash_èbÀ
));

3322 
	`mem£t
(
GC_wrôãn_∑ges
, 0xff, (
∑ge_hash_èbÀ
));

3328 
nm≠s
 = ((
¥∑gehódî
 *)
buÂ
Ë-> 
¥_nm≠
;

3331 
buÂ
 = buÂ + (
¥∑gehódî
);

3332 
i
 = 0; i < 
nm≠s
; i++) {

3333 
m≠
 = (
¥asm≠
 *)
buÂ
;

3334 
vaddr
 = (
±r_t
)(
m≠
 -> 
¥_vaddr
);

3335 
ps
 = 
m≠
 -> 
¥_∑gesize
;

3336 
≈
 = 
m≠
 -> 
¥_≈age
;

3338 
limô
 = 
vaddr
 + 
ps
 * 
≈
;

3339 
buÂ
 + (
¥asm≠
);

3340 
cuºít_addr
 = 
vaddr
;

3341 
cuºít_addr
 < 
limô
; cuºít_add∏+
ps
){

3342 i‡((*
buÂ
++Ë& 
PG_MODIFIED
) {

3343 
hblk
 * 
h
 = (hblk *Ë
cuºít_addr
;

3345 (
±r_t
)
h
 < 
cuºít_addr
 + 
ps
) {

3346 
w‹d
 
ödex
 = 
	`PHT_HASH
(
h
);

3348 
	`£t_pht_íåy_‰om_ödex
(
GC_grungy_∑ges
, 
ödex
);

3349 
h
++;

3353 
buÂ
 += () - 1;

3354 
buÂ
 = (*)(()bufp & ~(()-1));

3357 
	`GC_‹_∑ges
(
GC_wrôãn_∑ges
, 
GC_grungy_∑ges
);

3358 
	}
}

3360 #unde‡
READ


3362 
GC_boﬁ
 
	$GC_∑ge_was_dúty
(
hblk
 *
h
)

3364 
w‹d
 
ödex
 = 
	`PHT_HASH
(
h
);

3365 
GC_boﬁ
 
ªsu…
;

3367 
ªsu…
 = 
	`gë_pht_íåy_‰om_ödex
(
GC_grungy_∑ges
, 
ödex
);

3368 (
ªsu…
);

3369 
	}
}

3371 
GC_boﬁ
 
	$GC_∑ge_was_evî_dúty
(
hblk
 *
h
)

3373 
w‹d
 
ödex
 = 
	`PHT_HASH
(
h
);

3374 
GC_boﬁ
 
ªsu…
;

3376 
ªsu…
 = 
	`gë_pht_íåy_‰om_ödex
(
GC_wrôãn_∑ges
, 
ödex
);

3377 (
ªsu…
);

3378 
	}
}

3383 #ifde‡
PCR_VDB


3385 
	~"vd/PCR_VD.h
"

3387 
	#NPAGES
 (32*1024Ë

	)

3389 
PCR_VD_DB
 
	gGC_grungy_bôs
[
NPAGES
];

3391 
±r_t
 
	gGC_vd_ba£
;

3394 
	$GC_dúty_öô
()

3396 
GC_dúty_maöèöed
 = 
TRUE
;

3398 
GC_vd_ba£
 = 
GC_hóp_£˘s
[0].
hs_°¨t
;

3399 i‡(
GC_vd_ba£
 == 0) {

3400 
	`ABORT
("Bad initial heap segment");

3402 i‡(
	`PCR_VD_Sèπ
(
HBLKSIZE
, 
GC_vd_ba£
, 
NPAGES
*HBLKSIZE)

3403 !
PCR_ERes_okay
) {

3404 
	`ABORT
("dirty bit initialization failed");

3406 
	}
}

3408 
	$GC_ªad_dúty
()

3412 
⁄hs
 = 0;

3413 
nhs
 = 
GC_n_hóp_£˘s
;

3414  ; 
⁄hs
 < 
nhs
; onhs++ ) {

3415 
	`PCR_VD_WrôePrŸe˘E«bÀ
(

3416 
GC_hóp_£˘s
[
⁄hs
].
hs_°¨t
,

3417 
GC_hóp_£˘s
[
⁄hs
].
hs_byãs
 );

3422 i‡(
	`PCR_VD_CÀ¨
(
GC_vd_ba£
, 
NPAGES
*
HBLKSIZE
, 
GC_grungy_bôs
)

3423 !
PCR_ERes_okay
) {

3424 
	`ABORT
("dirty bitÑead failed");

3426 
	}
}

3428 
GC_boﬁ
 
	$GC_∑ge_was_dúty
(
hblk
 *
h
)

3430 if((
±r_t
)
h
 < 
GC_vd_ba£
 || (±r_t)h >GC_vd_ba£ + 
NPAGES
*
HBLKSIZE
) {

3431 (
TRUE
);

3433 (
GC_grungy_bôs
[
h
 - (
hblk
 *)
GC_vd_ba£
] & 
PCR_VD_DB_dútyBô
);

3434 
	}
}

3437 
	$GC_ªmove_¥Ÿe˘i⁄
(
hblk
 *
h
, 
w‹d
 
nblocks
, 
GC_boﬁ
 
is_±r‰ì
)

3439 
	`PCR_VD_WrôePrŸe˘DißbÀ
(
h
, 
nblocks
*
HBLKSIZE
);

3440 
	`PCR_VD_WrôePrŸe˘E«bÀ
(
h
, 
nblocks
*
HBLKSIZE
);

3441 
	}
}

3445 #i‡
deföed
(
MPROTECT_VDB
Ë&& deföed(
DARWIN
)

3460 
	~<mach/mach.h
>

3461 
	~<mach/mach_îr‹.h
>

3462 
	~<mach/thªad_°©us.h
>

3463 
	~<mach/ex˚±i⁄.h
>

3464 
	~<mach/èsk.h
>

3465 
	~<±hªad.h
>

3467 
GC_d¨wö_ªgi°î_mach_h™dÀr_thªad
(
mach_p‹t_t
);

3470 
boﬁón_t


3471 
exc_£rvî
(
mach_msg_hódî_t
 *, mach_msg_header_t *);

3473 
kîn_ªtu∫_t


3474 
ex˚±i⁄_øi£
(
mach_p‹t_t
, mach_p‹t_t, mach_p‹t_t, 
ex˚±i⁄_ty≥_t
,

3475 
ex˚±i⁄_d©a_t
, 
mach_msg_ty≥_numbî_t
);

3477 
kîn_ªtu∫_t


3478 
ex˚±i⁄_øi£_°©e
(
mach_p‹t_t
, mach_p‹t_t, mach_p‹t_t, 
ex˚±i⁄_ty≥_t
,

3479 
ex˚±i⁄_d©a_t
, 
mach_msg_ty≥_numbî_t
,

3480 
thªad_°©e_Êav‹_t
*, 
thªad_°©e_t
,

3481 
mach_msg_ty≥_numbî_t
, 
thªad_°©e_t
,

3482 
mach_msg_ty≥_numbî_t
*);

3484 
kîn_ªtu∫_t


3485 
ex˚±i⁄_øi£_°©e_idítôy
(
mach_p‹t_t
, mach_port_t, mach_port_t,

3486 
ex˚±i⁄_ty≥_t
, 
ex˚±i⁄_d©a_t
,

3487 
mach_msg_ty≥_numbî_t
, 
thªad_°©e_Êav‹_t
*,

3488 
thªad_°©e_t
, 
mach_msg_ty≥_numbî_t
,

3489 
thªad_°©e_t
, 
mach_msg_ty≥_numbî_t
*);

3492 
	#MAX_EXCEPTION_PORTS
 16

	)

3495 
mach_msg_ty≥_numbî_t
 
	mcou¡
;

3496 
ex˚±i⁄_mask_t
 
	mmasks
[
MAX_EXCEPTION_PORTS
];

3497 
ex˚±i⁄_h™dÀr_t
 
	mp‹ts
[
MAX_EXCEPTION_PORTS
];

3498 
ex˚±i⁄_behavi‹_t
 
	mbehavi‹s
[
MAX_EXCEPTION_PORTS
];

3499 
thªad_°©e_Êav‹_t
 
	mÊav‹s
[
MAX_EXCEPTION_PORTS
];

3500 } 
	gGC_ﬁd_exc_p‹ts
;

3503 
mach_p‹t_t
 
	mex˚±i⁄
;

3504 #i‡
deföed
(
THREADS
)

3505 
mach_p‹t_t
 
	mª∂y
;

3507 } 
	gGC_p‹ts
;

3510 
mach_msg_hódî_t
 
	mhód
;

3511 } 
	tGC_msg_t
;

3514 
	mGC_MP_NORMAL
, 
	mGC_MP_DISCARDING
, 
	mGC_MP_STOPPED


3515 } 
	tGC_m¥Ÿe˘_°©e_t
;

3520 
	#ID_STOP
 1

	)

3521 
	#ID_RESUME
 2

	)

3524 
	#ID_ACK
 3

	)

3526 #i‡
deföed
(
THREADS
)

3528 
GC_m¥Ÿe˘_°©e_t
 
	gGC_m¥Ÿe˘_°©e
;

3531 
	$GC_m¥Ÿe˘_thªad_nŸify
(
mach_msg_id_t
 
id
)

3535 
GC_msg_t
 
msg
;

3536 
mach_msg_åaûî_t
 
åaûî
;

3537 } 
buf
;

3539 
mach_msg_ªtu∫_t
 
r
;

3541 
buf
.
msg
.
hód
.
msgh_bôs
 = 
	`MACH_MSGH_BITS
(
MACH_MSG_TYPE_MAKE_SEND
, 0);

3542 
buf
.
msg
.
hód
.
msgh_size
 = (buf.msg);

3543 
buf
.
msg
.
hód
.
msgh_ªmŸe_p‹t
 = 
GC_p‹ts
.
ex˚±i⁄
;

3544 
buf
.
msg
.
hód
.
msgh_loˇl_p‹t
 = 
MACH_PORT_NULL
;

3545 
buf
.
msg
.
hód
.
msgh_id
 = 
id
;

3547 
r
 = 
	`mach_msg
(&
buf
.
msg
.
hód
, 
MACH_SEND_MSG
 | 
MACH_RCV_MSG
 | 
MACH_RCV_LARGE
,

3548 (
buf
.
msg
), (buf), 
GC_p‹ts
.
ª∂y
,

3549 
MACH_MSG_TIMEOUT_NONE
, 
MACH_PORT_NULL
);

3550 if(
r
 !
MACH_MSG_SUCCESS
)

3551 
	`ABORT
("mach_msg failed in GC_mprotect_thread_notify");

3552 if(
buf
.
msg
.
hód
.
msgh_id
 !
ID_ACK
)

3553 
	`ABORT
("invalidáck in GC_mprotect_thread_notify");

3554 
	}
}

3557 
	$GC_m¥Ÿe˘_thªad_ª∂y
()

3560 
GC_msg_t
 
msg
;

3561 
mach_msg_ªtu∫_t
 
r
;

3563 
msg
.
hód
.
msgh_bôs
 = 
	`MACH_MSGH_BITS
(
MACH_MSG_TYPE_MAKE_SEND
, 0);

3564 
msg
.
hód
.
msgh_size
 = (msg);

3565 
msg
.
hód
.
msgh_ªmŸe_p‹t
 = 
GC_p‹ts
.
ª∂y
;

3566 
msg
.
hód
.
msgh_loˇl_p‹t
 = 
MACH_PORT_NULL
;

3567 
msg
.
hód
.
msgh_id
 = 
ID_ACK
;

3569 
r
 = 
	`mach_msg
(&
msg
.
hód
, 
MACH_SEND_MSG
, (msg), 0, 
MACH_PORT_NULL
,

3570 
MACH_MSG_TIMEOUT_NONE
, 
MACH_PORT_NULL
);

3571 if(
r
 !
MACH_MSG_SUCCESS
)

3572 
	`ABORT
("mach_msg failed in GC_mprotect_thread_reply");

3573 
	}
}

3575 
	$GC_m¥Ÿe˘_°›
()

3577 
	`GC_m¥Ÿe˘_thªad_nŸify
(
ID_STOP
);

3578 
	}
}

3579 
	$GC_m¥Ÿe˘_ªsume
()

3581 
	`GC_m¥Ÿe˘_thªad_nŸify
(
ID_RESUME
);

3582 
	}
}

3586 
	#GC_m¥Ÿe˘_°©e
 
GC_MP_NORMAL


	)

3589 *
	$GC_m¥Ÿe˘_thªad
(*
¨g
)

3591 
mach_msg_ªtu∫_t
 
r
;

3596 
mach_msg_hódî_t
 
hód
;

3597 
d©a
[256];

3598 } 
ª∂y
;

3600 
mach_msg_hódî_t
 
hód
;

3601 
mach_msg_body_t
 
msgh_body
;

3602 
d©a
[1024];

3603 } 
msg
;

3605 
mach_msg_id_t
 
id
;

3607 
	`GC_d¨wö_ªgi°î_mach_h™dÀr_thªad
(
	`mach_thªad_£lf
());

3610 
r
 = 
	`mach_msg
(&
msg
.
hód
, 
MACH_RCV_MSG
 | 
MACH_RCV_LARGE
 |

3611 (
GC_m¥Ÿe˘_°©e
 =
GC_MP_DISCARDING
 ? 
MACH_RCV_TIMEOUT
 : 0),

3612 0, (
msg
), 
GC_p‹ts
.
ex˚±i⁄
,

3613 
GC_m¥Ÿe˘_°©e
 =
GC_MP_DISCARDING
 ? 0

3614 : 
MACH_MSG_TIMEOUT_NONE
, 
MACH_PORT_NULL
);

3616 
id
 = 
r
 =
MACH_MSG_SUCCESS
 ? 
msg
.
hód
.
msgh_id
 : -1;

3618 #i‡
	`deföed
(
THREADS
)

3619 if(
GC_m¥Ÿe˘_°©e
 =
GC_MP_DISCARDING
) {

3620 if(
r
 =
MACH_RCV_TIMED_OUT
) {

3621 
GC_m¥Ÿe˘_°©e
 = 
GC_MP_STOPPED
;

3622 
	`GC_m¥Ÿe˘_thªad_ª∂y
();

3625 if(
r
 =
MACH_MSG_SUCCESS
 && (
id
 =
ID_STOP
 || id =
ID_RESUME
))

3626 
	`ABORT
("out of order mprotectÅhreadÑequest");

3630 if(
r
 !
MACH_MSG_SUCCESS
) {

3631 
	`GC_îr_¥ötf
("mach_msg faûed wôh %d %s\n", ()
r
,

3632 
	`mach_îr‹_°rög
(
r
));

3633 
	`ABORT
("mach_msg failed");

3636 
id
) {

3637 #i‡
	`deföed
(
THREADS
)

3638 
ID_STOP
:

3639 if(
GC_m¥Ÿe˘_°©e
 !
GC_MP_NORMAL
)

3640 
	`ABORT
("Called mprotect_stop when state wasn'tÇormal");

3641 
GC_m¥Ÿe˘_°©e
 = 
GC_MP_DISCARDING
;

3643 
ID_RESUME
:

3644 if(
GC_m¥Ÿe˘_°©e
 !
GC_MP_STOPPED
)

3645 
	`ABORT
("Called mprotect_resume when state wasn't stopped");

3646 
GC_m¥Ÿe˘_°©e
 = 
GC_MP_NORMAL
;

3647 
	`GC_m¥Ÿe˘_thªad_ª∂y
();

3652 if(!
	`exc_£rvî
(&
msg
.
hód
, &
ª∂y
.head))

3653 
	`ABORT
("exc_server failed");

3655 
r
 = 
	`mach_msg
(&
ª∂y
.
hód
, 
MACH_SEND_MSG
,Ñïly.hód.
msgh_size
, 0,

3656 
MACH_PORT_NULL
, 
MACH_MSG_TIMEOUT_NONE
,

3657 
MACH_PORT_NULL
);

3658 if(
r
 !
MACH_MSG_SUCCESS
) {

3661 #ifde‡
BROKEN_EXCEPTION_HANDLING


3662 
	`GC_îr_¥ötf
("mach_msg failed with %d %s while sending"

3663 "ex¯ª∂y\n", ()
r
,
	`mach_îr‹_°rög
(r));

3665 
	`ABORT
("mach_msg failed while sendingÉxceptionÑeply");

3671  
NULL
;

3672 
	}
}

3678 #ifde‡
BROKEN_EXCEPTION_HANDLING


3680 
SIG_HNDLR_PTR
 
	gGC_ﬁd_bus_h™dÀr
;

3684 
	gGC_sigbus_cou¡
;

3686 
	$GC_d¨wö_sigbus
(
num
, 
sigöfo_t
 *
sù
, *
c⁄ãxt
)

3688 if(
num
 !
SIGBUS
)

3689 
	`ABORT
("GotáÇon-sigbus signal inÅhe sigbus handler");

3694 if(
GC_sigbus_cou¡
 >= 8) {

3695 
	`ABORT
("Got moreÅhan 8 SIGBUSs ináÑow!");

3697 
GC_sigbus_cou¡
++;

3698 
	`WARN
("Ignoring SIGBUS.\n", 0);

3700 
	}
}

3703 
	$GC_dúty_öô
()

3705 
kîn_ªtu∫_t
 
r
;

3706 
mach_p‹t_t
 
me
;

3707 
±hªad_t
 
thªad
;

3708 
±hªad_©å_t
 
©å
;

3709 
ex˚±i⁄_mask_t
 
mask
;

3711 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

3712 
	`GC_log_¥ötf
("Inititalizing mach/darwin mprotect virtual dirty bit "

3714 #ifde‡
BROKEN_EXCEPTION_HANDLING


3715 
	`WARN
("Enabling workarounds for various darwin "

3718 
GC_dúty_maöèöed
 = 
TRUE
;

3719 i‡(
GC_∑ge_size
 % 
HBLKSIZE
 != 0) {

3720 
	`GC_îr_¥ötf
("Page sizeÇot multiple of HBLKSIZE\n");

3721 
	`ABORT
("Page sizeÇot multiple of HBLKSIZE");

3724 
GC_èsk_£lf
 = 
me
 = 
	`mach_èsk_£lf
();

3726 
r
 = 
	`mach_p‹t_Æloˇã
(
me
, 
MACH_PORT_RIGHT_RECEIVE
, &
GC_p‹ts
.
ex˚±i⁄
);

3727 if(
r
 !
KERN_SUCCESS
)

3728 
	`ABORT
("mach_port_allocate failed (exceptionÖort)");

3730 
r
 = 
	`mach_p‹t_ö£π_right
(
me
, 
GC_p‹ts
.
ex˚±i⁄
, GC_ports.exception,

3731 
MACH_MSG_TYPE_MAKE_SEND
);

3732 if(
r
 !
KERN_SUCCESS
)

3733 
	`ABORT
("mach_port_insert_right failed (exceptionÖort)");

3735 #i‡
	`deföed
(
THREADS
)

3736 
r
 = 
	`mach_p‹t_Æloˇã
(
me
, 
MACH_PORT_RIGHT_RECEIVE
, &
GC_p‹ts
.
ª∂y
);

3737 if(
r
 !
KERN_SUCCESS
)

3738 
	`ABORT
("mach_port_allocate failed (replyÖort)");

3742 
mask
 = 
EXC_MASK_BAD_ACCESS
;

3744 
r
 = 
	`èsk_gë_ex˚±i⁄_p‹ts
(
me
, 
mask
, 
GC_ﬁd_exc_p‹ts
.
masks
,

3745 &
GC_ﬁd_exc_p‹ts
.
cou¡
, GC_ﬁd_exc_p‹ts.
p‹ts
,

3746 
GC_ﬁd_exc_p‹ts
.
behavi‹s
,

3747 
GC_ﬁd_exc_p‹ts
.
Êav‹s
);

3748 if(
r
 !
KERN_SUCCESS
)

3749 
	`ABORT
("task_get_exception_ports failed");

3751 
r
 = 
	`èsk_£t_ex˚±i⁄_p‹ts
(
me
, 
mask
, 
GC_p‹ts
.
ex˚±i⁄
, 
EXCEPTION_DEFAULT
,

3752 
GC_MACH_THREAD_STATE
);

3753 if(
r
 !
KERN_SUCCESS
)

3754 
	`ABORT
("task_set_exception_ports failed");

3755 if(
	`±hªad_©å_öô
(&
©å
) != 0)

3756 
	`ABORT
("pthread_attr_init failed");

3757 if(
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_DETACHED
) != 0)

3758 
	`ABORT
("pthread_attr_setdetachedstate failed");

3760 #unde‡
±hªad_¸óã


3762 if(
	`±hªad_¸óã
(&
thªad
, &
©å
, 
GC_m¥Ÿe˘_thªad
, 
NULL
) != 0)

3763 
	`ABORT
("pthread_create failed");

3764 
	`±hªad_©å_de°roy
(&
©å
);

3767 #ifde‡
BROKEN_EXCEPTION_HANDLING


3769 
siga˘i⁄
 
ß
, 
ﬁdß
;

3770 
ß
.
ß_h™dÀr
 = (
SIG_HNDLR_PTR
)
GC_d¨wö_sigbus
;

3771 
	`sigem±y£t
(&
ß
.
ß_mask
);

3772 
ß
.
ß_Êags
 = 
SA_RESTART
|
SA_SIGINFO
;

3773 if(
	`siga˘i⁄
(
SIGBUS
, &
ß
, &
ﬁdß
) < 0)

3774 
	`ABORT
("sigaction");

3775 
GC_ﬁd_bus_h™dÀr
 = (
SIG_HNDLR_PTR
)
ﬁdß
.
ß_h™dÀr
;

3776 i‡(
GC_ﬁd_bus_h™dÀr
 !
SIG_DFL
) {

3777 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

3778 
	`GC_îr_¥ötf
("Replaced other SIGBUS handler\n");

3782 
	}
}

3787 
kîn_ªtu∫_t
 
	$GC_f‹w¨d_ex˚±i⁄
(
mach_p‹t_t
 
thªad
, mach_p‹t_à
èsk
,

3788 
ex˚±i⁄_ty≥_t
 
ex˚±i⁄
,

3789 
ex˚±i⁄_d©a_t
 
d©a
,

3790 
mach_msg_ty≥_numbî_t
 
d©a_cou¡
)

3792 
i
;

3793 
kîn_ªtu∫_t
 
r
;

3794 
mach_p‹t_t
 
p‹t
;

3795 
ex˚±i⁄_behavi‹_t
 
behavi‹
;

3796 
thªad_°©e_Êav‹_t
 
Êav‹
;

3798 
thªad_°©e_t
 
thªad_°©e
 = 
NULL
;

3799 
mach_msg_ty≥_numbî_t
 
thªad_°©e_cou¡
 = 
THREAD_STATE_MAX
;

3801 
i
=0; i < 
GC_ﬁd_exc_p‹ts
.
cou¡
; i++)

3802 if(
GC_ﬁd_exc_p‹ts
.
masks
[
i
] & (1 << 
ex˚±i⁄
))

3804 if(
i
==
GC_ﬁd_exc_p‹ts
.
cou¡
)

3805 
	`ABORT
("No handler forÉxception!");

3807 
p‹t
 = 
GC_ﬁd_exc_p‹ts
.
p‹ts
[
i
];

3808 
behavi‹
 = 
GC_ﬁd_exc_p‹ts
.
behavi‹s
[
i
];

3809 
Êav‹
 = 
GC_ﬁd_exc_p‹ts
.
Êav‹s
[
i
];

3811 if(
behavi‹
 !
EXCEPTION_DEFAULT
) {

3812 
r
 = 
	`thªad_gë_°©e
(
thªad
, 
Êav‹
, 
thªad_°©e
, &
thªad_°©e_cou¡
);

3813 if(
r
 !
KERN_SUCCESS
)

3814 
	`ABORT
("thread_get_state failed in forward_exception");

3817 
behavi‹
) {

3818 
EXCEPTION_DEFAULT
:

3819 
r
 = 
	`ex˚±i⁄_øi£
(
p‹t
, 
thªad
, 
èsk
, 
ex˚±i⁄
, 
d©a
, 
d©a_cou¡
);

3821 
EXCEPTION_STATE
:

3822 
r
 = 
	`ex˚±i⁄_øi£_°©e
(
p‹t
, 
thªad
, 
èsk
, 
ex˚±i⁄
, 
d©a
, 
d©a_cou¡
,

3823 &
Êav‹
, 
thªad_°©e
, 
thªad_°©e_cou¡
,

3824 
thªad_°©e
, &
thªad_°©e_cou¡
);

3826 
EXCEPTION_STATE_IDENTITY
:

3827 
r
 = 
	`ex˚±i⁄_øi£_°©e_idítôy
(
p‹t
, 
thªad
, 
èsk
, 
ex˚±i⁄
, 
d©a
,

3828 
d©a_cou¡
, &
Êav‹
, 
thªad_°©e
,

3829 
thªad_°©e_cou¡
, 
thªad_°©e
,

3830 &
thªad_°©e_cou¡
);

3833 
r
 = 
KERN_FAILURE
;

3834 
	`ABORT
("forward_exception: unknown behavior");

3838 if(
behavi‹
 !
EXCEPTION_DEFAULT
) {

3839 
r
 = 
	`thªad_£t_°©e
(
thªad
, 
Êav‹
, 
thªad_°©e
, 
thªad_°©e_cou¡
);

3840 if(
r
 !
KERN_SUCCESS
)

3841 
	`ABORT
("thread_set_state failed in forward_exception");

3844  
r
;

3845 
	}
}

3847 
	#FWD
(Ë
	`GC_f‹w¨d_ex˚±i⁄
(
thªad
, 
èsk
, 
ex˚±i⁄
, 
code
, 
code_cou¡
)

	)

3851 
kîn_ªtu∫_t


3852 
	$ˇtch_ex˚±i⁄_øi£
(
mach_p‹t_t
 
ex˚±i⁄_p‹t
, mach_p‹t_à
thªad
,

3853 
mach_p‹t_t
 
èsk
, 
ex˚±i⁄_ty≥_t
 
ex˚±i⁄
,

3854 
ex˚±i⁄_d©a_t
 
code
, 
mach_msg_ty≥_numbî_t
 
code_cou¡
)

3856 
kîn_ªtu∫_t
 
r
;

3857 *
addr
;

3858 
hblk
 *
h
;

3859 
i
;

3860 #i‡
	`deföed
(
POWERPC
)

3861 #i‡
CPP_WORDSZ
 == 32

3862 
thªad_°©e_Êav‹_t
 
Êav‹
 = 
PPC_EXCEPTION_STATE
;

3863 
mach_msg_ty≥_numbî_t
 
exc_°©e_cou¡
 = 
PPC_EXCEPTION_STATE_COUNT
;

3864 
µc_ex˚±i⁄_°©e_t
 
exc_°©e
;

3866 
thªad_°©e_Êav‹_t
 
Êav‹
 = 
PPC_EXCEPTION_STATE64
;

3867 
mach_msg_ty≥_numbî_t
 
exc_°©e_cou¡
 = 
PPC_EXCEPTION_STATE64_COUNT
;

3868 
µc_ex˚±i⁄_°©e64_t
 
exc_°©e
;

3870 #ñi‡
	`deföed
(
I386
Ë|| deföed(
X86_64
)

3871 #i‡
CPP_WORDSZ
 == 32

3872 
thªad_°©e_Êav‹_t
 
Êav‹
 = 
x86_EXCEPTION_STATE32
;

3873 
mach_msg_ty≥_numbî_t
 
exc_°©e_cou¡
 = 
x86_EXCEPTION_STATE32_COUNT
;

3874 
x86_ex˚±i⁄_°©e32_t
 
exc_°©e
;

3876 
thªad_°©e_Êav‹_t
 
Êav‹
 = 
x86_EXCEPTION_STATE64
;

3877 
mach_msg_ty≥_numbî_t
 
exc_°©e_cou¡
 = 
x86_EXCEPTION_STATE64_COUNT
;

3878 
x86_ex˚±i⁄_°©e64_t
 
exc_°©e
;

3881 #îr‹ 
FIXME
 
n⁄
-
µc
/
x86
 
d¨wö


3885 if(
ex˚±i⁄
 !
EXC_BAD_ACCESS
 || 
code
[0] !
KERN_PROTECTION_FAILURE
) {

3886 #ifde‡
DEBUG_EXCEPTION_HANDLING


3888 
	`GC_¥ötf
("Ex˚±i⁄: 0x%x Code: 0x%x 0x%x i¿ˇtch....\n", 
ex˚±i⁄
,

3889 
code_cou¡
 > 0 ? 
code
[0] : -1, code_count > 1 ? code[1] : -1);

3891  
	`FWD
();

3894 
r
 = 
	`thªad_gë_°©e
(
thªad
, 
Êav‹
, (
«tuøl_t
*)&
exc_°©e
,

3895 &
exc_°©e_cou¡
);

3896 if(
r
 !
KERN_SUCCESS
) {

3899 #ifde‡
BROKEN_EXCEPTION_HANDLING


3900 
	`GC_îr_¥ötf
("thread_get_state failed in catch_exception_raise\n");

3901  
KERN_SUCCESS
;

3903 
	`ABORT
("thread_get_state failed in catch_exception_raise");

3908 #i‡
	`deföed
(
POWERPC
)

3909 
addr
 = (*Ë
exc_°©e
. 
	`THREAD_FLD
(
d¨
);

3910 #ñi‡
	`deföed
 (
I386
Ë|| deföed (
X86_64
)

3911 
addr
 = (*Ë
exc_°©e
. 
	`THREAD_FLD
(
Áu…vaddr
);

3913 #îr‹ 
FIXME
 
n⁄
 
POWERPC
/
I386


3916 if((
	`HDR
(
addr
)) == 0) {

3922 #ifde‡
BROKEN_EXCEPTION_HANDLING


3923 *
œ°_Áu…
;

3924 
œ°_Áu…_cou¡
;

3926 if(
addr
 !
œ°_Áu…
) {

3927 
œ°_Áu…
 = 
addr
;

3928 
œ°_Áu…_cou¡
 = 0;

3930 if(++
œ°_Áu…_cou¡
 < 32) {

3931 if(
œ°_Áu…_cou¡
 == 1)

3932 
	`WARN
("Ign‹ög KERN_PROTECTION_FAILUREáà%lx\n", (
GC_w‹d
)
addr
);

3933  
KERN_SUCCESS
;

3936 
	`GC_îr_¥ötf
("U√x≥˘ed KERN_PROTECTION_FAILUREáà%p\n",
addr
);

3940 
	`GC_îr_¥ötf
("Aborting\n");

3941 
	`exô
(
EXIT_FAILURE
);

3945  
	`FWD
();

3949 #ifde‡
BROKEN_EXCEPTION_HANDLING


3951 
GC_sigbus_cou¡
 = 0;

3954 if(
GC_m¥Ÿe˘_°©e
 =
GC_MP_NORMAL
) {

3955 
h
 = (
hblk
*)((
w‹d
)
addr
 & ~(
GC_∑ge_size
-1));

3956 
	`UNPROTECT
(
h
, 
GC_∑ge_size
);

3957 
i
 = 0; i < 
	`divHBLKSZ
(
GC_∑ge_size
); i++) {

3958 
ödex
 = 
	`PHT_HASH
(
h
+
i
);

3959 
	`async_£t_pht_íåy_‰om_ödex
(
GC_dúty_∑ges
, 
ödex
);

3961 } if(
GC_m¥Ÿe˘_°©e
 =
GC_MP_DISCARDING
) {

3967 
	`GC_¥ötf
("KERN_PROTECTION_FAILURE while world is stopped\n");

3968  
	`FWD
();

3970  
KERN_SUCCESS
;

3971 
	}
}

3972 #unde‡
FWD


3975 
kîn_ªtu∫_t


3976 
	$ˇtch_ex˚±i⁄_øi£_°©e
(
mach_p‹t_«me_t
 
ex˚±i⁄_p‹t
, 
ex˚±i⁄
,

3977 
ex˚±i⁄_d©a_t
 
code
,

3978 
mach_msg_ty≥_numbî_t
 
codeC¡
, 
Êav‹
,

3979 
thªad_°©e_t
 
ﬁd_°©e
, 
ﬁd_°©eC¡
,

3980 
thªad_°©e_t
 
√w_°©e
, 
√w_°©eC¡
)

3982 
	`ABORT
("catch_exception_raise_state");

3983 (
KERN_INVALID_ARGUMENT
);

3984 
	}
}

3986 
kîn_ªtu∫_t


3987 
	$ˇtch_ex˚±i⁄_øi£_°©e_idítôy
(
mach_p‹t_«me_t
 
ex˚±i⁄_p‹t
,

3988 
mach_p‹t_t
 
thªad
, mach_p‹t_à
èsk
,

3989 
ex˚±i⁄
, 
ex˚±i⁄_d©a_t
 
code
,

3990 
mach_msg_ty≥_numbî_t
 
codeC¡
, 
Êav‹
,

3991 
thªad_°©e_t
 
ﬁd_°©e
, 
ﬁd_°©eC¡
,

3992 
thªad_°©e_t
 
√w_°©e
, 
√w_°©eC¡
)

3994 
	`ABORT
("catch_exception_raise_state_identity");

3995 (
KERN_INVALID_ARGUMENT
);

3996 
	}
}

4001 #i‚de‡
HAVE_INCREMENTAL_PROTECTION_NEEDS


4002 
	$GC_ö¸emíèl_¥Ÿe˘i⁄_√eds
()

4004  
GC_PROTECTS_NONE
;

4005 
	}
}

4016 #i‡
deföed
(
I386
Ë&& deföed(
LINUX
Ë&& deföed(
SAVE_CALL_CHAIN
)

4017 
	~<„©uªs.h
>

4019 
	s‰ame
 {

4020 
‰ame
 *
	m‰_ßvÂ
;

4021 
	m‰_ßvpc
;

4022 
	m‰_¨g
[
NARGS
];

4026 #i‡
deföed
(
SPARC
)

4027 #i‡
deföed
(
LINUX
)

4028 
	~<„©uªs.h
>

4030 
	s‰ame
 {

4031 
	m‰_loˇl
[8];

4032 
	m‰_¨g
[6];

4033 
‰ame
 *
	m‰_ßvÂ
;

4034 
	m‰_ßvpc
;

4035 #i‚de‡
__¨ch64__


4036 *
	m‰_°ªt
;

4038 
	m‰_¨gd
[6];

4039 
	m‰_¨gx
[0];

4041 #ñi‡
deföed
 (
DRSNX
)

4042 
	~<sys/•¨c/‰ame.h
>

4043 #ñi‡
deföed
(
OPENBSD
)

4044 
	~<‰ame.h
>

4045 #ñi‡
deföed
(
FREEBSD
Ë|| deföed(
NETBSD
)

4046 
	~<machöe/‰ame.h
>

4048 
	~<sys/‰ame.h
>

4050 #i‡
NARGS
 > 6

4051 #îr‹ 
We
 
⁄ly
 
know
 
how
 
to
Åÿ
gë
 
the
 
fú°
 6 
¨gumíts


4055 #ifde‡ 
NEED_CALLINFO


4059 #ifde‡
LINUX


4060 
	~<uni°d.h
>

4065 #i‡
deföed
(
GC_HAVE_BUILTIN_BACKTRACE
)

4066 #ifde‡
_MSC_VER


4067 
	~"¥iv©e/msvc_dbg.h
"

4069 
	~<execöfo.h
>

4073 #ifde‡
SAVE_CALL_CHAIN


4075 #i‡
NARGS
 =0 && 
NFRAMES
 % 2 == 0 \

4076 && 
	$deföed
(
GC_HAVE_BUILTIN_BACKTRACE
)

4078 #ifde‡
REDIRECT_MALLOC


4081 #ifde‡
THREADS


4082 
__thªad


4085 
GC_ö_ßve_ˇŒîs
 = 
FALSE
;

4088 
	$GC_ßve_ˇŒîs
 (
ˇŒöfo
 
öfo
[
NFRAMES
])

4090 * 
tmp_öfo
[
NFRAMES
 + 1];

4091 
≈cs
, 
i
;

4092 
	#IGNORE_FRAMES
 1

	)

4096 #ifde‡
REDIRECT_MALLOC


4097 i‡(
GC_ö_ßve_ˇŒîs
) {

4098 
öfo
[0].
ci_pc
 = (
w‹d
)(&
GC_ßve_ˇŒîs
);

4099 
i
 = 1; i < 
NFRAMES
; ++iË
öfo
[i].
ci_pc
 = 0;

4102 
GC_ö_ßve_ˇŒîs
 = 
TRUE
;

4104 
	`GC_ASSERT
((
ˇŒöfo
) == (*));

4105 
≈cs
 = 
	`backåa˚
((**)
tmp_öfo
, 
NFRAMES
 + 
IGNORE_FRAMES
);

4106 
	`BCOPY
(
tmp_öfo
+
IGNORE_FRAMES
, 
öfo
, (
≈cs
 - IGNORE_FRAMES) * (*));

4107 
i
 = 
≈cs
 - 
IGNORE_FRAMES
; i < 
NFRAMES
; ++iË
öfo
[i].
ci_pc
 = 0;

4108 #ifde‡
REDIRECT_MALLOC


4109 
GC_ö_ßve_ˇŒîs
 = 
FALSE
;

4111 
	}
}

4115 #i‡(
deföed
(
OPENBSD
Ë|| deföed(
NETBSD
Ë|| deföed(
FREEBSD
)Ë&& deföed(
SPARC
)

4116 
	#FR_SAVFP
 
‰_Â


	)

4117 
	#FR_SAVPC
 
‰_pc


	)

4119 
	#FR_SAVFP
 
‰_ßvÂ


	)

4120 
	#FR_SAVPC
 
‰_ßvpc


	)

4123 #i‡
deföed
(
SPARC
Ë&& (deföed(
__¨ch64__
Ë|| deföed(
__•¨cv9
))

4124 
	#BIAS
 2047

	)

4126 
	#BIAS
 0

	)

4129 
	$GC_ßve_ˇŒîs
 (
ˇŒöfo
 
öfo
[
NFRAMES
])

4131 
‰ame
 *frame;

4132 
‰ame
 *
Â
;

4133 
n‰ames
 = 0;

4134 #ifde‡
I386


4136 
	`asm
("mov»%%ebp,%0" : "Ù"(
‰ame
));

4137 
Â
 = 
‰ame
;

4139 
‰ame
 = (‰amê*Ë
	`GC_ßve_ªgs_ö_°ack
 ();

4140 
Â
 = (
‰ame
 *)((Ë‰amê-> 
FR_SAVFP
 + 
BIAS
);

4143 ; (!(
Â
 
HOTTER_THAN
 
‰ame
Ë&& !(
GC_°ackbŸtom
 
	`HOTTER_THAN
 (
±r_t
)fp)

4144 && (
n‰ames
 < 
NFRAMES
));

4145 
Â
 = (
‰ame
 *)((ËÂ -> 
FR_SAVFP
 + 
BIAS
), 
n‰ames
++) {

4146 
i
;

4148 
öfo
[
n‰ames
].
ci_pc
 = 
Â
->
FR_SAVPC
;

4149 #i‡
NARGS
 > 0

4150 
i
 = 0; i < 
NARGS
; i++) {

4151 
öfo
[
n‰ames
].
ci_¨g
[
i
] = ~(
Â
->
‰_¨g
[i]);

4155 i‡(
n‰ames
 < 
NFRAMES
Ë
öfo
[n‰ames].
ci_pc
 = 0;

4156 
	}
}

4162 #ifde‡
NEED_CALLINFO


4165 
	$GC_¥öt_ˇŒîs
 (
ˇŒöfo
 
öfo
[
NFRAMES
])

4167 
i
;

4168 
ªíåy_cou¡
 = 0;

4169 
GC_boﬁ
 
°›
 = 
FALSE
;

4173 
	`LOCK
();

4174 ++
ªíåy_cou¡
;

4175 
	`UNLOCK
();

4177 #i‡
NFRAMES
 == 1

4178 
	`GC_îr_¥ötf
("\tCallerátállocation:\n");

4180 
	`GC_îr_¥ötf
("\tCall chainátállocation:\n");

4182 
i
 = 0; i < 
NFRAMES
 && !
°›
 ; i++) {

4183 i‡(
öfo
[
i
].
ci_pc
 == 0) ;

4184 #i‡
NARGS
 > 0

4186 
j
;

4188 
	`GC_îr_¥ötf
("\t\targs: ");

4189 
j
 = 0; j < 
NARGS
; j++) {

4190 i‡(
j
 !0Ë
	`GC_îr_¥ötf
(", ");

4191 
	`GC_îr_¥ötf
("%d (0x%X)", ~(
öfo
[
i
].
ci_¨g
[
j
]),

4192 ~(
öfo
[
i
].
ci_¨g
[
j
]));

4194 
	`GC_îr_¥ötf
("\n");

4197 i‡(
ªíåy_cou¡
 > 1) {

4200 
	`GC_îr_¥ötf
("\t\t##PC##0x%lx\n", 
öfo
[
i
].
ci_pc
);

4204 #ifde‡
LINUX


4205 
FILE
 *
pùe
;

4207 #i‡
	`deföed
(
GC_HAVE_BUILTIN_BACKTRACE
) \

4208 && !
	`deföed
(
GC_BACKTRACE_SYMBOLS_BROKEN
)

4209 **
sym_«me
 =

4210 
	`backåa˚_symbﬁs
((**)(&(
öfo
[
i
].
ci_pc
)), 1);

4211 *
«me
 = 
sym_«me
[0];

4213 
buf
[40];

4214 *
«me
 = 
buf
;

4215 
	`•rötf
(
buf
, "##PC##0x%lx", 
öfo
[
i
].
ci_pc
);

4217 #i‡
	`deföed
(
LINUX
Ë&& !deföed(
SMALL_CONFIG
)

4220 
	#EXE_SZ
 100

	)

4221 
exe_«me
[
EXE_SZ
];

4222 
	#CMD_SZ
 200

	)

4223 
cmd_buf
[
CMD_SZ
];

4224 
	#RESULT_SZ
 200

	)

4225 
ªsu…_buf
[
RESULT_SZ
];

4226 
size_t
 
ªsu…_Àn
;

4227 *
ﬁd_¥ñﬂd
;

4228 
	#PRELOAD_SZ
 200

	)

4229 
¥ñﬂd_buf
[
PRELOAD_SZ
];

4230 
GC_boﬁ
 
found_exe_«me
 = 
FALSE
;

4231 
GC_boﬁ
 
wûl_Áû
 = 
FALSE
;

4232 
ªt_code
;

4235 i‡(
wûl_Áû
Ë
out
;

4236 i‡(!
found_exe_«me
) {

4237 
ªt_code
 = 
	`ªadlök
("/¥oc/£lf/exe", 
exe_«me
, 
EXE_SZ
);

4238 i‡(
ªt_code
 < 0 ||Ñë_codê>
EXE_SZ


4239 || 
exe_«me
[0] != '/') {

4240 
wûl_Áû
 = 
TRUE
;

4241 
out
;

4243 
exe_«me
[
ªt_code
] = '\0';

4244 
found_exe_«me
 = 
TRUE
;

4249 
	`•rötf
(
cmd_buf
, "/u§/bö/addr2löê-‡-ê%†0x%lx", 
exe_«me
,

4250 ()
öfo
[
i
].
ci_pc
);

4251 
ﬁd_¥ñﬂd
 = 
	`gëív
 ("LD_PRELOAD");

4252 i‡(0 !
ﬁd_¥ñﬂd
) {

4253 i‡(
	`°æí
 (
ﬁd_¥ñﬂd
Ë>
PRELOAD_SZ
) {

4254 
wûl_Áû
 = 
TRUE
;

4255 
out
;

4257 
	`°r˝y
 (
¥ñﬂd_buf
, 
ﬁd_¥ñﬂd
);

4258 
	`un£ãnv
 ("LD_PRELOAD");

4260 
pùe
 = 
	`p›í
(
cmd_buf
, "r");

4261 i‡(0 !
ﬁd_¥ñﬂd


4262 && 0 !
	`£ãnv
 ("LD_PRELOAD", 
¥ñﬂd_buf
, 0)) {

4263 
	`WARN
("FailedÅoÑeset LD_PRELOAD\n", 0);

4265 i‡(
pùe
 =
NULL


4266 || (
ªsu…_Àn
 = 
	`‰ód
(
ªsu…_buf
, 1, 
RESULT_SZ
 - 1, 
pùe
))

4268 i‡(
pùe
 !
NULL
Ë
	`p˛o£
(pipe);

4269 
wûl_Áû
 = 
TRUE
;

4270 
out
;

4272 i‡(
ªsu…_buf
[
ªsu…_Àn
 - 1] == '\n') --result_len;

4273 
ªsu…_buf
[
ªsu…_Àn
] = 0;

4274 i‡(
ªsu…_buf
[0] == '?'

4275 || (
ªsu…_buf
[
ªsu…_Àn
-2] == ':'

4276 && 
ªsu…_buf
[
ªsu…_Àn
-1] == '0')) {

4277 
	`p˛o£
(
pùe
);

4278 
out
;

4282 * 
∆
 = 
	`°rchr
(
ªsu…_buf
, '\n');

4283 i‡(
∆
 !
NULL
 &&Ç»< 
ªsu…_buf
 + 
ªsu…_Àn
) {

4284 *
∆
 = ':';

4286 i‡(
	`°∫cmp
(
ªsu…_buf
, "maö", 
∆
 -Ñesult_buf) == 0) {

4287 
°›
 = 
TRUE
;

4290 i‡(
ªsu…_Àn
 < 
RESULT_SZ
 - 25) {

4292 
	`•rötf
(
ªsu…_buf
 + 
ªsu…_Àn
, " [0x%lx]",

4293 ()
öfo
[
i
].
ci_pc
);

4295 
«me
 = 
ªsu…_buf
;

4296 
	`p˛o£
(
pùe
);

4297 
out
:;

4300 
	`GC_îr_¥ötf
("\t\t%s\n", 
«me
);

4301 #i‡
	`deföed
(
GC_HAVE_BUILTIN_BACKTRACE
) \

4302 && !
	`deföed
(
GC_BACKTRACE_SYMBOLS_BROKEN
)

4303 
	`‰ì
(
sym_«me
);

4307 
	`LOCK
();

4308 --
ªíåy_cou¡
;

4309 
	`UNLOCK
();

4310 
	}
}

4316 #i‡
deföed
(
LINUX
Ë&& deföed(
__ELF__
Ë&& !deföed(
SMALL_CONFIG
)

4321 
w‹d
 
	$dump_m≠s
(*
m≠s
)

4323 
	`GC_îr_wrôe
(
m≠s
, 
	`°æí
(maps));

4325 
	}
}

4327 
	$GC_¥öt_addªss_m≠
()

4329 
	`GC_îr_¥ötf
("---------- Begináddress map ----------\n");

4330 
	`dump_m≠s
(
	`GC_gë_m≠s
());

4331 
	`GC_îr_¥ötf
("---------- Endáddress map ----------\n");

4332 
	}
}

	@pcr_interface.c

13 
	~"¥iv©e/gc_¥iv.h
"

15 #ifde‡
PCR


22 
	~"c⁄fig/PCR_StdTy≥s.h
"

23 
	~"mm/PCR_MM.h
"

24 
	~<î∫o.h
>

26 
	#MY_MAGIC
 17L

	)

27 
	#MY_DEBUGMAGIC
 42L

	)

29 * 
	$GC_AŒocProc
(
size_t
 
size
, 
PCR_Boﬁ
 
±rFªe
, PCR_Boﬁ 
˛ór
 )

31 i‡(
±rFªe
) {

32 * 
ªsu…
 = (*)
	`GC_mÆloc_©omic
(
size
);

33 i‡(
˛ór
 && 
ªsu…
 !0Ë
	`BZERO
‘esu…, 
size
);

34 (
ªsu…
);

36 ((*)
	`GC_mÆloc
(
size
));

38 
	}
}

40 * 
	$GC_DebugAŒocProc
(
size_t
 
size
, 
PCR_Boﬁ
 
±rFªe
, PCR_Boﬁ 
˛ór
 )

42 i‡(
±rFªe
) {

43 * 
ªsu…
 = (*)
	`GC_debug_mÆloc_©omic
(
size
, 
__FILE__
,

44 
__LINE__
);

45 i‡(
˛ór
 && 
ªsu…
 !0Ë
	`BZERO
‘esu…, 
size
);

46 (
ªsu…
);

48 ((*)
	`GC_debug_mÆloc
(
size
, 
__FILE__
, 
__LINE__
));

50 
	}
}

52 
	#GC_RóŒocProc
 
GC_ªÆloc


	)

53 * 
	$GC_DebugRóŒocProc
(* 
ﬁd_obje˘
, 
size_t
 
√w_size_ö_byãs
)

55 (
	`GC_debug_ªÆloc
(
ﬁd_obje˘
, 
√w_size_ö_byãs
, 
__FILE__
, 
__LINE__
));

56 
	}
}

58 
	#GC_FªeProc
 
GC_‰ì


	)

59 
	#GC_DebugFªeProc
 
GC_debug_‰ì


	)

62 
PCR_ERes
 (*
ed_¥oc
)(*
	mp
, 
size_t
 
	msize
, 
PCR_Any
 
	md©a
);

63 
GC_boﬁ
 
	med_poöãr‰ì
;

64 
PCR_ERes
 
	med_Áû_code
;

65 
PCR_Any
 
	med_˛õ¡_d©a
;

66 } 
	tíumî©e_d©a
;

68 
GC_íumî©e_block
(
hblk
 *
h
; 
íumî©e_d©a
 * 
ed
)

70 
hdr
 * 
	ghhdr
;

71 
	gsz
;

72 
±r_t
 
	gp
;

73 
±r_t
 
	glim
;

74 
w‹d
 
	gdes¸
;

75 #îr‹ 
This
 
code
 
was
 
upd©ed
 
wôhout
 
ã°ög
.

76 #îr‹ 
™d
 
ôs
 
¥ecurs‹
 
was
 
˛óæy
 
brokí
.

78 
	ghhdr
 = 
HDR
(
h
);

79 
	gdes¸
 = 
hhdr
 -> 
hb_des¸
;

80 
	gsz
 = 
hhdr
 -> 
hb_sz
;

81 i‡(
	gdes¸
 !0 && 
ed
 -> 
ed_poöãr‰ì


82 || 
des¸
 =0 && !(
ed
 -> 
ed_poöãr‰ì
)) ;

83 
	glim
 = (
±r_t
)(
h
+1Ë- 
sz
;

84 
	gp
 = (
±r_t
)
h
;

86 i‡(
PCR_ERes_IsEº
(
ed
 -> 
ed_Áû_code
)) ;

87 
	ged
 -> 
	ged_Áû_code
 =

88 (*(
ed
 -> 
ed_¥oc
))(
p
, 
	gsz
, 
	ged
 -> 
	ged_˛õ¡_d©a
);

89 
	gp
+
sz
;

90 } 
	gp
 <
lim
);

93 
PCR_MM_ProcsRï
 * 
	gGC_ﬁd_Æloˇt‹
 = 0;

95 
PCR_ERes
 
GC_Enumî©eProc
(

96 
PCR_Boﬁ
 
±rFªe
,

97 
	$PCR_ERes
 (*
¥oc
)(*
p
, 
size_t
 
size
, 
PCR_Any
 
d©a
),

98 
PCR_Any
 
d©a


101 
íumî©e_d©a
 
ed
;

103 
ed
.
ed_¥oc
 = 
¥oc
;

104 
ed
.
ed_poöãr‰ì
 = 
±rFªe
;

105 
ed
.
ed_Áû_code
 = 
PCR_ERes_okay
;

106 
ed
.
ed_˛õ¡_d©a
 = 
d©a
;

107 
	`GC_≠∂y_to_Æl_blocks
(
GC_íumî©e_block
, &
ed
);

108 i‡(
ed
.
ed_Áû_code
 !
PCR_ERes_okay
) {

109 (
ed
.
ed_Áû_code
);

112 ((*(
GC_ﬁd_Æloˇt‹
->
mmp_íumî©e
))(
±rFªe
, 
¥oc
, 
d©a
));

114 
	}
}

116 
	$GC_DummyFªeProc
(*
p
Ë{
	}
}

118 
	$GC_DummyShutdownProc
(Ë{
	}
}

120 
PCR_MM_ProcsRï
 
	gGC_Rï
 = {

121 
MY_MAGIC
,

122 
GC_AŒocProc
,

123 
GC_RóŒocProc
,

124 
GC_DummyFªeProc
,

125 
GC_FªeProc
,

126 
GC_Enumî©eProc
,

127 
GC_DummyShutdownProc


130 
PCR_MM_ProcsRï
 
	gGC_DebugRï
 = {

131 
MY_DEBUGMAGIC
,

132 
GC_DebugAŒocProc
,

133 
GC_DebugRóŒocProc
,

134 
GC_DummyFªeProc
,

135 
GC_DebugFªeProc
,

136 
GC_Enumî©eProc
,

137 
GC_DummyShutdownProc


140 
GC_boﬁ
 
	gGC_u£_debug
 = 0;

142 
	$GC_p¸_ö°Æl
()

144 
	`PCR_MM_In°Æl
((
GC_u£_debug
? &
GC_DebugRï
 : &
GC_Rï
), &
GC_ﬁd_Æloˇt‹
);

145 
	}
}

147 
PCR_ERes


148 
	$PCR_GC_Sëup
()

150  
PCR_ERes_okay
;

151 
	}
}

153 
PCR_ERes


154 
	$PCR_GC_Run
()

157 if–!
	`PCR_Ba£_Te°PCRArg
("-nogc") ) {

158 
GC_quõt
 = ( 
	`PCR_Ba£_Te°PCRArg
("-gctrace") ? 0 : 1 );

159 
GC_u£_debug
 = (
GC_boﬁ
)
	`PCR_Ba£_Te°PCRArg
("-debug_alloc");

160 
	`GC_öô
();

161 if–!
	`PCR_Ba£_Te°PCRArg
("-nogc_incremental") ) {

165 if–
	`PCR_VD_Sèπ
–0, 
NIL
, 0Ë!
	`PCR_ERes_FromEº
(
ENOSYS
) ) {

166 
	`GC_íabÀ_ö¸emíèl
();

170  
PCR_ERes_okay
;

171 
	}
}

173 
	$GC_push_thªad_°ru˘uªs
()

176 
	`ABORT
("In GC_push_thread_structures()");

177 
	}
}

	@pthread_stop_world.c

1 
	~"¥iv©e/±hªad_suµ‹t.h
"

3 #i‡
deföed
(
GC_PTHREADS
Ë&& !deföed(
GC_WIN32_THREADS
) && \

4 !
	$deföed
(
GC_DARWIN_THREADS
)

6 
	~<sig«l.h
>

7 
	~<£m≠h‹e.h
>

8 
	~<î∫o.h
>

9 
	~<uni°d.h
>

10 
	~"©omic_›s.h
"

12 #i‡
DEBUG_THREADS


14 #i‚de‡
NSIG


15 #i‡
	`deföed
(
MAXSIG
)

16 
	#NSIG
 (
MAXSIG
+1)

	)

17 #ñi‡
	`deföed
(
_NSIG
)

18 
	#NSIG
 
_NSIG


	)

19 #ñi‡
	`deföed
(
__SIGRTMAX
)

20 
	#NSIG
 (
__SIGRTMAX
+1)

	)

22 --> 
∂ó£
 
fix
 
ô


26 
	$GC_¥öt_sig_mask
()

28 
sig£t_t
 
blocked
;

29 
i
;

31 i‡(
	`±hªad_sigmask
(
SIG_BLOCK
, 
NULL
, &
blocked
) != 0)

32 
	`ABORT
("pthread_sigmask");

33 
	`GC_¥ötf
("Blocked: ");

34 
i
 = 1; i < 
NSIG
; i++) {

35 i‡(
	`sigismembî
(&
blocked
, 
i
)Ë{ 
	`GC_¥ötf
("%d ", i); }

37 
	`GC_¥ötf
("\n");

38 
	}
}

44 
	$GC_ªmove_Ælowed_sig«ls
(
sig£t_t
 *
£t
)

46 i‡(
	`sigdñ£t
(
£t
, 
SIGINT
) != 0

47 || 
	`sigdñ£t
(
£t
, 
SIGQUIT
) != 0

48 || 
	`sigdñ£t
(
£t
, 
SIGABRT
) != 0

49 || 
	`sigdñ£t
(
£t
, 
SIGTERM
) != 0) {

50 
	`ABORT
("sigdelset() failed");

53 #ifde‡
MPROTECT_VDB


56 i‡(
	`sigdñ£t
(
£t
, 
SIGSEGV
) != 0

57 #ifde‡
SIGBUS


58 || 
	`sigdñ£t
(
£t
, 
SIGBUS
) != 0

61 
	`ABORT
("sigdelset() failed");

64 
	}
}

66 
sig£t_t
 
	gsu•íd_h™dÀr_mask
;

68 vﬁ©ûê
AO_t
 
	gGC_°›_cou¡
;

71 vﬁ©ûê
AO_t
 
	gGC_w‹ld_is_°›≥d
 = 
FALSE
;

77 #ifde‡
GC_OSF1_THREADS


78 
GC_boﬁ
 
	gGC_ªåy_sig«ls
 = 
TRUE
;

80 
GC_boﬁ
 
	gGC_ªåy_sig«ls
 = 
FALSE
;

95 #i‚de‡
SIG_THR_RESTART


96 #i‡
deföed
(
GC_HPUX_THREADS
Ë|| deföed(
GC_OSF1_THREADS
Ë|| deföed(
GC_NETBSD_THREADS
)

97 #ifde‡
_SIGRTMIN


98 
	#SIG_THR_RESTART
 
_SIGRTMIN
 + 5

	)

100 
	#SIG_THR_RESTART
 
SIGRTMIN
 + 5

	)

103 
	#SIG_THR_RESTART
 
SIGXCPU


	)

107 
£m_t
 
	gGC_su•íd_ack_£m
;

109 #ifde‡
GC_NETBSD_THREADS


110 
	#GC_NETBSD_THREADS_WORKAROUND


	)

113 
£m_t
 
	gGC_ª°¨t_ack_£m
;

116 
GC_su•íd_h™dÀr_ö√r
(
±r_t
 
sig_¨g
, *
c⁄ãxt
);

118 #i‡
deföed
(
IA64
Ë|| deföed(
HP_PA
Ë|| deföed(
M68K
)

119 #ifde‡
SA_SIGINFO


120 
	$GC_su•íd_h™dÀr
(
sig
, 
sigöfo_t
 *
öfo
, *
c⁄ãxt
)

122 
	$GC_su•íd_h™dÀr
(
sig
)

125 
ﬁd_î∫o
 = 
î∫o
;

126 
	`GC_wôh_ˇŒì_ßves_pushed
(
GC_su•íd_h™dÀr_ö√r
, (
±r_t
)(
w‹d
)
sig
);

127 
î∫o
 = 
ﬁd_î∫o
;

128 
	}
}

132 #ifde‡
SA_SIGINFO


133 
	$GC_su•íd_h™dÀr
(
sig
, 
sigöfo_t
 *
öfo
, *
c⁄ãxt
)

135 
	$GC_su•íd_h™dÀr
(
sig
)

138 
ﬁd_î∫o
 = 
î∫o
;

139 #i‚de‡
SA_SIGINFO


140 *
c⁄ãxt
 = 0;

142 
	`GC_su•íd_h™dÀr_ö√r
((
±r_t
)(
w‹d
)
sig
, 
c⁄ãxt
);

143 
î∫o
 = 
ﬁd_î∫o
;

144 
	}
}

147 
	$GC_su•íd_h™dÀr_ö√r
(
±r_t
 
sig_¨g
, *
c⁄ãxt
)

149 
sig
 = ()(
w‹d
)
sig_¨g
;

150 
dummy
;

151 
±hªad_t
 
my_thªad
 = 
	`±hªad_£lf
();

152 
GC_thªad
 
me
;

153 #ifde‡
PARALLEL_MARK


154 
w‹d
 
my_m¨k_no
 = 
GC_m¨k_no
;

159 
AO_t
 
my_°›_cou¡
 = 
	`AO_lﬂd
(&
GC_°›_cou¡
);

161 i‡(
sig
 !
SIG_SUSPEND
Ë
	`ABORT
("Bad signal in suspend_handler");

163 #i‡
DEBUG_THREADS


164 
	`GC_¥ötf
("Su•ídög 0x%x\n", ()
my_thªad
);

167 
me
 = 
	`GC_lookup_thªad
(
my_thªad
);

172 i‡(
me
 -> 
°›_öfo
.
œ°_°›_cou¡
 =
my_°›_cou¡
) {

174 i‡(!
GC_ªåy_sig«ls
) {

175 
	`WARN
("Duplicate suspend signal inÅhread %lx\n",

176 
	`±hªad_£lf
());

180 #ifde‡
SPARC


181 
me
 -> 
°›_öfo
.
°ack_±r
 = 
	`GC_ßve_ªgs_ö_°ack
();

183 
me
 -> 
°›_öfo
.
°ack_±r
 = (
±r_t
)(&
dummy
);

185 #ifde‡
IA64


186 
me
 -> 
backög_°‹e_±r
 = 
	`GC_ßve_ªgs_ö_°ack
();

192 
	`£m_po°
(&
GC_su•íd_ack_£m
);

193 
me
 -> 
°›_öfo
.
œ°_°›_cou¡
 = 
my_°›_cou¡
;

207 
	`sigsu•íd
 (&
su•íd_h™dÀr_mask
);

208 } 
	`AO_lﬂd_acquúe
(&
GC_w‹ld_is_°›≥d
)

209 && 
	`AO_lﬂd
(&
GC_°›_cou¡
Ë=
my_°›_cou¡
);

217 #i‡
DEBUG_THREADS


218 
	`GC_¥ötf
("C⁄töuög 0x%x\n", ()
my_thªad
);

220 
	}
}

222 
	$GC_ª°¨t_h™dÀr
(
sig
)

224 
±hªad_t
 
my_thªad
 = 
	`±hªad_£lf
();

225 
GC_thªad
 
me
;

227 i‡(
sig
 !
SIG_THR_RESTART
Ë
	`ABORT
("Bad signal in suspend_handler");

229 #ifde‡
GC_NETBSD_THREADS_WORKAROUND


230 
	`£m_po°
(&
GC_ª°¨t_ack_£m
);

241 #i‡
DEBUG_THREADS


242 
	`GC_¥ötf
("I¿GC_ª°¨t_h™dÀ∏f‹ 0x%x\n", ()
	`±hªad_£lf
());

244 
	}
}

246 #ifde‡
IA64


247 
	#IF_IA64
(
x
Ë
	)
x

249 
	#IF_IA64
(
x
)

	)

253 
	$GC_push_Æl_°acks
()

255 
GC_boﬁ
 
found_me
 = 
FALSE
;

256 
size_t
 
¡hªads
 = 0;

257 
i
;

258 
GC_thªad
 
p
;

259 
±r_t
 
lo
, 
hi
;

261 
	`IF_IA64
(
±r_t
 
bs_lo
;Öå_à
bs_hi
;)

262 
±hªad_t
 
me
 = 
	`±hªad_£lf
();

264 i‡(!
GC_thr_öôülized
Ë
	`GC_thr_öô
();

265 #i‡
DEBUG_THREADS


266 
	`GC_¥ötf
("Pushög sèck†‰omÅhªad 0x%x\n", (Ë
me
);

268 
i
 = 0; i < 
THREAD_TABLE_SZ
; i++) {

269 
p
 = 
GC_thªads
[
i
];Ö !0;Ö =Ö -> 
√xt
) {

270 i‡(
p
 -> 
Êags
 & 
FINISHED
) ;

271 ++
¡hªads
;

272 i‡(
	`THREAD_EQUAL
(
p
 -> 
id
, 
me
)) {

273 #ifde‡
SPARC


274 
lo
 = (
±r_t
)
	`GC_ßve_ªgs_ö_°ack
();

276 
lo
 = 
	`GC_≠¥ox_•
();

278 
found_me
 = 
TRUE
;

279 
	`IF_IA64
(
bs_hi
 = (
±r_t
)
	`GC_ßve_ªgs_ö_°ack
();)

281 
lo
 = 
p
 -> 
°›_öfo
.
°ack_±r
;

282 
	`IF_IA64
(
bs_hi
 = 
p
 -> 
backög_°‹e_±r
;)

284 i‡((
p
 -> 
Êags
 & 
MAIN_THREAD
) == 0) {

285 
hi
 = 
p
 -> 
°ack_íd
;

286 
	`IF_IA64
(
bs_lo
 = 
p
 -> 
backög_°‹e_íd
);

289 
hi
 = 
GC_°ackbŸtom
;

290 
	`IF_IA64
(
bs_lo
 = 
BACKING_STORE_BASE
;)

292 #i‡
DEBUG_THREADS


293 
	`GC_¥ötf
("Stack forÅhread 0x%x = [%p,%p)\n",

294 ()(
p
 -> 
id
), 
lo
, 
hi
);

296 i‡(0 =
lo
Ë
	`ABORT
("GC_push_all_stacks: spÇot set!\n");

297 #ifde‡
STACK_GROWS_UP


299 
	`GC_push_Æl_°ack
(
hi
, 
lo
);

301 
	`GC_push_Æl_°ack
(
lo
, 
hi
);

303 #ifde‡
IA64


304 #i‡
DEBUG_THREADS


305 
	`GC_¥ötf
("Reg stack forÅhread 0x%x = [%lx,%lx)\n",

306 ()
p
 -> 
id
, 
bs_lo
, 
bs_hi
);

308 i‡(
	`THREAD_EQUAL
(
p
 -> 
id
, 
me
)) {

311 
	`GC_push_Æl_ógî
(
bs_lo
, 
bs_hi
);

313 
	`GC_push_Æl_°ack
(
bs_lo
, 
bs_hi
);

318 i‡(
GC_¥öt_°©s
 =
VERBOSE
) {

319 
	`GC_log_¥ötf
("Pushed %dÅhªad sècks\n", 
¡hªads
);

321 i‡(!
found_me
 && !
GC_ö_thªad_¸óti⁄
)

322 
	`ABORT
("Collecting from unknownÅhread.");

323 
	}
}

327 
±hªad_t
 
	gGC_°›pög_thªad
;

328 
	gGC_°›pög_pid
;

333 
	$GC_su•íd_Æl
()

335 
n_live_thªads
 = 0;

336 
i
;

337 
GC_thªad
 
p
;

338 
ªsu…
;

339 
±hªad_t
 
my_thªad
 = 
	`±hªad_£lf
();

341 
GC_°›pög_thªad
 = 
my_thªad
;

342 
GC_°›pög_pid
 = 
	`gëpid
();

343 
i
 = 0; i < 
THREAD_TABLE_SZ
; i++) {

344 
p
 = 
GC_thªads
[
i
];Ö !0;Ö =Ö -> 
√xt
) {

345 i‡(!
	`THREAD_EQUAL
(
p
 -> 
id
, 
my_thªad
)) {

346 i‡(
p
 -> 
Êags
 & 
FINISHED
) ;

347 i‡(
p
 -> 
°›_öfo
.
œ°_°›_cou¡
 =
GC_°›_cou¡
) ;

348 i‡(
p
 -> 
thªad_blocked
) ;

349 
n_live_thªads
++;

350 #i‡
DEBUG_THREADS


351 
	`GC_¥ötf
("Sending suspend signalÅo 0x%x\n",

352 ()(
p
 -> 
id
));

355 
ªsu…
 = 
	`±hªad_kûl
(
p
 -> 
id
, 
SIG_SUSPEND
);

356 
ªsu…
) {

357 
ESRCH
:

359 
n_live_thªads
--;

364 
	`ABORT
("pthread_kill failed");

369  
n_live_thªads
;

370 
	}
}

372 
	$GC_°›_w‹ld
()

374 
i
;

375 
n_live_thªads
;

376 
code
;

378 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

379 #i‡
DEBUG_THREADS


380 
	`GC_¥ötf
("St›pögÅhêw‹ld from 0x%x\n", ()
	`±hªad_£lf
());

387 #ifde‡
PARALLEL_MARK


388 
	`GC_acquúe_m¨k_lock
();

389 
	`GC_ASSERT
(
GC_Ê_buûdî_cou¡
 == 0);

392 
	`AO_°‹e
(&
GC_°›_cou¡
, GC_stop_count+1);

394 
	`AO_°‹e_ªÀa£
(&
GC_w‹ld_is_°›≥d
, 
TRUE
);

395 
n_live_thªads
 = 
	`GC_su•íd_Æl
();

397 i‡(
GC_ªåy_sig«ls
) {

398 
waô_u£cs
 = 0;

399 
	#WAIT_UNIT
 3000

	)

400 
	#RETRY_INTERVAL
 100000

	)

402 
ack_cou¡
;

404 
	`£m_gëvÆue
(&
GC_su•íd_ack_£m
, &
ack_cou¡
);

405 i‡(
ack_cou¡
 =
n_live_thªads
) ;

406 i‡(
waô_u£cs
 > 
RETRY_INTERVAL
) {

407 
√wly_£¡
 = 
	`GC_su•íd_Æl
();

409 i‡(
GC_¥öt_°©s
) {

410 
	`GC_log_¥ötf
("Resent %d signalsáfterÅimeout\n",

411 
√wly_£¡
);

413 
	`£m_gëvÆue
(&
GC_su•íd_ack_£m
, &
ack_cou¡
);

414 i‡(
√wly_£¡
 < 
n_live_thªads
 - 
ack_cou¡
) {

415 
	`WARN
("Lost someÅhreads during GC_stop_world?!\n",0);

416 
n_live_thªads
 = 
ack_cou¡
 + 
√wly_£¡
;

418 
waô_u£cs
 = 0;

420 
	`u¶ìp
(
WAIT_UNIT
);

421 
waô_u£cs
 +
WAIT_UNIT
;

424 
i
 = 0; i < 
n_live_thªads
; i++) {

425 
ªåy
:

426 i‡(0 !(
code
 = 
	`£m_waô
(&
GC_su•íd_ack_£m
))) {

429 i‡(
î∫o
 =
EINTR
) {

431 
ªåy
;

433 
	`ABORT
("sem_wait for handler failed");

436 #ifde‡
PARALLEL_MARK


437 
	`GC_ªÀa£_m¨k_lock
();

439 #i‡
DEBUG_THREADS


440 
	`GC_¥ötf
("W‹ld st›≥d from 0x%x\n", ()
	`±hªad_£lf
());

442 
GC_°›pög_thªad
 = 0;

443 
	}
}

447 
	$GC_°¨t_w‹ld
()

449 
±hªad_t
 
my_thªad
 = 
	`±hªad_£lf
();

450 
i
;

451 
GC_thªad
 
p
;

452 
n_live_thªads
 = 0;

453 
ªsu…
;

454 #ifde‡
GC_NETBSD_THREADS_WORKAROUND


455 
code
;

458 #i‡
DEBUG_THREADS


459 
	`GC_¥ötf
("World starting\n");

462 
	`AO_°‹e
(&
GC_w‹ld_is_°›≥d
, 
FALSE
);

463 
i
 = 0; i < 
THREAD_TABLE_SZ
; i++) {

464 
p
 = 
GC_thªads
[
i
];Ö !0;Ö =Ö -> 
√xt
) {

465 i‡(!
	`THREAD_EQUAL
(
p
 -> 
id
, 
my_thªad
)) {

466 i‡(
p
 -> 
Êags
 & 
FINISHED
) ;

467 i‡(
p
 -> 
thªad_blocked
) ;

468 
n_live_thªads
++;

469 #i‡
DEBUG_THREADS


470 
	`GC_¥ötf
("SendingÑestart signalÅo 0x%x\n",

471 ()(
p
 -> 
id
));

474 
ªsu…
 = 
	`±hªad_kûl
(
p
 -> 
id
, 
SIG_THR_RESTART
);

475 
ªsu…
) {

476 
ESRCH
:

478 
n_live_thªads
--;

483 
	`ABORT
("pthread_kill failed");

488 #ifde‡
GC_NETBSD_THREADS_WORKAROUND


489 
i
 = 0; i < 
n_live_thªads
; i++)

490 0 !(
code
 = 
	`£m_waô
(&
GC_ª°¨t_ack_£m
)))

491 i‡(
î∫o
 !
EINTR
) {

492 
	`GC_îr_¥ötf
("sem_wait()Ñeturned %d\n",

493 
code
);

494 
	`ABORT
("sem_wait() forÑestart handler failed");

497 #i‡
DEBUG_THREADS


498 
	`GC_¥ötf
("World started\n");

500 
	}
}

502 
	$GC_°›_öô
() {

503 
siga˘i⁄
 
a˘
;

505 i‡(
	`£m_öô
(&
GC_su•íd_ack_£m
, 0, 0) != 0)

506 
	`ABORT
("sem_init failed");

507 #ifde‡
GC_NETBSD_THREADS_WORKAROUND


508 i‡(
	`£m_öô
(&
GC_ª°¨t_ack_£m
, 0, 0) != 0)

509 
	`ABORT
("sem_init failed");

512 
a˘
.
ß_Êags
 = 
SA_RESTART


513 #ifde‡
SA_SIGINFO


514 | 
SA_SIGINFO


517 i‡(
	`sigfûl£t
(&
a˘
.
ß_mask
) != 0) {

518 
	`ABORT
("sigfillset() failed");

520 
	`GC_ªmove_Ælowed_sig«ls
(&
a˘
.
ß_mask
);

523 #ifde‡
SA_SIGINFO


524 
a˘
.
ß_siga˘i⁄
 = 
GC_su•íd_h™dÀr
;

526 
a˘
.
ß_h™dÀr
 = 
GC_su•íd_h™dÀr
;

528 i‡(
	`siga˘i⁄
(
SIG_SUSPEND
, &
a˘
, 
NULL
) != 0) {

529 
	`ABORT
("Cannot set SIG_SUSPEND handler");

532 #ifde‡
SA_SIGINFO


533 
a˘
.
ß_Êags
 &~ 
SA_SIGINFO
;

535 
a˘
.
ß_h™dÀr
 = 
GC_ª°¨t_h™dÀr
;

536 i‡(
	`siga˘i⁄
(
SIG_THR_RESTART
, &
a˘
, 
NULL
) != 0) {

537 
	`ABORT
("Cannot set SIG_THR_RESTART handler");

541 i‡(
	`sigfûl£t
(&
su•íd_h™dÀr_mask
Ë!0Ë
	`ABORT
("sigfillset() failed");

542 
	`GC_ªmove_Ælowed_sig«ls
(&
su•íd_h™dÀr_mask
);

543 i‡(
	`sigdñ£t
(&
su•íd_h™dÀr_mask
, 
SIG_THR_RESTART
) != 0)

544 
	`ABORT
("sigdelset() failed");

547 i‡(0 !
	`GETENV
("GC_RETRY_SIGNALS")) {

548 
GC_ªåy_sig«ls
 = 
TRUE
;

550 i‡(0 !
	`GETENV
("GC_NO_RETRY_SIGNALS")) {

551 
GC_ªåy_sig«ls
 = 
FALSE
;

553 i‡(
GC_¥öt_°©s
 && 
GC_ªåy_sig«ls
) {

554 
	`GC_log_¥ötf
("WillÑetry suspend signal ifÇecessary.\n");

556 
	}
}

	@pthread_support.c

46 
	~"¥iv©e/±hªad_suµ‹t.h
"

48 #i‡
deföed
(
GC_PTHREADS
Ë&& !deföed(
GC_WIN32_THREADS
)

50 #i‡
deföed
(
GC_DGUX386_THREADS
Ë&& !deföed(
_POSIX4A_DRAFT10_SOURCE
)

51 
	#_POSIX4A_DRAFT10_SOURCE
 1

	)

54 #i‡
deföed
(
GC_DGUX386_THREADS
Ë&& !deföed(
_USING_POSIX4A_DRAFT10
)

55 
	#_USING_POSIX4A_DRAFT10
 1

	)

58 
	~<°dlib.h
>

59 
	~<±hªad.h
>

60 
	~<sched.h
>

61 
	~<time.h
>

62 
	~<î∫o.h
>

63 
	~<uni°d.h
>

64 
	~<sys/mm™.h
>

65 
	~<sys/time.h
>

66 
	~<sys/ty≥s.h
>

67 
	~<sys/°©.h
>

68 
	~<f˙é.h
>

69 
	~<sig«l.h
>

71 
	~"gc_ölöe.h
"

73 #i‡
deföed
(
GC_DARWIN_THREADS
)

74 
	~"¥iv©e/d¨wö_£m≠h‹e.h
"

76 
	~<£m≠h‹e.h
>

79 #i‡
deföed
(
GC_DARWIN_THREADS
Ë|| deföed(
GC_FREEBSD_THREADS
)

80 
	~<sys/sys˘l.h
>

83 #i‡
deföed
(
GC_NETBSD_THREADS
)

84 
	~<sys/∑øm.h
>

85 
	~<sys/sys˘l.h
>

89 #i‡!
deföed
(
USE_SPIN_LOCK
)

90 
±hªad_muãx_t
 
	gGC_Æloˇã_ml
 = 
PTHREAD_MUTEX_INITIALIZER
;

92 
	gGC_lock_hﬁdî
 = 
NO_THREAD
;

96 #i‡
deföed
(
GC_DGUX386_THREADS
)

97 
	~<sys/dg_sys_öfo.h
>

98 
	~<sys/_öt_p£m.h
>

100 
	t£m_t
;

103 #i‚de‡
__GNUC__


104 
	#__ölöe__


	)

108 #unde‡
±hªad_¸óã


109 #i‡!
deföed
(
GC_DARWIN_THREADS
)

110 #unde‡
±hªad_sigmask


112 #unde‡
±hªad_joö


113 #unde‡
±hªad_dëach


114 #i‡
deföed
(
GC_OSF1_THREADS
Ë&& deföed(
_PTHREAD_USE_MANGLED_NAMES_
) \

115 && !
	$deföed
(
_PTHREAD_USE_PTDNAM_
)

117 
	#±hªad_¸óã
 
__±hªad_¸óã


	)

118 
	#±hªad_joö
 
__±hªad_joö


	)

119 
	#±hªad_dëach
 
__±hªad_dëach


	)

122 #ifde‡
GC_USE_LD_WRAP


123 
	#WRAP_FUNC
(
f
Ë
__wøp_
##
	)
f

124 
	#REAL_FUNC
(
f
Ë
__ªÆ_
##
	)
f

126 #ifde‡
GC_USE_DLOPEN_WRAP


127 
	~<dlf˙.h
>

128 
	#WRAP_FUNC
(
f
Ë
	)
f

129 
	#REAL_FUNC
(
f
Ë
GC_ªÆ_
##
	)
f

134 (* 
	tGC_±hªad_¸óã_t
)(
	t±hªad_t
 *, c⁄° 
	t±hªad_©å_t
 *,

136 
GC_±hªad_¸óã_t
 
GC_ªÆ_±hªad_¸óã
;

137 (* 
	tGC_±hªad_sigmask_t
)(, c⁄° 
	tsig£t_t
 *, sigset_t *);

138 
GC_±hªad_sigmask_t
 
GC_ªÆ_±hªad_sigmask
;

139 (* 
	tGC_±hªad_joö_t
)(
	t±hªad_t
, **);

140 
GC_±hªad_joö_t
 
GC_ªÆ_±hªad_joö
;

141 (* 
	tGC_±hªad_dëach_t
)(
	t±hªad_t
);

142 
GC_±hªad_dëach_t
 
GC_ªÆ_±hªad_dëach
;

144 
	#WRAP_FUNC
(
f
Ë
GC_
##
	)
f

145 #i‡!
	`deföed
(
GC_DGUX386_THREADS
)

146 
	#REAL_FUNC
(
f
Ë
	)
f

148 
	#REAL_FUNC
(
f
Ë
__d10_
##
	)
f

153 #i‡
	`deföed
(
GC_USE_DL_WRAP
Ë|| deföed(
GC_USE_DLOPEN_WRAP
)

157 
	`GC_±hªad_¸óã
(
±hªad_t
 * 
t
, c⁄° 
±hªad_©å_t
 * 
a
,

158 * (* 
‚
)(*), * 
¨g
) {

159  
	`±hªad_¸óã
(
t
, 
a
, 
‚
, 
¨g
);

160 
	}
}

161 
	$GC_±hªad_sigmask
(
how
, c⁄° 
sig£t_t
 *
mask
, sig£t_à*
ﬁd
) {

162  
	`±hªad_sigmask
(
how
, 
mask
, 
ﬁd
);

163 
	}
}

164 
	$GC_±hªad_joö
(
±hªad_t
 
t
, **
ªs
) {

165  
	`±hªad_joö
(
t
, 
ªs
);

166 
	}
}

167 
	$GC_±hªad_dëach
(
±hªad_t
 
t
) {

168  
	`±hªad_dëach
(
t
);

169 
	}
}

172 #ifde‡
GC_USE_DLOPEN_WRAP


173 
GC_boﬁ
 
	gGC_syms_öôülized
 = 
FALSE
;

175 
	$GC_öô_ªÆ_syms
()

177 *
dl_h™dÀ
;

178 
	#LIBPTHREAD_NAME
 "lib±hªad.so.0"

	)

179 
	#LIBPTHREAD_NAME_LEN
 16

	)

180 
size_t
 
Àn
 = 
LIBPTHREAD_NAME_LEN
 - 1;

181 
«mebuf
[
LIBPTHREAD_NAME_LEN
];

182 *
lib±hªad_«me
 = 
LIBPTHREAD_NAME
;

184 i‡(
GC_syms_öôülized
) ;

185 #ifde‡
RTLD_NEXT


186 
dl_h™dÀ
 = 
RTLD_NEXT
;

188 
dl_h™dÀ
 = 
	`dl›í
(
lib±hªad_«me
, 
RTLD_LAZY
);

189 i‡(
NULL
 =
dl_h™dÀ
) {

190 
	`isdigô
(
lib±hªad_«me
[
Àn
-1])) --len;

191 i‡(
lib±hªad_«me
[
Àn
-1] == '.') --len;

192 
	`mem˝y
(
«mebuf
, 
lib±hªad_«me
, 
Àn
);

193 
«mebuf
[
Àn
] = '\0';

194 
dl_h™dÀ
 = 
	`dl›í
(
«mebuf
, 
RTLD_LAZY
);

196 i‡(
NULL
 =
dl_h™dÀ
Ë
	`ABORT
("Couldn't openÜibpthread\n");

198 
GC_ªÆ_±hªad_¸óã
 = (
GC_±hªad_¸óã_t
)

199 
	`dlsym
(
dl_h™dÀ
, "pthread_create");

200 
GC_ªÆ_±hªad_sigmask
 = (
GC_±hªad_sigmask_t
)

201 
	`dlsym
(
dl_h™dÀ
, "pthread_sigmask");

202 
GC_ªÆ_±hªad_joö
 = (
GC_±hªad_joö_t
)

203 
	`dlsym
(
dl_h™dÀ
, "pthread_join");

204 
GC_ªÆ_±hªad_dëach
 = (
GC_±hªad_dëach_t
)

205 
	`dlsym
(
dl_h™dÀ
, "pthread_detach");

206 
GC_syms_öôülized
 = 
TRUE
;

207 
	}
}

209 
	#INIT_REAL_SYMS
(Ëi‡(!
GC_syms_öôülized
Ë
	`GC_öô_ªÆ_syms
();

	)

211 
	#INIT_REAL_SYMS
()

	)

214 
GC_thr_öô
();

216 
GC_boﬁ
 
	g∑øŒñ_öôülized
 = 
FALSE
;

218 
GC_boﬁ
 
	gGC_√ed_to_lock
 = 
FALSE
;

220 
GC_öô_∑øŒñ
();

222 
	gGC_≈rocs
 = 1;

226 #ifde‡
THREAD_LOCAL_ALLOC


231 
	$GC_m¨k_thªad_loˇl_‰ì_li°s
()

233 
i
;

234 
GC_thªad
 
p
;

236 
i
 = 0; i < 
THREAD_TABLE_SZ
; ++i) {

237 
p
 = 
GC_thªads
[
i
]; 0 !p;Ö =Ö -> 
√xt
) {

238 
	`GC_m¨k_thªad_loˇl_Ês_f‹
(&(
p
->
éfs
));

241 
	}
}

243 #i‡
deföed
(
GC_ASSERTIONS
)

246 
	$GC_check_és
() {

247 
i
;

248 
GC_thªad
 
p
;

250 
i
 = 0; i < 
THREAD_TABLE_SZ
; ++i) {

251 
p
 = 
GC_thªads
[
i
]; 0 !p;Ö =Ö -> 
√xt
) {

252 
	`GC_check_és_f‹
(&(
p
->
éfs
));

255 #i‡
	`deföed
(
USE_CUSTOM_SPECIFIC
)

256 i‡(
GC_thªad_key
 != 0)

257 
	`GC_check_tsd_m¨ks
(
GC_thªad_key
);

259 
	}
}

264 #ifde‡
PARALLEL_MARK


266 #i‚de‡
MAX_MARKERS


267 
	#MAX_MARKERS
 16

	)

270 
±r_t
 
	gm¨kî_•
[
MAX_MARKERS
] = {0};

271 #ifde‡
IA64


272 
±r_t
 
	gm¨kî_b•
[
MAX_MARKERS
] = {0};

275 * 
	$GC_m¨k_thªad
(* 
id
)

277 
w‹d
 
my_m¨k_no
 = 0;

279 
m¨kî_•
[(
w‹d
)
id
] = 
	`GC_≠¥ox_•
();

280 #ifde‡
IA64


281 
m¨kî_b•
[(
w‹d
)
id
] = 
	`GC_ßve_ªgs_ö_°ack
();

283 ;; ++
my_m¨k_no
) {

290 i‡(
my_m¨k_no
 < 
GC_m¨k_no
 || my_mark_no > GC_mark_no + 2) {

293 
my_m¨k_no
 = 
GC_m¨k_no
;

295 #ifde‡
DEBUG_THREADS


296 
	`GC_¥ötf
("Sèπög m¨k hñ≥∏f‹ m¨kÇumbî %lu\n", 
my_m¨k_no
);

298 
	`GC_hñp_m¨kî
(
my_m¨k_no
);

300 
	}
}

302 
GC_m¨kîs
;

306 
±hªad_t
 
	gGC_m¨k_thªads
[
MAX_MARKERS
];

308 
	#PTHREAD_CREATE
 
	`REAL_FUNC
(
±hªad_¸óã
)

	)

310 
	$°¨t_m¨k_thªads
()

312 
i
;

313 
±hªad_©å_t
 
©å
;

315 i‡(
GC_m¨kîs
 > 
MAX_MARKERS
) {

316 
	`WARN
("LimitingÇumber of markÅhreads\n", 0);

317 
GC_m¨kîs
 = 
MAX_MARKERS
;

319 i‡(0 !
	`±hªad_©å_öô
(&
©å
)Ë
	`ABORT
("pthread_attr_init failed");

321 i‡(0 !
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_DETACHED
))

322 
	`ABORT
("pthread_attr_setdetachstate failed");

324 #i‡
	`deföed
(
HPUX
Ë|| deföed(
GC_DGUX386_THREADS
)

328 
	#MIN_STACK_SIZE
 (8*
HBLKSIZE
*(
w‹d
))

	)

330 
size_t
 
ﬁd_size
;

331 
code
;

333 i‡(
	`±hªad_©å_gë°acksize
(&
©å
, &
ﬁd_size
) != 0)

334 
	`ABORT
("pthread_attr_getstacksize failed\n");

335 i‡(
ﬁd_size
 < 
MIN_STACK_SIZE
) {

336 i‡(
	`±hªad_©å_£t°acksize
(&
©å
, 
MIN_STACK_SIZE
) != 0)

337 
	`ABORT
("pthread_attr_setstacksize failed\n");

341 i‡(
GC_¥öt_°©s
) {

342 
	`GC_log_¥ötf
("Sèπög %ld m¨kîÅhªads\n", 
GC_m¨kîs
 - 1);

344 
i
 = 0; i < 
GC_m¨kîs
 - 1; ++i) {

345 i‡(0 !
	`PTHREAD_CREATE
(
GC_m¨k_thªads
 + 
i
, &
©å
,

346 
GC_m¨k_thªad
, (*)(
w‹d
)
i
)) {

347 
	`WARN
("M¨kîÅhªad cª©i⁄ faûed,Éºnÿ%ld.\n", 
î∫o
);

350 
	}
}

354 
GC_boﬁ
 
	gGC_thr_öôülized
 = 
FALSE
;

356 vﬁ©ûê
GC_thªad
 
	gGC_thªads
[
THREAD_TABLE_SZ
];

358 
	$GC_push_thªad_°ru˘uªs
()

360 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

361 
	`GC_push_Æl
((
±r_t
)(
GC_thªads
), (ptr_t)(GC_threads)+(GC_threads));

362 #i‡
	`deföed
(
THREAD_LOCAL_ALLOC
)

363 
	`GC_push_Æl
((
±r_t
)(&
GC_thªad_key
),

364 (
±r_t
)(&
GC_thªad_key
)+(&GC_thread_key));

366 
	}
}

369 
GC_Thªad_Rï
 
	gfú°_thªad
;

373 
GC_thªad
 
	$GC_√w_thªad
(
±hªad_t
 
id
)

375 
hv
 = 
	`NUMERIC_THREAD_ID
(
id
Ë% 
THREAD_TABLE_SZ
;

376 
GC_thªad
 
ªsu…
;

377 
GC_boﬁ
 
fú°_thªad_u£d
 = 
FALSE
;

379 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

380 i‡(!
fú°_thªad_u£d
) {

381 
ªsu…
 = &
fú°_thªad
;

382 
fú°_thªad_u£d
 = 
TRUE
;

384 
ªsu…
 = (
GC_Thªad_Rï
 *)

385 
	`GC_INTERNAL_MALLOC
((
GC_Thªad_Rï
), 
NORMAL
);

386 
	`GC_ASSERT
(
ªsu…
 -> 
Êags
 == 0);

388 i‡(
ªsu…
 == 0) (0);

389 
ªsu…
 -> 
id
 = id;

390 
ªsu…
 -> 
√xt
 = 
GC_thªads
[
hv
];

391 
GC_thªads
[
hv
] = 
ªsu…
;

392 
	`GC_ASSERT
(
ªsu…
 -> 
Êags
 =0 &&Ñesu… -> 
thªad_blocked
 == 0);

393 (
ªsu…
);

394 
	}
}

398 
	$GC_dñëe_thªad
(
±hªad_t
 
id
)

400 
hv
 = 
	`NUMERIC_THREAD_ID
(
id
Ë% 
THREAD_TABLE_SZ
;

401 
GC_thªad
 
p
 = 
GC_thªads
[
hv
];

402 
GC_thªad
 
¥ev
 = 0;

404 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

405 !
	`THREAD_EQUAL
(
p
 -> 
id
, id)) {

406 
¥ev
 = 
p
;

407 
p
 =Ö -> 
√xt
;

409 i‡(
¥ev
 == 0) {

410 
GC_thªads
[
hv
] = 
p
 -> 
√xt
;

412 
¥ev
 -> 
√xt
 = 
p
 ->Çext;

414 #ifde‡
GC_DARWIN_THREADS


415 
	`mach_p‹t_dóŒoˇã
(
	`mach_èsk_£lf
(), 
p
->
°›_öfo
.
mach_thªad
);

417 
	`GC_INTERNAL_FREE
(
p
);

418 
	}
}

424 
	$GC_dñëe_gc_thªad
(
GC_thªad
 
gc_id
)

426 
±hªad_t
 
id
 = 
gc_id
 -> id;

427 
hv
 = 
	`NUMERIC_THREAD_ID
(
id
Ë% 
THREAD_TABLE_SZ
;

428 
GC_thªad
 
p
 = 
GC_thªads
[
hv
];

429 
GC_thªad
 
¥ev
 = 0;

431 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

432 
p
 !
gc_id
) {

433 
¥ev
 = 
p
;

434 
p
 =Ö -> 
√xt
;

436 i‡(
¥ev
 == 0) {

437 
GC_thªads
[
hv
] = 
p
 -> 
√xt
;

439 
¥ev
 -> 
√xt
 = 
p
 ->Çext;

441 #ifde‡
GC_DARWIN_THREADS


442 
	`mach_p‹t_dóŒoˇã
(
	`mach_èsk_£lf
(), 
p
->
°›_öfo
.
mach_thªad
);

444 
	`GC_INTERNAL_FREE
(
p
);

445 
	}
}

453 
GC_thªad
 
	$GC_lookup_thªad
(
±hªad_t
 
id
)

455 
hv
 = 
	`NUMERIC_THREAD_ID
(
id
Ë% 
THREAD_TABLE_SZ
;

456 
GC_thªad
 
p
 = 
GC_thªads
[
hv
];

458 
p
 !0 && !
	`THREAD_EQUAL
’ -> 
id
, id)Ë∞∞-> 
√xt
;

459 (
p
);

460 
	}
}

462 #ifde‡
HANDLE_FORK


467 
	$GC_ªmove_Æl_thªads_but_me
()

469 
±hªad_t
 
£lf
 = 
	`±hªad_£lf
();

470 
hv
;

471 
GC_thªad
 
p
, 
√xt
, 
me
;

473 
hv
 = 0; hv < 
THREAD_TABLE_SZ
; ++hv) {

474 
me
 = 0;

475 
p
 = 
GC_thªads
[
hv
]; 0 !p;Ö = 
√xt
) {

476 
√xt
 = 
p
 ->Çext;

477 i‡(
	`THREAD_EQUAL
(
p
 -> 
id
, 
£lf
)) {

478 
me
 = 
p
;

479 
p
 -> 
√xt
 = 0;

481 #ifde‡
THREAD_LOCAL_ALLOC


482 i‡(!(
p
 -> 
Êags
 & 
FINISHED
)) {

483 
	`GC_de°roy_thªad_loˇl
(&(
p
->
éfs
));

486 i‡(
p
 !&
fú°_thªad
Ë
	`GC_INTERNAL_FREE
(p);

489 
GC_thªads
[
hv
] = 
me
;

491 
	}
}

494 #ifde‡
USE_PROC_FOR_LIBRARIES


495 
GC_boﬁ
 
	$GC_£gmít_is_thªad_°ack
(
±r_t
 
lo
,Öå_à
hi
)

497 
i
;

498 
GC_thªad
 
p
;

500 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

501 #ifde‡
PARALLEL_MARK


502 
i
 = 0; i < 
GC_m¨kîs
; ++i) {

503 i‡(
m¨kî_•
[
i
] > 
lo
 & m¨kî_•[i] < 
hi
Ë 
TRUE
;

504 #ifde‡
IA64


505 i‡(
m¨kî_b•
[
i
] > 
lo
 & m¨kî_b•[i] < 
hi
Ë 
TRUE
;

509 
i
 = 0; i < 
THREAD_TABLE_SZ
; i++) {

510 
p
 = 
GC_thªads
[
i
];Ö !0;Ö =Ö -> 
√xt
) {

511 i‡(0 !
p
 -> 
°ack_íd
) {

512 #ifde‡
STACK_GROWS_UP


513 i‡(
p
 -> 
°ack_íd
 >
lo
 &&Ö -> sèck_íd < 
hi
Ë 
TRUE
;

515 i‡(
p
 -> 
°ack_íd
 > 
lo
 &&Ö -> sèck_íd <
hi
Ë 
TRUE
;

520  
FALSE
;

521 
	}
}

524 #ifde‡
IA64


528 
±r_t
 
	$GC_gª©e°_°ack_ba£_bñow
(
±r_t
 
bound
)

530 
i
;

531 
GC_thªad
 
p
;

532 
±r_t
 
ªsu…
 = 0;

534 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

535 #ifde‡
PARALLEL_MARK


536 
i
 = 0; i < 
GC_m¨kîs
; ++i) {

537 i‡(
m¨kî_•
[
i
] > 
ªsu…
 && m¨kî_•[i] < 
bound
)

538 
ªsu…
 = 
m¨kî_•
[
i
];

541 
i
 = 0; i < 
THREAD_TABLE_SZ
; i++) {

542 
p
 = 
GC_thªads
[
i
];Ö !0;Ö =Ö -> 
√xt
) {

543 i‡(
p
 -> 
°ack_íd
 > 
ªsu…
 &&Ö -> sèck_íd < 
bound
) {

544 
ªsu…
 = 
p
 -> 
°ack_íd
;

548  
ªsu…
;

549 
	}
}

552 #ifde‡
GC_LINUX_THREADS


554 
	$GC_gë_≈rocs
()

559 
	#STAT_BUF_SIZE
 4096

	)

560 
	#STAT_READ
 
ªad


	)

563 
°©_buf
[
STAT_BUF_SIZE
];

564 
f
;

565 
w‹d
 
ªsu…
 = 1;

569 
size_t
 
i
, 
Àn
 = 0;

571 
f
 = 
	`›í
("/¥oc/°©", 
O_RDONLY
);

572 i‡(
f
 < 0 || (
Àn
 = 
	`STAT_READ
(f, 
°©_buf
, 
STAT_BUF_SIZE
)) < 100) {

573 
	`WARN
("Couldn'tÑead /proc/stat\n", 0);

576 
i
 = 0; i < 
Àn
 - 100; ++i) {

577 i‡(
°©_buf
[
i
] == '\n' && stat_buf[i+1] == 'c'

578 && 
°©_buf
[
i
+2] == 'p' && stat_buf[i+3] == 'u') {

579 
˝u_no
 = 
	`©oi
(
°©_buf
 + 
i
 + 4);

580 i‡(
˝u_no
 >
ªsu…
)Ñesult = cpu_no + 1;

583 
	`˛o£
(
f
);

584  
ªsu…
;

585 
	}
}

593 
GC_boﬁ
 
GC_cﬁÀ˘i⁄_ö_¥ogªss
();

594 
	$GC_waô_f‹_gc_com∂ëi⁄
(
GC_boﬁ
 
waô_f‹_Æl
)

596 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

597 i‡(
GC_ö¸emíèl
 && 
	`GC_cﬁÀ˘i⁄_ö_¥ogªss
()) {

598 
ﬁd_gc_no
 = 
GC_gc_no
;

602 
GC_ö¸emíèl
 && 
	`GC_cﬁÀ˘i⁄_ö_¥ogªss
()

603 && (
waô_f‹_Æl
 || 
ﬁd_gc_no
 =
GC_gc_no
)) {

604 
	`ENTER_GC
();

605 
GC_ö_thªad_¸óti⁄
 = 
TRUE
;

606 
	`GC_cﬁÀ˘_a_lôée_ö√r
(1);

607 
GC_ö_thªad_¸óti⁄
 = 
FALSE
;

608 
	`EXIT_GC
();

609 
	`UNLOCK
();

610 
	`sched_yõld
();

611 
	`LOCK
();

614 
	}
}

616 #ifde‡
HANDLE_FORK


626 
	$GC_f‹k_¥ï¨e_¥oc
()

635 
	`LOCK
();

636 #i‡
	`deföed
(
PARALLEL_MARK
Ë|| deföed(
THREAD_LOCAL_ALLOC
)

637 
	`GC_waô_f‹_ª˛aim
();

639 
	`GC_waô_f‹_gc_com∂ëi⁄
(
TRUE
);

640 #i‡
	`deföed
(
PARALLEL_MARK
Ë|| deföed(
THREAD_LOCAL_ALLOC
)

641 
	`GC_acquúe_m¨k_lock
();

643 
	}
}

646 
	$GC_f‹k_∑ª¡_¥oc
()

648 #i‡
	`deföed
(
PARALLEL_MARK
Ë|| deföed(
THREAD_LOCAL_ALLOC
)

649 
	`GC_ªÀa£_m¨k_lock
();

651 
	`UNLOCK
();

652 
	}
}

655 
	$GC_f‹k_chûd_¥oc
()

658 #i‡
	`deföed
(
PARALLEL_MARK
Ë|| deföed(
THREAD_LOCAL_ALLOC
)

659 
	`GC_ªÀa£_m¨k_lock
();

661 
	`GC_ªmove_Æl_thªads_but_me
();

662 #ifde‡
PARALLEL_MARK


665 
GC_m¨kîs
 = 1;

666 
GC_∑øŒñ
 = 
FALSE
;

668 
	`UNLOCK
();

669 
	}
}

672 #i‡
deföed
(
GC_DGUX386_THREADS
)

674 
	$GC_gë_≈rocs
()

677 
numCpus
;

678 
dg_sys_öfo_pm_öfo
 
pm_sysöfo
;

679 
°©us
 =0;

681 
°©us
 = 
	`dg_sys_öfo
((*Ë&
pm_sysöfo
,

682 
DG_SYS_INFO_PM_INFO_TYPE
, 
DG_SYS_INFO_PM_CURRENT_VERSION
);

683 i‡(
°©us
 < 0)

685 
numCpus
 = -1;

688 
numCpus
 = 
pm_sysöfo
.
idÀ_vp_cou¡
;

690 #ifde‡
DEBUG_THREADS


691 
	`GC_¥ötf
("Numbî o‡a˘ivêCPU†öÅhi†sy°em: %d\n", 
numCpus
);

693 (
numCpus
);

694 
	}
}

697 #i‡
deföed
(
GC_NETBSD_THREADS
)

698 
	$gë_n˝u
()

700 
mib
[] = {
CTL_HW
,
HW_NCPU
};

701 
ªs
;

702 
size_t
 
Àn
 = (
ªs
);

704 
	`sys˘l
(
mib
, (mib)/(), &
ªs
, &
Àn
, 
NULL
, 0);

705  
ªs
;

706 
	}
}

709 #i‡
deföed
(
GC_LINUX_THREADS
Ë&& deföed(
INCLUDE_LINUX_THREAD_DESCR
)

710 
__thªad
 
	gdummy_thªad_loˇl
;

714 
	$GC_thr_öô
()

716 #i‚de‡
GC_DARWIN_THREADS


717 
dummy
;

719 
GC_thªad
 
t
;

721 i‡(
GC_thr_öôülized
) ;

722 
GC_thr_öôülized
 = 
TRUE
;

724 #ifde‡
HANDLE_FORK


726 
	`±hªad_©f‹k
(
GC_f‹k_¥ï¨e_¥oc
, 
GC_f‹k_∑ª¡_¥oc
,

727 
GC_f‹k_chûd_¥oc
);

729 #i‡
	`deföed
(
INCLUDE_LINUX_THREAD_DESCR
)

735 
±r_t
 
thªad_loˇl_addr
 = (±r_t)(&
dummy_thªad_loˇl
);

736 
±r_t
 
maö_thªad_°¨t
, 
maö_thªad_íd
;

737 i‡(!
	`GC_í˛osög_m≠pög
(
thªad_loˇl_addr
, &
maö_thªad_°¨t
,

738 &
maö_thªad_íd
)) {

739 
	`ABORT
("FailedÅo find mapping for mainÅhreadÅhreadÜocals");

741 
	`GC_add_roŸs_ö√r
(
maö_thªad_°¨t
, 
maö_thªad_íd
, 
FALSE
);

745 
t
 = 
	`GC_√w_thªad
(
	`±hªad_£lf
());

746 #ifde‡
GC_DARWIN_THREADS


747 
t
 -> 
°›_öfo
.
mach_thªad
 = 
	`mach_thªad_£lf
();

749 
t
 -> 
°›_öfo
.
°ack_±r
 = (
±r_t
)(&
dummy
);

751 
t
 -> 
Êags
 = 
DETACHED
 | 
MAIN_THREAD
;

753 
	`GC_°›_öô
();

757 * 
≈rocs_°rög
 = 
	`GETENV
("GC_NPROCS");

758 
GC_≈rocs
 = -1;

759 i‡(
≈rocs_°rög
 !
NULL
Ë
GC_≈rocs
 = 
	`©oi
(nprocs_string);

761 i‡(
GC_≈rocs
 <= 0) {

762 #i‡
	`deföed
(
GC_HPUX_THREADS
)

763 
GC_≈rocs
 = 
	`±hªad_num_¥o˚ss‹s_≈
();

765 #i‡
	`deföed
(
GC_OSF1_THREADS
Ë|| deföed(
GC_AIX_THREADS
) \

766 || 
	`deföed
(
GC_SOLARIS_THREADS
Ë|| deföed(
GC_GNU_THREADS
)

767 
GC_≈rocs
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

768 i‡(
GC_≈rocs
 <= 0) GC_nprocs = 1;

770 #i‡
	`deföed
(
GC_IRIX_THREADS
)

771 
GC_≈rocs
 = 
	`sysc⁄f
(
_SC_NPROC_ONLN
);

772 i‡(
GC_≈rocs
 <= 0) GC_nprocs = 1;

774 #i‡
	`deföed
(
GC_NETBSD_THREADS
)

775 
GC_≈rocs
 = 
	`gë_n˝u
();

777 #i‡
	`deföed
(
GC_DARWIN_THREADS
Ë|| deföed(
GC_FREEBSD_THREADS
)

778 
n˝us
 = 1;

779 
size_t
 
Àn
 = (
n˝us
);

780 
	`sys˘l
(([2]Ë{
CTL_HW
, 
HW_NCPU
}, 2, &
n˝us
, &
Àn
, 
NULL
, 0);

781 
GC_≈rocs
 = 
n˝us
;

783 #i‡
	`deföed
(
GC_LINUX_THREADS
Ë|| deföed(
GC_DGUX386_THREADS
)

784 
GC_≈rocs
 = 
	`GC_gë_≈rocs
();

787 i‡(
GC_≈rocs
 <= 0) {

788 
	`WARN
("GC_gë_≈rocs(Ëªtu∫ed %ld\n", 
GC_≈rocs
);

789 
GC_≈rocs
 = 2;

790 #ifde‡
PARALLEL_MARK


791 
GC_m¨kîs
 = 1;

794 #ifde‡
PARALLEL_MARK


796 * 
m¨kîs_°rög
 = 
	`GETENV
("GC_MARKERS");

797 i‡(
m¨kîs_°rög
 !
NULL
) {

798 
GC_m¨kîs
 = 
	`©oi
(
m¨kîs_°rög
);

800 
GC_m¨kîs
 = 
GC_≈rocs
;

805 #ifde‡
PARALLEL_MARK


806 i‡(
GC_¥öt_°©s
) {

807 
	`GC_log_¥ötf
("Number ofÖrocessors = %ld, "

808 "numbî o‡m¨kîÅhªad†%ld\n", 
GC_≈rocs
, 
GC_m¨kîs
);

810 i‡(
GC_m¨kîs
 == 1) {

811 
GC_∑øŒñ
 = 
FALSE
;

812 i‡(
GC_¥öt_°©s
) {

813 
	`GC_log_¥ötf
(

817 
GC_∑øŒñ
 = 
TRUE
;

819 
GC_time_limô
 = 
GC_TIME_UNLIMITED
;

822 i‡(
GC_∑øŒñ
Ë
	`°¨t_m¨k_thªads
();

824 
	}
}

832 
	$GC_öô_∑øŒñ
()

834 i‡(
∑øŒñ_öôülized
) ;

835 
∑øŒñ_öôülized
 = 
TRUE
;

838 i‡(!
GC_is_öôülized
Ë
	`GC_öô
();

840 #i‡
	`deföed
(
THREAD_LOCAL_ALLOC
)

841 
	`LOCK
();

842 
	`GC_öô_thªad_loˇl
(&(
	`GC_lookup_thªad
(
	`±hªad_£lf
())->
éfs
));

843 
	`UNLOCK
();

845 
	}
}

848 #i‡!
deföed
(
GC_DARWIN_THREADS
)

849 
	$WRAP_FUNC
(
±hªad_sigmask
)(
how
, c⁄° 
sig£t_t
 *
£t
, sig£t_à*
o£t
)

851 
sig£t_t
 
fudged_£t
;

853 
	`INIT_REAL_SYMS
();

854 i‡(
£t
 !
NULL
 && (
how
 =
SIG_BLOCK
 || how =
SIG_SETMASK
)) {

855 
fudged_£t
 = *
£t
;

856 
	`sigdñ£t
(&
fudged_£t
, 
SIG_SUSPEND
);

857 
£t
 = &
fudged_£t
;

859 (
	`REAL_FUNC
(
±hªad_sigmask
)(
how
, 
£t
, 
o£t
));

860 
	}
}

866 
	sblockög_d©a
 {

867 (*
	m‚
)(*);

868 *
	m¨g
;

871 
	$GC_do_blockög_ö√r
(
±r_t
 
d©a
, * 
c⁄ãxt
) {

872 
blockög_d©a
 * 
d
 = (blockög_d©®*Ë
d©a
;

873 
GC_thªad
 
me
;

874 
	`LOCK
();

875 
me
 = 
	`GC_lookup_thªad
(
	`±hªad_£lf
());

876 
	`GC_ASSERT
(!(
me
 -> 
thªad_blocked
));

877 #ifde‡
SPARC


878 
me
 -> 
°›_öfo
.
°ack_±r
 = 
	`GC_ßve_ªgs_ö_°ack
();

879 #ñi‡!
	`deföed
(
GC_DARWIN_THREADS
)

880 
me
 -> 
°›_öfo
.
°ack_±r
 = 
	`GC_≠¥ox_•
();

882 #ifde‡
IA64


883 
me
 -> 
backög_°‹e_±r
 = 
	`GC_ßve_ªgs_ö_°ack
();

885 
me
 -> 
thªad_blocked
 = 
TRUE
;

887 
	`UNLOCK
();

888 (
d
 -> 
‚
)(d -> 
¨g
);

889 
	`LOCK
();

890 
me
 -> 
thªad_blocked
 = 
FALSE
;

891 
	`UNLOCK
();

892 
	}
}

894 
GC_do_blockög
((*
‚
)(*), *
¨g
) {

895 
blockög_d©a
 
my_d©a
;

897 
my_d©a
.
‚
 = fn;

898 
my_d©a
.
¨g
 =árg;

899 
	`GC_wôh_ˇŒì_ßves_pushed
(
GC_do_blockög_ö√r
, (
±r_t
)(&
my_d©a
));

900 
	}
}

902 
	s°¨t_öfo
 {

903 *(*
	m°¨t_routöe
)(*);

904 *
	m¨g
;

905 
w‹d
 
	mÊags
;

906 
£m_t
 
	mªgi°îed
;

910 
	$GC_uƒegi°î_my_thªad
()

912 
GC_thªad
 
me
;

914 
	`LOCK
();

917 
	`GC_waô_f‹_gc_com∂ëi⁄
(
FALSE
);

918 
me
 = 
	`GC_lookup_thªad
(
	`±hªad_£lf
());

919 #i‡
	`deföed
(
THREAD_LOCAL_ALLOC
)

920 
	`GC_de°roy_thªad_loˇl
(&(
me
->
éfs
));

922 i‡(
me
 -> 
Êags
 & 
DETACHED
) {

923 
	`GC_dñëe_thªad
(
	`±hªad_£lf
());

925 
me
 -> 
Êags
 |
FINISHED
;

927 #i‡
	`deföed
(
THREAD_LOCAL_ALLOC
)

928 
	`GC_ªmove_•ecific
(
GC_thªad_key
);

930 
	`UNLOCK
();

931  
GC_SUCCESS
;

932 
	}
}

939 
	$GC_thªad_exô_¥oc
(*
¨g
)

941 
	`GC_uƒegi°î_my_thªad
();

942 
	}
}

944 
	$WRAP_FUNC
(
±hªad_joö
)(
±hªad_t
 
thªad
, **
ªtvÆ
)

946 
ªsu…
;

947 
GC_thªad
 
thªad_gc_id
;

949 
	`INIT_REAL_SYMS
();

950 
	`LOCK
();

951 
thªad_gc_id
 = 
	`GC_lookup_thªad
(
thªad
);

954 
	`UNLOCK
();

955 
ªsu…
 = 
	`REAL_FUNC
(
±hªad_joö
)(
thªad
, 
ªtvÆ
);

956 #i‡
	`deföed
 (
GC_FREEBSD_THREADS
)

965 i‡(
ªsu…
 =
EINTR
)Ñesult = 0;

967 i‡(
ªsu…
 == 0) {

968 
	`LOCK
();

970 
	`GC_dñëe_gc_thªad
(
thªad_gc_id
);

971 
	`UNLOCK
();

973  
ªsu…
;

974 
	}
}

977 
	$WRAP_FUNC
(
±hªad_dëach
)(
±hªad_t
 
thªad
)

979 
ªsu…
;

980 
GC_thªad
 
thªad_gc_id
;

982 
	`INIT_REAL_SYMS
();

983 
	`LOCK
();

984 
thªad_gc_id
 = 
	`GC_lookup_thªad
(
thªad
);

985 
	`UNLOCK
();

986 
ªsu…
 = 
	`REAL_FUNC
(
±hªad_dëach
)(
thªad
);

987 i‡(
ªsu…
 == 0) {

988 
	`LOCK
();

989 
thªad_gc_id
 -> 
Êags
 |
DETACHED
;

991 i‡(
thªad_gc_id
 -> 
Êags
 & 
FINISHED
) {

992 
	`GC_dñëe_gc_thªad
(
thªad_gc_id
);

994 
	`UNLOCK
();

996  
ªsu…
;

997 
	}
}

999 
GC_boﬁ
 
	gGC_ö_thªad_¸óti⁄
 = 
FALSE
;

1001 
GC_thªad
 
	$GC_ªgi°î_my_thªad_ö√r
(
GC_°ack_ba£
 *
sb
,

1002 
±hªad_t
 
my_±hªad
)

1004 
GC_thªad
 
me
;

1006 
GC_ö_thªad_¸óti⁄
 = 
TRUE
;

1007 
me
 = 
	`GC_√w_thªad
(
my_±hªad
);

1008 
GC_ö_thªad_¸óti⁄
 = 
FALSE
;

1009 #ifde‡
GC_DARWIN_THREADS


1010 
me
 -> 
°›_öfo
.
mach_thªad
 = 
	`mach_thªad_£lf
();

1012 
me
 -> 
°›_öfo
.
°ack_±r
 = 
sb
 -> 
mem_ba£
;

1014 
me
 -> 
°ack_íd
 = 
sb
 -> 
mem_ba£
;

1015 #ifde‡
IA64


1016 
me
 -> 
backög_°‹e_íd
 = 
sb
 -> 
ªg_ba£
;

1018  
me
;

1019 
	}
}

1021 
	$GC_ªgi°î_my_thªad
(
GC_°ack_ba£
 *
sb
)

1023 
±hªad_t
 
my_±hªad
 = 
	`±hªad_£lf
();

1024 
GC_thªad
 
me
;

1026 
	`LOCK
();

1027 
me
 = 
	`GC_lookup_thªad
(
my_±hªad
);

1028 i‡(0 =
me
) {

1029 
me
 = 
	`GC_ªgi°î_my_thªad_ö√r
(
sb
, 
my_±hªad
);

1030 
me
 -> 
Êags
 |
DETACHED
;

1033 
	`UNLOCK
();

1034  
GC_SUCCESS
;

1036 
	`UNLOCK
();

1037  
GC_DUPLICATE
;

1039 
	}
}

1041 * 
	$GC_ö√r_°¨t_routöe
(
GC_°ack_ba£
 *
sb
, * 
¨g
)

1043 
°¨t_öfo
 * 
si
 = 
¨g
;

1044 * 
ªsu…
;

1045 
GC_thªad
 
me
;

1046 
±hªad_t
 
my_±hªad
;

1047 *(*
°¨t
)(*);

1048 *
°¨t_¨g
;

1050 
my_±hªad
 = 
	`±hªad_£lf
();

1051 #ifde‡
DEBUG_THREADS


1052 
	`GC_¥ötf
("SèπögÅhªad 0x%x\n", ()
my_±hªad
);

1053 
	`GC_¥ötf
("pid = %ld\n", (Ë
	`gëpid
());

1054 
	`GC_¥ötf
("• = 0x%lx\n", (Ë&
¨g
);

1056 
	`LOCK
();

1057 
me
 = 
	`GC_ªgi°î_my_thªad_ö√r
(
sb
, 
my_±hªad
);

1058 
me
 -> 
Êags
 = 
si
 -> flags;

1059 
	`UNLOCK
();

1060 
°¨t
 = 
si
 -> 
°¨t_routöe
;

1061 #ifde‡
DEBUG_THREADS


1062 
	`GC_¥ötf
("°¨t_routöê%p\n", (*)
°¨t
);

1064 
°¨t_¨g
 = 
si
 -> 
¨g
;

1065 
	`£m_po°
(&(
si
 -> 
ªgi°îed
));

1067 
	`±hªad_˛ónup_push
(
GC_thªad_exô_¥oc
, 0);

1068 #i‡
	`deföed
(
THREAD_LOCAL_ALLOC
)

1069 
	`LOCK
();

1070 
	`GC_öô_thªad_loˇl
(&(
me
->
éfs
));

1071 
	`UNLOCK
();

1073 
ªsu…
 = (*
°¨t
)(
°¨t_¨g
);

1074 #i‡
DEBUG_THREADS


1075 
	`GC_¥ötf
("FöishögÅhªad 0x%x\n", ()
	`±hªad_£lf
());

1077 
me
 -> 
°©us
 = 
ªsu…
;

1078 
	`±hªad_˛ónup_p›
(1);

1082 (
ªsu…
);

1083 
	}
}

1085 * 
	$GC_°¨t_routöe
(* 
¨g
)

1087 #ifde‡
INCLUDE_LINUX_THREAD_DESCR


1088 
GC_°ack_ba£
 
sb
;

1090 #ifde‡
REDIRECT_MALLOC


1095 
	`GC_dißbÀ
();

1097 i‡(
	`GC_gë_°ack_ba£
(&
sb
Ë!
GC_SUCCESS
)

1098 
	`ABORT
("FailedÅo getÅhread stack base.");

1099 #ifde‡
REDIRECT_MALLOC


1100 
	`GC_íabÀ
();

1102  
	`GC_ö√r_°¨t_routöe
(&
sb
, 
¨g
);

1104  
	`GC_ˇŒ_wôh_°ack_ba£
(
GC_ö√r_°¨t_routöe
, 
¨g
);

1106 
	}
}

1109 
	$WRAP_FUNC
(
±hªad_¸óã
)(
±hªad_t
 *
√w_thªad
,

1110 c⁄° 
±hªad_©å_t
 *
©å
,

1111 *(*
°¨t_routöe
)(*), *
¨g
)

1113 
ªsu…
;

1114 
dëach°©e
;

1115 
w‹d
 
my_Êags
 = 0;

1116 
°¨t_öfo
 * 
si
;

1124 
	`INIT_REAL_SYMS
();

1125 
	`LOCK
();

1126 
si
 = (
°¨t_öfo
 *)
	`GC_INTERNAL_MALLOC
((start_info),

1127 
NORMAL
);

1128 
	`UNLOCK
();

1129 i‡(!
∑øŒñ_öôülized
Ë
	`GC_öô_∑øŒñ
();

1130 i‡(0 =
si
Ë(
ENOMEM
);

1131 
	`£m_öô
(&(
si
 -> 
ªgi°îed
), 0, 0);

1132 
si
 -> 
°¨t_routöe
 = start_routine;

1133 
si
 -> 
¨g
 =árg;

1134 
	`LOCK
();

1135 i‡(!
GC_thr_öôülized
Ë
	`GC_thr_öô
();

1136 #ifde‡
GC_ASSERTIONS


1138 
size_t
 
°ack_size
 = 0;

1139 i‡(
NULL
 !
©å
) {

1140 
	`±hªad_©å_gë°acksize
(
©å
, &
°ack_size
);

1142 i‡(0 =
°ack_size
) {

1143 
±hªad_©å_t
 
my_©å
;

1144 
	`±hªad_©å_öô
(&
my_©å
);

1145 
	`±hªad_©å_gë°acksize
(&
my_©å
, &
°ack_size
);

1149 i‡(0 =
°ack_size
) {

1150 #i‚de‡
SOLARIS


1151 
	`WARN
("FailedÅo get stack size forássertion checking\n", 0);

1153 
°ack_size
 = 1000000;

1155 #ifde‡
PARALLEL_MARK


1156 
	`GC_ASSERT
(
°ack_size
 >(8*
HBLKSIZE
*(
w‹d
)));

1160 
	`GC_ASSERT
(
°ack_size
 >= 65536);

1167 i‡(
NULL
 =
©å
) {

1168 
dëach°©e
 = 
PTHREAD_CREATE_JOINABLE
;

1170 
	`±hªad_©å_gëdëach°©e
(
©å
, &
dëach°©e
);

1172 i‡(
PTHREAD_CREATE_DETACHED
 =
dëach°©e
Ë
my_Êags
 |
DETACHED
;

1173 
si
 -> 
Êags
 = 
my_Êags
;

1174 
	`UNLOCK
();

1175 #ifde‡
DEBUG_THREADS


1176 
	`GC_¥ötf
("AboutÅo startÇewÅhread fromÅhread 0x%x\n",

1177 ()
	`±hªad_£lf
());

1179 
GC_√ed_to_lock
 = 
TRUE
;

1181 
ªsu…
 = 
	`REAL_FUNC
(
±hªad_¸óã
)(
√w_thªad
, 
©å
, 
GC_°¨t_routöe
, 
si
);

1183 #ifde‡
DEBUG_THREADS


1184 
	`GC_¥ötf
("SèπedÅhªad 0x%x\n", ()(*
√w_thªad
));

1190 i‡(0 =
ªsu…
) {

1191 0 !
	`£m_waô
(&(
si
 -> 
ªgi°îed
))) {

1192 i‡(
EINTR
 !
î∫o
Ë
	`ABORT
("sem_wait failed");

1195 
	`£m_de°roy
(&(
si
 -> 
ªgi°îed
));

1196 
	`LOCK
();

1197 
	`GC_INTERNAL_FREE
(
si
);

1198 
	`UNLOCK
();

1200 (
ªsu…
);

1201 
	}
}

1205 
	$GC_∑u£
()

1207 
i
;

1208 #i‡!
	`deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

1209 vﬁ©ûê
w‹d
 
dummy
 = 0;

1212 
i
 = 0; i < 10; ++i) {

1213 #i‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

1214 
__asm__
 
	`__vﬁ©ûe__
 (" " : : : "memory");

1217 
	`GC_no›
(++
dummy
);

1220 
	}
}

1222 
	#SPIN_MAX
 128

	)

1225 vﬁ©ûê
GC_boﬁ
 
	gGC_cﬁÀ˘ög
 = 0;

1230 #i‡!
deföed
(
USE_SPIN_LOCK
Ë|| deföed(
PARALLEL_MARK
)

1247 
	#LOCK_STATS


	)

1248 #ifde‡
LOCK_STATS


1249 
	gGC_•ö_cou¡
 = 0;

1250 
	gGC_block_cou¡
 = 0;

1251 
	gGC_u∆ocked_cou¡
 = 0;

1254 
	$GC_gíîic_lock
(
±hªad_muãx_t
 * 
lock
)

1256 #i‚de‡
NO_PTHREAD_TRYLOCK


1257 
∑u£_Àngth
 = 1;

1258 
i
;

1260 i‡(0 =
	`±hªad_muãx_åylock
(
lock
)) {

1261 #ifde‡
LOCK_STATS


1262 ++
GC_u∆ocked_cou¡
;

1266 ; 
∑u£_Àngth
 <
SPIN_MAX
;Öause_length <<= 1) {

1267 
i
 = 0; i < 
∑u£_Àngth
; ++i) {

1268 
	`GC_∑u£
();

1270 
	`±hªad_muãx_åylock
(
lock
)) {

1272 #ifde‡
LOCK_STATS


1273 ++
GC_•ö_cou¡
;

1276 
EBUSY
:

1279 
	`ABORT
("UnexpectedÉrror fromÖthread_mutex_trylock");

1283 #ifde‡
LOCK_STATS


1284 ++
GC_block_cou¡
;

1286 
	`±hªad_muãx_lock
(
lock
);

1287 
	}
}

1291 #i‡
deföed
(
USE_SPIN_LOCK
)

1297 vﬁ©ûê
AO_TS_t
 
	gGC_Æloˇã_lock
 = 0;

1300 
	$GC_lock
()

1302 
	#low_•ö_max
 30

	)

1303 
	#high_•ö_max
 
SPIN_MAX


	)

1304 
•ö_max
 = 
low_•ö_max
;

1305 
my_•ö_max
;

1306 
œ°_•ös
 = 0;

1307 
my_œ°_•ös
;

1308 
i
;

1310 i‡(
	`AO_ã°_™d_£t_acquúe
(&
GC_Æloˇã_lock
Ë=
AO_TS_CLEAR
) {

1313 
my_•ö_max
 = 
•ö_max
;

1314 
my_œ°_•ös
 = 
œ°_•ös
;

1315 
i
 = 0; i < 
my_•ö_max
; i++) {

1316 i‡(
GC_cﬁÀ˘ög
 || 
GC_≈rocs
 =1Ë
yõld
;

1317 i‡(
i
 < 
my_œ°_•ös
/2) {

1318 
	`GC_∑u£
();

1321 i‡(
	`AO_ã°_™d_£t_acquúe
(&
GC_Æloˇã_lock
Ë=
AO_TS_CLEAR
) {

1328 
œ°_•ös
 = 
i
;

1329 
•ö_max
 = 
high_•ö_max
;

1334 
•ö_max
 = 
low_•ö_max
;

1335 
yõld
:

1336 
i
 = 0;; ++i) {

1337 i‡(
	`AO_ã°_™d_£t_acquúe
(&
GC_Æloˇã_lock
Ë=
AO_TS_CLEAR
) {

1340 
	#SLEEP_THRESHOLD
 12

	)

1347 i‡(
i
 < 
SLEEP_THRESHOLD
) {

1348 
	`sched_yõld
();

1350 
time•ec
 
ts
;

1352 i‡(
i
 > 24) i = 24;

1355 
ts
.
tv_£c
 = 0;

1356 
ts
.
tv_n£c
 = 1 << 
i
;

1357 
	`«no¶ìp
(&
ts
, 0);

1360 
	}
}

1363 
	$GC_lock
()

1365 #i‚de‡
NO_PTHREAD_TRYLOCK


1366 i‡(1 =
GC_≈rocs
 || 
GC_cﬁÀ˘ög
) {

1367 
	`±hªad_muãx_lock
(&
GC_Æloˇã_ml
);

1369 
	`GC_gíîic_lock
(&
GC_Æloˇã_ml
);

1372 
	`±hªad_muãx_lock
(&
GC_Æloˇã_ml
);

1374 
	}
}

1378 #i‡
deföed
(
PARALLEL_MARK
Ë|| deföed(
THREAD_LOCAL_ALLOC
)

1380 #ifde‡
GC_ASSERTIONS


1381 
	gGC_m¨k_lock_hﬁdî
 = 
NO_THREAD
;

1392 
±hªad_muãx_t
 
	gm¨k_muãx
 =

1393 {0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, {0, 0}};

1395 
±hªad_muãx_t
 
	gm¨k_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

1398 
±hªad_c⁄d_t
 
	gbuûdî_cv
 = 
PTHREAD_COND_INITIALIZER
;

1400 
	$GC_acquúe_m¨k_lock
()

1407 
	`GC_gíîic_lock
(&
m¨k_muãx
);

1408 #ifde‡
GC_ASSERTIONS


1409 
GC_m¨k_lock_hﬁdî
 = 
	`NUMERIC_THREAD_ID
(
	`±hªad_£lf
());

1411 
	}
}

1413 
	$GC_ªÀa£_m¨k_lock
()

1415 
	`GC_ASSERT
(
GC_m¨k_lock_hﬁdî
 =
	`NUMERIC_THREAD_ID
(
	`±hªad_£lf
()));

1416 #ifde‡
GC_ASSERTIONS


1417 
GC_m¨k_lock_hﬁdî
 = 
NO_THREAD
;

1419 i‡(
	`±hªad_muãx_u∆ock
(&
m¨k_muãx
) != 0) {

1420 
	`ABORT
("pthread_mutex_unlock failed");

1422 
	}
}

1429 
	$GC_waô_buûdî
()

1431 
	`GC_ASSERT
(
GC_m¨k_lock_hﬁdî
 =
	`NUMERIC_THREAD_ID
(
	`±hªad_£lf
()));

1432 #ifde‡
GC_ASSERTIONS


1433 
GC_m¨k_lock_hﬁdî
 = 
NO_THREAD
;

1435 i‡(
	`±hªad_c⁄d_waô
(&
buûdî_cv
, &
m¨k_muãx
) != 0) {

1436 
	`ABORT
("pthread_cond_wait failed");

1438 
	`GC_ASSERT
(
GC_m¨k_lock_hﬁdî
 =
NO_THREAD
);

1439 #ifde‡
GC_ASSERTIONS


1440 
GC_m¨k_lock_hﬁdî
 = 
	`NUMERIC_THREAD_ID
(
	`±hªad_£lf
());

1442 
	}
}

1444 
	$GC_waô_f‹_ª˛aim
()

1446 
	`GC_acquúe_m¨k_lock
();

1447 
GC_Ê_buûdî_cou¡
 > 0) {

1448 
	`GC_waô_buûdî
();

1450 
	`GC_ªÀa£_m¨k_lock
();

1451 
	}
}

1453 
	$GC_nŸify_Æl_buûdî
()

1455 
	`GC_ASSERT
(
GC_m¨k_lock_hﬁdî
 =
	`NUMERIC_THREAD_ID
(
	`±hªad_£lf
()));

1456 i‡(
	`±hªad_c⁄d_brﬂdˇ°
(&
buûdî_cv
) != 0) {

1457 
	`ABORT
("pthread_cond_broadcast failed");

1459 
	}
}

1463 #ifde‡
PARALLEL_MARK


1465 
±hªad_c⁄d_t
 
	gm¨k_cv
 = 
PTHREAD_COND_INITIALIZER
;

1467 
	$GC_waô_m¨kî
()

1469 
	`GC_ASSERT
(
GC_m¨k_lock_hﬁdî
 =
	`NUMERIC_THREAD_ID
(
	`±hªad_£lf
()));

1470 #ifde‡
GC_ASSERTIONS


1471 
GC_m¨k_lock_hﬁdî
 = 
NO_THREAD
;

1473 i‡(
	`±hªad_c⁄d_waô
(&
m¨k_cv
, &
m¨k_muãx
) != 0) {

1474 
	`ABORT
("pthread_cond_wait failed");

1476 
	`GC_ASSERT
(
GC_m¨k_lock_hﬁdî
 =
NO_THREAD
);

1477 #ifde‡
GC_ASSERTIONS


1478 
GC_m¨k_lock_hﬁdî
 = 
	`NUMERIC_THREAD_ID
(
	`±hªad_£lf
());

1480 
	}
}

1482 
	$GC_nŸify_Æl_m¨kî
()

1484 i‡(
	`±hªad_c⁄d_brﬂdˇ°
(&
m¨k_cv
) != 0) {

1485 
	`ABORT
("pthread_cond_broadcast failed");

1487 
	}
}

	@ptr_chck.c

19 
	~"¥iv©e/gc_pm¨k.h
"

21 
	$GC_deÁu…_ßme_obj_¥öt_¥oc
(* 
p
, * 
q
)

23 
	`GC_îr_¥ötf
("%∞™d %∞¨ênŸ i¿thêßmêobje˘\n", 
p
, 
q
);

24 
	`ABORT
("GC_same_objÅest failed");

25 
	}
}

27 (*
GC_ßme_obj_¥öt_¥oc
) (*, *)

28 
GC_deÁu…_ßme_obj_¥öt_¥oc
;

39 * 
	$GC_ßme_obj
(*
p
, *
q
)

41 
hblk
 *
h
;

42 
hdr
 *
hhdr
;

43 
±r_t
 
ba£
, 
limô
;

44 
w‹d
 
sz
;

46 i‡(!
GC_is_öôülized
Ë
	`GC_öô
();

47 
hhdr
 = 
	`HDR
((
w‹d
)
p
);

48 i‡(
hhdr
 == 0) {

49 i‡(
	`divHBLKSZ
((
w‹d
)
p
Ë!divHBLKSZ((w‹d)
q
)

50 && 
	`HDR
((
w‹d
)
q
) != 0) {

51 
Áû
;

53 (
p
);

57 i‡(
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
)) {

58 
h
 = 
	`HBLKPTR
(
p
Ë- (
w‹d
)
hhdr
;

59 
hhdr
 = 
	`HDR
(
h
);

60 
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
)) {

61 
h
 = 
	`FORWARDED_ADDR
(h, 
hhdr
);

62 
hhdr
 = 
	`HDR
(
h
);

64 
limô
 = (
±r_t
)
h
 + 
hhdr
 -> 
hb_sz
;

65 i‡((
±r_t
)
p
 >
limô
 || (±r_t)
q
 >limô || (±r_t)q < (±r_t)
h
 ) {

66 
Áû
;

68 (
p
);

70 
sz
 = 
hhdr
 -> 
hb_sz
;

71 i‡(
sz
 > 
MAXOBJBYTES
) {

72 
ba£
 = (
±r_t
)
	`HBLKPTR
(
p
);

73 
limô
 = 
ba£
 + 
sz
;

74 i‡((
±r_t
)
p
 >
limô
) {

75 
Áû
;

78 
size_t
 
off£t
;

79 
size_t
 
pdi•l
 = 
	`HBLKDISPL
(
p
);

81 
off£t
 = 
pdi•l
 % 
sz
;

82 i‡(
	`HBLKPTR
(
p
Ë!HBLKPTR(
q
)Ë
Áû
;

86 
ba£
 = (
±r_t
)
p
 - 
off£t
;

87 
limô
 = 
ba£
 + 
sz
;

93 i‡((
±r_t
)
q
 >
limô
 || (±r_t)q < 
ba£
) {

94 
Áû
;

96 (
p
);

97 
Áû
:

98 (*
GC_ßme_obj_¥öt_¥oc
)((
±r_t
)
p
, (±r_t)
q
);

99 (
p
);

100 
	}
}

102 
	$GC_deÁu…_is_vÆid_di•œ˚mít_¥öt_¥oc
 (*
p
)

104 
	`GC_îr_¥ötf
("%∞d€†nŸÖoöàtÿvÆid obje˘ di•œ˚mít\n", 
p
);

105 
	`ABORT
("GC_is_valid_displacementÅest failed");

106 
	}
}

108 (*
GC_is_vÆid_di•œ˚mít_¥öt_¥oc
)(*) =

109 
GC_deÁu…_is_vÆid_di•œ˚mít_¥öt_¥oc
;

117 * 
	$GC_is_vÆid_di•œ˚mít
(*
p
)

119 
hdr
 *
hhdr
;

120 
w‹d
 
pdi•l
;

121 
w‹d
 
off£t
;

122 
hblk
 *
h
;

123 
w‹d
 
sz
;

125 i‡(!
GC_is_öôülized
Ë
	`GC_öô
();

126 
hhdr
 = 
	`HDR
((
w‹d
)
p
);

127 i‡(
hhdr
 =0Ë(
p
);

128 
h
 = 
	`HBLKPTR
(
p
);

129 i‡(
GC_Æl_öãri‹_poöãrs
) {

130 
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
)) {

131 
h
 = 
	`FORWARDED_ADDR
(h, 
hhdr
);

132 
hhdr
 = 
	`HDR
(
h
);

135 i‡(
	`IS_FORWARDING_ADDR_OR_NIL
(
hhdr
)) {

136 
Áû
;

138 
sz
 = 
hhdr
 -> 
hb_sz
;

139 
pdi•l
 = 
	`HBLKDISPL
(
p
);

140 
off£t
 = 
pdi•l
 % 
sz
;

141 i‡((
sz
 > 
MAXOBJBYTES
 && (
±r_t
)
p
 >’å_t)
h
 + sz)

142 || !
GC_vÆid_off£ts
[
off£t
]

143 || (
±r_t
)
p
 - 
off£t
 + 
sz
 > (±r_t)(
h
 + 1)) {

144 
Áû
;

146 (
p
);

147 
Áû
:

148 (*
GC_is_vÆid_di•œ˚mít_¥öt_¥oc
)((
±r_t
)
p
);

149 (
p
);

150 
	}
}

152 
	$GC_deÁu…_is_visibÀ_¥öt_¥oc
(* 
p
)

154 
	`GC_îr_¥ötf
("%∞i†nŸá GC visibÀÖoöã∏loˇti⁄\n", 
p
);

155 
	`ABORT
("GC_is_visibleÅest failed");

156 
	}
}

158 (*
GC_is_visibÀ_¥öt_¥oc
)(* 
p
Ë
GC_deÁu…_is_visibÀ_¥öt_¥oc
;

161 
GC_boﬁ
 
	$GC_⁄_°ack
(
±r_t
 
p
)

163 #ifde‡
THREADS


164 (
TRUE
);

166 
dummy
;

167 #ifde‡
STACK_GROWS_DOWN


168 i‡((
±r_t
)
p
 >’å_t)(&
dummy
Ë&& (±r_tÌ < 
GC_°ackbŸtom
 ) {

169 (
TRUE
);

172 i‡((
±r_t
)
p
 <’å_t)(&
dummy
Ë&& (±r_tÌ > 
GC_°ackbŸtom
 ) {

173 (
TRUE
);

176 (
FALSE
);

178 
	}
}

188 * 
	$GC_is_visibÀ
(*
p
)

190 
hdr
 *
hhdr
;

192 i‡((
w‹d
)
p
 & (
ALIGNMENT
 - 1)Ë
Áû
;

193 i‡(!
GC_is_öôülized
Ë
	`GC_öô
();

194 #ifde‡
THREADS


195 
hhdr
 = 
	`HDR
((
w‹d
)
p
);

196 i‡(
hhdr
 !0 && 
	`GC_ba£
(
p
) == 0) {

197 
Áû
;

200 (
p
);

204 i‡(
	`GC_⁄_°ack
(
p
)) (p);

205 
hhdr
 = 
	`HDR
((
w‹d
)
p
);

206 i‡(
hhdr
 == 0) {

207 
GC_boﬁ
 
ªsu…
;

209 i‡(
	`GC_is_°©ic_roŸ
(
p
)) (p);

211 #i‡(
	`deföed
(
DYNAMIC_LOADING
Ë|| deföed(
MSWIN32
) || \

212 
	`deföed
(
MSWINCE
Ë|| deföed(
PCR
))

213 
	`GC_ªgi°î_dy«mic_libørõs
();

214 
ªsu…
 = 
	`GC_is_°©ic_roŸ
(
p
);

215 i‡(
ªsu…
Ë(
p
);

217 
Áû
;

220 
w‹d
 
des¸
;

221 
±r_t
 
ba£
 = 
	`GC_ba£
(
p
);

223 i‡(
ba£
 =0Ë
Áû
;

224 i‡(
	`HBLKPTR
(
ba£
Ë!HBLKPTR(
p
)Ë
hhdr
 = 
	`HDR
((
w‹d
)p);

225 
des¸
 = 
hhdr
 -> 
hb_des¸
;

226 
ªåy
:

227 
des¸
 & 
GC_DS_TAGS
) {

228 
GC_DS_LENGTH
:

229 i‡((
w‹d
)((
±r_t
)
p
 - (±r_t)
ba£
Ë> (w‹d)
des¸
Ë
Áû
;

231 
GC_DS_BITMAP
:

232 i‡((
±r_t
)
p
 - (±r_t)
ba£


233 >
	`WORDS_TO_BYTES
(
BITMAP_BITS
)

234 || ((
w‹d
)
p
 & ((w‹dË- 1))Ë
Áû
;

235 i‡(!((1 << (
WORDSZ
 - ((
±r_t
)
p
 - (±r_t)
ba£
) - 1))

236 & 
des¸
)Ë
Áû
;

238 
GC_DS_PROC
:

242 
GC_DS_PER_OBJECT
:

243 i‡((
sig√d_w‹d
)
des¸
 >= 0) {

244 
des¸
 = *(
w‹d
 *)((
±r_t
)
ba£
 + (des¸ & ~
GC_DS_TAGS
));

246 
±r_t
 
ty≥_des¸
 = *’å_à*)
ba£
;

247 
des¸
 = *(
w‹d
 *)(
ty≥_des¸


248 - (
des¸
 - (
GC_DS_PER_OBJECT


249 - 
GC_INDIR_PER_OBJ_BIAS
)));

251 
ªåy
;

253 (
p
);

256 
Áû
:

257 (*
GC_is_visibÀ_¥öt_¥oc
)((
±r_t
)
p
);

258 (
p
);

259 
	}
}

262 * 
	$GC_¥e_ö¸
 (**
p
, 
size_t
 
how_much
)

264 * 
öôül
 = *
p
;

265 * 
ªsu…
 = 
	`GC_ßme_obj
((*)((
w‹d
)
öôül
 + 
how_much
), initial);

267 i‡(!
GC_Æl_öãri‹_poöãrs
) {

268 (Ë
	`GC_is_vÆid_di•œ˚mít
(
ªsu…
);

270  (*
p
 = 
ªsu…
);

271 
	}
}

273 * 
	$GC_po°_ö¸
 (**
p
, 
size_t
 
how_much
)

275 * 
öôül
 = *
p
;

276 * 
ªsu…
 = 
	`GC_ßme_obj
((*)((
w‹d
)
öôül
 + 
how_much
), initial);

278 i‡(!
GC_Æl_öãri‹_poöãrs
) {

279 (Ë
	`GC_is_vÆid_di•œ˚mít
(
ªsu…
);

281 *
p
 = 
ªsu…
;

282 (
öôül
);

283 
	}
}

	@real_malloc.c

17 #ifde‡
PCR


23 
	#PCR_NO_RENAME


	)

24 
	~<°dlib.h
>

26 * 
	$ªÆ_mÆloc
(
size_t
 
size
)

28 (
	`mÆloc
(
size
));

29 
	}
}

	@reclaim.c

17 
	~<°dio.h
>

18 
	~"¥iv©e/gc_¥iv.h
"

20 
sig√d_w‹d
 
	gGC_byãs_found
 = 0;

25 #i‡
deföed
(
PARALLEL_MARK
Ë|| deföed(
THREAD_LOCAL_ALLOC
)

26 
w‹d
 
	gGC_Ê_buûdî_cou¡
 = 0;

35 
	#MAX_LEAKED
 40

	)

36 
±r_t
 
	gGC_Àaked
[
MAX_LEAKED
];

37 
	gGC_n_Àaked
 = 0;

39 
GC_boﬁ
 
	gGC_have_îr‹s
 = 
FALSE
;

41 
	$GC_add_Àaked
(
±r_t
 
Àaked
)

43 i‡(
GC_n_Àaked
 < 
MAX_LEAKED
) {

44 
GC_have_îr‹s
 = 
TRUE
;

45 
GC_Àaked
[
GC_n_Àaked
++] = 
Àaked
;

47 
	`GC_£t_m¨k_bô
(
Àaked
);

49 
	}
}

51 
GC_boﬁ
 
	g¥ötög_îr‹s
 = 
FALSE
;

54 
	$GC_¥öt_Æl_îr‹s
 ()

56 
i
;

58 
	`LOCK
();

59 i‡(
¥ötög_îr‹s
) {

60 
	`UNLOCK
();

63 
¥ötög_îr‹s
 = 
TRUE
;

64 
	`UNLOCK
();

65 i‡(
GC_debuggög_°¨ãd
Ë
	`GC_¥öt_Æl_smashed
();

66 
i
 = 0; i < 
GC_n_Àaked
; ++i) {

67 
±r_t
 
p
 = 
GC_Àaked
[
i
];

68 i‡(
	`HDR
(
p
Ë-> 
hb_obj_köd
 =
PTRFREE
) {

69 
	`GC_îr_¥ötf
("Leakedátomic objectát ");

71 
	`GC_îr_¥ötf
("Leaked composite objectát ");

73 
	`GC_¥öt_hóp_obj
(
p
);

74 
	`GC_îr_¥ötf
("\n");

75 
	`GC_‰ì
(
p
);

76 
GC_Àaked
[
i
] = 0;

78 
GC_n_Àaked
 = 0;

79 
¥ötög_îr‹s
 = 
FALSE
;

80 
	}
}

95 
GC_boﬁ
 
	$GC_block_em±y
(
hdr
 *
hhdr
)

97  (
hhdr
 -> 
hb_n_m¨ks
 == 0);

98 
	}
}

100 
GC_boﬁ
 
	$GC_block_√¨ly_fuŒ
(
hdr
 *
hhdr
)

102  (
hhdr
 -> 
hb_n_m¨ks
 > 7 * 
	`HBLK_OBJS
(hhd∏-> 
hb_sz
)/8);

103 
	}
}

114 
±r_t
 
	$GC_ª˛aim_˛ór
(
hblk
 *
hbp
, 
hdr
 *
hhdr
, 
size_t
 
sz
,

115 
±r_t
 
li°
, 
sig√d_w‹d
 *
cou¡
)

117 
w‹d
 
bô_no
 = 0;

118 
w‹d
 *
p
, *
q
, *
∂im
;

119 
sig√d_w‹d
 
n_byãs_found
 = 0;

121 
	`GC_ASSERT
(
hhdr
 =
	`GC_föd_hódî
((
±r_t
)
hbp
));

122 
	`GC_ASSERT
(
sz
 =
hhdr
 -> 
hb_sz
);

123 
	`GC_ASSERT
((
sz
 & (
BYTES_PER_WORD
-1)) == 0);

124 
p
 = (
w‹d
 *)(
hbp
->
hb_body
);

125 
∂im
 = (
w‹d
 *)(
hbp
->
hb_body
 + 
HBLKSIZE
 - 
sz
);

128  
p
 <
∂im
 ) {

129 if–
	`m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
) ) {

130 
p
 = (
w‹d
 *)((
±r_t
Ì + 
sz
);

132 
n_byãs_found
 +
sz
;

134 
	`obj_lök
(
p
Ë
li°
;

135 
li°
 = ((
±r_t
)
p
);

137 
q
 = (
w‹d
 *)((
±r_t
)
p
 + 
sz
);

138 #ifde‡
USE_MARK_BYTES


139 
	`GC_ASSERT
(!(
sz
 & 1)

140 && !((
w‹d
)
p
 & (2 * (word) - 1)));

141 
p
[1] = 0;

142 
p
 += 2;

143 
p
 < 
q
) {

144 
	`CLEAR_DOUBLE
(
p
);

145 
p
 += 2;

148 
p
++;

149 
p
 < 
q
) {

150 *
p
++ = 0;

154 
bô_no
 +
	`MARK_BIT_OFFSET
(
sz
);

156 *
cou¡
 +
n_byãs_found
;

157 (
li°
);

158 
	}
}

162 
±r_t
 
	$GC_ª˛aim_unöô
(
hblk
 *
hbp
, 
hdr
 *
hhdr
, 
size_t
 
sz
,

163 
±r_t
 
li°
, 
sig√d_w‹d
 *
cou¡
)

165 
w‹d
 
bô_no
 = 0;

166 
w‹d
 *
p
, *
∂im
;

167 
sig√d_w‹d
 
n_byãs_found
 = 0;

169 
	`GC_ASSERT
(
sz
 =
hhdr
 -> 
hb_sz
);

170 
p
 = (
w‹d
 *)(
hbp
->
hb_body
);

171 
∂im
 = (
w‹d
 *)((
±r_t
)
hbp
 + 
HBLKSIZE
 - 
sz
);

174  
p
 <
∂im
 ) {

175 if–!
	`m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
) ) {

176 
n_byãs_found
 +
sz
;

178 
	`obj_lök
(
p
Ë
li°
;

179 
li°
 = ((
±r_t
)
p
);

181 
p
 = (
w‹d
 *)((
±r_t
Ì + 
sz
);

182 
bô_no
 +
	`MARK_BIT_OFFSET
(
sz
);

184 *
cou¡
 +
n_byãs_found
;

185 (
li°
);

186 
	}
}

190 
	$GC_ª˛aim_check
(
hblk
 *
hbp
, 
hdr
 *
hhdr
, 
w‹d
 
sz
)

192 
w‹d
 
bô_no
 = 0;

193 
±r_t
 
p
, 
∂im
;

195 
	`GC_ASSERT
(
sz
 =
hhdr
 -> 
hb_sz
);

196 
p
 = 
hbp
->
hb_body
;

197 
∂im
 = 
p
 + 
HBLKSIZE
 - 
sz
;

200  
p
 <
∂im
 ) {

201 if–!
	`m¨k_bô_‰om_hdr
(
hhdr
, 
bô_no
) ) {

202 
	`GC_add_Àaked
(
p
);

204 
p
 +
sz
;

205 
bô_no
 +
	`MARK_BIT_OFFSET
(
sz
);

207 
	}
}

215 
±r_t
 
	$GC_ª˛aim_gíîic
(
hblk
 * 
hbp
, 
hdr
 *
hhdr
, 
size_t
 
sz
,

216 
GC_boﬁ
 
öô
, 
±r_t
 
li°
, 
sig√d_w‹d
 *
cou¡
)

218 
±r_t
 
ªsu…
 = 
li°
;

220 
	`GC_ASSERT
(
	`GC_föd_hódî
((
±r_t
)
hbp
Ë=
hhdr
);

221 
	`GC_ªmove_¥Ÿe˘i⁄
(
hbp
, 1, (
hhdr
)->
hb_des¸
 == 0 );

222 i‡(
öô
) {

223 
ªsu…
 = 
	`GC_ª˛aim_˛ór
(
hbp
, 
hhdr
, 
sz
, 
li°
, 
cou¡
);

225 
	`GC_ASSERT
((
hhdr
)->
hb_des¸
 == 0 );

226 
ªsu…
 = 
	`GC_ª˛aim_unöô
(
hbp
, 
hhdr
, 
sz
, 
li°
, 
cou¡
);

228 i‡(
	`IS_UNCOLLECTABLE
(
hhdr
 -> 
hb_obj_köd
)Ë
	`GC_£t_hdr_m¨ks
(hhdr);

229  
ªsu…
;

230 
	}
}

238 
	$GC_ª˛aim_smÆl_n⁄em±y_block
(
hblk
 *
hbp
,

239 
ªp‹t_if_found
, 
sig√d_w‹d
 *
cou¡
)

241 
hdr
 *
hhdr
 = 
	`HDR
(
hbp
);

242 
size_t
 
sz
 = 
hhdr
 -> 
hb_sz
;

243 
köd
 = 
hhdr
 -> 
hb_obj_köd
;

244 
obj_köd
 * 
ok
 = &
GC_obj_köds
[
köd
];

245 **
Êh
 = &(
ok
 -> 
ok_‰ìli°
[
	`BYTES_TO_GRANULES
(
sz
)]);

247 
hhdr
 -> 
hb_œ°_ª˛aimed
 = (Ë
GC_gc_no
;

249 i‡(
ªp‹t_if_found
) {

250 
	`GC_ª˛aim_check
(
hbp
, 
hhdr
, 
sz
);

252 *
Êh
 = 
	`GC_ª˛aim_gíîic
(
hbp
, 
hhdr
, 
sz
,

253 (
ok
 -> 
ok_öô
 || 
GC_debuggög_°¨ãd
),

254 *
Êh
, &
GC_byãs_found
);

256 
	}
}

266 
	$GC_ª˛aim_block
(
hblk
 *
hbp
, 
w‹d
 
ªp‹t_if_found
)

268 
hdr
 * 
hhdr
 = 
	`HDR
(
hbp
);

269 
size_t
 
sz
 = 
hhdr
 -> 
hb_sz
;

270 
obj_köd
 * 
ok
 = &
GC_obj_köds
[
hhdr
 -> 
hb_obj_köd
];

271 
hblk
 ** 
æh
;

273 if–
sz
 > 
MAXOBJBYTES
 ) {

274 if–!
	`m¨k_bô_‰om_hdr
(
hhdr
, 0) ) {

275 i‡(
ªp‹t_if_found
) {

276 
	`GC_add_Àaked
((
±r_t
)
hbp
);

278 
size_t
 
blocks
 = 
	`OBJ_SZ_TO_BLOCKS
(
sz
);

279 i‡(
blocks
 > 1) {

280 
GC_œrge_Ælocd_byãs
 -
blocks
 * 
HBLKSIZE
;

282 
GC_byãs_found
 +
sz
;

283 
	`GC_‰ìhblk
(
hbp
);

286 i‡(
hhdr
 -> 
hb_des¸
 != 0) {

287 
GC_composôe_ö_u£
 +
sz
;

289 
GC_©omic_ö_u£
 +
sz
;

293 
GC_boﬁ
 
em±y
 = 
	`GC_block_em±y
(
hhdr
);

294 #ifde‡
PARALLEL_MARK


301 
	`GC_ASSERT
(
hhdr
 -> 
hb_n_m¨ks
 <2 * (
HBLKSIZE
/
sz
 + 1) + 16);

303 
	`GC_ASSERT
(
sz
 * 
hhdr
 -> 
hb_n_m¨ks
 <
HBLKSIZE
);

305 i‡(
hhdr
 -> 
hb_des¸
 != 0) {

306 
GC_composôe_ö_u£
 +
sz
 * 
hhdr
 -> 
hb_n_m¨ks
;

308 
GC_©omic_ö_u£
 +
sz
 * 
hhdr
 -> 
hb_n_m¨ks
;

310 i‡(
ªp‹t_if_found
) {

311 
	`GC_ª˛aim_smÆl_n⁄em±y_block
(
hbp
, ()
ªp‹t_if_found
,

312 &
GC_byãs_found
);

313 } i‡(
em±y
) {

314 
GC_byãs_found
 +
HBLKSIZE
;

315 
	`GC_‰ìhblk
(
hbp
);

316 } i‡(
TRUE
 !
	`GC_block_√¨ly_fuŒ
(
hhdr
)){

318 
æh
 = &(
ok
 -> 
ok_ª˛aim_li°
[
	`BYTES_TO_GRANULES
(
sz
)]);

319 
hhdr
 -> 
hb_√xt
 = *
æh
;

320 *
æh
 = 
hbp
;

327 
	}
}

329 #i‡!
deföed
(
NO_DEBUGGING
)

334 
	sPröt_°©s


336 
size_t
 
	mnumbî_of_blocks
;

337 
size_t
 
	mtŸÆ_byãs
;

340 #ifde‡
USE_MARK_BYTES


343 
	$GC_n_£t_m¨ks
(
hdr
 *
hhdr
)

345 
ªsu…
 = 0;

346 
i
;

347 
size_t
 
sz
 = 
hhdr
 -> 
hb_sz
;

348 
off£t
 = 
	`MARK_BIT_OFFSET
(
sz
);

349 
limô
 = 
	`FINAL_MARK_BIT
(
sz
);

351 
i
 = 0; i < 
limô
; i +
off£t
) {

352 
ªsu…
 +
hhdr
 -> 
hb_m¨ks
[
i
];

354 
	`GC_ASSERT
(
hhdr
 -> 
hb_m¨ks
[
limô
]);

355 (
ªsu…
);

356 
	}
}

361 
	$£t_bôs
(
w‹d
 
n
)

363 
w‹d
 
m
 = 
n
;

364 
ªsu…
 = 0;

366 
m
 > 0) {

367 i‡(
m
 & 1Ë
ªsu…
++;

368 
m
 >>= 1;

370 (
ªsu…
);

371 
	}
}

374 
	$GC_n_£t_m¨ks
(
hdr
 *
hhdr
)

376 
ªsu…
 = 0;

377 
i
;

378 
n_m¨k_w‹ds
;

379 #ifde‡
MARK_BIT_PER_OBJ


380 
n_objs
 = 
	`HBLK_OBJS
(
hhdr
 -> 
hb_sz
);

382 i‡(0 =
n_objs
)Ç_objs = 1;

383 
n_m¨k_w‹ds
 = 
	`divWORDSZ
(
n_objs
 + 
WORDSZ
 - 1);

385 
n_m¨k_w‹ds
 = 
MARK_BITS_SZ
;

387 
i
 = 0; i < 
n_m¨k_w‹ds
 - 1; i++) {

388 
ªsu…
 +
	`£t_bôs
(
hhdr
 -> 
hb_m¨ks
[
i
]);

390 #ifde‡
MARK_BIT_PER_OBJ


391 
ªsu…
 +
	`£t_bôs
((
hhdr
 -> 
hb_m¨ks
[
n_m¨k_w‹ds
 - 1])

392 << (
n_m¨k_w‹ds
 * 
WORDSZ
 - 
n_objs
));

394 
ªsu…
 +
	`£t_bôs
(
hhdr
 -> 
hb_m¨ks
[
n_m¨k_w‹ds
 - 1]);

396 (
ªsu…
 - 1);

397 
	}
}

402 
	$GC_¥öt_block_des¸
(
hblk
 *
h
, 
w‹d
 
øw_ps
)

404 
hdr
 * 
hhdr
 = 
	`HDR
(
h
);

405 
size_t
 
byãs
 = 
hhdr
 -> 
hb_sz
;

406 
Pröt_°©s
 *
ps
;

407 
n_m¨ks
 = 
	`GC_n_£t_m¨ks
(
hhdr
);

409 i‡(
hhdr
 -> 
hb_n_m¨ks
 !
n_m¨ks
) {

410 
	`GC_¥ötf
("(%u:%u,%u!=%u)", 
hhdr
 -> 
hb_obj_köd
,

411 
byãs
,

412 
hhdr
 -> 
hb_n_m¨ks
, 
n_m¨ks
);

414 
	`GC_¥ötf
("(%u:%u,%u)", 
hhdr
 -> 
hb_obj_köd
,

415 
byãs
, 
n_m¨ks
);

417 
byãs
 +
HBLKSIZE
-1;

418 
byãs
 &~(
HBLKSIZE
-1);

420 
ps
 = (
Pröt_°©s
 *)
øw_ps
;

421 
ps
->
tŸÆ_byãs
 +
byãs
;

422 
ps
->
numbî_of_blocks
++;

423 
	}
}

425 
	$GC_¥öt_block_li°
()

427 
Pröt_°©s
 
p°©s
;

429 
	`GC_¥ötf
("(kind(0=ptrfree,1=normal,2=unc.):size_in_bytes, #_marks_set)\n");

430 
p°©s
.
numbî_of_blocks
 = 0;

431 
p°©s
.
tŸÆ_byãs
 = 0;

432 
	`GC_≠∂y_to_Æl_blocks
(
GC_¥öt_block_des¸
, (
w‹d
)&
p°©s
);

433 
	`GC_¥ötf
("\nblocks = %lu, bytes = %lu\n",

434 ()
p°©s
.
numbî_of_blocks
,

435 ()
p°©s
.
tŸÆ_byãs
);

436 
	}
}

439 
	$GC_¥öt_‰ì_li°
(
köd
, 
size_t
 
sz_ö_gønuÀs
)

441 
obj_köd
 * 
ok
 = &
GC_obj_köds
[
köd
];

442 
±r_t
 
Êh
 = 
ok
 -> 
ok_‰ìli°
[
sz_ö_gønuÀs
];

443 
hblk
 *
œ°Block
 = 0;

444 
n
 = 0;

446 
Êh
){

447 
hblk
 *
block
 = 
	`HBLKPTR
(
Êh
);

448 i‡(
block
 !
œ°Block
){

449 
	`GC_¥ötf
("\nI¿hó∞blockáà0x%x:\n\t", 
block
);

450 
œ°Block
 = 
block
;

452 
	`GC_¥ötf
("%d: 0x%x;", ++
n
, 
Êh
);

453 
Êh
 = 
	`obj_lök
(flh);

455 
	}
}

466 
	$GC_˛ór_Ê_löks
(**
Êp
)

468 *
√xt
 = *
Êp
;

470 0 !
√xt
) {

471 *
Êp
 = 0;

472 
Êp
 = &(
	`obj_lök
(
√xt
));

473 
√xt
 = *
Êp
;

475 
	}
}

481 
	$GC_°¨t_ª˛aim
(
GC_boﬁ
 
ªp‹t_if_found
)

483 
köd
;

485 #i‡
	`deföed
(
PARALLEL_MARK
Ë|| deföed(
THREAD_LOCAL_ALLOC
)

486 
	`GC_ASSERT
(0 =
GC_Ê_buûdî_cou¡
);

489 
GC_composôe_ö_u£
 = 0;

490 
GC_©omic_ö_u£
 = 0;

492 
köd
 = 0; köd < 
GC_n_köds
; kind++) {

493 **
f›
;

494 **
lim
;

495 
hblk
 ** 
æp
;

496 
hblk
 ** 
æim
;

497 
hblk
 ** 
æi°
 = 
GC_obj_köds
[
köd
].
ok_ª˛aim_li°
;

498 
GC_boﬁ
 
should_˛obbî
 = (
GC_obj_köds
[
köd
].
ok_des¸ùt‹
 != 0);

500 i‡(
æi°
 == 0) ;

501 i‡(!
ªp‹t_if_found
) {

502 
lim
 = &(
GC_obj_köds
[
köd
].
ok_‰ìli°
[
MAXOBJGRANULES
+1]);

503  
f›
 = 
GC_obj_köds
[
köd
].
ok_‰ìli°
; f› < 
lim
; fop++ ) {

504 i‡(*
f›
 != 0) {

505 i‡(
should_˛obbî
) {

506 
	`GC_˛ór_Ê_löks
(
f›
);

508 *
f›
 = 0;

514 
æim
 = 
æi°
 + 
MAXOBJGRANULES
+1;

515  
æp
 = 
æi°
;ÑÕ < 
æim
;Ñlp++ ) {

516 *
æp
 = 0;

523 
	`GC_≠∂y_to_Æl_blocks
(
GC_ª˛aim_block
, (
w‹d
)
ªp‹t_if_found
);

525 #ifde‡
EAGER_SWEEP


528 
	`GC_ª˛aim_Æl
((
GC_°›_func
)0, 
FALSE
);

530 #i‡
	`deföed
(
PARALLEL_MARK
Ë|| deföed(
THREAD_LOCAL_ALLOC
)

531 
	`GC_ASSERT
(0 =
GC_Ê_buûdî_cou¡
);

534 
	}
}

541 
	$GC_c⁄töue_ª˛aim
(
size_t
 
sz
 , 
köd
)

543 
hdr
 * 
hhdr
;

544 
hblk
 * 
hbp
;

545 
obj_köd
 * 
ok
 = &(
GC_obj_köds
[
köd
]);

546 
hblk
 ** 
æh
 = 
ok
 -> 
ok_ª˛aim_li°
;

547 **
Êh
 = &(
ok
 -> 
ok_‰ìli°
[
sz
]);

549 i‡(
æh
 == 0) ;

550 
æh
 +
sz
;

551 (
hbp
 = *
æh
) != 0) {

552 
hhdr
 = 
	`HDR
(
hbp
);

553 *
æh
 = 
hhdr
 -> 
hb_√xt
;

554 
	`GC_ª˛aim_smÆl_n⁄em±y_block
(
hbp
, 
FALSE
, &
GC_byãs_found
);

555 i‡(*
Êh
 != 0) ;

557 
	}
}

568 
GC_boﬁ
 
	$GC_ª˛aim_Æl
(
GC_°›_func
 
°›_func
, 
GC_boﬁ
 
ign‹e_ﬁd
)

570 
w‹d
 
sz
;

571 
köd
;

572 
hdr
 * 
hhdr
;

573 
hblk
 * 
hbp
;

574 
obj_köd
 * 
ok
;

575 
hblk
 ** 
æp
;

576 
hblk
 ** 
æh
;

577 
CLOCK_TYPE
 
°¨t_time
;

578 
CLOCK_TYPE
 
d⁄e_time
;

580 i‡(
GC_¥öt_°©s
 =
VERBOSE
)

581 
	`GET_TIME
(
°¨t_time
);

583 
köd
 = 0; köd < 
GC_n_köds
; kind++) {

584 
ok
 = &(
GC_obj_köds
[
köd
]);

585 
æp
 = 
ok
 -> 
ok_ª˛aim_li°
;

586 i‡(
æp
 == 0) ;

587 
sz
 = 1; sz <
MAXOBJGRANULES
; sz++) {

588 
æh
 = 
æp
 + 
sz
;

589 (
hbp
 = *
æh
) != 0) {

590 i‡(
°›_func
 !(
GC_°›_func
)0 && (*stop_func)()) {

591 (
FALSE
);

593 
hhdr
 = 
	`HDR
(
hbp
);

594 *
æh
 = 
hhdr
 -> 
hb_√xt
;

595 i‡(!
ign‹e_ﬁd
 || 
hhdr
 -> 
hb_œ°_ª˛aimed
 =
GC_gc_no
 - 1) {

599 
	`GC_ª˛aim_smÆl_n⁄em±y_block
(
hbp
, 
FALSE
, &
GC_byãs_found
);

604 i‡(
GC_¥öt_°©s
 =
VERBOSE
) {

605 
	`GET_TIME
(
d⁄e_time
);

606 
	`GC_log_¥ötf
("Disposing ofÑeclaimÜistsÅook %lu msecs\n",

607 
	`MS_TIME_DIFF
(
d⁄e_time
,
°¨t_time
));

609 (
TRUE
);

610 
	}
}

	@setjmp_t.c

24 
	~<°dio.h
>

25 
	~<£tjmp.h
>

26 
	~<°rög.h
>

27 
	~"¥iv©e/gc_¥iv.h
"

29 #ifde‡
OS2


32 
	#INCL_DOSFILEMGR


	)

33 
	#INCL_DOSMISC


	)

34 
	#INCL_DOSERRORS


	)

35 
	~<os2.h
>

38 
	$gë∑gesize
()

40 
ULONG
 
ªsu…
[1];

42 i‡(
	`DosQuîySysInfo
(
QSV_PAGE_SIZE
, QSV_PAGE_SIZE,

43 (*)
ªsu…
, (
ULONG
)Ë!
NO_ERROR
) {

44 
	`Ârötf
(
°dîr
, "DosQuerySysInfo failed\n");

45 
ªsu…
[0] = 4096;

47 (()(
ªsu…
[0]));

48 
	}
}

51 °ru˘ {
	ma_a
; * 
	ma_b
;} 
	ga
;

53 * 
	$√°ed_•
()

55 
dummy
;

57 (&
dummy
);

58 
	}
}

60 
	$maö
()

62 
dummy
;

63 
ps
 = 
	`GETPAGESIZE
();

64 
jmp_buf
 
b
;

65 
x
 = ()
	`°æí
("a");

66 
y
 = 0;

68 
	`¥ötf
("Thi†≠≥¨†tÿbê®%†ru¬ög %s\n", 
MACH_TYPE
, 
OS_TYPE
);

69 i‡(
	`√°ed_•
(Ë< &
dummy
) {

70 
	`¥ötf
("StackáppearsÅo grow down, which isÅhe default.\n");

71 
	`¥ötf
("A good guess for STACKBOTTOM onÅhis machine is 0x%lx.\n",

72 (()(&
dummy
Ë+ 
ps
) & ~(ps-1));

74 
	`¥ötf
("StackáppearsÅo grow up.\n");

75 
	`¥ötf
("Define STACK_GROWS_UP in gc_private.h\n");

76 
	`¥ötf
("A good guess for STACKBOTTOM onÅhis machine is 0x%lx.\n",

77 (()(&
dummy
Ë+ 
ps
) & ~(ps-1));

79 
	`¥ötf
("NoteÅhatÅhis may vary between machines of ostensibly\n");

80 
	`¥ötf
("the sameárchitecture (e.g. Sun 3/50sánd 3/80s).\n");

81 
	`¥ötf
("On many machinesÅhe value isÇot fixed.\n");

82 
	`¥ötf
("A good guess for ALIGNMENT onÅhis machine is %ld.\n",

83 ()(&(
a
.
a_b
))-()(&a));

85 
	`¥ötf
("The following isá very dubiousÅest of oneÑoot marking"

87 
	`¥ötf
("Results mayÇot beáccurate/useful:\n");

89 
x
 = 2*x-1;

90 
	`¥ötf
("");

91 
x
 = 2*x-1;

92 
	`£tjmp
(
b
);

93 i‡(
y
 == 1) {

94 i‡(
x
 == 2) {

95 
	`¥ötf
("Setjmp-based generic mark_regs codeÖrobably wont work.\n");

96 
	`¥ötf
("But weÑarelyÅryÅhatánymore. If you have getcontect()\n");

97 
	`¥ötf
("thisÖrobably doesn't matter.\n");

98 } i‡(
x
 == 1) {

99 
	`¥ötf
("Setjmp-basedÑegister marking code may work.\n");

101 
	`¥ötf
("Very strange setjmp implementation.\n");

104 
y
++;

105 
x
 = 2;

106 i‡(
y
 =1Ë
	`l⁄gjmp
(
b
,1);

107 
	`¥ötf
("Some GC internal configuration stuff: \n");

108 
	`¥ötf
("\tWORDSZ = %d, ALIGNMENT = %d, GC_GRANULE_BYTES = %d\n",

109 
WORDSZ
, 
ALIGNMENT
, 
GC_GRANULE_BYTES
);

110 
	`¥ötf
("\tUsing one mark ");

111 #i‡
	`deföed
(
USE_MARK_BYTES
)

112 
	`¥ötf
("byte");

113 #ñi‡
	`deföed
(
USE_MARK_BITS
)

114 
	`¥ötf
("bit");

116 
	`¥ötf
("Öer ");

117 #i‡
	`deföed
(
MARK_BIT_PER_OBJ
)

118 
	`¥ötf
("object.\n");

119 #ñi‡
	`deföed
(
MARK_BIT_PER_GRANULE
)

120 
	`¥ötf
("granule.\n");

122 #ifde‡
THREAD_LOCAL_ALLOC


123 
	`¥ötf
("ThreadÜocalállocationÉnabled.\n");

125 #ifde‡
PARALLEL_MARK


126 
	`¥ötf
("Parallel markingÉnabled.\n");

129 
	}
}

131 
	$g
(
x
)

132 
x
;

134 (
x
);

135 
	}
}

	@specific.c

14 
	~"¥iv©e/gc_¥iv.h
"

15 
	~"¥iv©e/thªad_loˇl_Æloc.h
"

20 #i‡
deföed
(
USE_CUSTOM_SPECIFIC
)

22 
	~"©omic_›s.h
"

24 
t£
 
	gövÆid_t£
 = {
INVALID_QTID
, 0, 0, 
INVALID_THREADID
};

29 
	$PREFIXED
(
key_¸óã
Ë(
tsd
 ** 
key_±r
, (* 
de°ru˘‹
)(*)) {

30 
i
;

31 
tsd
 * 
ªsu…
 = (tsd *)
	`MALLOC_CLEAR
( (tsd));

34 
	`GC_ASSERT
(()(&
övÆid_t£
.
√xt
Ë% (
t£
 *) == 0);

35 i‡(0 =
ªsu…
Ë 
ENOMEM
;

36 
	`±hªad_muãx_öô
(&(
ªsu…
 -> 
lock
), 
NULL
);

37 
i
 = 0; i < 
TS_CACHE_SIZE
; ++i) {

38 
ªsu…
 -> 
ˇche
[
i
] = &
övÆid_t£
;

40 #ifde‡
GC_ASSERTIONS


41 
i
 = 0; i < 
TS_HASH_SIZE
; ++i) {

42 
	`GC_ASSERT
(
ªsu…
 -> 
hash
[
i
] == 0);

45 *
key_±r
 = 
ªsu…
;

47 
	}
}

49 
	$PREFIXED
(
£t•ecific
Ë(
tsd
 * 
key
, * 
vÆue
) {

50 
±hªad_t
 
£lf
 = 
	`±hªad_£lf
();

51 
hash_vÆ
 = 
	`HASH
(
£lf
);

52 vﬁ©ûê
t£
 * 
íåy
 = (vﬁ©ûêt£ *)
	`MALLOC_CLEAR
( (tse));

54 
	`GC_ASSERT
(
£lf
 !
INVALID_THREADID
);

55 i‡(0 =
íåy
Ë 
ENOMEM
;

56 
	`±hªad_muãx_lock
(&(
key
 -> 
lock
));

58 
íåy
 -> 
√xt
 = 
key
 -> 
hash
[
hash_vÆ
];

59 
íåy
 -> 
thªad
 = 
£lf
;

60 
íåy
 -> 
vÆue
 = value;

61 
	`GC_ASSERT
(
íåy
 -> 
qtid
 =
INVALID_QTID
);

64 
	`AO_°‹e_ªÀa£
((vﬁ©ûê
AO_t
 *)(
key
 -> 
hash
 + 
hash_vÆ
), (AO_t)
íåy
);

65 
	`±hªad_muãx_u∆ock
(&(
key
 -> 
lock
));

67 
	}
}

71 
	$PREFIXED
(
ªmove_•ecific
Ë(
tsd
 * 
key
) {

72 
±hªad_t
 
£lf
 = 
	`±hªad_£lf
();

73 
hash_vÆ
 = 
	`HASH
(
£lf
);

74 
t£
 *
íåy
;

75 
t£
 **
lök
 = 
key
 -> 
hash
 + 
hash_vÆ
;

77 
	`±hªad_muãx_lock
(&(
key
 -> 
lock
));

78 
íåy
 = *
lök
;

79 
íåy
 !
NULL
 &&É¡ry -> 
thªad
 !
£lf
) {

80 
lök
 = &(
íåy
 -> 
√xt
);

81 
íåy
 = *
lök
;

85 
íåy
 -> 
qtid
 = 
INVALID_QTID
;

86 i‡(
íåy
 !
NULL
) {

87 *
lök
 = 
íåy
 -> 
√xt
;

105 
	`±hªad_muãx_u∆ock
(&(
key
 -> 
lock
));

106 
	}
}

109 * 
	$PREFIXED
(
¶ow_gë•ecific
Ë(
tsd
 * 
key
, 
qtid
,

110 
t£
 * vﬁ©ûê* 
ˇche_±r
) {

111 
±hªad_t
 
£lf
 = 
	`±hªad_£lf
();

112 
hash_vÆ
 = 
	`HASH
(
£lf
);

113 
t£
 *
íåy
 = 
key
 -> 
hash
[
hash_vÆ
];

115 
	`GC_ASSERT
(
qtid
 !
INVALID_QTID
);

116 
íåy
 !
NULL
 &&É¡ry -> 
thªad
 !
£lf
) {

117 
íåy
 =É¡ry -> 
√xt
;

119 i‡(
íåy
 =
NULL
)  NULL;

121 
íåy
 -> 
qtid
 = qtid;

126 *
ˇche_±r
 = 
íåy
;

129  
íåy
 -> 
vÆue
;

130 
	}
}

132 #ifde‡
GC_ASSERTIONS


136 
	$PREFIXED
(
check_tsd_m¨ks
Ë(
tsd
 *
key
)

138 
i
;

139 
t£
 *
p
;

141 i‡(!
	`GC_is_m¨ked
(
	`GC_ba£
(
key
))) {

142 
	`ABORT
("UnmarkedÅhread-specific-dataÅable");

144 
i
 = 0; i < 
TS_HASH_SIZE
; ++i) {

145 
p
 = 
key
 -> 
hash
[
i
];Ö !0;Ö =Ö -> 
√xt
) {

146 i‡(!
	`GC_is_m¨ked
(
	`GC_ba£
(
p
))) {

147 
	`GC_îr_¥ötf
(

148 "Thªad-•ecific-d©®íåyáà%∞nŸ m¨ked\n",
p
);

149 
	`ABORT
("UnmarkedÅse");

153 
i
 = 0; i < 
TS_CACHE_SIZE
; ++i) {

154 
p
 = 
key
 -> 
ˇche
[
i
];

155 i‡(
p
 !&
övÆid_t£
 && !
	`GC_is_m¨ked
(
	`GC_ba£
(p))) {

156 
	`GC_îr_¥ötf
(

157 "CachedÅhªad-•ecific-d©®íåyáà%∞nŸ m¨ked\n",
p
);

158 
	`ABORT
("Unmarked cachedÅse");

161 
	}
}

	@stubborn.c

17 
	~"¥iv©e/gc_¥iv.h
"

19 #i‡
deföed
(
MANUAL_VDB
)

25 * 
	$GC_mÆloc_°ubb‹n
(
size_t
 
lb
)

27 (
	`GC_mÆloc
(
lb
));

28 
	}
}

31 
	$GC_íd_°ubb‹n_ch™ge
(*
p
)

33 
	`GC_dúty
(
p
);

34 
	}
}

37 
	$GC_ch™ge_°ubb‹n
(*
p
)

39 
	}
}

43 * 
	$GC_mÆloc_°ubb‹n
(
size_t
 
lb
)

45 (
	`GC_mÆloc
(
lb
));

46 
	}
}

49 
	$GC_íd_°ubb‹n_ch™ge
(*
p
)

51 
	}
}

54 
	$GC_ch™ge_°ubb‹n
(*
p
)

56 
	}
}

	@tests/huge_test.c

1 
	~<°dlib.h
>

2 
	~<limôs.h
>

3 
	~<°dio.h
>

4 
	~<gc.h
>

14 
	$maö
()

16 
	`GC_INIT
();

18 
	`GC_£t_max_hóp_size
(100*1024*1024);

22 
	`GC_ex∑nd_hp
(1024*1024*5);

24 *
r
 = 
	`GC_MALLOC
(
LONG_MAX
-1024);

25 i‡(0 !
r
) {

26 
	`Ârötf
(
°dîr
,

28 
	`exô
(1);

30 
r
 = 
	`GC_MALLOC
(
LONG_MAX
);

31 i‡(0 !
r
) {

32 
	`Ârötf
(
°dîr
,

34 
	`exô
(1);

36 
r
 = 
	`GC_MALLOC
((
size_t
)
LONG_MAX
 + 1024);

37 i‡(0 !
r
) {

38 
	`Ârötf
(
°dîr
,

40 
	`exô
(1);

44 
	}
}

	@tests/leak_test.c

1 
	~"Àak_dëe˘‹.h
"

3 
	$maö
() {

4 *
p
[10];

5 
i
;

6 
GC_föd_Àak
 = 1;

9 
	`GC_INIT
();

11 
i
 = 0; i < 10; ++i) {

12 
p
[
i
] = 
	`mÆloc
(()+i);

14 
	`CHECK_LEAKS
();

15 
i
 = 1; i < 10; ++i) {

16 
	`‰ì
(
p
[
i
]);

18 
i
 = 0; i < 9; ++i) {

19 
p
[
i
] = 
	`mÆloc
(()+i);

21 
	`CHECK_LEAKS
();

22 
	`CHECK_LEAKS
();

23 
	`CHECK_LEAKS
();

25 
	}
}

	@tests/middle.c

5 
	~<gc.h
>

6 
	~<°dio.h
>

8 
	$maö
 ()

10 
i
;

12 
GC_Æl_öãri‹_poöãrs
 = 0;

13 
	`GC_INIT
();

15 
i
 = 0; i < 20000; ++i) {

16 
	`GC_mÆloc_©omic
 (4096);

17 
	`GC_mÆloc
 (4096);

19 
i
 = 0; i < 20000; ++i) {

20 
	`GC_mÆloc_©omic
 (2048);

21 
	`GC_mÆloc
 (2048);

23 
	`¥ötf
("FöÆ hó∞sizêi†%ld\n", 
	`GC_gë_hóp_size
());

25 
	}
}

	@tests/smash_test.c

4 
	#GC_DEBUG


	)

5 
	~<gc.h
>

6 
	~<°dio.h
>

8 
	#COUNT
 7000

	)

9 
	#SIZE
 40

	)

11 * 
	gA
[
COUNT
];

13 
	$maö
 ()

15 
i
;

16 *
p
;

18 
	`GC_INIT
();

20 
i
 = 0; i < 
COUNT
; ++i) {

21 
A
[
i
] = 
p
 = 
	`GC_MALLOC
(
SIZE
);

23 i‡(
i
%3000 =0Ë
	`GC_gcﬁÀ˘
();

24 i‡(
i
%5678 =0Ë
p
[
SIZE
 + i/2000] = 42;

27 
	}
}

	@tests/test.c

21 #unde‡
GC_BUILD


23 #i‡
deföed
(
DBG_HDRS_ALL
Ë|| deföed(
MAKE_BACK_GRAPH
)

24 
	#GC_DEBUG


	)

27 #i‡
deföed
(
mùs
Ë&& deföed(
SYSTYPE_BSD43
)

30 
	~<°dlib.h
>

32 
	~<°dio.h
>

33 #ifde‡
_WIN32_WCE


34 
	~<wöba£.h
>

35 
	#as£π
 
ASSERT


	)

37 
	~<as£π.h
>

39 
	~"gc.h
"

40 
	~"gc_ty≥d.h
"

41 
	~"¥iv©e/gc_¥iv.h
"

44 #i‡
deföed
(
MSWIN32
Ë|| deföed(
MSWINCE
)

45 
	~<wödows.h
>

46 #ifde‡
GC_DLL


47 
	#GC_¥öt_°©s
 0

	)

52 #ifde‡
PCR


53 
	~"th/PCR_ThCrSec.h
"

54 
	~"th/PCR_Th.h
"

55 
	#GC_¥ötf
 
¥ötf


	)

58 #i‡
deföed
(
GC_PTHREADS
)

59 
	~<±hªad.h
>

62 #i‡
deföed
(
GC_WIN32_THREADS
Ë&& !deföed(
GC_PTHREADS
)

63 
CRITICAL_SECTION
 
	gö¸_cs
;

66 #ifde‡
__STDC__


67 
	~<°d¨g.h
>

72 #i‡
deföed
(
CYGWIN32
Ë|| deföed (
AIX
Ë|| deföed(
DARWIN
)

73 
	#GC_COND_INIT
(Ë
	`GC_INIT
()

	)

75 
	#GC_COND_INIT
()

	)

79 
	g°ubb‹n_cou¡
 = 0;

80 
	guncﬁÀ˘abÀ_cou¡
 = 0;

81 
	gcﬁÀ˘abÀ_cou¡
 = 0;

82 
	g©omic_cou¡
 = 0;

83 
	gªÆloc_cou¡
 = 0;

85 #i‡
deföed
(
GC_AMIGA_FASTALLOC
Ë&& deföed(
AMIGA
)

87 
GC_amiga_‰ì_Æl_mem
();

88 
	$Amiga_Faû
(){
	`GC_amiga_‰ì_Æl_mem
();
	`ab‹t
();
	}
}

89 
	#FAIL
 ()
	`Amiga_Faû
()

	)

90 *
	$GC_amiga_g˘e°_mÆloc_ex∂icôly_ty≥d
(
size_t
 
lb
, 
GC_des¸
 
d
){

91 *
ªt
=
	`GC_mÆloc_ex∂icôly_ty≥d
(
lb
,
d
);

92 if(
ªt
==
NULL
){

93 if(!
GC_d⁄t_gc
){

94 
	`GC_gcﬁÀ˘
();

95 
ªt
=
	`GC_mÆloc_ex∂icôly_ty≥d
(
lb
,
d
);

97 if(
ªt
==
NULL
){

98 
	`GC_¥ötf
("Out of memory, (typedállocationsáreÇot directly "

100 
FAIL
;

103  
ªt
;

104 
	}
}

105 *
	$GC_amiga_g˘e°_ˇŒoc_ex∂icôly_ty≥d
(
size_t
 
a
,size_à
lb
, 
GC_des¸
 
d
){

106 *
ªt
=
	`GC_ˇŒoc_ex∂icôly_ty≥d
(
a
,
lb
,
d
);

107 if(
ªt
==
NULL
){

108 if(!
GC_d⁄t_gc
){

109 
	`GC_gcﬁÀ˘
();

110 
ªt
=
	`GC_ˇŒoc_ex∂icôly_ty≥d
(
a
,
lb
,
d
);

112 if(
ªt
==
NULL
){

113 
	`GC_¥ötf
("Out of memory, (typedállocationsáreÇot directly "

115 
FAIL
;

118  
ªt
;

119 
	}
}

120 
	#GC_mÆloc_ex∂icôly_ty≥d
(
a
,
b
Ë
	`GC_amiga_g˘e°_mÆloc_ex∂icôly_ty≥d
◊,b)

	)

121 
	#GC_ˇŒoc_ex∂icôly_ty≥d
(
a
,
b
,
c
Ë
	`GC_amiga_g˘e°_ˇŒoc_ex∂icôly_ty≥d
◊,b,c)

	)

125 #ifde‡
PCR


126 
	#FAIL
 ()
	`ab‹t
()

	)

128 #ifde‡
MSWINCE


129 
	#FAIL
 
	`DebugBªak
()

	)

131 
	#FAIL
 
	`GC_ab‹t
("Te° faûed");

	)

143 
	sSEXPR
 {

144 
SEXPR
 * 
	m£x¥_ˇr
;

145 
SEXPR
 * 
	m£x¥_cdr
;

149 
SEXPR
 * 
	t£x¥
;

151 
	#INT_TO_SEXPR
(
x
Ë((
£x¥
)(
GC_w‹d
)(x))

	)

152 
	#SEXPR_TO_INT
(
x
Ë(()(
GC_w‹d
)(x))

	)

154 #unde‡
nû


155 
	#nû
 (
	`INT_TO_SEXPR
(0))

	)

156 
	#ˇr
(
x
Ë((xË-> 
£x¥_ˇr
)

	)

157 
	#cdr
(
x
Ë((xË-> 
£x¥_cdr
)

	)

158 
	#is_nû
(
x
Ë((xË=
nû
)

	)

161 
	gexåa_cou¡
 = 0;

165 #ifde‡
VERY_SMALL_CONFIG


166 
	#c⁄s
 
smÆl_c⁄s


	)

168 
£x¥
 
	$c⁄s
 (
£x¥
 
x
, sex¥ 
y
)

170 
£x¥
 
r
;

171 *
p
;

172 
my_exåa
 = 
exåa_cou¡
;

174 
°ubb‹n_cou¡
++;

175 
r
 = (
£x¥
Ë
	`GC_MALLOC_STUBBORN
((
SEXPR
Ë+ 
my_exåa
);

176 i‡(
r
 == 0) {

177 ()
	`GC_¥ötf
("Out of memory\n");

178 
	`exô
(1);

180 
p
 = (*)
r
;

181 ((*)
p
Ë< ((*)
r
Ë+ 
my_exåa
 + (
SEXPR
);Ö++) {

182 i‡(*
p
) {

183 ()
	`GC_¥ötf
("FoundÇ⁄zîÿ© %∞-áŒoˇt‹ i†brokí\n", 
p
);

184 
FAIL
;

186 *
p
 = ()((13 << 12Ë+ (’ - (*)
r
) & 0xfff));

188 #ifde‡
AT_END


189 
r
 = (
£x¥
)((*Ï + (
my_exåa
 & ~7));

191 
r
 -> 
£x¥_ˇr
 = 
x
;

192 
r
 -> 
£x¥_cdr
 = 
y
;

193 
my_exåa
++;

194 i‡–
my_exåa
 >= 5000 ) {

195 
exåa_cou¡
 = 0;

197 
exåa_cou¡
 = 
my_exåa
;

199 
	`GC_END_STUBBORN_CHANGE
((*)
r
);

200 (
r
);

201 
	}
}

204 #ifde‡
GC_GCJ_SUPPORT


206 
	~"gc_m¨k.h
"

207 
	~"gc_gcj.h
"

211 
	sÁke_vèbÀ
 {

212 * 
	mdummy
;

213 
size_t
 
	mdes¸
;

216 
Áke_vèbÀ
 
	ggcj_˛ass_°ru˘1
 = { 0, (
SEXPR
)

217 + (
Áke_vèbÀ
 *) };

219 
Áke_vèbÀ
 
	ggcj_˛ass_°ru˘2
 =

220 { 0, (3»<< (
CPP_WORDSZ
 - 3)Ë| 
GC_DS_BITMAP
};

223 
GC_ms_íåy
 * 
	$Áke_gcj_m¨k_¥oc
(
w‹d
 * 
addr
,

224 
GC_ms_íåy
 *
m¨k_°ack_±r
,

225 
GC_ms_íåy
 *
m¨k_°ack_limô
,

226 
w‹d
 
ív
 )

228 
£x¥
 
x
;

229 i‡(1 =
ív
) {

231 
addr
 = (
w‹d
 *)
	`GC_USR_PTR_FROM_BASE
(addr);

233 
x
 = (
£x¥
)(
addr
 + 1);

234 
m¨k_°ack_±r
 = 
	`GC_MARK_AND_PUSH
(

235 (*)(
x
 -> 
£x¥_cdr
), 
m¨k_°ack_±r
,

236 
m¨k_°ack_limô
, (* *)&(
x
 -> 
£x¥_cdr
));

237 
m¨k_°ack_±r
 = 
	`GC_MARK_AND_PUSH
(

238 (*)(
x
 -> 
£x¥_ˇr
), 
m¨k_°ack_±r
,

239 
m¨k_°ack_limô
, (* *)&(
x
 -> 
£x¥_ˇr
));

240 (
m¨k_°ack_±r
);

241 
	}
}

246 
£x¥
 
	$smÆl_c⁄s
 (
£x¥
 
x
, sex¥ 
y
)

248 
£x¥
 
r
;

250 
cﬁÀ˘abÀ_cou¡
++;

251 
r
 = (
£x¥
Ë
	`GC_MALLOC
((
SEXPR
));

252 i‡(
r
 == 0) {

253 ()
	`GC_¥ötf
("Out of memory\n");

254 
	`exô
(1);

256 
r
 -> 
£x¥_ˇr
 = 
x
;

257 
r
 -> 
£x¥_cdr
 = 
y
;

258 (
r
);

259 
	}
}

261 
£x¥
 
	$smÆl_c⁄s_uncﬁÀ˘abÀ
 (
£x¥
 
x
, sex¥ 
y
)

263 
£x¥
 
r
;

265 
uncﬁÀ˘abÀ_cou¡
++;

266 
r
 = (
£x¥
Ë
	`GC_MALLOC_UNCOLLECTABLE
((
SEXPR
));

267 i‡(
r
 == 0) {

268 ()
	`GC_¥ötf
("Out of memory\n");

269 
	`exô
(1);

271 
r
 -> 
£x¥_ˇr
 = 
x
;

272 
r
 -> 
£x¥_cdr
 = (
£x¥
)(~(
GC_w‹d
)
y
);

273 (
r
);

274 
	}
}

276 #ifde‡
GC_GCJ_SUPPORT


279 
£x¥
 
	$gcj_c⁄s
(
£x¥
 
x
, sex¥ 
y
)

281 
GC_w‹d
 * 
r
;

282 
£x¥
 
ªsu…
;

283 
cou¡
 = 0;

285 
r
 = (
GC_w‹d
 *Ë
	`GC_GCJ_MALLOC
((
SEXPR
)

286 + (
Áke_vèbÀ
*),

287 &
gcj_˛ass_°ru˘2
);

288 i‡(
r
 == 0) {

289 ()
	`GC_¥ötf
("Out of memory\n");

290 
	`exô
(1);

292 
ªsu…
 = (
£x¥
)(
r
 + 1);

293 
ªsu…
 -> 
£x¥_ˇr
 = 
x
;

294 
ªsu…
 -> 
£x¥_cdr
 = 
y
;

295 (
ªsu…
);

296 
	}
}

300 
£x¥
 
	$ªvî£1
(
£x¥
 
x
, sex¥ 
y
)

302 i‡(
	`is_nû
(
x
)) {

303 (
y
);

305 –
	`ªvî£1
(
	`cdr
(
x
), 
	`c⁄s
(
	`ˇr
(x), 
y
)) );

307 
	}
}

309 
£x¥
 
	$ªvî£
(
£x¥
 
x
)

311 #ifde‡
TEST_WITH_SYSTEM_MALLOC


312 
	`mÆloc
(100000);

314 –
	`ªvî£1
(
x
, 
nû
) );

315 
	}
}

317 
£x¥
 
	$öts
(
low
, 
up
)

319 i‡(
low
 > 
up
) {

320 (
nû
);

322 (
	`smÆl_c⁄s
(smÆl_c⁄s(
	`INT_TO_SEXPR
(
low
), 
nû
), 
	`öts
÷ow+1, 
up
)));

324 
	}
}

326 #ifde‡
GC_GCJ_SUPPORT


328 
£x¥
 
	$gcj_ªvî£1
(
£x¥
 
x
, sex¥ 
y
)

330 i‡(
	`is_nû
(
x
)) {

331 (
y
);

333 –
	`gcj_ªvî£1
(
	`cdr
(
x
), 
	`gcj_c⁄s
(
	`ˇr
(x), 
y
)) );

335 
	}
}

337 
£x¥
 
	$gcj_ªvî£
(
£x¥
 
x
)

339 –
	`gcj_ªvî£1
(
x
, 
nû
) );

340 
	}
}

342 
£x¥
 
	$gcj_öts
(
low
, 
up
)

344 i‡(
low
 > 
up
) {

345 (
nû
);

347 (
	`gcj_c⁄s
(gcj_c⁄s(
	`INT_TO_SEXPR
(
low
), 
nû
), 
	`gcj_öts
÷ow+1, 
up
)));

349 
	}
}

354 
£x¥
 
	$uncﬁÀ˘abÀ_öts
(
low
, 
up
)

356 i‡(
low
 > 
up
) {

357 (
nû
);

359 (
	`smÆl_c⁄s_uncﬁÀ˘abÀ
(
	`smÆl_c⁄s
(
	`INT_TO_SEXPR
(
low
), 
nû
),

360 
	`uncﬁÀ˘abÀ_öts
(
low
+1, 
up
)));

362 
	}
}

364 
	$check_öts
(
£x¥
 
li°
, 
low
, 
up
)

366 i‡(
	`SEXPR_TO_INT
(
	`ˇr
(ˇr(
li°
))Ë!
low
) {

367 ()
	`GC_¥ötf
(

369 
FAIL
;

371 i‡(
low
 =
up
) {

372 i‡(
	`cdr
(
li°
Ë!
nû
) {

373 ()
	`GC_¥ötf
("ListÅooÜong - collector is broken\n");

374 
FAIL
;

377 
	`check_öts
(
	`cdr
(
li°
), 
low
+1, 
up
);

379 
	}
}

381 
	#UNCOLLECTABLE_CDR
(
x
Ë(
£x¥
)(~(
GC_w‹d
)(
	`cdr
(x)))

	)

383 
	$check_uncﬁÀ˘abÀ_öts
(
£x¥
 
li°
, 
low
, 
up
)

385 i‡(
	`SEXPR_TO_INT
(
	`ˇr
(ˇr(
li°
))Ë!
low
) {

386 ()
	`GC_¥ötf
(

388 
FAIL
;

390 i‡(
low
 =
up
) {

391 i‡(
	`UNCOLLECTABLE_CDR
(
li°
Ë!
nû
) {

392 ()
	`GC_¥ötf
("UncollectableÜistÅooÜong - collector is broken\n");

393 
FAIL
;

396 
	`check_uncﬁÀ˘abÀ_öts
(
	`UNCOLLECTABLE_CDR
(
li°
), 
low
+1, 
up
);

398 
	}
}

401 
	$¥öt_öt_li°
(
£x¥
 
x
)

403 i‡(
	`is_nû
(
x
)) {

404 ()
	`GC_¥ötf
("NIL\n");

406 ()
	`GC_¥ötf
("(%d)", 
	`SEXPR_TO_INT
(
	`ˇr
(ˇr(
x
))));

407 i‡(!
	`is_nû
(
	`cdr
(
x
))) {

408 ()
	`GC_¥ötf
(", ");

409 ()
	`¥öt_öt_li°
(
	`cdr
(
x
));

411 ()
	`GC_¥ötf
("\n");

414 
	}
}

417 
	$check_m¨ks_öt_li°
(
£x¥
 
x
)

419 i‡(!
	`GC_is_m¨ked
((
±r_t
)
x
))

420 
	`GC_¥ötf
("[unm:%p]", 
x
);

422 
	`GC_¥ötf
("[mkd:%p]", 
x
);

423 i‡(
	`is_nû
(
x
)) {

424 ()
	`GC_¥ötf
("NIL\n");

426 i‡(!
	`GC_is_m¨ked
((
±r_t
)
	`ˇr
(
x
))Ë
	`GC_¥ötf
("[unm car:%p]", car(x));

427 ()
	`GC_¥ötf
("(%d)", 
	`SEXPR_TO_INT
(
	`ˇr
(ˇr(
x
))));

428 i‡(!
	`is_nû
(
	`cdr
(
x
))) {

429 ()
	`GC_¥ötf
(", ");

430 ()
	`check_m¨ks_öt_li°
(
	`cdr
(
x
));

432 ()
	`GC_¥ötf
("\n");

435 
	}
}

440 #ifde‡
THREADS


442 #i‡
deföed
(
GC_WIN32_THREADS
Ë&& !deföed(
GC_PTHREADS
)

443 
DWORD
 
__°dˇŒ
 
	$töy_ªvî£_ã°
(* 
¨g
)

445 * 
	$töy_ªvî£_ã°
(* 
¨g
)

448 
i
;

449 
i
 = 0; i < 5; ++i) {

450 
	`check_öts
(
	`ªvî£
‘evî£(
	`öts
(1,10))), 1, 10);

453 
	}
}

455 #i‡
deföed
(
GC_PTHREADS
)

456 
	$f‹k_a_thªad
()

458 
±hªad_t
 
t
;

459 
code
;

460 i‡((
code
 = 
	`±hªad_¸óã
(&
t
, 0, 
töy_ªvî£_ã°
, 0)) != 0) {

461 ()
	`GC_¥ötf
("SmÆ»thªad cª©i⁄ faûed %d\n", 
code
);

462 
FAIL
;

464 i‡((
code
 = 
	`±hªad_joö
(
t
, 0)) != 0) {

465 ()
	`GC_¥ötf
("SmÆ»thªad joö faûed %d\n", 
code
);

466 
FAIL
;

468 
	}
}

470 #ñi‡
deföed
(
GC_WIN32_THREADS
)

471 
	$f‹k_a_thªad
()

473 
DWORD
 
thªad_id
;

474 
HANDLE
 
h
;

475 
h
 = 
	`GC_Cª©eThªad
(
NULL
, 0, 
töy_ªvî£_ã°
, 0, 0, &
thªad_id
);

476 i‡(
h
 =(
HANDLE
)
NULL
) {

477 ()
	`GC_¥ötf
("SmallÅhread creation failed %d\n",

478 
	`GëLa°Eº‹
());

479 
FAIL
;

481 i‡(
	`WaôF‹SögÀObje˘
(
h
, 
INFINITE
Ë!
WAIT_OBJECT_0
) {

482 ()
	`GC_¥ötf
("SmallÅhread wait failed %d\n",

483 
	`GëLa°Eº‹
());

484 
FAIL
;

486 
	}
}

490 
	#f‹k_a_thªad
()

	)

496 
	#f‹k_a_thªad
()

	)

502 
	mdummy
;

503 
£x¥
 
	mØ
;

504 } 
	gA
;

505 
	#a
 
A
.
Ø


	)

511 
	$ªvî£_ã°
()

513 
i
;

514 
£x¥
 
b
;

515 
£x¥
 
c
;

516 
£x¥
 
d
;

517 
£x¥
 
e
;

518 
£x¥
 *
f
, *
g
, *
h
;

519 #i‡
	`deföed
(
MSWIN32
Ë|| deföed(
MACOS
)

521 
	#BIG
 1000

	)

523 #i‡
deföed
 
PCR


525 
	#BIG
 700

	)

527 #i‡
deföed
 
MSWINCE


529 
	#BIG
 500

	)

531 #i‡
	`deföed
(
OSF1
)

533 
	#BIG
 200

	)

535 
	#BIG
 4500

	)

541 
A
.
dummy
 = 17;

542 
a
 = 
	`öts
(1, 49);

543 
b
 = 
	`öts
(1, 50);

544 
c
 = 
	`öts
(1, 
BIG
);

545 
d
 = 
	`uncﬁÀ˘abÀ_öts
(1, 100);

546 
e
 = 
	`uncﬁÀ˘abÀ_öts
(1, 1);

548 
cﬁÀ˘abÀ_cou¡
++;

549 
f
 = (
£x¥
 *)
	`GC_MALLOC
(4 * (sexpr));

550 
ªÆloc_cou¡
++;

551 
f
 = (
£x¥
 *)
	`GC_REALLOC
((*)f, 6 * (sexpr));

552 
f
[5] = 
	`öts
(1,17);

553 
cﬁÀ˘abÀ_cou¡
++;

554 
g
 = (
£x¥
 *)
	`GC_MALLOC
(513 * (sexpr));

555 
ªÆloc_cou¡
++;

556 
g
 = (
£x¥
 *)
	`GC_REALLOC
((*)g, 800 * (sexpr));

557 
g
[799] = 
	`öts
(1,18);

558 
cﬁÀ˘abÀ_cou¡
++;

559 
h
 = (
£x¥
 *)
	`GC_MALLOC
(1025 * (sexpr));

560 
ªÆloc_cou¡
++;

561 
h
 = (
£x¥
 *)
	`GC_REALLOC
((*)h, 2000 * (sexpr));

562 #ifde‡
GC_GCJ_SUPPORT


563 
h
[1999] = 
	`gcj_öts
(1,200);

564 
i
 = 0; i < 51; ++i)

565 
h
[1999] = 
	`gcj_ªvî£
(h[1999]);

568 
h
[1999] = 
	`öts
(1,200);

571 
i
 = 0; i < 10; i++) {

572 ()
	`öts
(1, 
BIG
);

575 
c
 = (
£x¥
)((*)c + (*));

576 
d
 = (
£x¥
)((*)d + (*));

578 #ifde‡
__STDC__


579 
	`GC_FREE
((*)
e
);

581 
	`GC_FREE
((*)
e
);

583 
	`check_öts
(
b
,1,50);

584 
	`check_öts
(
a
,1,49);

585 
i
 = 0; i < 50; i++) {

586 
	`check_öts
(
b
,1,50);

587 
b
 = 
	`ªvî£
(reverse(b));

589 
	`check_öts
(
b
,1,50);

590 
	`check_öts
(
a
,1,49);

591 
i
 = 0; i < 60; i++) {

592 i‡(
i
 % 10 =0Ë
	`f‹k_a_thªad
();

596 
a
 = 
	`ªvî£
(reverse(a));

597 #i‡!
	`deföed
(
AT_END
Ë&& !deföed(
THREADS
)

599 i‡(
i
 & 1) {

600 
a
 = (
£x¥
)
	`GC_REALLOC
((*)a, 500);

602 
a
 = (
£x¥
)
	`GC_REALLOC
((*)a, 8200);

606 
	`check_öts
(
a
,1,49);

607 
	`check_öts
(
b
,1,50);

608 
c
 = (
£x¥
)((*)c - (*));

609 
d
 = (
£x¥
)((*)d - (*));

610 
	`check_öts
(
c
,1,
BIG
);

611 
	`check_uncﬁÀ˘abÀ_öts
(
d
, 1, 100);

612 
	`check_öts
(
f
[5], 1,17);

613 
	`check_öts
(
g
[799], 1,18);

614 #ifde‡
GC_GCJ_SUPPORT


615 
h
[1999] = 
	`gcj_ªvî£
(h[1999]);

617 
	`check_öts
(
h
[1999], 1,200);

618 #i‚de‡
THREADS


619 
a
 = 0;

621 
b
 = 
c
 = 0;

622 
	}
}

624 #unde‡
a


630 
	såìnode
 {

631 
	mÀvñ
;

632 
åìnode
 * 
	mlchûd
;

633 
åìnode
 * 
	mrchûd
;

634 } 
	tä
;

636 
	gföÆizabÀ_cou¡
 = 0;

637 
	gföÆized_cou¡
 = 0;

638 vﬁ©ûê
	gdr›≥d_somëhög
 = 0;

640 #ifde‡
__STDC__


641 
	$föÆizî
(* 
obj
, * 
˛õ¡_d©a
)

643 
	$föÆizî
(
obj
, 
˛õ¡_d©a
)

644 * 
obj
;

645 * 
˛õ¡_d©a
;

648 
ä
 * 
t
 = (ä *)
obj
;

650 #ifde‡
PCR


651 
	`PCR_ThCrSec_E¡îSys
();

653 #i‡
	`deföed
(
GC_PTHREADS
)

654 
±hªad_muãx_t
 
ö¸_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

655 
	`±hªad_muãx_lock
(&
ö¸_lock
);

656 #ñi‡
	`deföed
(
GC_WIN32_THREADS
)

657 
	`E¡îCrôiˇlSe˘i⁄
(&
ö¸_cs
);

659 i‡(()(
GC_w‹d
)
˛õ¡_d©a
 !
t
 -> 
Àvñ
) {

660 ()
	`GC_¥ötf
("Wrong finalization data - collector is broken\n");

661 
FAIL
;

663 
föÆized_cou¡
++;

664 
t
 -> 
Àvñ
 = -1;

665 #ifde‡
PCR


666 
	`PCR_ThCrSec_ExôSys
();

668 #i‡
	`deföed
(
GC_PTHREADS
)

669 
	`±hªad_muãx_u∆ock
(&
ö¸_lock
);

670 #ñi‡
	`deföed
(
GC_WIN32_THREADS
)

671 
	`LóveCrôiˇlSe˘i⁄
(&
ö¸_cs
);

673 
	}
}

675 
size_t
 
	gcou¡î
 = 0;

677 
	#MAX_FINALIZED
 8000

	)

679 #i‡!
deföed
(
MACOS
)

680 
GC_FAR
 
GC_w‹d
 
	glive_ödiˇt‹s
[
MAX_FINALIZED
] = {0};

683 
GC_w‹d
 *
	glive_ödiˇt‹s
 = 0;

686 
	glive_ödiˇt‹s_cou¡
 = 0;

688 
ä
 * 
	$mkåì
(
n
)

690 
ä
 * 
ªsu…
 = (ä *)
	`GC_MALLOC
((tn));

692 
cﬁÀ˘abÀ_cou¡
++;

693 #i‡
	`deföed
(
MACOS
)

695 i‡(!
live_ödiˇt‹s
)

696 
live_ödiˇt‹s
 =

697 (
GC_w‹d
*)
	`NewPåCÀ¨
(
MAX_FINALIZED
 * (GC_word));

698 i‡(!
live_ödiˇt‹s
) {

699 ()
	`GC_¥ötf
("Out of memory\n");

700 
	`exô
(1);

703 i‡(
n
 == 0) (0);

704 i‡(
ªsu…
 == 0) {

705 ()
	`GC_¥ötf
("Out of memory\n");

706 
	`exô
(1);

708 
ªsu…
 -> 
Àvñ
 = 
n
;

709 
ªsu…
 -> 
lchûd
 = 
	`mkåì
(
n
-1);

710 
ªsu…
 -> 
rchûd
 = 
	`mkåì
(
n
-1);

711 i‡(
cou¡î
++ % 17 =0 && 
n
 >= 2) {

712 
ä
 * 
tmp
 = 
ªsu…
 -> 
lchûd
 -> 
rchûd
;

714 
ªsu…
 -> 
lchûd
 -> 
rchûd
 =Ñesult ->Ñchild ->Üchild;

715 
ªsu…
 -> 
rchûd
 -> 
lchûd
 = 
tmp
;

717 i‡(
cou¡î
++ % 119 == 0) {

718 
my_ödex
;

721 #ifde‡
PCR


722 
	`PCR_ThCrSec_E¡îSys
();

724 #i‡
	`deföed
(
GC_PTHREADS
)

725 
±hªad_muãx_t
 
ö¸_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

726 
	`±hªad_muãx_lock
(&
ö¸_lock
);

727 #ñi‡
	`deföed
(
GC_WIN32_THREADS
)

728 
	`E¡îCrôiˇlSe˘i⁄
(&
ö¸_cs
);

731 
föÆizabÀ_cou¡
++;

732 
my_ödex
 = 
live_ödiˇt‹s_cou¡
++;

733 #ifde‡
PCR


734 
	`PCR_ThCrSec_ExôSys
();

736 #i‡
	`deföed
(
GC_PTHREADS
)

737 
	`±hªad_muãx_u∆ock
(&
ö¸_lock
);

738 #ñi‡
	`deföed
(
GC_WIN32_THREADS
)

739 
	`LóveCrôiˇlSe˘i⁄
(&
ö¸_cs
);

743 
	`GC_REGISTER_FINALIZER
((*)
ªsu…
, 
föÆizî
, (*)(
GC_w‹d
)
n
,

744 (
GC_föÆiz©i⁄_¥oc
 *)0, (* *)0);

745 i‡(
my_ödex
 >
MAX_FINALIZED
) {

746 
	`GC_¥ötf
("live_indicators overflowed\n");

747 
FAIL
;

749 
live_ödiˇt‹s
[
my_ödex
] = 13;

750 i‡(
	`GC_GENERAL_REGISTER_DISAPPEARING_LINK
(

751 (* *)(&(
live_ödiˇt‹s
[
my_ödex
])),

752 (*)
ªsu…
) != 0) {

753 
	`GC_¥ötf
("GC_general_register_disappearing_link failed\n");

754 
FAIL
;

756 i‡(
	`GC_uƒegi°î_dißµórög_lök
(

758 (&(
live_ödiˇt‹s
[
my_ödex
]))) == 0) {

759 
	`GC_¥ötf
("GC_unregister_disappearing_link failed\n");

760 
FAIL
;

762 i‡(
	`GC_GENERAL_REGISTER_DISAPPEARING_LINK
(

763 (* *)(&(
live_ödiˇt‹s
[
my_ödex
])),

764 (*)
ªsu…
) != 0) {

765 
	`GC_¥ötf
("GC_general_register_disappearing_link failed 2\n");

766 
FAIL
;

768 
	`GC_ªachabÀ_hîe
(
ªsu…
);

770 (
ªsu…
);

771 
	}
}

773 
	$chkåì
(
ä
 *
t
, 
n
)

775 i‡(
n
 =0 && 
t
 != 0) {

776 ()
	`GC_¥ötf
("ClobberedáÜeaf - collector is broken\n");

777 
FAIL
;

779 i‡(
n
 == 0) ;

780 i‡(
t
 -> 
Àvñ
 !
n
) {

781 ()
	`GC_¥ötf
("Lo°áÇodê©Üevñ %d - cﬁÀ˘‹ i†brokí\n", 
n
);

782 
FAIL
;

784 i‡(
cou¡î
++ % 373 == 0) {

785 
cﬁÀ˘abÀ_cou¡
++;

786 (Ë
	`GC_MALLOC
(
cou¡î
%5001);

788 
	`chkåì
(
t
 -> 
lchûd
, 
n
-1);

789 i‡(
cou¡î
++ % 73 == 0) {

790 
cﬁÀ˘abÀ_cou¡
++;

791 (Ë
	`GC_MALLOC
(
cou¡î
%373);

793 
	`chkåì
(
t
 -> 
rchûd
, 
n
-1);

794 
	}
}

797 #i‡
deföed
(
GC_PTHREADS
)

798 
±hªad_key_t
 
	gÊ_key
;

800 * 
	$Æloc8byãs
()

802 #i‡
	`deföed
(
SMALL_CONFIG
Ë|| deföed(
GC_DEBUG
)

803 
cﬁÀ˘abÀ_cou¡
++;

804 (
	`GC_MALLOC
(8));

806 ** 
my_‰ì_li°_±r
;

807 * 
my_‰ì_li°
;

809 
my_‰ì_li°_±r
 = (**)
	`±hªad_gë•ecific
(
Ê_key
);

810 i‡(
my_‰ì_li°_±r
 == 0) {

811 
uncﬁÀ˘abÀ_cou¡
++;

812 
my_‰ì_li°_±r
 = 
	`GC_NEW_UNCOLLECTABLE
(*);

813 i‡(
	`±hªad_£t•ecific
(
Ê_key
, 
my_‰ì_li°_±r
) != 0) {

814 ()
	`GC_¥ötf
("pthread_setspecific failed\n");

815 
FAIL
;

818 
my_‰ì_li°
 = *
my_‰ì_li°_±r
;

819 i‡(
my_‰ì_li°
 == 0) {

820 
my_‰ì_li°
 = 
	`GC_mÆloc_m™y
(8);

821 i‡(
my_‰ì_li°
 == 0) {

822 ()
	`GC_¥ötf
("alloc8bytes out of memory\n");

823 
FAIL
;

826 *
my_‰ì_li°_±r
 = 
	`GC_NEXT
(
my_‰ì_li°
);

827 
	`GC_NEXT
(
my_‰ì_li°
) = 0;

828 
cﬁÀ˘abÀ_cou¡
++;

829 (
my_‰ì_li°
);

831 
	}
}

834 
	#Æloc8byãs
(Ë
	`GC_MALLOC_ATOMIC
(8)

	)

837 
	$Æloc_smÆl
(
n
)

839 
i
;

841 
i
 = 0; i < 
n
; i += 8) {

842 
©omic_cou¡
++;

843 i‡(
	`Æloc8byãs
() == 0) {

844 ()
	`GC_¥ötf
("Out of memory\n");

845 
FAIL
;

848 
	}
}

850 #i‡
deföed
(
THREADS
Ë&& deföed(
GC_DEBUG
)

851 #ifde‡
VERY_SMALL_CONFIG


852 
	#TREE_HEIGHT
 12

	)

854 
	#TREE_HEIGHT
 15

	)

857 #ifde‡
VERY_SMALL_CONFIG


858 
	#TREE_HEIGHT
 13

	)

860 
	#TREE_HEIGHT
 16

	)

863 
	$åì_ã°
()

865 
ä
 * 
roŸ
;

866 
i
;

868 
roŸ
 = 
	`mkåì
(
TREE_HEIGHT
);

869 #i‚de‡
VERY_SMALL_CONFIG


870 
	`Æloc_smÆl
(5000000);

872 
	`chkåì
(
roŸ
, 
TREE_HEIGHT
);

873 i‡(
föÆized_cou¡
 && ! 
dr›≥d_somëhög
) {

874 ()
	`GC_¥ötf
("Premature finalization - collector is broken\n");

875 
FAIL
;

877 
dr›≥d_somëhög
 = 1;

878 
	`GC_no›
(
roŸ
);

880 
roŸ
 = 
	`mkåì
(
TREE_HEIGHT
);

881 
	`chkåì
(
roŸ
, 
TREE_HEIGHT
);

882 
i
 = 
TREE_HEIGHT
; i >= 0; i--) {

883 
roŸ
 = 
	`mkåì
(
i
);

884 
	`chkåì
(
roŸ
, 
i
);

886 #i‚de‡
VERY_SMALL_CONFIG


887 
	`Æloc_smÆl
(5000000);

889 
	}
}

891 
	gn_ã°s
 = 0;

893 
GC_w‹d
 
	gbm_huge
[10] = {

907 
	$ty≥d_ã°
()

909 
GC_w‹d
 * 
ﬁd
, * 
√w
;

910 
GC_w‹d
 
bm3
 = 0x3;

911 
GC_w‹d
 
bm2
 = 0x2;

912 
GC_w‹d
 
bm_œrge
 = 0xf7ff7fff;

913 
GC_des¸
 
d1
 = 
	`GC_make_des¸ùt‹
(&
bm3
, 2);

914 
GC_des¸
 
d2
 = 
	`GC_make_des¸ùt‹
(&
bm2
, 2);

915 
GC_des¸
 
d3
 = 
	`GC_make_des¸ùt‹
(&
bm_œrge
, 32);

916 
GC_des¸
 
d4
 = 
	`GC_make_des¸ùt‹
(
bm_huge
, 320);

917 
GC_w‹d
 * 
x
 = (GC_w‹d *)
	`GC_mÆloc_ex∂icôly_ty≥d
(2000, 
d4
);

918 
i
;

920 #i‚de‡
LINT


921 ()
	`GC_make_des¸ùt‹
(&
bm_œrge
, 32);

923 
cﬁÀ˘abÀ_cou¡
++;

924 
ﬁd
 = 0;

925 
i
 = 0; i < 4000; i++) {

926 
cﬁÀ˘abÀ_cou¡
++;

927 
√w
 = (
GC_w‹d
 *Ë
	`GC_mÆloc_ex∂icôly_ty≥d
(4 * (GC_w‹d), 
d1
);

928 i‡(0 !
√w
[0] || 0 !=Çew[1]) {

929 
	`GC_¥ötf
("Bad initialization by GC_malloc_explicitly_typed\n");

930 
FAIL
;

932 
√w
[0] = 17;

933 
√w
[1] = (
GC_w‹d
)
ﬁd
;

934 
ﬁd
 = 
√w
;

935 
cﬁÀ˘abÀ_cou¡
++;

936 
√w
 = (
GC_w‹d
 *Ë
	`GC_mÆloc_ex∂icôly_ty≥d
(4 * (GC_w‹d), 
d2
);

937 
√w
[0] = 17;

938 
√w
[1] = (
GC_w‹d
)
ﬁd
;

939 
ﬁd
 = 
√w
;

940 
cﬁÀ˘abÀ_cou¡
++;

941 
√w
 = (
GC_w‹d
 *Ë
	`GC_mÆloc_ex∂icôly_ty≥d
(33 * (GC_w‹d), 
d3
);

942 
√w
[0] = 17;

943 
√w
[1] = (
GC_w‹d
)
ﬁd
;

944 
ﬁd
 = 
√w
;

945 
cﬁÀ˘abÀ_cou¡
++;

946 
√w
 = (
GC_w‹d
 *Ë
	`GC_ˇŒoc_ex∂icôly_ty≥d
(4, 2 * (GC_word),

947 
d1
);

948 
√w
[0] = 17;

949 
√w
[1] = (
GC_w‹d
)
ﬁd
;

950 
ﬁd
 = 
√w
;

951 
cﬁÀ˘abÀ_cou¡
++;

952 i‡(
i
 & 0xff) {

953 
√w
 = (
GC_w‹d
 *Ë
	`GC_ˇŒoc_ex∂icôly_ty≥d
(7, 3 * (GC_word),

954 
d2
);

956 
√w
 = (
GC_w‹d
 *Ë
	`GC_ˇŒoc_ex∂icôly_ty≥d
(1001,

957 3 * (
GC_w‹d
),

958 
d2
);

959 i‡(0 !
√w
[0] || 0 !=Çew[1]) {

960 
	`GC_¥ötf
("Bad initialization by GC_malloc_explicitly_typed\n");

961 
FAIL
;

964 
√w
[0] = 17;

965 
√w
[1] = (
GC_w‹d
)
ﬁd
;

966 
ﬁd
 = 
√w
;

968 
i
 = 0; i < 20000; i++) {

969 i‡(
√w
[0] != 17) {

970 ()
	`GC_¥ötf
("typedálloc failedát %lu\n",

971 ()
i
);

972 
FAIL
;

974 
√w
[0] = 0;

975 
ﬁd
 = 
√w
;

976 
√w
 = (
GC_w‹d
 *)(
ﬁd
[1]);

978 
	`GC_gcﬁÀ˘
();

979 
	`GC_no›
(
x
);

980 
	}
}

982 
	gÁû_cou¡
 = 0;

984 #i‚de‡
__STDC__


986 
	$Áû_¥oc1
(
x
)

987 * 
x
;

989 
Áû_cou¡
++;

990 
	}
}

995 
	$Áû_¥oc1
(* 
x
)

997 
Áû_cou¡
++;

998 
	}
}

1000 
	$uniq
(*
p
, ...) {

1001 
va_li°
 
a
;

1002 *
q
[100];

1003 
n
 = 0, 
i
, 
j
;

1004 
q
[
n
++] = 
p
;

1005 
	`va_°¨t
(
a
,
p
);

1006 ;(
q
[
n
] = 
	`va_¨g
(
a
,*));n++) ;

1007 
	`va_íd
(
a
);

1008 
i
=0; i<
n
; i++)

1009 
j
=0; j<
i
; j++)

1010 i‡(
q
[
i
] =q[
j
]) {

1011 
	`GC_¥ötf
(

1015 
FAIL
;

1017 
	}
}

1021 #ifde‡
THREADS


1022 
	#TEST_FAIL_COUNT
(
n
Ë1

	)

1024 
	#TEST_FAIL_COUNT
(
n
Ë(
Áû_cou¡
 >“))

	)

1027 
	$run_⁄e_ã°
()

1029 *
x
;

1030 **
z
;

1031 #ifde‡
LINT


1032 *
y
 = 0;

1034 *
y
 = (*)(
size_t
)
Áû_¥oc1
;

1036 
CLOCK_TYPE
 
°¨t_time
;

1037 
CLOCK_TYPE
 
ªvî£_time
;

1038 
CLOCK_TYPE
 
ty≥d_time
;

1039 
CLOCK_TYPE
 
åì_time
;

1040 
time_diff
;

1041 
DCL_LOCK_STATE
;

1043 #ifde‡
FIND_LEAK


1044 
	`GC_¥ötf
(

1046 
	`GC_¥ötf
("ExpectÜots ofÖroblems.\n");

1048 
	`GC_FREE
(0);

1049 #i‚de‡
DBG_HDRS_ALL


1050 
cﬁÀ˘abÀ_cou¡
 += 3;

1051 i‡((
	`GC_size
(
	`GC_mÆloc
(7)) != 8 &&

1052 
	`GC_size
(
	`GC_mÆloc
(7)Ë!
MIN_WORDS
 * (
GC_w‹d
))

1053 || 
	`GC_size
(
	`GC_mÆloc
(15)) != 16) {

1054 
	`GC_¥ötf
("GC_sizeÖroduced unexpectedÑesults\n");

1055 
FAIL
;

1057 
cﬁÀ˘abÀ_cou¡
 += 1;

1058 i‡(
	`GC_size
(
	`GC_mÆloc
(0)Ë!
MIN_WORDS
 * (
GC_w‹d
)) {

1059 
	`GC_¥ötf
("GC_malloc(0) failed: GC_sizeÑeturns %ld\n",

1060 ()
	`GC_size
(
	`GC_mÆloc
(0)));

1061 
FAIL
;

1063 
cﬁÀ˘abÀ_cou¡
 += 1;

1064 i‡(
	`GC_size
(
	`GC_mÆloc_uncﬁÀ˘abÀ
(0)Ë!
MIN_WORDS
 * (
GC_w‹d
)) {

1065 
	`GC_¥ötf
("GC_malloc_uncollectable(0) failed\n");

1066 
FAIL
;

1068 
GC_is_vÆid_di•œ˚mít_¥öt_¥oc
 = 
Áû_¥oc1
;

1069 
GC_is_visibÀ_¥öt_¥oc
 = 
Áû_¥oc1
;

1070 
cﬁÀ˘abÀ_cou¡
 += 1;

1071 
x
 = 
	`GC_mÆloc
(16);

1072 i‡(
	`GC_ba£
(
x
 + 13) != x) {

1073 
	`GC_¥ötf
("GC_base(heapÖtr)Öroduced incorrectÑesult\n");

1074 
FAIL
;

1076 #i‚de‡
PCR


1077 i‡(
	`GC_ba£
(
y
) != 0) {

1078 
	`GC_¥ötf
("GC_base(fn_ptr)Öroduced incorrectÑesult\n");

1079 
FAIL
;

1082 i‡(
	`GC_ßme_obj
(
x
+5, x) != x + 5) {

1083 
	`GC_¥ötf
("GC_same_objÖroduced incorrectÑesult\n");

1084 
FAIL
;

1086 i‡(
	`GC_is_visibÀ
(
y
Ë!y || GC_is_visibÀ(
x
) != x) {

1087 
	`GC_¥ötf
("GC_is_visibleÖroduced incorrectÑesult\n");

1088 
FAIL
;

1090 
z
 = 
	`GC_mÆloc
(8);

1091 
	`GC_PTR_STORE
(
z
, 
x
);

1092 i‡(*
z
 !
x
) {

1093 
	`GC_¥ötf
("GC_PTR_STORE faûed: %∞!%p\n", *
z
, 
x
);

1094 
FAIL
;

1096 i‡(!
	`TEST_FAIL_COUNT
(1)) {

1097 #if!(
	`deföed
(
POWERPC
Ë|| deföed(
IA64
)Ë|| deföed(
M68K
)

1102 
	`GC_¥ötf
("GC_is_visibleÖroduced wrong failure indication\n");

1103 
FAIL
;

1106 i‡(
	`GC_is_vÆid_di•œ˚mít
(
y
) != y

1107 || 
	`GC_is_vÆid_di•œ˚mít
(
x
) != x

1108 || 
	`GC_is_vÆid_di•œ˚mít
(
x
 + 3) != x + 3) {

1109 
	`GC_¥ötf
(

1111 
FAIL
;

1113 #i‡
	`deföed
(
__STDC__
Ë&& !deföed(
MSWIN32
Ë&& !deföed(
MSWINCE
)

1116 
size_t
 
i
;

1117 *
	`GC_memÆign
();

1119 
	`GC_mÆloc
(17);

1120 
i
 = (
GC_w‹d
); i < 512; i *= 2) {

1121 
GC_w‹d
 
ªsu…
 = (GC_w‹dË
	`GC_memÆign
(
i
, 17);

1122 i‡(
ªsu…
 % 
i
 !0 ||Ñesu… =0 || *(*Ïesu… !0Ë
FAIL
;

1126 #i‚de‡
ALL_INTERIOR_POINTERS


1127 #i‡
	`deföed
(
RS6000
Ë|| deföed(
POWERPC
)

1128 i‡(!
	`TEST_FAIL_COUNT
(1)) {

1130 i‡(
GC_Æl_öãri‹_poöãrs
 && !
	`TEST_FAIL_COUNT
(1)

1131 || !
GC_Æl_öãri‹_poöãrs
 && !
	`TEST_FAIL_COUNT
(2)) {

1133 
	`GC_¥ötf
("GC_is_valid_displacementÖroduced wrong failure indication\n");

1134 
FAIL
;

1139 
cﬁÀ˘abÀ_cou¡
 += 2;

1140 *(*)
	`GC_MALLOC
(()) = 1.0;

1141 *(*)
	`GC_MALLOC
(()) = 1.0;

1144 
size_t
 
i
;

1145 
i
 = 0; i < 10000; ++i) {

1146 
	`GC_MALLOC
(0);

1147 
	`GC_FREE
(
	`GC_MALLOC
(0));

1148 
	`GC_MALLOC_ATOMIC
(0);

1149 
	`GC_FREE
(
	`GC_MALLOC_ATOMIC
(0));

1152 #ifde‡
GC_GCJ_SUPPORT


1153 
	`GC_REGISTER_DISPLACEMENT
((
Áke_vèbÀ
 *));

1154 
	`GC_öô_gcj_mÆloc
(0, (*)
Áke_gcj_m¨k_¥oc
);

1157 #ifde‡
__STDC__


1158 
	`uniq
(

1159 
	`GC_mÆloc
(12), GC_malloc(12), GC_malloc(12),

1160 (
	`GC_gcﬁÀ˘
(),
	`GC_mÆloc
(12)),

1161 
	`GC_mÆloc
(12), GC_malloc(12), GC_malloc(12),

1162 (
	`GC_gcﬁÀ˘
(),
	`GC_mÆloc
(12)),

1163 
	`GC_mÆloc
(12), GC_malloc(12), GC_malloc(12),

1164 (
	`GC_gcﬁÀ˘
(),
	`GC_mÆloc
(12)),

1165 
	`GC_mÆloc
(12), GC_malloc(12), GC_malloc(12),

1166 (
	`GC_gcﬁÀ˘
(),
	`GC_mÆloc
(12)),

1167 
	`GC_mÆloc
(12), GC_malloc(12), GC_malloc(12),

1168 (
	`GC_gcﬁÀ˘
(),
	`GC_mÆloc
(12)),

1172 
	`GC_‰ì
(
	`GC_mÆloc
(0));

1173 
	`GC_‰ì
(
	`GC_mÆloc_©omic
(0));

1174 
	`GC_‰ì
(
	`GC_mÆloc
(0));

1175 
	`GC_‰ì
(
	`GC_mÆloc_©omic
(0));

1177 
	`GET_TIME
(
°¨t_time
);

1178 
	`ªvî£_ã°
();

1179 i‡(
GC_¥öt_°©s
) {

1180 
	`GET_TIME
(
ªvî£_time
);

1181 
time_diff
 = 
	`MS_TIME_DIFF
(
ªvî£_time
, 
°¨t_time
);

1182 
	`GC_log_¥ötf
("-------------FinishedÑeverse_testátÅime %u (%p)\n",

1183 (Ë
time_diff
, &
°¨t_time
);

1185 #i‚de‡
DBG_HDRS_ALL


1186 
	`ty≥d_ã°
();

1187 i‡(
GC_¥öt_°©s
) {

1188 
	`GET_TIME
(
ty≥d_time
);

1189 
time_diff
 = 
	`MS_TIME_DIFF
(
ty≥d_time
, 
°¨t_time
);

1190 
	`GC_log_¥ötf
("-------------FinishedÅyped_testátÅime %u (%p)\n",

1191 (Ë
time_diff
, &
°¨t_time
);

1194 
	`åì_ã°
();

1195 i‡(
GC_¥öt_°©s
) {

1196 
	`GET_TIME
(
åì_time
);

1197 
time_diff
 = 
	`MS_TIME_DIFF
(
åì_time
, 
°¨t_time
);

1198 
	`GC_log_¥ötf
("-------------FinishedÅree_testátÅime %u (%p)\n",

1199 (Ë
time_diff
, &
°¨t_time
);

1201 
	`LOCK
();

1202 
n_ã°s
++;

1203 
	`UNLOCK
();

1204 #i‡
	`deföed
(
THREADS
Ë&& deföed(
HANDLE_FORK
)

1205 i‡(
	`f‹k
() == 0) {

1206 
	`GC_gcﬁÀ˘
();

1207 
	`töy_ªvî£_ã°
(0);

1208 
	`GC_gcﬁÀ˘
();

1209 i‡(
GC_¥öt_°©s
)

1210 
	`GC_log_¥ötf
("Finishedá childÖrocess\n");

1211 
	`exô
(0);

1214 i‡(
GC_¥öt_°©s
)

1215 
	`GC_log_¥ötf
("Föished %p\n", &
°¨t_time
);

1216 
	}
}

1218 
	$check_hóp_°©s
()

1220 
size_t
 
max_hóp_sz
;

1221 
i
;

1222 
°ûl_live
;

1223 
œã_föÆize_cou¡
 = 0;

1225 #ifde‡
VERY_SMALL_CONFIG


1228 
max_hóp_sz
 = 4500000;

1230 
max_hóp_sz
 = 2800000;

1234 
max_hóp_sz
 = 19000000;

1236 
max_hóp_sz
 = 11000000;

1239 #ifde‡
GC_DEBUG


1240 
max_hóp_sz
 *= 2;

1241 #ifde‡
SAVE_CALL_CHAIN


1242 
max_hóp_sz
 *= 3;

1243 #ifde‡
SAVE_CALL_COUNT


1244 
max_hóp_sz
 +max_hóp_sz * 
SAVE_CALL_COUNT
/4;

1250 
	`GC_cﬁÀ˘_a_lôée
()) { }

1251 
i
 = 0; i < 16; i++) {

1252 
	`GC_gcﬁÀ˘
();

1253 
œã_föÆize_cou¡
 +
	`GC_övoke_föÆizîs
();

1255 ()
	`GC_¥ötf
("Com∂ëed %uÅe°s\n", 
n_ã°s
);

1256 ()
	`GC_¥ötf
("AŒoˇãd %d cﬁÀ˘abÀ obje˘s\n", 
cﬁÀ˘abÀ_cou¡
);

1257 ()
	`GC_¥ötf
("Allocated %d uncollectable objects\n",

1258 
uncﬁÀ˘abÀ_cou¡
);

1259 ()
	`GC_¥ötf
("AŒoˇãd %dátomi¯obje˘s\n", 
©omic_cou¡
);

1260 ()
	`GC_¥ötf
("AŒoˇãd %d stubb‹¿obje˘s\n", 
°ubb‹n_cou¡
);

1261 ()
	`GC_¥ötf
("Finalized %d/%d objects - ",

1262 
föÆized_cou¡
, 
föÆizabÀ_cou¡
);

1263 #ifde‡
FINALIZE_ON_DEMAND


1264 i‡(
föÆized_cou¡
 !
œã_föÆize_cou¡
) {

1265 ()
	`GC_¥ötf
("Demand finalizationÉrror\n");

1266 
FAIL
;

1269 i‡(
föÆized_cou¡
 > 
föÆizabÀ_cou¡


1270 || 
föÆized_cou¡
 < 
föÆizabÀ_cou¡
/2) {

1271 ()
	`GC_¥ötf
("finalization isÖrobably broken\n");

1272 
FAIL
;

1274 ()
	`GC_¥ötf
("finalization isÖrobably ok\n");

1276 
°ûl_live
 = 0;

1277 
i
 = 0; i < 
MAX_FINALIZED
; i++) {

1278 i‡(
live_ödiˇt‹s
[
i
] != 0) {

1279 
°ûl_live
++;

1282 
i
 = 
föÆizabÀ_cou¡
 - 
föÆized_cou¡
 - 
°ûl_live
;

1283 i‡(0 !
i
) {

1284 
	`GC_¥ötf
("%d disappearingÜinksÑemainánd %d more objects "

1285 "wîênŸ föÆized\n", 
°ûl_live
, 
i
);

1286 i‡(
i
 > 10) {

1287 
	`GC_¥ötf
("\tVery suspicious!\n");

1289 
	`GC_¥ötf
("\tSlightly suspicious, butÖrobably OK.\n");

1292 ()
	`GC_¥ötf
("TotalÇumber of bytesállocated is %lu\n",

1294 (
GC_byãs_Ælocd
 + 
GC_byãs_Ælocd_bef‹e_gc
));

1295 ()
	`GC_¥ötf
("Final heap size is %lu bytes\n",

1296 ()
	`GC_gë_hóp_size
());

1297 i‡(
GC_byãs_Ælocd
 + 
GC_byãs_Ælocd_bef‹e_gc


1298 #ifde‡
VERY_SMALL_CONFIG


1299 < 2700000*
n_ã°s
) {

1301 < 33500000*
n_ã°s
) {

1303 ()
	`GC_¥ötf
("IncorrectÉxecution - missed someállocations\n");

1304 
FAIL
;

1306 i‡(
	`GC_gë_hóp_size
(Ë> 
max_hóp_sz
*
n_ã°s
) {

1307 ()
	`GC_¥ötf
("Unexpected heap growth - collector may be broken\n");

1308 
FAIL
;

1310 ()
	`GC_¥ötf
("CollectoráppearsÅo work\n");

1311 
	}
}

1313 #i‡
deföed
(
MACOS
)

1314 
	$SëMöimumSèck
(
möSize
)

1316 
√wAµlLimô
;

1318 i‡(
möSize
 > 
	`LMGëDeÊtSèck
())

1320 
√wAµlLimô
 = (Ë
	`GëAµlLimô
()

1321 - (
möSize
 - 
	`LMGëDeÊtSèck
());

1322 
	`SëAµlLimô
((
På
Ë
√wAµlLimô
);

1323 
	`MaxAµlZ⁄e
();

1325 
	}
}

1327 
	#cMöSèckS∑˚
 (512L * 1024L)

	)

1331 #ifde‡
__STDC__


1332 
	$w¨n_¥oc
(*
msg
, 
GC_w‹d
 
p
)

1334 
	$w¨n_¥oc
(
msg
, 
p
)

1335 *
msg
;

1336 
GC_w‹d
 
p
;

1339 
	`GC_¥ötf
(
msg
, ()
p
);

1341 
	}
}

1344 #i‡!
deföed
(
PCR
) \

1345 && !
deföed
(
GC_WIN32_THREADS
Ë&& !deföed(
GC_PTHREADS
) \

1346 || 
	$deföed
(
LINT
)

1347 #i‡
	`deföed
(
MSWIN32
Ë&& !deföed(
__MINGW32__
)

1348 
APIENTRY
 
	$WöMaö
(
HINSTANCE
 
ö°™˚
, HINSTANCE 
¥ev
, 
LPTSTR
 
cmd
, 
n
)

1350 
	$maö
()

1353 #i‡
	`deföed
(
DJGPP
)

1354 
dummy
;

1356 
n_ã°s
 = 0;

1358 #i‡
	`deföed
(
DJGPP
)

1361 
GC_°ackbŸtom
 = (*)(&
dummy
);

1363 #i‡
	`deföed
(
MACOS
)

1365 
	`SëMöimumSèck
(
cMöSèckS∑˚
);

1367 
	`¥ötf
("Testing GC MacintoshÖort.\n");

1369 
	`GC_COND_INIT
();

1370 
	`GC_£t_w¨n_¥oc
(
w¨n_¥oc
);

1371 #i‡(
	`deföed
(
MPROTECT_VDB
Ë|| deföed(
PROC_VDB
Ë|| deföed(
GWW_VDB
)) \

1372 && !
	`deföed
(
MAKE_BACK_GRAPH
Ë&& !deföed(
NO_INCREMENTAL
)

1373 
	`GC_íabÀ_ö¸emíèl
();

1374 
	`GC_¥ötf
("SwitchedÅo incremental mode\n");

1375 #i‡
	`deföed
(
MPROTECT_VDB
)

1376 
	`GC_¥ötf
("Emulating dirty bits with mprotect/signals\n");

1378 #ifde‡
PROC_VDB


1379 
	`GC_¥ötf
("Reading dirty bits from /proc\n");

1381 
	`GC_¥ötf
("Using DEFAULT_VDB dirty bit implementation\n");

1385 
	`run_⁄e_ã°
();

1386 
	`check_hóp_°©s
();

1387 #i‚de‡
MSWINCE


1388 
	`fÊush
(
°dout
);

1390 #ifde‡
LINT


1394 
	`GC_no›
(
GC_ex∑nd_hp
, 
GC_add_roŸs
, 
GC_˛ór_roŸs
,

1395 
GC_ªgi°î_dißµórög_lök
,

1396 
GC_ªgi°î_föÆizî_ign‹e_£lf
,

1397 
GC_debug_ªgi°î_di•œ˚mít
,

1398 
GC_¥öt_obj
, 
GC_debug_ch™ge_°ubb‹n
,

1399 
GC_debug_íd_°ubb‹n_ch™ge
, 
GC_debug_mÆloc_uncﬁÀ˘abÀ
,

1400 
GC_debug_‰ì
, 
GC_debug_ªÆloc
, 
GC_gíîic_mÆloc_w‹ds_smÆl
,

1401 
GC_öô
, 
GC_make_˛osuª
, 
GC_debug_övoke_föÆizî
,

1402 
GC_∑ge_was_evî_dúty
, 
GC_is_‰esh
,

1403 
GC_mÆloc_ign‹e_off_∑ge
, 
GC_mÆloc_©omic_ign‹e_off_∑ge
,

1404 
GC_£t_max_hóp_size
, 
GC_gë_byãs_sö˚_gc
,

1405 
GC_gë_tŸÆ_byãs
, 
GC_¥e_ö¸
, 
GC_po°_ö¸
);

1407 #ifde‡
MSWIN32


1408 
	`GC_wö32_‰ì_hóp
();

1411 
	}
}

1414 #i‡
deföed
(
GC_WIN32_THREADS
Ë&& !deföed(
GC_PTHREADS
)

1416 
DWORD
 
__°dˇŒ
 
	$thr_run_⁄e_ã°
(*
¨g
)

1418 
	`run_⁄e_ã°
();

1420 
	}
}

1422 #ifde‡
MSWINCE


1423 
HANDLE
 
	gwö_¸óãd_h
;

1424 
HWND
 
	gwö_h™dÀ
;

1426 
LRESULT
 
CALLBACK
 
	$wödow_¥oc
(
HWND
 
hwnd
, 
UINT
 
uMsg
, 
WPARAM
 
wP¨am
, 
LPARAM
 
lP¨am
)

1428 
LRESULT
 
ªt
 = 0;

1429 
uMsg
) {

1430 
WM_HIBERNATE
:

1431 
	`GC_¥ötf
("Received WM_HIBERNATE, calling GC_gcollect\n");

1432 
	`GC_gcﬁÀ˘
();

1434 
WM_CLOSE
:

1435 
	`GC_¥ötf
("Received WM_CLOSE, closing window\n");

1436 
	`De°royWödow
(
hwnd
);

1438 
WM_DESTROY
:

1439 
	`Po°QuôMesßge
(0);

1442 
ªt
 = 
	`DefWödowProc
(
hwnd
, 
uMsg
, 
wP¨am
, 
lP¨am
);

1445  
ªt
;

1446 
	}
}

1448 
DWORD
 
__°dˇŒ
 
	$thr_wödow
(*
¨g
)

1450 
WNDCLASS
 
wö_˛ass
 = {

1451 
CS_NOCLOSE
,

1452 
wödow_¥oc
,

1455 
	`GëModuÀH™dÀ
(
NULL
),

1456 
NULL
,

1457 
NULL
,

1458 (
HBRUSH
)(
COLOR_APPWORKSPACE
+1),

1459 
NULL
,

1460 
L
"GCtestWindow"

1462 
MSG
 
msg
;

1464 i‡(!
	`Regi°îCœss
(&
wö_˛ass
))

1465 
FAIL
;

1467 
wö_h™dÀ
 = 
	`Cª©eWödowEx
(

1469 
L
"GCtestWindow",

1470 
L
"GCtest",

1472 
CW_USEDEFAULT
, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,

1473 
NULL
,

1474 
NULL
,

1475 
	`GëModuÀH™dÀ
(
NULL
),

1476 
NULL
);

1478 i‡(
wö_h™dÀ
 =
NULL
)

1479 
FAIL
;

1481 
	`SëEvít
(
wö_¸óãd_h
);

1483 
	`ShowWödow
(
wö_h™dÀ
, 
SW_SHOW
);

1484 
	`Upd©eWödow
(
wö_h™dÀ
);

1486 
	`GëMesßge
(&
msg
, 
NULL
, 0, 0)) {

1487 
	`Tøn¶©eMesßge
(&
msg
);

1488 
	`Di•©chMesßge
(&
msg
);

1492 
	}
}

1495 
	#NTEST
 2

	)

1497 #ifde‡
MSWINCE


1498 
APIENTRY
 
	$GC_WöMaö
(
HINSTANCE
 
ö°™˚
, HINSTANCE 
¥ev
, 
LPWSTR
 
cmd
, 
n
)

1500 
APIENTRY
 
	$WöMaö
(
HINSTANCE
 
ö°™˚
, HINSTANCE 
¥ev
, 
LPSTR
 
cmd
, 
n
)

1503 #i‡
NTEST
 > 0

1504 
HANDLE
 
h
[
NTEST
];

1505 
i
;

1507 #ifde‡
MSWINCE


1508 
HANDLE
 
wö_thr_h
;

1510 
DWORD
 
thªad_id
;

1512 #ifde‡
GC_DLL


1513 
	`GC_u£_DŒMaö
();

1514 
	`GC_¥ötf
("Using DllMainÅoÅrackÅhreads\n");

1516 
	`GC_COND_INIT
();

1517 #i‚de‡
NO_INCREMENTAL


1518 
	`GC_íabÀ_ö¸emíèl
();

1520 
	`InôülizeCrôiˇlSe˘i⁄
(&
ö¸_cs
);

1521 (Ë
	`GC_£t_w¨n_¥oc
(
w¨n_¥oc
);

1522 #ifde‡
MSWINCE


1523 
wö_¸óãd_h
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

1524 i‡(
wö_¸óãd_h
 =(
HANDLE
)
NULL
) {

1525 ()
	`GC_¥ötf
("Evíà¸óti⁄ faûed %\n", 
	`GëLa°Eº‹
());

1526 
FAIL
;

1528 
wö_thr_h
 = 
	`GC_Cª©eThªad
(
NULL
, 0, 
thr_wödow
, 0, 0, &
thªad_id
);

1529 i‡(
wö_thr_h
 =(
HANDLE
)
NULL
) {

1530 ()
	`GC_¥ötf
("Thªad cª©i⁄ faûed %d\n", 
	`GëLa°Eº‹
());

1531 
FAIL
;

1533 i‡(
	`WaôF‹SögÀObje˘
(
wö_¸óãd_h
, 
INFINITE
Ë!
WAIT_OBJECT_0
)

1534 
FAIL
;

1535 
	`Clo£H™dÀ
(
wö_¸óãd_h
);

1537 #i‡
NTEST
 > 0

1538 
i
 = 0; i < 
NTEST
; i++) {

1539 
h
[
i
] = 
	`GC_Cª©eThªad
(
NULL
, 0, 
thr_run_⁄e_ã°
, 0, 0, &
thªad_id
);

1540 i‡(
h
[
i
] =(
HANDLE
)
NULL
) {

1541 ()
	`GC_¥ötf
("Thªad cª©i⁄ faûed %d\n", 
	`GëLa°Eº‹
());

1542 
FAIL
;

1546 
	`run_⁄e_ã°
();

1547 #i‡
NTEST
 > 0

1548 
i
 = 0; i < 
NTEST
; i++) {

1549 i‡(
	`WaôF‹SögÀObje˘
(
h
[
i
], 
INFINITE
Ë!
WAIT_OBJECT_0
) {

1550 ()
	`GC_¥ötf
("Thªad waô faûed %d\n", 
	`GëLa°Eº‹
());

1551 
FAIL
;

1555 #ifde‡
MSWINCE


1556 
	`Po°Mesßge
(
wö_h™dÀ
, 
WM_CLOSE
, 0, 0);

1557 i‡(
	`WaôF‹SögÀObje˘
(
wö_thr_h
, 
INFINITE
Ë!
WAIT_OBJECT_0
)

1558 
FAIL
;

1560 
	`check_hóp_°©s
();

1562 
	}
}

1567 #ifde‡
PCR


1568 
	$ã°
()

1570 
PCR_Th_T
 * 
th1
;

1571 
PCR_Th_T
 * 
th2
;

1572 
code
;

1574 
n_ã°s
 = 0;

1576 (Ë
	`GC_£t_w¨n_¥oc
(
w¨n_¥oc
);

1577 
th1
 = 
	`PCR_Th_F‹k
(
run_⁄e_ã°
, 0);

1578 
th2
 = 
	`PCR_Th_F‹k
(
run_⁄e_ã°
, 0);

1579 
	`run_⁄e_ã°
();

1580 i‡(
	`PCR_Th_T_Joö
(
th1
, &
code
, 
NIL
, 
PCR_ÆlSigsBlocked
, 
PCR_waôF‹evî
)

1581 !
PCR_ERes_okay
 || 
code
 != 0) {

1582 ()
	`GC_¥ötf
("Thread 1 failed\n");

1584 i‡(
	`PCR_Th_T_Joö
(
th2
, &
code
, 
NIL
, 
PCR_ÆlSigsBlocked
, 
PCR_waôF‹evî
)

1585 !
PCR_ERes_okay
 || 
code
 != 0) {

1586 ()
	`GC_¥ötf
("Thread 2 failed\n");

1588 
	`check_hóp_°©s
();

1590 
	}
}

1593 #i‡
deföed
(
GC_PTHREADS
)

1594 * 
	$thr_run_⁄e_ã°
(* 
¨g
)

1596 
	`run_⁄e_ã°
();

1598 
	}
}

1600 #ifde‡
GC_DEBUG


1601 
	#GC_‰ì
 
GC_debug_‰ì


	)

1604 
	$maö
()

1606 
±hªad_t
 
th1
;

1607 
±hªad_t
 
th2
;

1608 
±hªad_©å_t
 
©å
;

1609 
code
;

1610 #ifde‡
GC_IRIX_THREADS


1613 *((vﬁ©ûê*)&
code
 - 1024*1024) = 0;

1615 #i‡
	`deföed
(
GC_HPUX_THREADS
)

1618 i‡(
	`±hªad_deÁu…_°acksize_≈
(1024*1024, 0) != 0) {

1619 ()
	`GC_¥ötf
("pthread_default_stacksize_np failed.\n");

1622 #ifde‡
PTW32_STATIC_LIB


1623 
	`±hªad_wö32_¥o˚ss_©èch_≈
 ();

1624 
	`±hªad_wö32_thªad_©èch_≈
 ();

1626 
	`GC_COND_INIT
();

1628 
	`±hªad_©å_öô
(&
©å
);

1629 #i‡
	`deföed
(
GC_IRIX_THREADS
Ë|| deföed(
GC_FREEBSD_THREADS
) \

1630 || 
	`deföed
(
GC_DARWIN_THREADS
Ë|| deföed(
GC_AIX_THREADS
)

1631 
	`±hªad_©å_£t°acksize
(&
©å
, 1000000);

1633 
n_ã°s
 = 0;

1634 #i‡(
	`deföed
(
MPROTECT_VDB
)) \

1635 && !
	`deföed
(
PARALLEL_MARK
Ë&&!deföed(
REDIRECT_MALLOC
) \

1636 && !
	`deföed
(
MAKE_BACK_GRAPH
Ë&& !deföed(
USE_PROC_FOR_LIBRARIES
) \

1637 && !
	`deföed
(
NO_INCREMENTAL
)

1638 
	`GC_íabÀ_ö¸emíèl
();

1639 (Ë
	`GC_¥ötf
("SwitchedÅo incremental mode\n");

1640 #i‡
	`deföed
(
MPROTECT_VDB
)

1641 ()
	`GC_¥ötf
("Emulating dirty bits with mprotect/signals\n");

1643 #ifde‡
PROC_VDB


1644 ()
	`GC_¥ötf
("Reading dirty bits from /proc\n");

1646 ()
	`GC_¥ötf
("Using DEFAULT_VDB dirty bit implementation\n");

1650 (Ë
	`GC_£t_w¨n_¥oc
(
w¨n_¥oc
);

1651 i‡((
code
 = 
	`±hªad_key_¸óã
(&
Ê_key
, 0)) != 0) {

1652 ()
	`GC_¥ötf
("Key cª©i⁄ faûed %d\n", 
code
);

1653 
FAIL
;

1655 i‡((
code
 = 
	`±hªad_¸óã
(&
th1
, &
©å
, 
thr_run_⁄e_ã°
, 0)) != 0) {

1656 ()
	`GC_¥ötf
("Thªad 1 cª©i⁄ faûed %d\n", 
code
);

1657 
FAIL
;

1659 i‡((
code
 = 
	`±hªad_¸óã
(&
th2
, &
©å
, 
thr_run_⁄e_ã°
, 0)) != 0) {

1660 ()
	`GC_¥ötf
("Thªad 2 cª©i⁄ faûed %d\n", 
code
);

1661 
FAIL
;

1663 
	`run_⁄e_ã°
();

1664 i‡((
code
 = 
	`±hªad_joö
(
th1
, 0)) != 0) {

1665 ()
	`GC_¥ötf
("Thªad 1 faûed %d\n", 
code
);

1666 
FAIL
;

1668 i‡(
	`±hªad_joö
(
th2
, 0) != 0) {

1669 ()
	`GC_¥ötf
("Thªad 2 faûed %d\n", 
code
);

1670 
FAIL
;

1672 
	`check_hóp_°©s
();

1673 ()
	`fÊush
(
°dout
);

1674 
	`±hªad_©å_de°roy
(&
©å
);

1675 
	`GC_¥ötf
("Com∂ëed %d cﬁÀ˘i⁄s\n", 
GC_gc_no
);

1676 #ifde‡
PTW32_STATIC_LIB


1677 
	`±hªad_wö32_thªad_dëach_≈
 ();

1678 
	`±hªad_wö32_¥o˚ss_dëach_≈
 ();

1681 
	}
}

	@tests/test_cpp.cc

27 
	~"gc_˝p.h
"

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	#USE_STD_ALLOCATOR


	)

32 #ifde‡
USE_STD_ALLOCATOR


33 
	~"gc_Æloˇt‹.h
"

34 #ñi‡
__GNUC__


35 
	~"√w_gc_Æloc.h
"

37 
	~"gc_Æloc.h
"

40 
	~"¥iv©e/gcc⁄fig.h
"

41 
GC_API
 
GC_¥ötf
(c⁄° *
f‹m©
, ...);

46 #ifde‡
MSWIN32


47 
	~<wödows.h
>

49 #ifde‡
GC_NAME_CONFLICT


50 
	#USE_GC
 
U£GC


	)

51 
foo
 * 
GC
;

53 
	#USE_GC
 
GC


	)

57 
	#my_as£π
–
e
 ) \

58 i‡(! (
e
)) { \

59 
	`GC_¥ötf
–"As£πi⁄ faûuª i¿" 
__FILE__
 ",Üine %d: " #e "\n", \

60 
__LINE__
 ); \

61 
	`exô
–1 ); }

	)

64 ˛as†
	cA
 {
	mpublic
:

67 
	$A
–
iArg
 ): 
	$i
–
iArg
 ) {}

68 
	$Te°
–
iArg
 ) {

69 
	`my_as£π
–
i
 =
iArg
 );
	}
}

70 
	gi
;};

73 
˛ass
 
	gB
: 
public
 
gc
,Öubli¯
	gA
 {
	gpublic
:

76 
B
–
j
 ): 
A
( j ) {}

77 ~
B
() {

78 
my_as£π
–
dñëög
 );}

79 
Dñëög
–
⁄
 ) {

80 
	gdñëög
 = 
⁄
;}

81 
	gdñëög
;};

83 
	gB
::
dñëög
 = 0;

86 
˛ass
 
	gC
: 
public
 
gc_˛ónup
,Öubli¯
	gA
 {
	gpublic
:

89 
C
–
ÀvñArg
 ): 
A
–ÀvñArg ), 
Àvñ
(ÜevelArg ) {

90 
	gnAŒoˇãd
++;

91 i‡(
	gÀvñ
 > 0) {

92 
	gÀ·
 = 
√w
 
C
–
Àvñ
 - 1 );

93 
	gright
 = 
√w
 
C
–
Àvñ
 - 1 );}

95 
	gÀ·
 = 
right
 = 0;}}

96 ~
C
() {

97 
	gthis
->
	gA
::
Te°
–
Àvñ
 );

98 
	gnFªed
++;

99 
my_as£π
–
Àvñ
 == 0 ?

100 
À·
 =0 && 
right
 == 0 :

101 
Àvñ
 =
À·
->Àvñ + 1 &&Üevñ =
right
->level + 1 );

102 
	gÀ·
 = 
right
 = 0;

103 
	gÀvñ
 = -123456;}

104 
Te°
() {

105 
my_as£π
–
nFªed
 <
nAŒoˇãd
 &&ÇFreed >= .8 *ÇAllocated );}

107 
	gnFªed
;

108 
	gnAŒoˇãd
;

109 
	gÀvñ
;

110 
C
* 
	gÀ·
;

111 
C
* 
	gright
;};

113 
	gC
::
nFªed
 = 0;

114 
	gC
::
nAŒoˇãd
 = 0;

117 ˛as†
	cD
: 
public
 
gc
 {public:

121 
	$D
–
iArg
 ): 
	$i
–
iArg
 ) {

122 
nAŒoˇãd
++;}

123 
	$CÀ™Up
–* 
obj
, * 
d©a
 ) {

124 
D
* 
£lf
 = (D*Ë
obj
;

125 
nFªed
++;

126 
	`my_as£π
–
£lf
->
i
 =(Ë(
GC_w‹d
Ë
d©a
 );
	}
}

127 
	$Te°
() {

128 
	`my_as£π
–
nFªed
 >.8 * 
nAŒoˇãd
 );
	}
}

130 
	gi
;

131 
	gnFªed
;

132 
	gnAŒoˇãd
;};

134 
	gD
::
nFªed
 = 0;

135 
	gD
::
nAŒoˇãd
 = 0;

138 ˛as†
	cE
: 
public
 
gc_˛ónup
 {public:

141 
	$E
() {

142 
nAŒoˇãd
++;}

143 ~
	$E
() {

144 
nFªed
++;
	}
}

146 
	gnFªed
;

147 
	gnAŒoˇãd
;};

149 
	gE
::
nFªed
 = 0;

150 
	gE
::
nAŒoˇãd
 = 0;

153 ˛as†
	cF
: 
public
 
E
 {public:

157 
	$F
() {

158 
nAŒoˇãd
++;}

159 ~
	$F
() {

160 
nFªed
++;
	}
}

161 
	$Te°
() {

162 
	`my_as£π
–
nFªed
 >.8 * 
nAŒoˇãd
 );

163 
	`my_as£π
–2 * 
nFªed
 =
E
::nFªed );
	}
}

165 
E
 
	ge
;

166 
	gnFªed
;

167 
	gnAŒoˇãd
;};

169 
	gF
::
nFªed
 = 0;

170 
	gF
::
nAŒoˇãd
 = 0;

173 
GC_w‹d
 
	$Disgui£
–* 
p
 ) {

174  ~ (
GC_w‹d
Ë
p
;
	}
}

176 * 
	$Undisgui£
–
GC_w‹d
 
i
 ) {

177  (*Ë~ 
i
;
	}
}

180 #ifde‡
MSWIN32


181 
APIENTRY
 
	$WöMaö
(

182 
HINSTANCE
 
ö°™˚
, HINSTANCE 
¥ev
, 
LPSTR
 
cmd
, 
cmdShow
 )

184 
¨gc
;

185 * 
¨gv
[ 3 ];

187 
¨gc
 = 1;árg¯< –
¨gv
 ) / (árgv[ 0 ] );árgc++) {

188 
¨gv
[ 
¨gc
 ] = 
	`°πok
–¨g¯=1 ? 
cmd
 : 0, " \t" );

189 i‡(0 =
¨gv
[ 
¨gc
 ]) ;}

192 #ifde‡
MACOS


193 
	$maö
() {

195 
	$maö
–
¨gc
, * 
¨gv
[] ) {

199 
	`GC_INIT
();

201 #i‡
	`deföed
(
MACOS
)

202 * 
¨gv_
[] = {"test_cpp", "10"};

203 
¨gv
 = 
¨gv_
;

204 
¨gc
 = (
¨gv_
)/(argv_[0]);

206 
i
, 
ôîs
, 
n
;

207 #ifde‡
USE_STD_ALLOCATOR


208 *
x
 = 
gc_Æloˇt‹
<>().
	`Æloˇã
(1);

209 **
x±r
 = 
åa˚abÀ_Æloˇt‹
<*>().
	`Æloˇã
(1);

211 #ifde‡
__GNUC__


212 *
x
 = (*)
gc_Æloc
::
	`Æloˇã
(());

214 *
x
 = (*)
Æloc
::
	`Æloˇã
(());

217 *
x
 = 29;

218 #ifde‡
USE_STD_ALLOCATOR


219 *
x±r
 = 
x
;

220 
x
 = 0;

222 i‡(
¨gc
 !2 || (0 >(
n
 = 
	`©oi
–
¨gv
[ 1 ] )))) {

223 
	`GC_¥ötf
( "usage:Åest_cppÇumber-of-iterations\nAssuming 10 iters\n" );

224 
n
 = 10;}

226 
ôîs
 = 1; iãr†<
n
; iters++) {

227 
	`GC_¥ötf
–"Sèπög iãøti⁄ %d\n", 
ôîs
 );

232 
GC_w‹d
 
as
[ 1000 ];

233 
GC_w‹d
 
bs
[ 1000 ];

234 
i
 = 0; i < 1000; i++) {

235 
as
[ 
i
 ] = 
	`Disgui£
–
	`√w
 (
NoGC
Ë
	`A
( i ) );

236 
bs
[ 
i
 ] = 
	`Disgui£
–
	`√w
 (
NoGC
Ë
	`B
( i ) );}

240 
i
 = 0; i < 1000; i++) {

241 
C
* 
c
 = 
√w
 
	`C
( 2 );

242 
C
 
	`c1
( 2 );

243 
D
* 
d
 = ::
	`√w
 (
USE_GC
, D::
CÀ™Up
, (*)(
GC_w‹d
)
i
Ë
	`D
( i );

244 
F
* 
f
 = 
√w
 F;

245 i‡(0 =
i
 % 10Ë
dñëe
 
c
;}

250 
i
 = 0; i < 1000000; i++) {

251 
A
* 
a
 = 
	`√w
 (
USE_GC
Ë
	`A
–
i
 );

252 
B
* 
b
 = 
√w
 
	`B
–
i
 );

253 
b
 = 
	`√w
 (
USE_GC
Ë
	`B
–
i
 );

254 i‡(0 =
i
 % 10) {

255 
B
::
	`Dñëög
( 1 );

256 
dñëe
 
b
;

257 
B
::
	`Dñëög
( 0 );}

258 #ifde‡
FINALIZE_ON_DEMAND


259 
	`GC_övoke_föÆizîs
();

264 
i
 = 0; i < 1000; i++) {

265 
A
* 
a
 = (A*Ë
	`Undisgui£
–
as
[ 
i
 ] );

266 
B
* 
b
 = (B*Ë
	`Undisgui£
–
bs
[ 
i
 ] );

267 
a
->
	`Te°
–
i
 );

268 
dñëe
 
a
;

269 
b
->
	`Te°
–
i
 );

270 
B
::
	`Dñëög
( 1 );

271 
dñëe
 
b
;

272 
B
::
	`Dñëög
( 0 );

273 #ifde‡
FINALIZE_ON_DEMAND


274 
	`GC_övoke_föÆizîs
();

281 
C
::
	`Te°
();

282 
D
::
	`Te°
();

283 
F
::
	`Te°
();}

285 #ifde‡
USE_STD_ALLOCATOR


286 
x
 = *
x±r
;

288 
	`my_as£π
 (29 =
x
[0]);

289 
	`GC_¥ötf
( "TheÅestáppearsÅo have succeeded.\n" );

290 –0 );
	}
}

	@tests/thread_leak_test.c

1 #i‚de‡
GC_THREADS


2 
	#GC_THREADS


	)

4 
	~"Àak_dëe˘‹.h
"

5 
	~<±hªad.h
>

6 
	~<°dio.h
>

8 * 
	$ã°
(* 
¨g
) {

9 *
p
[10];

10 
i
;

11 
GC_föd_Àak
 = 1;

13 
i
 = 0; i < 10; ++i) {

14 
p
[
i
] = 
	`mÆloc
(()+i);

16 
	`CHECK_LEAKS
();

17 
i
 = 1; i < 10; ++i) {

18 
	`‰ì
(
p
[
i
]);

21 
	}
}

23 
	#NTHREADS
 5

	)

25 
	$maö
() {

26 
i
;

27 
±hªad_t
 
t
[
NTHREADS
];

28 
code
;

30 
	`GC_INIT
();

31 
i
 = 0; i < 
NTHREADS
; ++i) {

32 i‡((
code
 = 
	`±hªad_¸óã
(
t
 + 
i
, 0, 
ã°
, 0)) != 0) {

33 
	`¥ötf
("Thªad cª©i⁄ faûed %d\n", 
code
);

36 
i
 = 0; i < 
NTHREADS
; ++i) {

37 i‡((
code
 = 
	`±hªad_joö
(
t
[
i
], 0)) != 0) {

38 
	`¥ötf
("Thªad joö faûed %lu\n", 
code
);

41 
	`CHECK_LEAKS
();

42 
	`CHECK_LEAKS
();

43 
	`CHECK_LEAKS
();

45 
	}
}

	@thread_local_alloc.c

13 
	~"¥iv©e/gc_¥iv.h
"

15 #i‡
deföed
(
THREAD_LOCAL_ALLOC
)

17 
	~"¥iv©e/thªad_loˇl_Æloc.h
"

18 
	~"gc_ölöe.h
"

20 
	~<°dlib.h
>

22 #i‡
deföed
(
USE_COMPILER_TLS
)

23 
	g__thªad


24 #ñi‡
deföed
(
USE_WIN32_COMPILER_TLS
)

25 
	$__de˛•ec
(
thªad
)

27 
GC_key_t
 
GC_thªad_key
;

29 
GC_boﬁ
 
keys_öôülized
;

34 
	$ªtu∫_sögÀ_‰ìli°
(*
Ê
, **
gÊ
)

36 *
q
, **
q±r
;

38 i‡(*
gÊ
 == 0) {

39 *
gÊ
 = 
Ê
;

41 
	`GC_ASSERT
(
	`GC_size
(
Ê
Ë=GC_size(*
gÊ
));

43 
q±r
 = &(
	`obj_lök
(
Ê
)), 
q
 = *qptr;

44 (
w‹d
)
q
 >
HBLKSIZE
; 
q±r
 = &(
	`obj_lök
(q)), q = *qptr);

45 
	`GC_ASSERT
(0 =
q
);

46 *
q±r
 = *
gÊ
;

47 *
gÊ
 = 
Ê
;

49 
	}
}

53 
	$ªtu∫_‰ìli°s
(**
Ê
, **
gÊ
)

55 
i
;

57 
i
 = 1; i < 
TINY_FREELISTS
; ++i) {

58 i‡((
w‹d
)(
Ê
[
i
]Ë>
HBLKSIZE
) {

59 
	`ªtu∫_sögÀ_‰ìli°
(
Ê
[
i
], 
gÊ
+i);

63 
Ê
[
i
] = (
±r_t
)
HBLKSIZE
;

66 #ifde‡
GC_GCJ_SUPPORT


67 i‡(
Ê
[0] =
ERROR_FL
) ;

69 i‡((
w‹d
)(
Ê
[0]Ë>
HBLKSIZE
) {

70 
	`ªtu∫_sögÀ_‰ìli°
(
Ê
[0], 
gÊ
+1);

72 
	}
}

76 
	$GC_öô_thªad_loˇl
(
GC_éfs
 
p
)

78 
i
;

80 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

81 i‡(!
keys_öôülized
) {

82 i‡(0 !
	`GC_key_¸óã
(&
GC_thªad_key
, 0)) {

83 
	`ABORT
("FailedÅo create key forÜocalállocator");

85 
keys_öôülized
 = 
TRUE
;

87 i‡(0 !
	`GC_£t•ecific
(
GC_thªad_key
, 
p
)) {

88 
	`ABORT
("FailedÅo setÅhread specificállocationÖointers");

90 
i
 = 1; i < 
TINY_FREELISTS
; ++i) {

91 
p
 -> 
±r‰ì_‰ìli°s
[
i
] = (*)1;

92 
p
 -> 
n‹mÆ_‰ìli°s
[
i
] = (*)1;

93 #ifde‡
GC_GCJ_SUPPORT


94 
p
 -> 
gcj_‰ìli°s
[
i
] = (*)1;

101 
p
 -> 
±r‰ì_‰ìli°s
[0] = (*)1;

102 
p
 -> 
n‹mÆ_‰ìli°s
[0] = (*)1;

103 #ifde‡
GC_GCJ_SUPPORT


104 
p
 -> 
gcj_‰ìli°s
[0] = 
ERROR_FL
;

106 
	}
}

108 #ifde‡
GC_GCJ_SUPPORT


109 ** 
GC_gcjobj‰ìli°
;

113 
	$GC_de°roy_thªad_loˇl
(
GC_éfs
 
p
)

117 #i‚de‡
HANDLE_FORK


118 
	`GC_ASSERT
(
	`GC_gë•ecific
(
GC_thªad_key
Ë=(*)
p
);

120 
	`ªtu∫_‰ìli°s
(
p
 -> 
±r‰ì_‰ìli°s
, 
GC_aobj‰ìli°
);

121 
	`ªtu∫_‰ìli°s
(
p
 -> 
n‹mÆ_‰ìli°s
, 
GC_obj‰ìli°
);

122 #ifde‡
GC_GCJ_SUPPORT


123 
	`ªtu∫_‰ìli°s
(
p
 -> 
gcj_‰ìli°s
, 
GC_gcjobj‰ìli°
);

125 
	}
}

127 #i‡
deföed
(
GC_ASSERTIONS
Ë&& deföed(
GC_PTHREADS
Ë&& !deföed(
CYGWIN32
) \

128 && !
	$deföed
(
GC_WIN32_PTHREADS
)

129 
	~<±hªad.h
>

130 * 
	`GC_lookup_thªad
(
±hªad_t
 
id
);

133 #i‡
	`deföed
(
GC_ASSERTIONS
Ë&& deföed(
GC_WIN32_THREADS
)

134 * 
	`GC_lookup_thªad
(
id
);

137 * 
	$GC_mÆloc
(
size_t
 
byãs
)

139 
size_t
 
gønuÀs
 = 
	`ROUNDED_UP_GRANULES
(
byãs
);

140 *
tsd
;

141 *
ªsu…
;

142 **
töy_Ê
;

144 #i‡!
	`deföed
(
USE_PTHREAD_SPECIFIC
Ë&& !deföed(
USE_WIN32_SPECIFIC
)

145 
GC_key_t
 
k
 = 
GC_thªad_key
;

146 i‡(
	`EXPECT
(0 =
k
, 0)) {

149  
	`GC_c‹e_mÆloc
(
byãs
);

151 
tsd
 = 
	`GC_gë•ecific
(
k
);

153 
tsd
 = 
	`GC_gë•ecific
(
GC_thªad_key
);

155 #i‡
	`deföed
(
USE_PTHREAD_SPECIFIC
Ë|| deföed(
USE_WIN32_SPECIFIC
)

156 i‡(
	`EXPECT
(0 =
tsd
, 0)) {

157  
	`GC_c‹e_mÆloc
(
byãs
);

160 
	`GC_ASSERT
(
GC_is_öôülized
);

161 #ifde‡
GC_ASSERTIONS


164 
	`LOCK
();

166 #i‡
	`deföed
(
GC_WIN32_THREADS
)

167 * 
me
 = (*)
	`GC_lookup_thªad_ö√r
(
	`GëCuºítThªadId
());

169 * 
me
 = 
	`GC_lookup_thªad
(
	`±hªad_£lf
());

171 
	`GC_ASSERT
((*)
tsd
 > 
me
 && (*)tsd < me + 1000);

173 
	`UNLOCK
();

175 
töy_Ê
 = ((
GC_éfs
)
tsd
Ë-> 
n‹mÆ_‰ìli°s
;

176 
	`GC_FAST_MALLOC_GRANS
(
ªsu…
, 
gønuÀs
, 
töy_Ê
, 
DIRECT_GRANULES
,

177 
NORMAL
, 
	`GC_c‹e_mÆloc
(
byãs
), 
	`obj_lök
(
ªsu…
)=0);

178 #ifde‡
LOG_ALLOCS


179 
	`GC_îr_¥ötf
("GC_mÆloc(%dË%∞: %d\n", 
byãs
, 
ªsu…
, 
GC_gc_no
);

181  
ªsu…
;

182 
	}
}

184 * 
	$GC_mÆloc_©omic
(
size_t
 
byãs
)

186 
size_t
 
gønuÀs
 = 
	`ROUNDED_UP_GRANULES
(
byãs
);

187 *
tsd
;

188 *
ªsu…
;

189 **
töy_Ê
;

191 #i‡!
	`deföed
(
USE_PTHREAD_SPECIFIC
Ë&& !deföed(
USE_WIN32_SPECIFIC
)

192 
GC_key_t
 
k
 = 
GC_thªad_key
;

193 i‡(
	`EXPECT
(0 =
k
, 0)) {

196  
	`GC_c‹e_mÆloc
(
byãs
);

198 
tsd
 = 
	`GC_gë•ecific
(
k
);

200 
tsd
 = 
	`GC_gë•ecific
(
GC_thªad_key
);

202 #i‡
	`deföed
(
USE_PTHREAD_SPECIFIC
Ë|| deföed(
USE_WIN32_SPECIFIC
)

203 i‡(
	`EXPECT
(0 =
tsd
, 0)) {

204  
	`GC_c‹e_mÆloc
(
byãs
);

207 
	`GC_ASSERT
(
GC_is_öôülized
);

208 
töy_Ê
 = ((
GC_éfs
)
tsd
Ë-> 
±r‰ì_‰ìli°s
;

209 
	`GC_FAST_MALLOC_GRANS
(
ªsu…
, 
gønuÀs
, 
töy_Ê
, 
DIRECT_GRANULES
,

210 
PTRFREE
, 
	`GC_c‹e_mÆloc_©omic
(
byãs
), 0 );

211  
ªsu…
;

212 
	}
}

214 #ifde‡
GC_GCJ_SUPPORT


216 
	~"ö˛ude/gc_gcj.h
"

218 #ifde‡
GC_ASSERTIONS


219 
GC_boﬁ
 
GC_gcj_mÆloc_öôülized
;

222 
GC_gcj_köd
;

244 * 
	$GC_gcj_mÆloc
(
size_t
 
byãs
,

245 * 
±r_to_°ru˘_c⁄èöög_des¸
)

247 i‡(
	`GC_EXPECT
(
GC_ö¸emíèl
, 0)) {

248  
	`GC_c‹e_gcj_mÆloc
(
byãs
, 
±r_to_°ru˘_c⁄èöög_des¸
);

250 
size_t
 
gønuÀs
 = 
	`ROUNDED_UP_GRANULES
(
byãs
);

251 *
ªsu…
;

252 **
töy_Ê
 = ((
GC_éfs
)
	`GC_gë•ecific
(
GC_thªad_key
))

253 -> 
gcj_‰ìli°s
;

254 
	`GC_ASSERT
(
GC_gcj_mÆloc_öôülized
);

255 
	`GC_FAST_MALLOC_GRANS
(
ªsu…
, 
gønuÀs
, 
töy_Ê
, 
DIRECT_GRANULES
,

256 
GC_gcj_köd
,

257 
	`GC_c‹e_gcj_mÆloc
(
byãs
,

258 
±r_to_°ru˘_c⁄èöög_des¸
),

259 {
	`AO_compûî_b¨rõr
();

260 *(**)
ªsu…
 = 
±r_to_°ru˘_c⁄èöög_des¸
;});

279  
ªsu…
;

281 
	}
}

289 
	$GC_m¨k_thªad_loˇl_Ês_f‹
(
GC_éfs
 
p
)

291 
±r_t
 
q
;

292 
j
;

294 
j
 = 1; j < 
TINY_FREELISTS
; ++j) {

295 
q
 = 
p
 -> 
±r‰ì_‰ìli°s
[
j
];

296 i‡((
w‹d
)
q
 > 
HBLKSIZE
Ë
	`GC_£t_Ê_m¨ks
(q);

297 
q
 = 
p
 -> 
n‹mÆ_‰ìli°s
[
j
];

298 i‡((
w‹d
)
q
 > 
HBLKSIZE
Ë
	`GC_£t_Ê_m¨ks
(q);

299 #ifde‡
GC_GCJ_SUPPORT


300 
q
 = 
p
 -> 
gcj_‰ìli°s
[
j
];

301 i‡((
w‹d
)
q
 > 
HBLKSIZE
Ë
	`GC_£t_Ê_m¨ks
(q);

304 
	}
}

306 #i‡
deföed
(
GC_ASSERTIONS
)

308 
	$GC_check_és_f‹
(
GC_éfs
 
p
)

310 
±r_t
 
q
;

311 
j
;

313 
j
 = 1; j < 
TINY_FREELISTS
; ++j) {

314 
q
 = 
p
 -> 
±r‰ì_‰ìli°s
[
j
];

315 i‡((
w‹d
)
q
 > 
HBLKSIZE
Ë
	`GC_check_Ê_m¨ks
(q);

316 
q
 = 
p
 -> 
n‹mÆ_‰ìli°s
[
j
];

317 i‡((
w‹d
)
q
 > 
HBLKSIZE
Ë
	`GC_check_Ê_m¨ks
(q);

318 #ifde‡
GC_GCJ_SUPPORT


319 
q
 = 
p
 -> 
gcj_‰ìli°s
[
j
];

320 i‡((
w‹d
)
q
 > 
HBLKSIZE
Ë
	`GC_check_Ê_m¨ks
(q);

323 
	}
}

328 
	#GC_de°roy_thªad_loˇl
(
t
)

	)

	@threadlibs.c

1 
	~"gc_c⁄fig_ma¸os.h
"

2 
	~"¥iv©e/gcc⁄fig.h
"

3 
	~<°dio.h
>

5 
	$maö
()

7 #i‡
	`deföed
(
GC_USE_LD_WRAP
)

8 
	`¥ötf
("-Wl,--wrap -Wl,dlopen "

13 #i‡
	`deföed
(
GC_LINUX_THREADS
Ë|| deföed(
GC_IRIX_THREADS
) \

14 || 
	`deföed
(
GC_DARWIN_THREADS
Ë|| deföed(
GC_AIX_THREADS
) \

15 || 
	`deföed
(
GC_GNU_THREADS
)

16 #ifde‡
GC_USE_DLOPEN_WRAP


17 
	`¥ötf
("-ldl ");

19 
	`¥ötf
("-lpthread\n");

21 #i‡
	`deföed
(
GC_FREEBSD_THREADS
)

22 #ifde‡
GC_USE_DLOPEN_WRAP


23 
	`¥ötf
("-ldl ");

25 #i‡(
__FREEBSD_vîsi⁄
 >= 500000)

26 
	`¥ötf
("-lpthread\n");

28 
	`¥ötf
("-pthread\n");

31 #i‡
	`deföed
(
GC_NETBSD_THREADS
)

32 
	`¥ötf
("-lpthread -lrt\n");

35 #i‡
	`deföed
(
GC_HPUX_THREADS
Ë|| deföed(
GC_OSF1_THREADS
)

36 
	`¥ötf
("-lpthread -lrt\n");

38 #i‡
	`deföed
(
GC_SOLARIS_THREADS
)

39 
	`¥ötf
("-lthread -lposix4\n");

42 #i‡
	`deföed
(
GC_WIN32_THREADS
Ë&& deföed(
CYGWIN32
)

43 
	`¥ötf
("-lpthread\n");

45 #i‡
	`deföed
(
GC_WIN32_PTHREADS
)

46 #ifde‡
PTW32_STATIC_LIB


48 
	`¥ötf
("-lpthreadGC2s -lws2_32\n");

50 
	`¥ötf
("-lpthreadGC2\n");

53 #i‡
	`deföed
(
GC_OSF1_THREADS
)

54 
	`¥ötf
("-pthread -lrt");

58 #i‡
	`deföed
(
GC_DGUX386_THREADS
)

59 
	`¥ötf
("-ldl -pthread\n");

62 
	}
}

	@typd_mlc.c

39 
	~"¥iv©e/gc_pm¨k.h
"

40 
	~"gc_ty≥d.h
"

42 
	#TYPD_EXTRA_BYTES
 ((
w‹d
Ë- 
EXTRA_BYTES
)

	)

44 
GC_boﬁ
 
	gGC_ex∂icô_typög_öôülized
 = 
FALSE
;

46 
	gGC_ex∂icô_köd
;

49 
	gGC_¨øy_köd
;

56 
w‹d
 
	med_bôm≠
;

57 
GC_boﬁ
 
	med_c⁄töued
;

58 } 
	text_des¸
;

64 
	uCom∂exDes¸ùt‹
 {

65 
	sLófDes¸ùt‹
 {

66 
w‹d
 
	mld_èg
;

67 
	#LEAF_TAG
 1

	)

68 
size_t
 
	mld_size
;

70 
size_t
 
	mld_√Àmíts
;

71 
GC_des¸
 
	mld_des¸ùt‹
;

73 } 
	mld
;

74 
	sCom∂exAºayDes¸ùt‹
 {

75 
w‹d
 
	mad_èg
;

76 
	#ARRAY_TAG
 2

	)

77 
size_t
 
	mad_√Àmíts
;

78 
Com∂exDes¸ùt‹
 * 
	mad_ñemít_des¸
;

79 } 
	mad
;

80 
	sSequí˚Des¸ùt‹
 {

81 
w‹d
 
	msd_èg
;

82 
	#SEQUENCE_TAG
 3

	)

83 
Com∂exDes¸ùt‹
 * 
	msd_fú°
;

84 
Com∂exDes¸ùt‹
 * 
	msd_£c⁄d
;

85 } 
	msd
;

86 } 
	tcom∂ex_des¸ùt‹
;

87 
	#TAG
 
ld
.
ld_èg


	)

89 
ext_des¸
 * 
	gGC_ext_des¸ùt‹s
;

92 
size_t
 
	gGC_ed_size
 = 0;

93 
	#ED_INITIAL_SIZE
 100;

	)

95 
size_t
 
	gGC_avaû_des¸
 = 0;

97 
	gGC_ty≥d_m¨k_¥oc_ödex
;

98 
	gGC_¨øy_m¨k_¥oc_ödex
;

100 
	$GC_push_ty≥d_°ru˘uªs_¥oc
 ()

102 
	`GC_push_Æl
((
±r_t
)&
GC_ext_des¸ùt‹s
, (±r_t)&GC_ext_des¸ùt‹†+ (
w‹d
));

103 
	}
}

109 
sig√d_w‹d
 
	$GC_add_ext_des¸ùt‹
(
GC_bôm≠
 
bm
, 
w‹d
 
nbôs
)

111 
size_t
 
nw‹ds
 = 
	`divWORDSZ
(
nbôs
 + 
WORDSZ
-1);

112 
sig√d_w‹d
 
ªsu…
;

113 
size_t
 
i
;

114 
w‹d
 
œ°_∑π
;

115 
size_t
 
exåa_bôs
;

116 
DCL_LOCK_STATE
;

118 
	`LOCK
();

119 
GC_avaû_des¸
 + 
nw‹ds
 >
GC_ed_size
) {

120 
ext_des¸
 * 
√w
;

121 
size_t
 
√w_size
;

122 
w‹d
 
ed_size
 = 
GC_ed_size
;

124 i‡(
ed_size
 == 0) {

125 
GC_push_ty≥d_°ru˘uªs
 = 
GC_push_ty≥d_°ru˘uªs_¥oc
;

126 
	`UNLOCK
();

127 
√w_size
 = 
ED_INITIAL_SIZE
;

129 
	`UNLOCK
();

130 
√w_size
 = 2 * 
ed_size
;

131 i‡(
√w_size
 > 
MAX_ENV
) (-1);

133 
√w
 = (
ext_des¸
 *Ë
	`GC_mÆloc_©omic
(
√w_size
 * (ext_descr));

134 i‡(
√w
 == 0) (-1);

135 
	`LOCK
();

136 i‡(
ed_size
 =
GC_ed_size
) {

137 i‡(
GC_avaû_des¸
 != 0) {

138 
	`BCOPY
(
GC_ext_des¸ùt‹s
, 
√w
,

139 
GC_avaû_des¸
 * (
ext_des¸
));

141 
GC_ed_size
 = 
√w_size
;

142 
GC_ext_des¸ùt‹s
 = 
√w
;

145 
ªsu…
 = 
GC_avaû_des¸
;

146 
i
 = 0; i < 
nw‹ds
-1; i++) {

147 
GC_ext_des¸ùt‹s
[
ªsu…
 + 
i
].
ed_bôm≠
 = 
bm
[i];

148 
GC_ext_des¸ùt‹s
[
ªsu…
 + 
i
].
ed_c⁄töued
 = 
TRUE
;

150 
œ°_∑π
 = 
bm
[
i
];

152 
exåa_bôs
 = 
nw‹ds
 * 
WORDSZ
 - 
nbôs
;

153 
œ°_∑π
 <<
exåa_bôs
;

154 
œ°_∑π
 >>
exåa_bôs
;

155 
GC_ext_des¸ùt‹s
[
ªsu…
 + 
i
].
ed_bôm≠
 = 
œ°_∑π
;

156 
GC_ext_des¸ùt‹s
[
ªsu…
 + 
i
].
ed_c⁄töued
 = 
FALSE
;

157 
GC_avaû_des¸
 +
nw‹ds
;

158 
	`UNLOCK
();

159 (
ªsu…
);

160 
	}
}

163 
GC_des¸
 
	gGC_bm_èbÀ
[
WORDSZ
/2];

170 
GC_des¸
 
	$GC_doubÀ_des¸
(
GC_des¸
 
des¸ùt‹
, 
w‹d
 
nw‹ds
)

172 i‡((
des¸ùt‹
 & 
GC_DS_TAGS
Ë=
GC_DS_LENGTH
) {

173 
des¸ùt‹
 = 
GC_bm_èbÀ
[
	`BYTES_TO_WORDS
((
w‹d
)descriptor)];

175 
des¸ùt‹
 |(des¸ùt‹ & ~
GC_DS_TAGS
Ë>> 
nw‹ds
;

176 (
des¸ùt‹
);

177 
	}
}

179 
com∂ex_des¸ùt‹
 * 
GC_make_£quí˚_des¸ùt‹
();

196 
	#COMPLEX
 2

	)

197 
	#LEAF
 1

	)

198 
	#SIMPLE
 0

	)

199 
	#NO_MEM
 (-1)

	)

200 
	$GC_make_¨øy_des¸ùt‹
(
size_t
 
√Àmíts
, size_à
size
, 
GC_des¸
 
des¸ùt‹
,

201 
GC_des¸
 *
sim∂e_d
,

202 
com∂ex_des¸ùt‹
 **
com∂ex_d
,

203 
LófDes¸ùt‹
 * 
Àaf
)

205 
	#OPT_THRESHOLD
 50

	)

209 i‡((
des¸ùt‹
 & 
GC_DS_TAGS
Ë=
GC_DS_LENGTH
) {

210 i‡(
des¸ùt‹
 =(
GC_des¸
)
size
) {

211 *
sim∂e_d
 = 
√Àmíts
 * 
des¸ùt‹
;

212 (
SIMPLE
);

213 } i‡((
w‹d
)
des¸ùt‹
 == 0) {

214 *
sim∂e_d
 = (
GC_des¸
)0;

215 (
SIMPLE
);

218 i‡(
√Àmíts
 <
OPT_THRESHOLD
) {

219 i‡(
√Àmíts
 <= 1) {

220 i‡(
√Àmíts
 == 1) {

221 *
sim∂e_d
 = 
des¸ùt‹
;

222 (
SIMPLE
);

224 *
sim∂e_d
 = (
GC_des¸
)0;

225 (
SIMPLE
);

228 } i‡(
size
 <
BITMAP_BITS
/2

229 && (
des¸ùt‹
 & 
GC_DS_TAGS
Ë!
GC_DS_PROC


230 && (
size
 & ((
w‹d
)-1)) == 0) {

231 
ªsu…
 =

232 
	`GC_make_¨øy_des¸ùt‹
(
√Àmíts
/2, 2*
size
,

233 
	`GC_doubÀ_des¸
(
des¸ùt‹
,

234 
	`BYTES_TO_WORDS
(
size
)),

235 
sim∂e_d
, 
com∂ex_d
, 
Àaf
);

236 i‡((
√Àmíts
 & 1) == 0) {

237 (
ªsu…
);

239 
LófDes¸ùt‹
 * 
⁄e_ñemít
 =

240 (
LófDes¸ùt‹
 *)

241 
	`GC_mÆloc_©omic
((
LófDes¸ùt‹
));

243 i‡(
ªsu…
 =
NO_MEM
 || 
⁄e_ñemít
 == 0) (NO_MEM);

244 
⁄e_ñemít
 -> 
ld_èg
 = 
LEAF_TAG
;

245 
⁄e_ñemít
 -> 
ld_size
 = 
size
;

246 
⁄e_ñemít
 -> 
ld_√Àmíts
 = 1;

247 
⁄e_ñemít
 -> 
ld_des¸ùt‹
 = 
des¸ùt‹
;

248 
ªsu…
) {

249 
SIMPLE
:

251 
LófDes¸ùt‹
 * 
begönög
 =

252 (
LófDes¸ùt‹
 *)

253 
	`GC_mÆloc_©omic
((
LófDes¸ùt‹
));

254 i‡(
begönög
 =0Ë(
NO_MEM
);

255 
begönög
 -> 
ld_èg
 = 
LEAF_TAG
;

256 
begönög
 -> 
ld_size
 = 
size
;

257 
begönög
 -> 
ld_√Àmíts
 = 1;

258 
begönög
 -> 
ld_des¸ùt‹
 = *
sim∂e_d
;

259 *
com∂ex_d
 = 
	`GC_make_£quí˚_des¸ùt‹
(

260 (
com∂ex_des¸ùt‹
 *)
begönög
,

261 (
com∂ex_des¸ùt‹
 *)
⁄e_ñemít
);

264 
LEAF
:

266 
LófDes¸ùt‹
 * 
begönög
 =

267 (
LófDes¸ùt‹
 *)

268 
	`GC_mÆloc_©omic
((
LófDes¸ùt‹
));

269 i‡(
begönög
 =0Ë(
NO_MEM
);

270 
begönög
 -> 
ld_èg
 = 
LEAF_TAG
;

271 
begönög
 -> 
ld_size
 = 
Àaf
 ->Üd_size;

272 
begönög
 -> 
ld_√Àmíts
 = 
Àaf
 ->Üd_nelements;

273 
begönög
 -> 
ld_des¸ùt‹
 = 
Àaf
 ->Üd_descriptor;

274 *
com∂ex_d
 = 
	`GC_make_£quí˚_des¸ùt‹
(

275 (
com∂ex_des¸ùt‹
 *)
begönög
,

276 (
com∂ex_des¸ùt‹
 *)
⁄e_ñemít
);

279 
COMPLEX
:

280 *
com∂ex_d
 = 
	`GC_make_£quí˚_des¸ùt‹
(

281 *
com∂ex_d
,

282 (
com∂ex_des¸ùt‹
 *)
⁄e_ñemít
);

285 (
COMPLEX
);

289 
Àaf
 -> 
ld_size
 = 
size
;

290 
Àaf
 -> 
ld_√Àmíts
 = 
√Àmíts
;

291 
Àaf
 -> 
ld_des¸ùt‹
 = 
des¸ùt‹
;

292 (
LEAF
);

294 
	}
}

296 
com∂ex_des¸ùt‹
 * 
	$GC_make_£quí˚_des¸ùt‹
(
com∂ex_des¸ùt‹
 *
fú°
,

297 
com∂ex_des¸ùt‹
 *
£c⁄d
)

299 
Sequí˚Des¸ùt‹
 * 
ªsu…
 =

300 (
Sequí˚Des¸ùt‹
 *)

301 
	`GC_mÆloc
((
Sequí˚Des¸ùt‹
));

305 i‡(
ªsu…
 != 0) {

306 
ªsu…
 -> 
sd_èg
 = 
SEQUENCE_TAG
;

307 
ªsu…
 -> 
sd_fú°
 = 
fú°
;

308 
ªsu…
 -> 
sd_£c⁄d
 = 
£c⁄d
;

310 ((
com∂ex_des¸ùt‹
 *)
ªsu…
);

311 
	}
}

313 #ifde‡
UNDEFINED


314 
com∂ex_des¸ùt‹
 * 
	$GC_make_com∂ex_¨øy_des¸ùt‹
(
w‹d
 
√Àmíts
,

315 
com∂ex_des¸ùt‹
 *
des¸
)

317 
Com∂exAºayDes¸ùt‹
 * 
ªsu…
 =

318 (
Com∂exAºayDes¸ùt‹
 *)

319 
	`GC_mÆloc
((
Com∂exAºayDes¸ùt‹
));

321 i‡(
ªsu…
 != 0) {

322 
ªsu…
 -> 
ad_èg
 = 
ARRAY_TAG
;

323 
ªsu…
 -> 
ad_√Àmíts
 = 
√Àmíts
;

324 
ªsu…
 -> 
ad_ñemít_des¸
 = 
des¸
;

326 ((
com∂ex_des¸ùt‹
 *)
ªsu…
);

327 
	}
}

330 
±r_t
 * 
	gGC_eobj‰ìli°
;

332 
±r_t
 * 
	gGC_¨obj‰ìli°
;

334 
m£
 * 
GC_ty≥d_m¨k_¥oc
(
w‹d
 * 
addr
, m£ * 
m¨k_°ack_±r
,

335 
m£
 * 
m¨k_°ack_limô
, 
w‹d
 
ív
);

337 
m£
 * 
GC_¨øy_m¨k_¥oc
(
w‹d
 * 
addr
, m£ * 
m¨k_°ack_±r
,

338 
m£
 * 
m¨k_°ack_limô
, 
w‹d
 
ív
);

341 
	$GC_öô_ex∂icô_typög
()

343 
i
;

344 
DCL_LOCK_STATE
;

348 
	`GC_STATIC_ASSERT
((
LófDes¸ùt‹
Ë% (
w‹d
) == 0);

349 
	`LOCK
();

350 i‡(
GC_ex∂icô_typög_öôülized
) {

351 
	`UNLOCK
();

354 
GC_ex∂icô_typög_öôülized
 = 
TRUE
;

356 
GC_eobj‰ìli°
 = (
±r_t
 *)
	`GC_√w_‰ì_li°_ö√r
();

357 
GC_ex∂icô_köd
 = 
	`GC_√w_köd_ö√r
(

358 (**)
GC_eobj‰ìli°
,

359 (((
w‹d
)
	`WORDS_TO_BYTES
(-1)Ë| 
GC_DS_PER_OBJECT
),

360 
TRUE
, TRUE);

362 
GC_ty≥d_m¨k_¥oc_ödex
 = 
	`GC_√w_¥oc_ö√r
(
GC_ty≥d_m¨k_¥oc
);

364 
GC_¨obj‰ìli°
 = (
±r_t
 *)
	`GC_√w_‰ì_li°_ö√r
();

365 
GC_¨øy_m¨k_¥oc_ödex
 = 
	`GC_√w_¥oc_ö√r
(
GC_¨øy_m¨k_¥oc
);

366 
GC_¨øy_köd
 = 
	`GC_√w_köd_ö√r
(

367 (**)
GC_¨obj‰ìli°
,

368 
	`GC_MAKE_PROC
(
GC_¨øy_m¨k_¥oc_ödex
, 0),

369 
FALSE
, 
TRUE
);

370 
i
 = 0; i < 
WORDSZ
/2; i++) {

371 
GC_des¸
 
d
 = (((
w‹d
)(-1)Ë>> (
WORDSZ
 - 
i
)) << (WORDSZ - i);

372 
d
 |
GC_DS_BITMAP
;

373 
GC_bm_èbÀ
[
i
] = 
d
;

375 
	`UNLOCK
();

376 
	}
}

378 
m£
 * 
	$GC_ty≥d_m¨k_¥oc
(
w‹d
 * 
addr
, 
m£
 * 
m¨k_°ack_±r
,

379 
m£
 * 
m¨k_°ack_limô
, 
w‹d
 
ív
)

381 
w‹d
 
bm
 = 
GC_ext_des¸ùt‹s
[
ív
].
ed_bôm≠
;

382 
w‹d
 * 
cuºít_p
 = 
addr
;

383 
w‹d
 
cuºít
;

384 
±r_t
 
gª©e°_ha
 = 
GC_gª©e°_∂ausibÀ_hóp_addr
;

385 
±r_t
 
Àa°_ha
 = 
GC_Àa°_∂ausibÀ_hóp_addr
;

386 
DECLARE_HDR_CACHE
;

388 
INIT_HDR_CACHE
;

389 ; 
bm
 !0; bm >>1, 
cuºít_p
++) {

390 i‡(
bm
 & 1) {

391 
cuºít
 = *
cuºít_p
;

392 
	`FIXUP_POINTER
(
cuºít
);

393 i‡((
±r_t
)
cuºít
 >
Àa°_ha
 && (±r_t)cuºíà<
gª©e°_ha
) {

394 
	`PUSH_CONTENTS
((
±r_t
)
cuºít
, 
m¨k_°ack_±r
,

395 
m¨k_°ack_limô
, 
cuºít_p
, 
exô1
);

399 i‡(
GC_ext_des¸ùt‹s
[
ív
].
ed_c⁄töued
) {

404 
m¨k_°ack_±r
++;

405 i‡(
m¨k_°ack_±r
 >
m¨k_°ack_limô
) {

406 
m¨k_°ack_±r
 = 
	`GC_sig«l_m¨k_°ack_ovîÊow
(mark_stack_ptr);

408 
m¨k_°ack_±r
 -> 
m£_°¨t
 = (
±r_t
)(
addr
 + 
WORDSZ
);

409 
m¨k_°ack_±r
 -> 
m£_des¸
 =

410 
	`GC_MAKE_PROC
(
GC_ty≥d_m¨k_¥oc_ödex
, 
ív
+1);

412 (
m¨k_°ack_±r
);

413 
	}
}

418 
w‹d
 
	$GC_des¸_obj_size
(
com∂ex_des¸ùt‹
 *
d
)

420 
d
 -> 
TAG
) {

421 
LEAF_TAG
:

422 (
d
 -> 
ld
.
ld_√Àmíts
 * d ->Üd.
ld_size
);

423 
ARRAY_TAG
:

424 (
d
 -> 
ad
.
ad_√Àmíts


425 * 
	`GC_des¸_obj_size
(
d
 -> 
ad
.
ad_ñemít_des¸
));

426 
SEQUENCE_TAG
:

427 (
	`GC_des¸_obj_size
(
d
 -> 
sd
.
sd_fú°
)

428 + 
	`GC_des¸_obj_size
(
d
 -> 
sd
.
sd_£c⁄d
));

430 
	`ABORT
("Bad complex descriptor");

433 
	}
}

437 
m£
 * 
	$GC_push_com∂ex_des¸ùt‹
(
w‹d
 *
addr
, 
com∂ex_des¸ùt‹
 *
d
,

438 
m£
 *
m•
, m£ *
m¶
)

440 
±r_t
 
cuºít
 = (±r_tË
addr
;

441 
w‹d
 
√Àmíts
;

442 
w‹d
 
sz
;

443 
w‹d
 
i
;

445 
d
 -> 
TAG
) {

446 
LEAF_TAG
:

448 
GC_des¸
 
des¸
 = 
d
 -> 
ld
.
ld_des¸ùt‹
;

450 
√Àmíts
 = 
d
 -> 
ld
.
ld_√Àmíts
;

451 i‡(
m¶
 - 
m•
 <(
±rdiff_t
)
√Àmíts
) (0);

452 
sz
 = 
d
 -> 
ld
.
ld_size
;

453 
i
 = 0; i < 
√Àmíts
; i++) {

454 
m•
++;

455 
m•
 -> 
m£_°¨t
 = 
cuºít
;

456 
m•
 -> 
m£_des¸
 = 
des¸
;

457 
cuºít
 +
sz
;

459 (
m•
);

461 
ARRAY_TAG
:

463 
com∂ex_des¸ùt‹
 *
des¸
 = 
d
 -> 
ad
.
ad_ñemít_des¸
;

465 
√Àmíts
 = 
d
 -> 
ad
.
ad_√Àmíts
;

466 
sz
 = 
	`GC_des¸_obj_size
(
des¸
);

467 
i
 = 0; i < 
√Àmíts
; i++) {

468 
m•
 = 
	`GC_push_com∂ex_des¸ùt‹
((
w‹d
 *)
cuºít
, 
des¸
,

469 
m•
, 
m¶
);

470 i‡(
m•
 == 0) (0);

471 
cuºít
 +
sz
;

473 (
m•
);

475 
SEQUENCE_TAG
:

477 
sz
 = 
	`GC_des¸_obj_size
(
d
 -> 
sd
.
sd_fú°
);

478 
m•
 = 
	`GC_push_com∂ex_des¸ùt‹
((
w‹d
 *)
cuºít
, 
d
 -> 
sd
.
sd_fú°
,

479 
m•
, 
m¶
);

480 i‡(
m•
 == 0) (0);

481 
cuºít
 +
sz
;

482 
m•
 = 
	`GC_push_com∂ex_des¸ùt‹
((
w‹d
 *)
cuºít
, 
d
 -> 
sd
.
sd_£c⁄d
,

483 
m•
, 
m¶
);

484 (
m•
);

487 
	`ABORT
("Bad complex descriptor");

490 
	}
}

493 
m£
 * 
	$GC_¨øy_m¨k_¥oc
(
w‹d
 * 
addr
, 
m£
 * 
m¨k_°ack_±r
,

494 
m£
 * 
m¨k_°ack_limô
, 
w‹d
 
ív
)

496 
hdr
 * 
hhdr
 = 
	`HDR
(
addr
);

497 
size_t
 
sz
 = 
hhdr
 -> 
hb_sz
;

498 
size_t
 
nw‹ds
 = 
	`BYTES_TO_WORDS
(
sz
);

499 
com∂ex_des¸ùt‹
 * 
des¸
 = (com∂ex_des¸ùt‹ *)(
addr
[
nw‹ds
-1]);

500 
m£
 * 
‹ig_m¨k_°ack_±r
 = 
m¨k_°ack_±r
;

501 
m£
 * 
√w_m¨k_°ack_±r
;

503 i‡(
des¸
 == 0) {

505 (
‹ig_m¨k_°ack_±r
);

510 
√w_m¨k_°ack_±r
 = 
	`GC_push_com∂ex_des¸ùt‹
(
addr
, 
des¸
,

511 
m¨k_°ack_±r
,

512 
m¨k_°ack_limô
-1);

513 i‡(
√w_m¨k_°ack_±r
 == 0) {

518 
GC_m¨k_°ack_too_smÆl
 = 
TRUE
;

519 
√w_m¨k_°ack_±r
 = 
‹ig_m¨k_°ack_±r
 + 1;

520 
√w_m¨k_°ack_±r
 -> 
m£_°¨t
 = (
±r_t
)
addr
;

521 
√w_m¨k_°ack_±r
 -> 
m£_des¸
 = 
sz
 | 
GC_DS_LENGTH
;

524 
√w_m¨k_°ack_±r
++;

525 
√w_m¨k_°ack_±r
 -> 
m£_°¨t
 = (
±r_t
)(
addr
 + 
nw‹ds
 - 1);

526 
√w_m¨k_°ack_±r
 -> 
m£_des¸
 = (
w‹d
Ë| 
GC_DS_LENGTH
;

528  
√w_m¨k_°ack_±r
;

529 
	}
}

531 
GC_des¸
 
	$GC_make_des¸ùt‹
(
GC_bôm≠
 
bm
, 
size_t
 
Àn
)

533 
sig√d_w‹d
 
œ°_£t_bô
 = 
Àn
 - 1;

534 
GC_des¸
 
ªsu…
;

535 
sig√d_w‹d
 
i
;

536 
	#HIGH_BIT
 (((
w‹d
)1Ë<< (
WORDSZ
 - 1))

	)

538 i‡(!
GC_ex∂icô_typög_öôülized
Ë
	`GC_öô_ex∂icô_typög
();

539 
œ°_£t_bô
 >0 && !
	`GC_gë_bô
(
bm
,Üast_set_bit))Üast_set_bit --;

540 i‡(
œ°_£t_bô
 < 0) (0 );

541 #i‡
ALIGNMENT
 =
CPP_WORDSZ
/8

543 
GC_boﬁ
 
Æl_bôs_£t
 = 
TRUE
;

544 
i
 = 0; i < 
œ°_£t_bô
; i++) {

545 i‡(!
	`GC_gë_bô
(
bm
, 
i
)) {

546 
Æl_bôs_£t
 = 
FALSE
;

550 i‡(
Æl_bôs_£t
) {

552  (
	`WORDS_TO_BYTES
(
œ°_£t_bô
+1Ë| 
GC_DS_LENGTH
);

556 i‡(
œ°_£t_bô
 < 
BITMAP_BITS
) {

559 
ªsu…
 = 
HIGH_BIT
;

560 
i
 = 
œ°_£t_bô
 - 1; i >= 0; i--) {

561 
ªsu…
 >>= 1;

562 i‡(
	`GC_gë_bô
(
bm
, 
i
)Ë
ªsu…
 |
HIGH_BIT
;

564 
ªsu…
 |
GC_DS_BITMAP
;

565 (
ªsu…
);

567 
sig√d_w‹d
 
ödex
;

569 
ödex
 = 
	`GC_add_ext_des¸ùt‹
(
bm
, (
w‹d
)
œ°_£t_bô
+1);

570 i‡(
ödex
 =-1Ë(
	`WORDS_TO_BYTES
(
œ°_£t_bô
+1Ë| 
GC_DS_LENGTH
);

573 
ªsu…
 = 
	`GC_MAKE_PROC
(
GC_ty≥d_m¨k_¥oc_ödex
, (
w‹d
)
ödex
);

574  
ªsu…
;

576 
	}
}

578 
±r_t
 
GC_˛ór_°ack
();

580 
	#GENERAL_MALLOC
(
lb
,
k
) \

581 (*)
	`GC_˛ór_°ack
(
	`GC_gíîic_mÆloc
((
w‹d
)
lb
, 
k
))

	)

583 
	#GENERAL_MALLOC_IOP
(
lb
,
k
) \

584 (*)
	`GC_˛ór_°ack
(
	`GC_gíîic_mÆloc_ign‹e_off_∑ge
(
lb
, 
k
))

	)

586 * 
	$GC_mÆloc_ex∂icôly_ty≥d
(
size_t
 
lb
, 
GC_des¸
 
d
)

588 
±r_t
 
›
;

589 
±r_t
 * 
›p
;

590 
size_t
 
lg
;

591 
DCL_LOCK_STATE
;

593 
lb
 +
TYPD_EXTRA_BYTES
;

594 if(
	`SMALL_OBJ
(
lb
)) {

595 
lg
 = 
GC_size_m≠
[
lb
];

596 
›p
 = &(
GC_eobj‰ìli°
[
lg
]);

597 
	`LOCK
();

598 if–(
›
 = *
›p
) == 0 ) {

599 
	`UNLOCK
();

600 
›
 = (
±r_t
)
	`GENERAL_MALLOC
((
w‹d
)
lb
, 
GC_ex∂icô_köd
);

601 i‡(0 =
›
)  0;

602 
lg
 = 
GC_size_m≠
[
lb
];

604 *
›p
 = 
	`obj_lök
(
›
);

605 
	`obj_lök
(
›
) = 0;

606 
GC_byãs_Ælocd
 +
	`GRANULES_TO_BYTES
(
lg
);

607 
	`UNLOCK
();

610 
›
 = (
±r_t
)
	`GENERAL_MALLOC
((
w‹d
)
lb
, 
GC_ex∂icô_köd
);

611 i‡(
›
 !
NULL
)

612 
lg
 = 
	`BYTES_TO_GRANULES
(
	`GC_size
(
›
));

614 i‡(
›
 !
NULL
)

615 ((
w‹d
 *)
›
)[
	`GRANULES_TO_WORDS
(
lg
Ë- 1] = 
d
;

616 ((*Ë
›
);

617 
	}
}

619 * 
	$GC_mÆloc_ex∂icôly_ty≥d_ign‹e_off_∑ge
(
size_t
 
lb
, 
GC_des¸
 
d
)

621 
±r_t
 
›
;

622 
±r_t
 * 
›p
;

623 
size_t
 
lg
;

624 
DCL_LOCK_STATE
;

626 
lb
 +
TYPD_EXTRA_BYTES
;

627 if–
	`SMALL_OBJ
(
lb
) ) {

628 
lg
 = 
GC_size_m≠
[
lb
];

629 
›p
 = &(
GC_eobj‰ìli°
[
lg
]);

630 
	`LOCK
();

631 if–(
›
 = *
›p
) == 0 ) {

632 
	`UNLOCK
();

633 
›
 = (
±r_t
)
	`GENERAL_MALLOC_IOP
(
lb
, 
GC_ex∂icô_köd
);

634 
lg
 = 
GC_size_m≠
[
lb
];

636 *
›p
 = 
	`obj_lök
(
›
);

637 
	`obj_lök
(
›
) = 0;

638 
GC_byãs_Ælocd
 +
	`GRANULES_TO_BYTES
(
lg
);

639 
	`UNLOCK
();

642 
›
 = (
±r_t
)
	`GENERAL_MALLOC_IOP
(
lb
, 
GC_ex∂icô_köd
);

643 i‡(
›
 !
NULL
)

644 
lg
 = 
	`BYTES_TO_WORDS
(
	`GC_size
(
›
));

646 i‡(
›
 !
NULL
)

647 ((
w‹d
 *)
›
)[
	`GRANULES_TO_WORDS
(
lg
Ë- 1] = 
d
;

648 ((*Ë
›
);

649 
	}
}

651 * 
	$GC_ˇŒoc_ex∂icôly_ty≥d
(
size_t
 
n
, size_à
lb
, 
GC_des¸
 
d
)

653 
±r_t
 
›
;

654 
±r_t
 * 
›p
;

655 
size_t
 
lg
;

656 
GC_des¸
 
sim∂e_des¸
;

657 
com∂ex_des¸ùt‹
 *
com∂ex_des¸
;

658 
des¸_ty≥
;

659 
LófDes¸ùt‹
 
Àaf
;

660 
DCL_LOCK_STATE
;

662 
des¸_ty≥
 = 
	`GC_make_¨øy_des¸ùt‹
((
w‹d
)
n
, (w‹d)
lb
, 
d
,

663 &
sim∂e_des¸
, &
com∂ex_des¸
, &
Àaf
);

664 
des¸_ty≥
) {

665 
NO_MEM
: (0);

666 
SIMPLE
: (
	`GC_mÆloc_ex∂icôly_ty≥d
(
n
*
lb
, 
sim∂e_des¸
));

667 
LEAF
:

668 
lb
 *
n
;

669 
lb
 +(
LófDes¸ùt‹
Ë+ 
TYPD_EXTRA_BYTES
;

671 
COMPLEX
:

672 
lb
 *
n
;

673 
lb
 +
TYPD_EXTRA_BYTES
;

676 if–
	`SMALL_OBJ
(
lb
) ) {

677 
lg
 = 
GC_size_m≠
[
lb
];

678 
›p
 = &(
GC_¨obj‰ìli°
[
lg
]);

679 
	`LOCK
();

680 if–(
›
 = *
›p
) == 0 ) {

681 
	`UNLOCK
();

682 
›
 = (
±r_t
)
	`GENERAL_MALLOC
((
w‹d
)
lb
, 
GC_¨øy_köd
);

683 i‡(0 =
›
) (0);

684 
lg
 = 
GC_size_m≠
[
lb
];

686 *
›p
 = 
	`obj_lök
(
›
);

687 
	`obj_lök
(
›
) = 0;

688 
GC_byãs_Ælocd
 +
	`GRANULES_TO_BYTES
(
lg
);

689 
	`UNLOCK
();

692 
›
 = (
±r_t
)
	`GENERAL_MALLOC
((
w‹d
)
lb
, 
GC_¨øy_köd
);

693 i‡(0 =
›
) (0);

694 
lg
 = 
	`BYTES_TO_GRANULES
(
	`GC_size
(
›
));

696 i‡(
des¸_ty≥
 =
LEAF
) {

698 vﬁ©ûê
LófDes¸ùt‹
 * 
Õ
 =

699 (
LófDes¸ùt‹
 *)

700 ((
w‹d
 *)
›


701 + 
	`GRANULES_TO_WORDS
(
lg
)

702 - (
	`BYTES_TO_WORDS
((
LófDes¸ùt‹
)) + 1));

704 
Õ
 -> 
ld_èg
 = 
LEAF_TAG
;

705 
Õ
 -> 
ld_size
 = 
Àaf
.ld_size;

706 
Õ
 -> 
ld_√Àmíts
 = 
Àaf
.ld_nelements;

707 
Õ
 -> 
ld_des¸ùt‹
 = 
Àaf
.ld_descriptor;

708 ((vﬁ©ûê
w‹d
 *)
›
)[
	`GRANULES_TO_WORDS
(
lg
Ë- 1] = (w‹d)
Õ
;

710 
GC_föÆiz©i⁄_Áûuªs
;

711 
ff
 = 
GC_föÆiz©i⁄_Áûuªs
;

712 
size_t
 
lw
 = 
	`GRANULES_TO_WORDS
(
lg
);

714 ((
w‹d
 *)
›
)[
lw
 - 1] = (w‹d)
com∂ex_des¸
;

718 
	`GC_gíîÆ_ªgi°î_dißµórög_lök
((* *)

719 ((
w‹d
 *)
›
+
lw
-1),

720 (*Ë
›
);

721 i‡(
ff
 !
GC_föÆiz©i⁄_Áûuªs
) {

725 (
	`GC_mÆloc
(
n
*
lb
));

728 ((*Ë
›
);

729 
	}
}

	@win32_threads.c

1 
	~"¥iv©e/gc_¥iv.h
"

3 #i‡
deföed
(
GC_WIN32_THREADS
)

5 
	~<wödows.h
>

7 #ifde‡
THREAD_LOCAL_ALLOC


8 
	~"¥iv©e/thªad_loˇl_Æloc.h
"

12 #i‡!
deföed
(
USE_PTHREAD_LOCKS
)

13 #i‡
deföed
(
GC_DLL
)

14 
	$__de˛•ec
(
dŒexp‹t
Ë
CRITICAL_SECTION
 
GC_Æloˇã_ml
;

16 
CRITICAL_SECTION
 
GC_Æloˇã_ml
;

18 
DWORD
 
GC_lock_hﬁdî
 = 
NO_THREAD
;

21 
±hªad_muãx_t
 
GC_Æloˇã_ml
 = 
PTHREAD_MUTEX_INITIALIZER
;

22 
GC_lock_hﬁdî
 = 
NO_THREAD
;

25 #ifde‡
GC_PTHREADS


26 
	~<î∫o.h
>

32 #ifde‡
GC_DLL


33 #îr‹ 
GC_DLL
 
u¡e°ed
 
wôh
 
Cygwö


37 #unde‡
±hªad_¸óã


38 #unde‡
±hªad_sigmask


39 #unde‡
±hªad_joö


40 #unde‡
±hªad_dëach


41 #unde‡
dl›í


43 #ifde‡
DEBUG_THREADS


44 #ifde‡
CYGWIN32


45 
	#DEBUG_CYGWIN_THREADS
 1

	)

46 
	#DEBUG_WIN32_PTHREADS
 0

	)

48 
	#DEBUG_WIN32_PTHREADS
 1

	)

49 
	#DEBUG_CYGWIN_THREADS
 0

	)

52 
	#DEBUG_CYGWIN_THREADS
 0

	)

53 
	#DEBUG_WIN32_PTHREADS
 0

	)

56 * 
	`GC_±hªad_°¨t
(* 
¨g
);

57 
	`GC_thªad_exô_¥oc
(*
¨g
);

59 
	~<±hªad.h
>

63 #ifde‡
DEBUG_THREADS


64 
	#DEBUG_WIN32_THREADS
 1

	)

66 
	#DEBUG_WIN32_THREADS
 0

	)

69 #unde‡
Cª©eThªad


70 #unde‡
ExôThªad


71 #unde‡
_begöthªadex


72 #unde‡
_ídthªadex


73 #unde‡
_begöthªad


74 #ifde‡
DEBUG_THREADS


75 
	#DEBUG_WIN32_THREADS
 1

	)

77 
	#DEBUG_WIN32_THREADS
 0

	)

80 
	~<¥o˚ss.h
>

84 #i‡
	`deföed
(
GC_DLL
Ë&& !deföed(
MSWINCE
)

85 
GC_boﬁ
 
GC_wö32_dŒ_thªads
 = 
FALSE
;

115 
	#GC_wö32_dŒ_thªads
 
FALSE


	)

128 
LONG
 * 
	tIE_t
;

130 
GC_boﬁ
 
GC_thr_öôülized
 = 
FALSE
;

132 
GC_boﬁ
 
GC_√ed_to_lock
 = 
FALSE
;

134 
GC_boﬁ
 
∑øŒñ_öôülized
 = 
FALSE
;

136 
	`GC_öô_∑øŒñ
();

138 #ifde‡
GC_DLL


140 
GC_API
 
	$GC_u£_DŒMaö
()

142 #ifde‡
THREAD_LOCAL_ALLOC


143 
	`ABORT
("Cannot useÅhreadÜocalállocation with DllMain-based "

148 
	`GC_ASSERT
(!
∑øŒñ_öôülized
);

149 
GC_wö32_dŒ_thªads
 = 
TRUE
;

150 
	`GC_öô_∑øŒñ
();

151 
	}
}

153 
GC_API
 
	$GC_u£_DŒMaö
()

155 
	`ABORT
("GCÇot configuredás DLL");

156 
	}
}

159 
DWORD
 
	gGC_maö_thªad
 = 0;

161 
	sGC_Thªad_Rï
 {

163 
AO_t
 
	mtm_ö_u£
;

168 
GC_Thªad_Rï
 * 
	mtm_√xt
;

176 } 
	mèbÀ_m™agemít
;

177 
	#ö_u£
 
èbÀ_m™agemít
.
tm_ö_u£


	)

178 
	#√xt
 
èbÀ_m™agemít
.
tm_√xt


	)

179 
DWORD
 
	mid
;

180 
HANDLE
 
	mh™dÀ
;

181 
±r_t
 
	m°ack_ba£
;

184 
GC_boﬁ
 
	msu•íded
;

186 #ifde‡
GC_PTHREADS


187 *
	m°©us
;

188 
±hªad_t
 
	m±hªad_id
;

189 
	mÊags
;

190 
	#FINISHED
 1

	)

191 
	#DETACHED
 2

	)

192 
	#KNOWN_FINISHED
(
t
Ë((—Ë-> 
Êags
Ë& 
FINISHED
)

	)

194 
	#KNOWN_FINISHED
(
t
Ë0

	)

196 #ifde‡
THREAD_LOCAL_ALLOC


197 
thªad_loˇl_‰ìli°s
 
	méfs
;

201 
GC_Thªad_Rï
 * 
	tGC_thªad
;

202 vﬁ©ûê
	tGC_Thªad_Rï
 * 
	tGC_vthªad
;

209 vﬁ©ûê
GC_boﬁ
 
	gGC_∂ó£_°›
 = 
FALSE
;

218 
AO_t
 
	gGC_©èched_thªad
 = 
FALSE
;

221 
GC_boﬁ
 
	$GC_°¨ãd_thªad_whûe_°›≥d
()

223 
AO_t
 
ªsu…
;

225 i‡(
GC_wö32_dŒ_thªads
) {

226 
	`AO_n›_fuŒ
();

227 
ªsu…
 = 
	`AO_lﬂd
(&
GC_©èched_thªad
);

228 i‡(
ªsu…
) {

229 
	`AO_°‹e
(&
GC_©èched_thªad
, 
FALSE
);

231  ((
GC_boﬁ
)
ªsu…
);

233  
FALSE
;

235 
	}
}

241 #i‚de‡
MAX_THREADS


242 
	#MAX_THREADS
 512

	)

247 vﬁ©ûê
GC_Thªad_Rï
 
	gdŒ_thªad_èbÀ
[
MAX_THREADS
];

249 vﬁ©ûê
LONG
 
	gGC_max_thªad_ödex
 = 0;

256 
	#THREAD_TABLE_SZ
 256

	)

257 
GC_thªad
 
	gGC_thªads
[
THREAD_TABLE_SZ
];

263 
GC_thªad
 
	$GC_√w_thªad
(
DWORD
 
id
)

265 
w‹d
 
hv
 = ((w‹d)
id
Ë% 
THREAD_TABLE_SZ
;

266 
GC_thªad
 
ªsu…
;

268 
GC_Thªad_Rï
 
fú°_thªad
;

269 
GC_boﬁ
 
fú°_thªad_u£d
 = 
FALSE
;

271 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

272 i‡(!
fú°_thªad_u£d
) {

273 
ªsu…
 = &
fú°_thªad
;

274 
fú°_thªad_u£d
 = 
TRUE
;

276 
	`GC_ASSERT
(!
GC_wö32_dŒ_thªads
);

277 
ªsu…
 = (
GC_Thªad_Rï
 *)

278 
	`GC_INTERNAL_MALLOC
((
GC_Thªad_Rï
), 
NORMAL
);

279 #ifde‡
GC_PTHREADS


281 
	`GC_ASSERT
(
ªsu…
 -> 
Êags
 == 0);

284 i‡(
ªsu…
 == 0) (0);

286 
ªsu…
 -> 
√xt
 = 
GC_thªads
[
hv
];

287 
GC_thªads
[
hv
] = 
ªsu…
;

288 #ifde‡
GC_PTHREADS


289 
	`GC_ASSERT
(
ªsu…
 -> 
Êags
 == 0 );

291 (
ªsu…
);

292 
	}
}

294 
LONG
 
WINAPI
 
GC_wrôe_Áu…_h™dÀr
(
_EXCEPTION_POINTERS
 *
exc_öfo
);

296 #i‡
deföed
(
GWW_VDB
Ë&& deföed(
MPROTECT_VDB
)

297 
GC_boﬁ
 
GC_gww_dúty_öô
();

302 
GC_boﬁ
 
	gGC_ö_thªad_¸óti⁄
 = 
FALSE
;

311 
GC_thªad
 
	$GC_ªgi°î_my_thªad_ö√r
(
GC_°ack_ba£
 *
sb
,

312 
DWORD
 
thªad_id
)

314 
GC_vthªad
 
me
;

319 #i‡
	`deföed
(
MPROTECT_VDB
)

320 #i‡
	`deföed
(
GWW_VDB
)

321 i‡(
GC_ö¸emíèl
 && !
	`GC_gww_dúty_öô
())

322 
	`SëUnh™dÀdEx˚±i⁄Fûãr
(
GC_wrôe_Áu…_h™dÀr
);

324 i‡(
GC_ö¸emíèl
Ë
	`SëUnh™dÀdEx˚±i⁄Fûãr
(
GC_wrôe_Áu…_h™dÀr
);

328 i‡(
GC_wö32_dŒ_thªads
) {

329 
i
;

342 
i
 = 0; 
	`I¡îlockedExch™ge
((
IE_t
)&
dŒ_thªad_èbÀ
[i].
ö_u£
,1) != 0;

343 
i
++) {

351 i‡(
i
 =
MAX_THREADS
 - 1)

352 
	`ABORT
("too manyÅhreads");

359 
i
 > 
GC_max_thªad_ödex
) {

360 
	`I¡îlockedIn¸emít
((
IE_t
)&
GC_max_thªad_ödex
);

362 i‡(
GC_max_thªad_ödex
 >
MAX_THREADS
) {

365 
GC_max_thªad_ödex
 = 
MAX_THREADS
 - 1;

367 
me
 = 
dŒ_thªad_èbÀ
 + 
i
;

369 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

370 
GC_ö_thªad_¸óti⁄
 = 
TRUE
;

371 
me
 = 
	`GC_√w_thªad
(
thªad_id
);

372 
GC_ö_thªad_¸óti⁄
 = 
FALSE
;

374 #ifde‡
GC_PTHREADS


376 
me
 -> 
±hªad_id
 = 
	`±hªad_£lf
();

379 i‡(!
	`Du∂iˇãH™dÀ
(
	`GëCuºítPro˚ss
(),

380 
	`GëCuºítThªad
(),

381 
	`GëCuºítPro˚ss
(),

382 (
HANDLE
*)&(
me
 -> 
h™dÀ
),

385 
DUPLICATE_SAME_ACCESS
)) {

386 
DWORD
 
œ°_îr‹
 = 
	`GëLa°Eº‹
();

387 
	`GC_îr_¥ötf
("La°Éº‹ code: %d\n", 
œ°_îr‹
);

388 
	`ABORT
("DuplicateHandle failed");

390 
me
 -> 
°ack_ba£
 = 
sb
 -> 
mem_ba£
;

395 
me
 -> 
id
 = 
thªad_id
;

396 #i‡
	`deföed
(
THREAD_LOCAL_ALLOC
)

397 
	`GC_öô_thªad_loˇl
((
GC_éfs
)(&(
me
->
éfs
)));

399 i‡(
me
 -> 
°ack_ba£
 =
NULL
)

400 
	`ABORT
("Bad stack base in GC_register_my_thread_inner");

401 i‡(
GC_wö32_dŒ_thªads
) {

402 i‡(
GC_∂ó£_°›
) {

403 
	`AO_°‹e
(&
GC_©èched_thªad
, 
TRUE
);

404 
	`AO_n›_fuŒ
();

410 
	`GC_ASSERT
(!
GC_∂ó£_°›
);

414  (
GC_thªad
)(
me
);

415 
	}
}

421 #ifde‡
__GNUC__


422 
	g__ölöe__


424 
LONG
 
	$GC_gë_max_thªad_ödex
()

426 
LONG
 
my_max
 = 
GC_max_thªad_ödex
;

428 i‡(
my_max
 >
MAX_THREADS
)  MAX_THREADS-1;

429  
my_max
;

430 
	}
}

439 
GC_thªad
 
	$GC_lookup_thªad_ö√r
(
DWORD
 
thªad_id
) {

440 i‡(
GC_wö32_dŒ_thªads
) {

441 
i
;

442 
LONG
 
my_max
 = 
	`GC_gë_max_thªad_ödex
();

443 
i
 = 0;

444 
i
 <
my_max
 &&

445 (!
	`AO_lﬂd_acquúe
(&(
dŒ_thªad_èbÀ
[
i
].
ö_u£
))

446 || 
dŒ_thªad_èbÀ
[
i
].
id
 !
thªad_id
);

448 
i
++) {}

449 i‡(
i
 > 
my_max
) {

452  (
GC_thªad
)(
dŒ_thªad_èbÀ
 + 
i
);

455 
w‹d
 
hv
 = ((w‹d)
thªad_id
Ë% 
THREAD_TABLE_SZ
;

456 
GC_thªad
 
p
 = 
GC_thªads
[
hv
];

458 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

459 
p
 !0 &&Ö -> 
id
 !
thªad_id
Ë∞∞-> 
√xt
;

460 (
p
);

462 
	}
}

468 
GC_thªad
 
	$GC_lookup_thªad
(
DWORD
 
thªad_id
)

470 i‡(
GC_wö32_dŒ_thªads
) {

471  
	`GC_lookup_thªad_ö√r
(
thªad_id
);

473 
GC_thªad
 
ªsu…
;

474 
	`LOCK
();

475 
ªsu…
 = 
	`GC_lookup_thªad_ö√r
(
thªad_id
);

476 
	`UNLOCK
();

477  
ªsu…
;

479 
	}
}

489 
	$GC_dñëe_gc_thªad
(
GC_vthªad
 
gc_id
)

491 
	`Clo£H™dÀ
(
gc_id
->
h™dÀ
);

492 i‡(
GC_wö32_dŒ_thªads
) {

497 
gc_id
 -> 
°ack_ba£
 = 0;

498 
gc_id
 -> 
id
 = 0;

499 #ifde‡
CYGWIN32


500 
gc_id
 -> 
±hªad_id
 = 0;

502 #ifde‡
GC_WIN32_PTHREADS


503 
gc_id
 -> 
±hªad_id
.
p
 = 
NULL
;

505 
	`AO_°‹e_ªÀa£
(&(
gc_id
->
ö_u£
), 
FALSE
);

508 
GC_thªad
 
gc_nvid
 = (GC_thªad)
gc_id
;

509 
DWORD
 
id
 = 
gc_nvid
 -> id;

510 
w‹d
 
hv
 = ((w‹d)
id
Ë% 
THREAD_TABLE_SZ
;

511 
GC_thªad
 
p
 = 
GC_thªads
[
hv
];

512 
GC_thªad
 
¥ev
 = 0;

514 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

515 
p
 !
gc_nvid
) {

516 
¥ev
 = 
p
;

517 
p
 =Ö -> 
√xt
;

519 i‡(
¥ev
 == 0) {

520 
GC_thªads
[
hv
] = 
p
 -> 
√xt
;

522 
¥ev
 -> 
√xt
 = 
p
 ->Çext;

524 
	`GC_INTERNAL_FREE
(
p
);

526 
	}
}

534 
	$GC_dñëe_thªad
(
DWORD
 
id
)

536 i‡(
GC_wö32_dŒ_thªads
) {

537 
GC_thªad
 
t
 = 
	`GC_lookup_thªad_ö√r
(
id
);

539 i‡(0 =
t
) {

540 
	`WARN
("RemovögÇ⁄exi°íàthªad %ld\n", (
GC_w‹d
)
id
);

542 
	`GC_dñëe_gc_thªad
(
t
);

545 
w‹d
 
hv
 = ((w‹d)
id
Ë% 
THREAD_TABLE_SZ
;

546 
GC_thªad
 
p
 = 
GC_thªads
[
hv
];

547 
GC_thªad
 
¥ev
 = 0;

549 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

550 
p
 -> 
id
 != id) {

551 
¥ev
 = 
p
;

552 
p
 =Ö -> 
√xt
;

554 
	`Clo£H™dÀ
(
p
->
h™dÀ
);

555 i‡(
¥ev
 == 0) {

556 
GC_thªads
[
hv
] = 
p
 -> 
√xt
;

558 
¥ev
 -> 
√xt
 = 
p
 ->Çext;

560 
	`GC_INTERNAL_FREE
(
p
);

562 
	}
}

564 
GC_API
 
	$GC_ªgi°î_my_thªad
(
GC_°ack_ba£
 *
sb
) {

565 
DWORD
 
t
 = 
	`GëCuºítThªadId
();

567 i‡(0 =
	`GC_lookup_thªad
(
t
)) {

569 
	`LOCK
();

570 
	`GC_ªgi°î_my_thªad_ö√r
(
sb
, 
t
);

571 
	`UNLOCK
();

572  
GC_SUCCESS
;

574  
GC_DUPLICATE
;

576 
	}
}

578 
GC_API
 
	$GC_uƒegi°î_my_thªad
()

580 
DWORD
 
t
 = 
	`GëCuºítThªadId
();

582 #i‡
	`deföed
(
THREAD_LOCAL_ALLOC
)

583 
	`LOCK
();

585 
GC_thªad
 
me
 = 
	`GC_lookup_thªad_ö√r
(
t
);

586 
	`GC_de°roy_thªad_loˇl
(&(
me
->
éfs
));

588 
	`UNLOCK
();

590 i‡(
GC_wö32_dŒ_thªads
) {

592 
	`GC_dñëe_thªad
(
t
);

594 
	`LOCK
();

595 
	`GC_dñëe_thªad
(
t
);

596 
	`UNLOCK
();

598  
GC_SUCCESS
;

599 
	}
}

602 #ifde‡
GC_PTHREADS


606 
	#PTHREAD_MAP_SIZE
 512

	)

607 
DWORD
 
	gGC_±hªad_m≠_ˇche
[
PTHREAD_MAP_SIZE
];

608 
	#HASH
(
±hªad_id
Ë((
	`NUMERIC_THREAD_ID
’thªad_idË>> 5Ë% 
PTHREAD_MAP_SIZE
)

	)

610 
	#SET_PTHREAD_MAP_CACHE
(
±hªad_id
, 
wö32_id
) \

611 
GC_±hªad_m≠_ˇche
[
	`HASH
(
±hªad_id
)] = (
wö32_id
);

	)

612 
	#GET_PTHREAD_MAP_CACHE
(
±hªad_id
) \

613 
GC_±hªad_m≠_ˇche
[
	`HASH
(
±hªad_id
)]

	)

621 
GC_thªad
 
	$GC_lookup_±hªad
(
±hªad_t
 
id
)

623 i‡(
GC_wö32_dŒ_thªads
) {

624 
i
;

625 
LONG
 
my_max
 = 
	`GC_gë_max_thªad_ödex
();

627 
i
 = 0;

628 
i
 <
my_max
 &&

629 (!
	`AO_lﬂd_acquúe
(&(
dŒ_thªad_èbÀ
[
i
].
ö_u£
))

630 || 
	`THREAD_EQUAL
(
dŒ_thªad_èbÀ
[
i
].
±hªad_id
, 
id
));

632 
i
++);

633 i‡(
i
 > 
my_max
)  0;

634  (
GC_thªad
)(
dŒ_thªad_èbÀ
 + 
i
);

638 
hv_guess
 = 
	`GET_PTHREAD_MAP_CACHE
(
id
Ë% 
THREAD_TABLE_SZ
;

639 
hv
;

640 
GC_thªad
 
p
;

642 
	`LOCK
();

643 
p
 = 
GC_thªads
[
hv_guess
]; 0 !p;Ö =Ö -> 
√xt
) {

644 i‡(
	`THREAD_EQUAL
(
p
 -> 
±hªad_id
, 
id
))

645 
foundô
;

647 
hv
 = 0; hv < 
THREAD_TABLE_SZ
; ++hv) {

648 
p
 = 
GC_thªads
[
hv
]; 0 !p;Ö =Ö -> 
√xt
) {

649 i‡(
	`THREAD_EQUAL
(
p
 -> 
±hªad_id
, 
id
))

650 
foundô
;

653 
p
 = 0;

654 
foundô
:

655 
	`UNLOCK
();

656  
p
;

658 
	}
}

662 
	$GC_push_thªad_°ru˘uªs
()

664 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

665 i‡(
GC_wö32_dŒ_thªads
) {

669 #ifde‡
GC_PTHREADS


670 { 
i
;

671 
LONG
 
my_max
 = 
	`GC_gë_max_thªad_ödex
();

673 
i
 = 0; i <
my_max
; i++)

674 i‡(
dŒ_thªad_èbÀ
[
i
].
ö_u£
)

675 
	`GC_push_Æl
((
±r_t
)&(
dŒ_thªad_èbÀ
[
i
].
°©us
),

676 (
±r_t
)(&(
dŒ_thªad_èbÀ
[
i
].
°©us
)+1));

680 
	`GC_push_Æl
((
±r_t
)(
GC_thªads
), (ptr_t)(GC_threads)+(GC_threads));

682 #i‡
	`deföed
(
THREAD_LOCAL_ALLOC
)

683 
	`GC_push_Æl
((
±r_t
)(&
GC_thªad_key
),

684 (
±r_t
)(&
GC_thªad_key
)+(&GC_thread_key));

687 
	}
}

690 
	$GC_su•íd
(
GC_thªad
 
t
)

692 #ifde‡
MSWINCE


694 
	`Su•ídThªad
(
t
 -> 
h™dÀ
Ë=(
DWORD
)-1)

695 
	`SÀï
(10);

702 
DWORD
 
exôCode
;

703 i‡(
	`GëExôCodeThªad
(
t
 -> 
h™dÀ
, &
exôCode
) &&

704 
exôCode
 !
STILL_ACTIVE
) {

705 
t
 -> 
°ack_ba£
 = 0;

706 #i‚de‡
GC_PTHREADS


709 
	`GC_ASSERT
(
GC_wö32_dŒ_thªads
);

710 
	`GC_dñëe_gc_thªad
(
t
);

714 i‡(
	`Su•ídThªad
(
t
 -> 
h™dÀ
Ë=(
DWORD
)-1)

715 
	`ABORT
("SuspendThread failed");

717 
t
 -> 
su•íded
 = 
TRUE
;

718 
	}
}

721 #i‚de‡
CYGWIN32


722 
CRITICAL_SECTION
 
GC_wrôe_cs
;

725 
	$GC_°›_w‹ld
()

727 
DWORD
 
thªad_id
 = 
	`GëCuºítThªadId
();

728 
i
;

730 i‡(!
GC_thr_öôülized
Ë
	`ABORT
("GC_stop_world() called before GC_thr_init()");

731 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

733 
GC_∂ó£_°›
 = 
TRUE
;

734 #i‚de‡
CYGWIN32


735 
	`E¡îCrôiˇlSe˘i⁄
(&
GC_wrôe_cs
);

737 i‡(
GC_wö32_dŒ_thªads
) {

742 
GC_©èched_thªad
 = 
FALSE
;

743 
i
 = 0; i <
	`GC_gë_max_thªad_ödex
(); i++) {

744 
GC_vthªad
 
t
 = 
dŒ_thªad_èbÀ
 + 
i
;

745 i‡(
t
 -> 
°ack_ba£
 != 0

746 && 
t
 -> 
id
 !
thªad_id
) {

747 
	`GC_su•íd
((
GC_thªad
)
t
);

751 
GC_thªad
 
t
;

752 
i
;

754 
i
 = 0; i < 
THREAD_TABLE_SZ
; i++) {

755 
t
 = 
GC_thªads
[
i
];Å !0;Å =Å -> 
√xt
) {

756 i‡(
t
 -> 
°ack_ba£
 != 0

757 && !
	`KNOWN_FINISHED
(
t
)

758 && 
t
 -> 
id
 !
thªad_id
) {

759 
	`GC_su•íd
(
t
);

764 #i‚de‡
CYGWIN32


765 
	`LóveCrôiˇlSe˘i⁄
(&
GC_wrôe_cs
);

767 
	}
}

769 
	$GC_°¨t_w‹ld
()

771 
DWORD
 
thªad_id
 = 
	`GëCuºítThªadId
();

772 
i
;

773 
LONG
 
my_max
 = 
	`GC_gë_max_thªad_ödex
();

775 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

776 i‡(
GC_wö32_dŒ_thªads
) {

777 
i
 = 0; i <
my_max
; i++) {

778 
GC_thªad
 
t
 = (GC_thªad)(
dŒ_thªad_èbÀ
 + 
i
);

779 i‡(
t
 -> 
°ack_ba£
 !0 &&Å -> 
su•íded


780 && 
t
 -> 
id
 !
thªad_id
) {

781 i‡(
	`ResumeThªad
(
t
 -> 
h™dÀ
Ë=(
DWORD
)-1)

782 
	`ABORT
("ResumeThread failed");

783 
t
 -> 
su•íded
 = 
FALSE
;

787 
GC_thªad
 
t
;

788 
i
;

790 
i
 = 0; i < 
THREAD_TABLE_SZ
; i++) {

791 
t
 = 
GC_thªads
[
i
];Å !0;Å =Å -> 
√xt
) {

792 i‡(
t
 -> 
°ack_ba£
 !0 &&Å -> 
su•íded


793 && 
t
 -> 
id
 !
thªad_id
) {

794 i‡(
	`ResumeThªad
(
t
 -> 
h™dÀ
Ë=(
DWORD
)-1)

795 
	`ABORT
("ResumeThread failed");

796 
t
 -> 
su•íded
 = 
FALSE
;

801 
GC_∂ó£_°›
 = 
FALSE
;

802 
	}
}

804 #ifde‡
MSWINCE


808 
	#GC_gë_°ack_mö
(
s
) \

809 ((
±r_t
)(((
DWORD
)(
s
Ë- 1Ë& 0xFFFF0000))

	)

811 
±r_t
 
	$GC_gë_°ack_mö
(
±r_t
 
s
)

813 
±r_t
 
bŸtom
;

814 
MEMORY_BASIC_INFORMATION
 
öfo
;

815 
	`VútuÆQuîy
(
s
, &
öfo
, (info));

817 
bŸtom
 = 
öfo
.
Ba£Addªss
;

818 
	`VútuÆQuîy
(
bŸtom
 - 1, &
öfo
, (info));

819 } (
öfo
.
PrŸe˘
 & 
PAGE_READWRITE
)

820 && !(
öfo
.
PrŸe˘
 & 
PAGE_GUARD
));

821 (
bŸtom
);

822 
	}
}

825 
	$GC_push_°ack_f‹
(
GC_thªad
 
thªad
)

827 
dummy
;

828 
±r_t
 
•
, 
°ack_mö
;

829 
DWORD
 
me
 = 
	`GëCuºítThªadId
();

831 i‡(
thªad
 -> 
°ack_ba£
) {

832 i‡(
thªad
 -> 
id
 =
me
) {

833 
•
 = (
±r_t
Ë&
dummy
;

835 
CONTEXT
 
c⁄ãxt
;

836 
c⁄ãxt
.
C⁄ãxtFœgs
 = 
CONTEXT_INTEGER
|
CONTEXT_CONTROL
;

837 i‡(!
	`GëThªadC⁄ãxt
(
thªad
 -> 
h™dÀ
, &
c⁄ãxt
))

838 
	`ABORT
("GetThreadContext failed");

843 
	#PUSH1
(
ªg
Ë
	`GC_push_⁄e
((
w‹d
)
c⁄ãxt
.ªg)

	)

844 
	#PUSH2
(
r1
,
r2
Ë
	`PUSH1
‘1), PUSH1‘2)

	)

845 
	#PUSH4
(
r1
,
r2
,
r3
,
r4
Ë
	`PUSH2
‘1,r2), PUSH2‘3,r4)

	)

846 #i‡
	`deföed
(
I386
)

847 
	`PUSH4
(
Edi
,
Esi
,
Ebx
,
Edx
), 
	`PUSH2
(
Ecx
,
Eax
), 
	`PUSH1
(
Ebp
);

848 
•
 = (
±r_t
)
c⁄ãxt
.
E•
;

849 #ñi‡
	`deföed
(
X86_64
)

850 
	`PUSH4
(
Rax
,
Rcx
,
Rdx
,
Rbx
); 
	`PUSH2
(
Rbp
, 
Rsi
); 
	`PUSH1
(
Rdi
);

851 
	`PUSH4
(
R8
, 
R9
, 
R10
, 
R11
); PUSH4(
R12
, 
R13
, 
R14
, 
R15
);

852 
•
 = (
±r_t
)
c⁄ãxt
.
R•
;

853 #ñi‡
	`deföed
(
ARM32
)

854 
	`PUSH4
(
R0
,
R1
,
R2
,
R3
),PUSH4(
R4
,
R5
,
R6
,
R7
),PUSH4(
R8
,
R9
,
R10
,
R11
),
	`PUSH1
(
R12
);

855 
•
 = (
±r_t
)
c⁄ãxt
.
Sp
;

856 #ñi‡
	`deföed
(
SHx
)

857 
	`PUSH4
(
R0
,
R1
,
R2
,
R3
), PUSH4(
R4
,
R5
,
R6
,
R7
), PUSH4(
R8
,
R9
,
R10
,
R11
);

858 
	`PUSH2
(
R12
,
R13
), 
	`PUSH1
(
R14
);

859 
•
 = (
±r_t
)
c⁄ãxt
.
R15
;

860 #ñi‡
	`deföed
(
MIPS
)

861 
	`PUSH4
(
I¡At
,
I¡V0
,
I¡V1
,
I¡A0
), PUSH4(
I¡A1
,
I¡A2
,
I¡A3
,
I¡T0
);

862 
	`PUSH4
(
I¡T1
,
I¡T2
,
I¡T3
,
I¡T4
), PUSH4(
I¡T5
,
I¡T6
,
I¡T7
,
I¡S0
);

863 
	`PUSH4
(
I¡S1
,
I¡S2
,
I¡S3
,
I¡S4
), PUSH4(
I¡S5
,
I¡S6
,
I¡S7
,
I¡T8
);

864 
	`PUSH4
(
I¡T9
,
I¡K0
,
I¡K1
,
I¡S8
);

865 
•
 = (
±r_t
)
c⁄ãxt
.
I¡Sp
;

866 #ñi‡
	`deföed
(
PPC
)

867 
	`PUSH4
(
G¥0
, 
G¥3
, 
G¥4
, 
G¥5
), PUSH4(
G¥6
, 
G¥7
, 
G¥8
, 
G¥9
);

868 
	`PUSH4
(
G¥10
,
G¥11
,
G¥12
,
G¥14
), PUSH4(
G¥15
,
G¥16
,
G¥17
,
G¥18
);

869 
	`PUSH4
(
G¥19
,
G¥20
,
G¥21
,
G¥22
), PUSH4(
G¥23
,
G¥24
,
G¥25
,
G¥26
);

870 
	`PUSH4
(
G¥27
,
G¥28
,
G¥29
,
G¥30
), 
	`PUSH1
(
G¥31
);

871 
•
 = (
±r_t
)
c⁄ãxt
.
G¥1
;

872 #ñi‡
	`deföed
(
ALPHA
)

873 
	`PUSH4
(
I¡V0
,
I¡T0
,
I¡T1
,
I¡T2
), PUSH4(
I¡T3
,
I¡T4
,
I¡T5
,
I¡T6
);

874 
	`PUSH4
(
I¡T7
,
I¡S0
,
I¡S1
,
I¡S2
), PUSH4(
I¡S3
,
I¡S4
,
I¡S5
,
I¡Fp
);

875 
	`PUSH4
(
I¡A0
,
I¡A1
,
I¡A2
,
I¡A3
), PUSH4(
I¡A4
,
I¡A5
,
I¡T8
,
I¡T9
);

876 
	`PUSH4
(
I¡T10
,
I¡T11
,
I¡T12
,
I¡At
);

877 
•
 = (
±r_t
)
c⁄ãxt
.
I¡Sp
;

883 
°ack_mö
 = 
	`GC_gë_°ack_mö
(
thªad
->
°ack_ba£
);

885 i‡(
•
 >
°ack_mö
 && s∞< 
thªad
->
°ack_ba£
) {

886 #i‡
DEBUG_WIN32_PTHREADS
 || 
DEBUG_WIN32_THREADS
 \

887 || 
DEBUG_CYGWIN_THREADS


888 
	`GC_¥ötf
("PushingÅhread from %pÅo %p for 0x%x from 0x%x\n",

889 
•
, 
thªad
 -> 
°ack_ba£
,Åhªad -> 
id
, 
me
);

891 
	`GC_push_Æl_°ack
(
•
, 
thªad
->
°ack_ba£
);

893 
	`WARN
("Thread stackÖointer 0x%lx out ofÑange,ÖushingÉverything\n",

894 ()(
size_t
)
•
);

895 
	`GC_push_Æl_°ack
(
°ack_mö
, 
thªad
->
°ack_ba£
);

898 
	}
}

900 
	$GC_push_Æl_°acks
()

902 
DWORD
 
me
 = 
	`GëCuºítThªadId
();

903 
GC_boﬁ
 
found_me
 = 
FALSE
;

904 
size_t
 
¡hªads
 = 0;

906 i‡(
GC_wö32_dŒ_thªads
) {

907 
i
;

908 
LONG
 
my_max
 = 
	`GC_gë_max_thªad_ödex
();

910 
i
 = 0; i <
my_max
; i++) {

911 
GC_thªad
 
t
 = (GC_thªad)(
dŒ_thªad_èbÀ
 + 
i
);

912 i‡(
t
 -> 
ö_u£
) {

913 ++
¡hªads
;

914 
	`GC_push_°ack_f‹
(
t
);

915 i‡(
t
 -> 
id
 =
me
Ë
found_me
 = 
TRUE
;

919 
GC_thªad
 
t
;

920 
i
;

922 
i
 = 0; i < 
THREAD_TABLE_SZ
; i++) {

923 
t
 = 
GC_thªads
[
i
];Å !0;Å =Å -> 
√xt
) {

924 ++
¡hªads
;

925 i‡(!
	`KNOWN_FINISHED
(
t
)Ë
	`GC_push_°ack_f‹
(t);

926 i‡(
t
 -> 
id
 =
me
Ë
found_me
 = 
TRUE
;

930 i‡(
GC_¥öt_°©s
 =
VERBOSE
) {

931 
	`GC_log_¥ötf
("Pushed %dÅhªad sèck†", 
¡hªads
);

932 i‡(
GC_wö32_dŒ_thªads
) {

933 
	`GC_log_¥ötf
("based on DllMainÅhreadÅracking\n");

935 
	`GC_log_¥ötf
("\n");

938 i‡(!
found_me
 && !
GC_ö_thªad_¸óti⁄
)

939 
	`ABORT
("Collecting from unknownÅhread.");

940 
	}
}

942 
	$GC_gë_√xt_°ack
(*
°¨t
, **
lo
, **
hi
)

944 
i
;

945 
	#ADDR_LIMIT
 (*)(-1L)

	)

946 * 
cuºít_mö
 = 
ADDR_LIMIT
;

948 i‡(
GC_wö32_dŒ_thªads
) {

949 
LONG
 
my_max
 = 
	`GC_gë_max_thªad_ödex
();

951 
i
 = 0; i <
my_max
; i++) {

952 
±r_t
 
s
 = (±r_t)(
dŒ_thªad_èbÀ
[
i
].
°ack_ba£
);

954 i‡(0 !
s
 && s > 
°¨t
 && s < 
cuºít_mö
) {

955 
cuºít_mö
 = 
s
;

959 
i
 = 0; i < 
THREAD_TABLE_SZ
; i++) {

960 
GC_thªad
 
t
;

962 
t
 = 
GC_thªads
[
i
];Å !0;Å =Å -> 
√xt
) {

963 
±r_t
 
s
 = (±r_t)(
t
 -> 
°ack_ba£
);

965 i‡(0 !
s
 && s > 
°¨t
 && s < 
cuºít_mö
) {

966 
cuºít_mö
 = 
s
;

971 *
hi
 = 
cuºít_mö
;

972 i‡(
cuºít_mö
 =
ADDR_LIMIT
) {

973 *
lo
 = 
ADDR_LIMIT
;

976 *
lo
 = 
	`GC_gë_°ack_mö
(
cuºít_mö
);

977 i‡(*
lo
 < 
°¨t
) *lo = start;

978 
	}
}

980 #i‚de‡
GC_PTHREADS


986 
LPTHREAD_START_ROUTINE
 
	m°¨t
;

987 
LPVOID
 
	m∑øm
;

988 } 
	tthªad_¨gs
;

990 
DWORD
 
WINAPI
 
thªad_°¨t
(
LPVOID
 
¨g
);

992 * 
	$GC_wö32_°¨t_ö√r
(
GC_°ack_ba£
 *
sb
, 
LPVOID
 
¨g
)

994 * 
ªt
;

995 
thªad_¨gs
 *
¨gs
 = (thªad_¨g†*)
¨g
;

997 #i‡
DEBUG_WIN32_THREADS


998 
	`GC_¥ötf
("thªad 0x%x sèπög...\n", 
	`GëCuºítThªadId
());

1001 
	`GC_ªgi°î_my_thªad
(
sb
);

1006 #i‚de‡
__GNUC__


1007 
__åy
 {

1009 
ªt
 = (*)(
size_t
)
¨gs
->
	`°¨t
 (¨gs->
∑øm
);

1010 #i‚de‡
__GNUC__


1011 } 
__föÆly
 {

1013 
	`GC_uƒegi°î_my_thªad
();

1014 
	`GC_‰ì
(
¨gs
);

1015 #i‚de‡
__GNUC__


1019 #i‡
DEBUG_WIN32_THREADS


1020 
	`GC_¥ötf
("thread 0x%xÑeturned from startÑoutine.\n",

1021 
	`GëCuºítThªadId
());

1023  
ªt
;

1026 
DWORD
 
WINAPI
 
	`GC_wö32_°¨t
(
LPVOID
 
¨g
)

1028  (
DWORD
)(
size_t
)
	`GC_ˇŒ_wôh_°ack_ba£
(
GC_wö32_°¨t_ö√r
, 
¨g
);

1031 
GC_API
 
HANDLE
 
WINAPI
 
	`GC_Cª©eThªad
(

1032 
LPSECURITY_ATTRIBUTES
 
ÕThªadAâribuãs
,

1033 
DWORD
 
dwSèckSize
, 
LPTHREAD_START_ROUTINE
 
ÕSèπAddªss
,

1034 
LPVOID
 
ÕP¨amëî
, 
DWORD
 
dwCª©i⁄Fœgs
, 
LPDWORD
 
ÕThªadId
 )

1036 
HANDLE
 
thªad_h
 = 
NULL
;

1038 
thªad_¨gs
 *
¨gs
;

1040 i‡(!
∑øŒñ_öôülized
Ë
	`GC_öô_∑øŒñ
();

1044 #i‡
DEBUG_WIN32_THREADS


1045 
	`GC_¥ötf
("Abouàtÿ¸óãáÅhªad from 0x%x\n", 
	`GëCuºítThªadId
());

1047 i‡(
GC_wö32_dŒ_thªads
) {

1048  
	`Cª©eThªad
(
ÕThªadAâribuãs
, 
dwSèckSize
, 
ÕSèπAddªss
,

1049 
ÕP¨amëî
, 
dwCª©i⁄Fœgs
, 
ÕThªadId
);

1051 
¨gs
 = 
	`GC_mÆloc_uncﬁÀ˘abÀ
((
thªad_¨gs
));

1053 i‡(0 =
¨gs
) {

1054 
	`SëLa°Eº‹
(
ERROR_NOT_ENOUGH_MEMORY
);

1055  
NULL
;

1059 
¨gs
 -> 
°¨t
 = 
ÕSèπAddªss
;

1060 
¨gs
 -> 
∑øm
 = 
ÕP¨amëî
;

1062 
GC_√ed_to_lock
 = 
TRUE
;

1063 
thªad_h
 = 
	`Cª©eThªad
(
ÕThªadAâribuãs
,

1064 
dwSèckSize
, 
GC_wö32_°¨t
,

1065 
¨gs
, 
dwCª©i⁄Fœgs
,

1066 
ÕThªadId
);

1067 if–
thªad_h
 =0 ) 
	`GC_‰ì
–
¨gs
 );

1068  
thªad_h
;

1072 
WINAPI
 
	`GC_ExôThªad
(
DWORD
 
dwExôCode
)

1074 
	`GC_uƒegi°î_my_thªad
();

1075 
	`ExôThªad
(
dwExôCode
);

1078 
uöçå_t
 
	`GC_begöthªadex
(

1079 *
£curôy
, 
°ack_size
,

1080 –
__°dˇŒ
 *
°¨t_addªss
 )( * ),

1081 *
¨gli°
, 
öôÊag
, *
thrdaddr
)

1083 
uöçå_t
 
thªad_h
;

1085 
thªad_¨gs
 *
¨gs
;

1087 i‡(!
∑øŒñ_öôülized
Ë
	`GC_öô_∑øŒñ
();

1090 #i‡
DEBUG_WIN32_THREADS


1091 
	`GC_¥ötf
("Abouàtÿ¸óãáÅhªad from 0x%x\n", 
	`GëCuºítThªadId
());

1094 i‡(
GC_wö32_dŒ_thªads
) {

1095  
	`_begöthªadex
(
£curôy
, 
°ack_size
, 
°¨t_addªss
,

1096 
¨gli°
, 
öôÊag
, 
thrdaddr
);

1098 
¨gs
 = 
	`GC_mÆloc_uncﬁÀ˘abÀ
((
thªad_¨gs
));

1100 i‡(0 =
¨gs
) {

1101 
	`SëLa°Eº‹
(
ERROR_NOT_ENOUGH_MEMORY
);

1102  (
uöçå_t
)(-1L);

1106 
¨gs
 -> 
°¨t
 = (
LPTHREAD_START_ROUTINE
)
°¨t_addªss
;

1107 
¨gs
 -> 
∑øm
 = 
¨gli°
;

1109 
GC_√ed_to_lock
 = 
TRUE
;

1110 
thªad_h
 = 
	`_begöthªadex
(
£curôy
, 
°ack_size
,

1111 ((
__°dˇŒ
 *Ë(*))
GC_wö32_°¨t
,

1112 
¨gs
, 
öôÊag
, 
thrdaddr
);

1113 if–
thªad_h
 =0 ) 
	`GC_‰ì
–
¨gs
 );

1114  
thªad_h
;

1118 
	`GC_ídthªadex
(
ªtvÆ
)

1120 
	`GC_uƒegi°î_my_thªad
();

1121 
	`_ídthªadex
(
ªtvÆ
);

1126 #ifde‡
MSWINCE


1129 
HINSTANCE
 
hIn°™˚
;

1130 
HINSTANCE
 
hPªvIn°™˚
;

1131 
LPWSTR
 
ÕCmdLöe
;

1132 
nShowCmd
;

1133 } 
	tmaö_thªad_¨gs
;

1135 
DWORD
 
WINAPI
 
	`maö_thªad_°¨t
(
LPVOID
 
¨g
);

1137 
WINAPI
 
	$WöMaö
(
HINSTANCE
 
hIn°™˚
, HINSTANCE 
hPªvIn°™˚
,

1138 
LPWSTR
 
ÕCmdLöe
, 
nShowCmd
)

1140 
DWORD
 
exô_code
 = 1;

1142 
maö_thªad_¨gs
 
¨gs
 = {

1143 
hIn°™˚
, 
hPªvIn°™˚
, 
ÕCmdLöe
, 
nShowCmd


1145 
HANDLE
 
thªad_h
;

1146 
DWORD
 
thªad_id
;

1149 
	`GC_öô
();

1152 
thªad_h
 = 
	`GC_Cª©eThªad
(

1153 
NULL
, 0, 
maö_thªad_°¨t
, &
¨gs
, 0, &
thªad_id
);

1155 i‡(
thªad_h
 !
NULL
)

1157 
	`WaôF‹SögÀObje˘
 (
thªad_h
, 
INFINITE
);

1158 
	`GëExôCodeThªad
 (
thªad_h
, &
exô_code
);

1159 
	`Clo£H™dÀ
 (
thªad_h
);

1162 
	`GC_deöô
();

1163 
	`DñëeCrôiˇlSe˘i⁄
(&
GC_Æloˇã_ml
);

1165  (Ë
exô_code
;

1166 
	}
}

1168 
DWORD
 
WINAPI
 
	$maö_thªad_°¨t
(
LPVOID
 
¨g
)

1170 
maö_thªad_¨gs
 * 
¨gs
 = (maö_thªad_¨g†*Ë
¨g
;

1172  (
DWORD
Ë
	`GC_WöMaö
 (
¨gs
->
hIn°™˚
,árgs->
hPªvIn°™˚
,

1173 
¨gs
->
ÕCmdLöe
,árgs->
nShowCmd
);

1174 
	}
}

1179 
	$GC_thr_öô
() {

1180 
GC_°ack_ba£
 
sb
;

1181 
sb_ªsu…
;

1183 
	`GC_ASSERT
(
	`I_HOLD_LOCK
());

1184 i‡(
GC_thr_öôülized
) ;

1185 
GC_maö_thªad
 = 
	`GëCuºítThªadId
();

1186 
GC_thr_öôülized
 = 
TRUE
;

1189 
sb_ªsu…
 = 
	`GC_gë_°ack_ba£
(&
sb
);

1190 
	`GC_ASSERT
(
sb_ªsu…
 =
GC_SUCCESS
);

1191 
	`GC_ªgi°î_my_thªad
(&
sb
);

1192 
	}
}

1194 #ifde‡
GC_PTHREADS


1196 
	s°¨t_öfo
 {

1197 *(*
	m°¨t_routöe
)(*);

1198 *
	m¨g
;

1199 
GC_boﬁ
 
	mdëached
;

1202 
	$GC_±hªad_joö
(
±hªad_t
 
±hªad_id
, **
ªtvÆ
) {

1203 
ªsu…
;

1204 
i
;

1205 
GC_thªad
 
joöì
;

1207 #i‡
DEBUG_CYGWIN_THREADS


1208 
	`GC_¥ötf
("thread 0x%x(0x%x) is joiningÅhread 0x%x.\n",

1209 ()
	`±hªad_£lf
(), 
	`GëCuºítThªadId
(), ()
±hªad_id
);

1211 #i‡
DEBUG_WIN32_PTHREADS


1212 
	`GC_¥ötf
("thread 0x%x(0x%x) is joiningÅhread 0x%x.\n",

1213 ()(
	`±hªad_£lf
()).
p
, 
	`GëCuºítThªadId
(), 
±hªad_id
.p);

1216 i‡(!
∑øŒñ_öôülized
Ë
	`GC_öô_∑øŒñ
();

1222 #i‚de‡
GC_WIN32_PTHREADS


1223 (
joöì
 = 
	`GC_lookup_±hªad
(
±hªad_id
)Ë=0Ë
	`SÀï
(10);

1226 
ªsu…
 = 
	`±hªad_joö
(
±hªad_id
, 
ªtvÆ
);

1228 #ifde‡
GC_WIN32_PTHREADS


1230 
joöì
 = 
	`GC_lookup_±hªad
(
±hªad_id
);

1233 i‡(!
GC_wö32_dŒ_thªads
) {

1234 
	`LOCK
();

1235 
	`GC_dñëe_gc_thªad
(
joöì
);

1236 
	`UNLOCK
();

1239 #i‡
DEBUG_CYGWIN_THREADS


1240 
	`GC_¥ötf
("thread 0x%x(0x%x) completed join withÅhread 0x%x.\n",

1241 ()
	`±hªad_£lf
(), 
	`GëCuºítThªadId
(), ()
±hªad_id
);

1243 #i‡
DEBUG_WIN32_PTHREADS


1244 
	`GC_¥ötf
("thread 0x%x(0x%x) completed join withÅhread 0x%x.\n",

1245 ()(
	`±hªad_£lf
()).
p
, 
	`GëCuºítThªadId
(), 
±hªad_id
.p);

1248  
ªsu…
;

1249 
	}
}

1256 
GC_±hªad_¸óã
(
±hªad_t
 *
√w_thªad
,

1257 c⁄° 
±hªad_©å_t
 *
©å
,

1258 *(*
°¨t_routöe
)(*), *
¨g
) {

1259 
	gªsu…
;

1260 
°¨t_öfo
 * 
	gsi
;

1262 i‡(!
	g∑øŒñ_öôülized
Ë
GC_öô_∑øŒñ
();

1264 i‡(
	gGC_wö32_dŒ_thªads
) {

1265  
±hªad_¸óã
(
√w_thªad
, 
©å
, 
°¨t_routöe
, 
¨g
);

1270 
	gsi
 = 
GC_mÆloc_uncﬁÀ˘abÀ
((
°¨t_öfo
));

1271 i‡(0 =
si
Ë(
EAGAIN
);

1273 
	gsi
 -> 
	g°¨t_routöe
 = 
°¨t_routöe
;

1274 
	gsi
 -> 
	g¨g
 = 
¨g
;

1275 i‡(
	g©å
 != 0 &&

1276 
±hªad_©å_gëdëach°©e
(
©å
, &
si
->
dëached
)

1277 =
PTHREAD_CREATE_DETACHED
) {

1278 
si
->
dëached
 = 
TRUE
;

1281 #i‡
DEBUG_CYGWIN_THREADS


1282 
GC_¥ötf
("AboutÅo createáÅhread from 0x%x(0x%x)\n",

1283 ()
±hªad_£lf
(), 
GëCuºítThªadId
);

1285 #i‡
DEBUG_WIN32_PTHREADS


1286 
GC_¥ötf
("AboutÅo createáÅhread from 0x%x(0x%x)\n",

1287 ()(
±hªad_£lf
()).
p
, 
GëCuºítThªadId
());

1289 
	gGC_√ed_to_lock
 = 
TRUE
;

1290 
	gªsu…
 = 
±hªad_¸óã
(
√w_thªad
, 
©å
, 
GC_±hªad_°¨t
, 
si
);

1292 i‡(
	gªsu…
) {

1293 
GC_‰ì
(
si
);

1296 (
	gªsu…
);

1299 * 
	$GC_±hªad_°¨t_ö√r
(
GC_°ack_ba£
 *
sb
, * 
¨g
)

1301 
°¨t_öfo
 * 
si
 = 
¨g
;

1302 * 
ªsu…
;

1303 *(*
°¨t
)(*);

1304 *
°¨t_¨g
;

1305 
DWORD
 
thªad_id
 = 
	`GëCuºítThªadId
();

1306 
±hªad_t
 
±hªad_id
 = 
	`±hªad_£lf
();

1307 
GC_thªad
 
me
;

1308 
GC_boﬁ
 
dëached
;

1309 
i
;

1311 #i‡
DEBUG_CYGWIN_THREADS


1312 
	`GC_¥ötf
("thªad 0x%x(0x%xË°¨tög...\n",()
±hªad_id
,

1313 
thªad_id
);

1315 #i‡
DEBUG_WIN32_PTHREADS


1316 
	`GC_¥ötf
("thªad 0x%x(0x%xË°¨tög...\n",(Ë
±hªad_id
.
p
,

1317 
thªad_id
);

1320 
	`GC_ASSERT
(!
GC_wö32_dŒ_thªads
);

1325 
	`LOCK
();

1328 
me
 = 
	`GC_ªgi°î_my_thªad_ö√r
(
sb
, 
thªad_id
);

1329 
	`SET_PTHREAD_MAP_CACHE
(
±hªad_id
, 
thªad_id
);

1330 
	`UNLOCK
();

1332 
°¨t
 = 
si
 -> 
°¨t_routöe
;

1333 
°¨t_¨g
 = 
si
 -> 
¨g
;

1334 i‡(
si
-> 
dëached
Ë
me
 -> 
Êags
 |
DETACHED
;

1335 
me
 -> 
±hªad_id
 =Öthread_id;

1337 
	`GC_‰ì
(
si
);

1339 
	`±hªad_˛ónup_push
(
GC_thªad_exô_¥oc
, (*)
me
);

1340 
ªsu…
 = (*
°¨t
)(
°¨t_¨g
);

1341 
me
 -> 
°©us
 = 
ªsu…
;

1342 
	`±hªad_˛ónup_p›
(1);

1344 #i‡
DEBUG_CYGWIN_THREADS


1345 
	`GC_¥ötf
("thread 0x%x(0x%x)Ñeturned from startÑoutine.\n",

1346 ()
	`±hªad_£lf
(),
	`GëCuºítThªadId
());

1348 #i‡
DEBUG_WIN32_PTHREADS


1349 
	`GC_¥ötf
("thread 0x%x(0x%x)Ñeturned from startÑoutine.\n",

1350 ()(
	`±hªad_£lf
()).
p
, 
	`GëCuºítThªadId
());

1353 (
ªsu…
);

1354 
	}
}

1356 * 
	$GC_±hªad_°¨t
(* 
¨g
)

1358  
	`GC_ˇŒ_wôh_°ack_ba£
(
GC_±hªad_°¨t_ö√r
, 
¨g
);

1359 
	}
}

1361 
	$GC_thªad_exô_¥oc
(*
¨g
)

1363 
GC_thªad
 
me
 = (GC_thªad)
¨g
;

1364 
i
;

1366 
	`GC_ASSERT
(!
GC_wö32_dŒ_thªads
);

1367 #i‡
DEBUG_CYGWIN_THREADS


1368 
	`GC_¥ötf
("thread 0x%x(0x%x) calledÖthread_exit().\n",

1369 ()
	`±hªad_£lf
(),
	`GëCuºítThªadId
());

1371 #i‡
DEBUG_WIN32_PTHREADS


1372 
	`GC_¥ötf
("thread 0x%x(0x%x) calledÖthread_exit().\n",

1373 ()(
	`±hªad_£lf
()).
p
,
	`GëCuºítThªadId
());

1376 
	`LOCK
();

1377 #i‡
	`deföed
(
THREAD_LOCAL_ALLOC
)

1378 
	`GC_de°roy_thªad_loˇl
(&(
me
->
éfs
));

1380 i‡(
me
 -> 
Êags
 & 
DETACHED
) {

1381 
	`GC_dñëe_thªad
(
	`GëCuºítThªadId
());

1384 
me
 -> 
Êags
 |
FINISHED
;

1386 
	`UNLOCK
();

1387 
	}
}

1389 #i‚de‡
GC_WIN32_PTHREADS


1392 
	$GC_±hªad_sigmask
(
how
, c⁄° 
sig£t_t
 *
£t
, sig£t_à*
o£t
) {

1393 i‡(!
∑øŒñ_öôülized
Ë
	`GC_öô_∑øŒñ
();

1394  
	`±hªad_sigmask
(
how
, 
£t
, 
o£t
);

1395 
	}
}

1398 
	$GC_±hªad_dëach
(
±hªad_t
 
thªad
)

1400 
ªsu…
;

1401 
GC_thªad
 
thªad_gc_id
;

1403 i‡(!
∑øŒñ_öôülized
Ë
	`GC_öô_∑øŒñ
();

1404 
	`LOCK
();

1405 
thªad_gc_id
 = 
	`GC_lookup_±hªad
(
thªad
);

1406 
	`UNLOCK
();

1407 
ªsu…
 = 
	`±hªad_dëach
(
thªad
);

1408 i‡(
ªsu…
 == 0) {

1409 
	`LOCK
();

1410 
thªad_gc_id
 -> 
Êags
 |
DETACHED
;

1412 i‡(
thªad_gc_id
 -> 
Êags
 & 
FINISHED
) {

1413 
	`GC_dñëe_gc_thªad
(
thªad_gc_id
);

1415 
	`UNLOCK
();

1417  
ªsu…
;

1418 
	}
}

1430 #ifde‡
GC_DLL


1431 
GC_API
 
BOOL
 
WINAPI
 
	$DŒMaö
(
HINSTANCE
 
ö°
, 
ULONG
 
ªas⁄
, 
LPVOID
 
ª£rved
)

1433 
GC_°ack_ba£
 
sb
;

1434 
DWORD
 
thªad_id
;

1435 
sb_ªsu…
;

1436 
íåy_cou¡
 = 0;

1438 i‡(
∑øŒñ_öôülized
 && !
GC_wö32_dŒ_thªads
Ë 
TRUE
;

1440 
ªas⁄
) {

1441 
DLL_THREAD_ATTACH
:

1442 
	`GC_ASSERT
(
íåy_cou¡
 =0 || 
∑øŒñ_öôülized
);

1443 ++
íåy_cou¡
;

1444 
DLL_PROCESS_ATTACH
:

1446 
thªad_id
 = 
	`GëCuºítThªadId
();

1447 i‡(
∑øŒñ_öôülized
 && 
GC_maö_thªad
 !
thªad_id
) {

1449 
sb_ªsu…
 = 
	`GC_gë_°ack_ba£
(&
sb
);

1450 
	`GC_ASSERT
(
sb_ªsu…
 =
GC_SUCCESS
);

1451 #ifde‡
THREAD_LOCAL_ALLOC


1452 
	`ABORT
("Cannot initializeÅhreadÜocal cache from DllMain");

1454 
	`GC_ªgi°î_my_thªad_ö√r
(&
sb
, 
thªad_id
);

1458 
DLL_THREAD_DETACH
:

1460 
	`GC_ASSERT
(
∑øŒñ_öôülized
);

1461 i‡(!
GC_wö32_dŒ_thªads
Ë 
TRUE
;

1462 
	`GC_dñëe_thªad
(
	`GëCuºítThªadId
());

1465 
DLL_PROCESS_DETACH
:

1467 
i
;

1469 i‡(!
GC_wö32_dŒ_thªads
Ë 
TRUE
;

1470 
i
 = 0; i <
	`GC_gë_max_thªad_ödex
(); ++i)

1472 i‡(
	`AO_lﬂd
(&(
dŒ_thªad_èbÀ
[
i
].
ö_u£
)))

1473 
	`GC_dñëe_gc_thªad
(
dŒ_thªad_èbÀ
 + 
i
);

1476 
	`GC_deöô
();

1477 
	`DñëeCrôiˇlSe˘i⁄
(&
GC_Æloˇã_ml
);

1482  
TRUE
;

1483 
	}
}

1493 
GC_öô_∑øŒñ
()

1495 i‡(
	g∑øŒñ_öôülized
) ;

1496 
	g∑øŒñ_öôülized
 = 
TRUE
;

1499 i‡(!
	gGC_is_öôülized
Ë
GC_öô
();

1500 i‡(
	gGC_wö32_dŒ_thªads
) {

1501 
	gGC_√ed_to_lock
 = 
TRUE
;

1508 #i‡
deföed
(
THREAD_LOCAL_ALLOC
)

1509 
LOCK
();

1510 
GC_öô_thªad_loˇl
(&(
GC_lookup_thªad
(
GëCuºítThªadId
())->
éfs
));

1511 
UNLOCK
();

1515 #i‡
deföed
(
USE_PTHREAD_LOCKS
)

1520 vﬁ©ûê
GC_boﬁ
 
	gGC_cﬁÀ˘ög
 = 0;

1525 
GC_lock
()

1527 
±hªad_muãx_lock
(&
GC_Æloˇã_ml
);

1531 #i‡
deföed
(
THREAD_LOCAL_ALLOC
)

1539 
GC_m¨k_thªad_loˇl_‰ì_li°s
()

1541 
	gi
;

1542 
GC_thªad
 
	gp
;

1544 
	gi
 = 0; i < 
	gTHREAD_TABLE_SZ
; ++i) {

1545 
	gp
 = 
GC_thªads
[
i
]; 0 !
p
;Ö =Ö -> 
√xt
) {

1546 
GC_m¨k_thªad_loˇl_Ês_f‹
(&(
p
->
éfs
));

1551 #i‡
deföed
(
GC_ASSERTIONS
)

1554 
GC_check_és
() {

1555 
	gi
;

1556 
GC_thªad
 
	gp
;

1558 
	gi
 = 0; i < 
	gTHREAD_TABLE_SZ
; ++i) {

1559 
	gp
 = 
GC_thªads
[
i
]; 0 !
p
;Ö =Ö -> 
√xt
) {

1560 
GC_check_és_f‹
(&(
p
->
éfs
));

1563 #i‡
deföed
(
USE_CUSTOM_SPECIFIC
)

1564 i‡(
	gGC_thªad_key
 != 0)

1565 
GC_check_tsd_m¨ks
(
GC_thªad_key
);

	@/usr/include/asm/sigcontext.h

1 #i‚de‡
_ASM_X86_SIGCONTEXT_H


2 
	#_ASM_X86_SIGCONTEXT_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

8 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

9 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

23 
	s_Âx_sw_byãs
 {

24 
__u32
 
	mmagic1
;

25 
__u32
 
	mexãnded_size
;

28 
__u64
 
	mx°©e_bv
;

33 
__u32
 
	mx°©e_size
;

38 
__u32
 
	m∑ddög
[7];

41 #ifde‡
__i386__


56 
	s_Âªg
 {

57 
	msignifiˇnd
[4];

58 
	mexp⁄ít
;

61 
	s_Âxªg
 {

62 
	msignifiˇnd
[4];

63 
	mexp⁄ít
;

64 
	m∑ddög
[3];

67 
	s_xmmªg
 {

68 
	mñemít
[4];

71 
	s_Â°©e
 {

73 
	mcw
;

74 
	msw
;

75 
	mèg
;

76 
	mùoff
;

77 
	mcs£l
;

78 
	md©aoff
;

79 
	md©a£l
;

80 
_Âªg
 
	m_°
[8];

81 
	m°©us
;

82 
	mmagic
;

85 
	m_fx§_ív
[6];

86 
	mmxc§
;

87 
	mª£rved
;

88 
_Âxªg
 
	m_fx§_°
[8];

89 
_xmmªg
 
	m_xmm
[8];

90 
	m∑ddög1
[44];

93 
	m∑ddög2
[12];

94 
_Âx_sw_byãs
 
	msw_ª£rved
;

99 
	#X86_FXSR_MAGIC
 0x0000

	)

104 
	ssigc⁄ãxt
 {

105 
	mgs
, 
	m__gsh
;

106 
	mfs
, 
	m__fsh
;

107 
	mes
, 
	m__esh
;

108 
	mds
, 
	m__dsh
;

109 
	medi
;

110 
	mesi
;

111 
	mebp
;

112 
	me•
;

113 
	mebx
;

114 
	medx
;

115 
	mecx
;

116 
	móx
;

117 
	må≠no
;

118 
	mîr
;

119 
	meù
;

120 
	mcs
, 
	m__csh
;

121 
	meÊags
;

122 
	me•_©_sig«l
;

123 
	mss
, 
	m__ssh
;

124 
_Â°©e
 *
	mÂ°©e
;

125 
	mﬁdmask
;

126 
	m¸2
;

134 
	s_Â°©e
 {

135 
__u16
 
	mcwd
;

136 
__u16
 
	mswd
;

137 
__u16
 
	mtwd
;

139 
__u16
 
	mf›
;

140 
__u64
 
	mrù
;

141 
__u64
 
	mrdp
;

142 
__u32
 
	mmxc§
;

143 
__u32
 
	mmxc§_mask
;

144 
__u32
 
	m°_•a˚
[32];

145 
__u32
 
	mxmm_•a˚
[64];

146 
__u32
 
	mª£rved2
[12];

148 
__u32
 
	mª£rved3
[12];

149 
_Âx_sw_byãs
 
	msw_ª£rved
;

157 
	ssigc⁄ãxt
 {

158 
	mr8
;

159 
	mr9
;

160 
	mr10
;

161 
	mr11
;

162 
	mr12
;

163 
	mr13
;

164 
	mr14
;

165 
	mr15
;

166 
	mrdi
;

167 
	mrsi
;

168 
	mrbp
;

169 
	mrbx
;

170 
	mrdx
;

171 
	møx
;

172 
	mrcx
;

173 
	mr•
;

174 
	mrù
;

175 
	meÊags
;

176 
	mcs
;

177 
	mgs
;

178 
	mfs
;

179 
	m__∑d0
;

180 
	mîr
;

181 
	må≠no
;

182 
	mﬁdmask
;

183 
	m¸2
;

184 
_Â°©e
 *
	mÂ°©e
;

185 
	mª£rved1
[8];

190 
	s_xßve_hdr
 {

191 
__u64
 
	mx°©e_bv
;

192 
__u64
 
	mª£rved1
[2];

193 
__u64
 
	mª£rved2
[5];

196 
	s_ymmh_°©e
 {

198 
__u32
 
	mymmh_•a˚
[64];

207 
	s_x°©e
 {

208 
_Â°©e
 
	mÂ°©e
;

209 
_xßve_hdr
 
	mx°©e_hdr
;

210 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/asm/signal.h

1 #i‚de‡
_ASM_X86_SIGNAL_H


2 
	#_ASM_X86_SIGNAL_H


	)

4 #i‚de‡
__ASSEMBLY__


5 
	~<löux/ty≥s.h
>

6 
	~<löux/time.h
>

10 
	gsigöfo
;

14 
	#NSIG
 32

	)

15 
	tsig£t_t
;

19 
	#SIGHUP
 1

	)

20 
	#SIGINT
 2

	)

21 
	#SIGQUIT
 3

	)

22 
	#SIGILL
 4

	)

23 
	#SIGTRAP
 5

	)

24 
	#SIGABRT
 6

	)

25 
	#SIGIOT
 6

	)

26 
	#SIGBUS
 7

	)

27 
	#SIGFPE
 8

	)

28 
	#SIGKILL
 9

	)

29 
	#SIGUSR1
 10

	)

30 
	#SIGSEGV
 11

	)

31 
	#SIGUSR2
 12

	)

32 
	#SIGPIPE
 13

	)

33 
	#SIGALRM
 14

	)

34 
	#SIGTERM
 15

	)

35 
	#SIGSTKFLT
 16

	)

36 
	#SIGCHLD
 17

	)

37 
	#SIGCONT
 18

	)

38 
	#SIGSTOP
 19

	)

39 
	#SIGTSTP
 20

	)

40 
	#SIGTTIN
 21

	)

41 
	#SIGTTOU
 22

	)

42 
	#SIGURG
 23

	)

43 
	#SIGXCPU
 24

	)

44 
	#SIGXFSZ
 25

	)

45 
	#SIGVTALRM
 26

	)

46 
	#SIGPROF
 27

	)

47 
	#SIGWINCH
 28

	)

48 
	#SIGIO
 29

	)

49 
	#SIGPOLL
 
SIGIO


	)

53 
	#SIGPWR
 30

	)

54 
	#SIGSYS
 31

	)

55 
	#SIGUNUSED
 31

	)

58 
	#SIGRTMIN
 32

	)

59 
	#SIGRTMAX
 
_NSIG


	)

74 
	#SA_NOCLDSTOP
 0x00000001u

	)

75 
	#SA_NOCLDWAIT
 0x00000002u

	)

76 
	#SA_SIGINFO
 0x00000004u

	)

77 
	#SA_ONSTACK
 0x08000000u

	)

78 
	#SA_RESTART
 0x10000000u

	)

79 
	#SA_NODEFER
 0x40000000u

	)

80 
	#SA_RESETHAND
 0x80000000u

	)

82 
	#SA_NOMASK
 
SA_NODEFER


	)

83 
	#SA_ONESHOT
 
SA_RESETHAND


	)

85 
	#SA_RESTORER
 0x04000000

	)

90 
	#SS_ONSTACK
 1

	)

91 
	#SS_DISABLE
 2

	)

93 
	#MINSIGSTKSZ
 2048

	)

94 
	#SIGSTKSZ
 8192

	)

96 
	~<asm-gíîic/sig«l-defs.h
>

98 #i‚de‡
__ASSEMBLY__


101 #ifde‡
__i386__


104 
	ssiga˘i⁄
 {

106 
__sigh™dÀr_t
 
	m_ß_h™dÀr
;

107 (*
	m_ß_siga˘i⁄
)(, 
	msigöfo
 *, *);

108 } 
	m_u
;

109 
sig£t_t
 
	mß_mask
;

110 
	mß_Êags
;

111 (*
	mß_ª°‹î
)();

114 
	#ß_h™dÀr
 
_u
.
_ß_h™dÀr


	)

115 
	#ß_siga˘i⁄
 
_u
.
_ß_siga˘i⁄


	)

119 
	ssiga˘i⁄
 {

120 
__sigh™dÀr_t
 
	mß_h™dÀr
;

121 
	mß_Êags
;

122 
__sigª°‹e_t
 
	mß_ª°‹î
;

123 
sig£t_t
 
	mß_mask
;

126 
	sk_siga˘i⁄
 {

127 
siga˘i⁄
 
	mß
;

132 
	ssigÆt°ack
 {

133 *
	mss_•
;

134 
	mss_Êags
;

135 
size_t
 
	mss_size
;

136 } 
	t°ack_t
;

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_XOPEN2K8


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

251 #i‚de‡
__USE_FILE_OFFSET64


252 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

253 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

254 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

255 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

256 
__c⁄°
 
dúít
 **))

257 
	`__n⁄nuŒ
 ((1, 2));

259 #ifde‡
__REDIRECT


260 
	`__REDIRECT
 (
sˇndú
,

261 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

262 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

263 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

264 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

265 
__c⁄°
 
dúít
 **)),

266 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

268 
	#sˇndú
 
sˇndú64


	)

272 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


275 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

276 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

277 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

278 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

279 
__c⁄°
 
dúít64
 **))

280 
	`__n⁄nuŒ
 ((1, 2));

284 #i‚de‡
__USE_FILE_OFFSET64


285 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

286 
__c⁄°
 
dúít
 **
__e2
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__REDIRECT


290 
	`__REDIRECT_NTH
 (
Æphas‹t
,

291 (
__c⁄°
 
dúít
 **
__e1
,

292 
__c⁄°
 
dúít
 **
__e2
),

293 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 
	#Æphas‹t
 
Æphas‹t64


	)

299 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


300 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

301 
__c⁄°
 
dúít64
 **
__e2
)

302 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


312 #i‚de‡
__USE_FILE_OFFSET64


313 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

314 
size_t
 
__nbyãs
,

315 
__off_t
 *
__ª°ri˘
 
__ba£p
)

316 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

318 #ifde‡
__REDIRECT


319 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

320 (
__fd
, *
__ª°ri˘
 
__buf
,

321 
size_t
 
__nbyãs
,

322 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

323 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

325 
	#gëdúíåõs
 
gëdúíåõs64


	)

329 #ifde‡
__USE_LARGEFILE64


330 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

331 
size_t
 
__nbyãs
,

332 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

333 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

337 #ifde‡
__USE_GNU


339 #i‚de‡
__USE_FILE_OFFSET64


340 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

341 
__c⁄°
 
dúít
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 #ifde‡
__REDIRECT


345 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

346 (
__c⁄°
 
dúít
 **
__e1
,

347 
__c⁄°
 
dúít
 **
__e2
),

348 
vîsi⁄s‹t64
)

349 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

351 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

355 #ifde‡
__USE_LARGEFILE64


356 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

357 
__c⁄°
 
dúít64
 **
__e2
)

358 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

362 
__END_DECLS


	@/usr/include/dlfcn.h

20 #i‚def 
_DLFCN_H


21 
	#_DLFCN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<bôs/dlf˙.h
>

31 #ifde‡
__USE_GNU


36 
	#RTLD_NEXT
 ((*Ë-1l)

	)

41 
	#RTLD_DEFAULT
 ((*Ë0)

	)

45 
	tLmid_t
;

48 
	#LM_ID_BASE
 0

	)

49 
	#LM_ID_NEWLM
 -1

	)

53 
__BEGIN_DECLS


57 *
	$dl›í
 (
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

61 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

66 
__c⁄°
 *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

68 #ifde‡
__USE_GNU


70 *
	$dlm›í
 (
Lmid_t
 
__nsid
, 
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

74 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

75 
__c⁄°
 *
__ª°ri˘
 
__«me
,

76 
__c⁄°
 *
__ª°ri˘
 
__vîsi⁄
)

77 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

83 *
	$dÀº‹
 (Ë
__THROW
;

86 #ifde‡
__USE_GNU


91 
__c⁄°
 *
dli_‚ame
;

92 *
dli_fba£
;

93 
__c⁄°
 *
dli_¢ame
;

94 *
dli_ßddr
;

95 } 
	tDl_öfo
;

99 
	$dœddr
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
)

100 
__THROW
 
	`__n⁄nuŒ
 ((2));

103 
	$dœddr1
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
,

104 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
RTLD_DL_SYMENT
 = 1,

115 
RTLD_DL_LINKMAP
 = 2

124 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

125 
__ªque°
, *
__ª°ri˘
 
__¨g
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

132 
RTLD_DI_LMID
 = 1,

136 
RTLD_DI_LINKMAP
 = 2,

138 
RTLD_DI_CONFIGADDR
 = 3,

145 
RTLD_DI_SERINFO
 = 4,

146 
RTLD_DI_SERINFOSIZE
 = 5,

150 
RTLD_DI_ORIGIN
 = 6,

152 
RTLD_DI_PROFILENAME
 = 7,

153 
RTLD_DI_PROFILEOUT
 = 8,

158 
RTLD_DI_TLS_MODID
 = 9,

164 
RTLD_DI_TLS_DATA
 = 10,

166 
RTLD_DI_MAX
 = 10

174 *
dls_«me
;

175 
dls_Êags
;

176 } 
	tDl_£Ω©h
;

182 
size_t
 
dls_size
;

183 
dls_˙t
;

184 
Dl_£Ω©h
 
dls_£Ω©h
[1];

185 } 
	tDl_£röfo
;

189 
__END_DECLS


	@/usr/include/elf.h

21 #i‚de‡
_ELF_H


22 
	#_ELF_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


30 
	~<°döt.h
>

33 
uöt16_t
 
	tElf32_HÆf
;

34 
uöt16_t
 
	tElf64_HÆf
;

37 
uöt32_t
 
	tElf32_W‹d
;

38 
öt32_t
 
	tElf32_Sw‹d
;

39 
uöt32_t
 
	tElf64_W‹d
;

40 
öt32_t
 
	tElf64_Sw‹d
;

43 
uöt64_t
 
	tElf32_Xw‹d
;

44 
öt64_t
 
	tElf32_Sxw‹d
;

45 
uöt64_t
 
	tElf64_Xw‹d
;

46 
öt64_t
 
	tElf64_Sxw‹d
;

49 
uöt32_t
 
	tElf32_Addr
;

50 
uöt64_t
 
	tElf64_Addr
;

53 
uöt32_t
 
	tElf32_Off
;

54 
uöt64_t
 
	tElf64_Off
;

57 
uöt16_t
 
	tElf32_Se˘i⁄
;

58 
uöt16_t
 
	tElf64_Se˘i⁄
;

61 
Elf32_HÆf
 
	tElf32_Vîsym
;

62 
Elf64_HÆf
 
	tElf64_Vîsym
;

67 
	#EI_NIDENT
 (16)

	)

71 
	me_idít
[
EI_NIDENT
];

72 
Elf32_HÆf
 
	me_ty≥
;

73 
Elf32_HÆf
 
	me_machöe
;

74 
Elf32_W‹d
 
	me_vîsi⁄
;

75 
Elf32_Addr
 
	me_íåy
;

76 
Elf32_Off
 
	me_phoff
;

77 
Elf32_Off
 
	me_shoff
;

78 
Elf32_W‹d
 
	me_Êags
;

79 
Elf32_HÆf
 
	me_ehsize
;

80 
Elf32_HÆf
 
	me_phítsize
;

81 
Elf32_HÆf
 
	me_phnum
;

82 
Elf32_HÆf
 
	me_shítsize
;

83 
Elf32_HÆf
 
	me_shnum
;

84 
Elf32_HÆf
 
	me_sh°∫dx
;

85 } 
	tElf32_Ehdr
;

89 
	me_idít
[
EI_NIDENT
];

90 
Elf64_HÆf
 
	me_ty≥
;

91 
Elf64_HÆf
 
	me_machöe
;

92 
Elf64_W‹d
 
	me_vîsi⁄
;

93 
Elf64_Addr
 
	me_íåy
;

94 
Elf64_Off
 
	me_phoff
;

95 
Elf64_Off
 
	me_shoff
;

96 
Elf64_W‹d
 
	me_Êags
;

97 
Elf64_HÆf
 
	me_ehsize
;

98 
Elf64_HÆf
 
	me_phítsize
;

99 
Elf64_HÆf
 
	me_phnum
;

100 
Elf64_HÆf
 
	me_shítsize
;

101 
Elf64_HÆf
 
	me_shnum
;

102 
Elf64_HÆf
 
	me_sh°∫dx
;

103 } 
	tElf64_Ehdr
;

109 
	#EI_MAG0
 0

	)

110 
	#ELFMAG0
 0x7‡

	)

112 
	#EI_MAG1
 1

	)

113 
	#ELFMAG1
 'E'

	)

115 
	#EI_MAG2
 2

	)

116 
	#ELFMAG2
 'L'

	)

118 
	#EI_MAG3
 3

	)

119 
	#ELFMAG3
 'F'

	)

122 
	#ELFMAG
 "\177ELF"

	)

123 
	#SELFMAG
 4

	)

125 
	#EI_CLASS
 4

	)

126 
	#ELFCLASSNONE
 0

	)

127 
	#ELFCLASS32
 1

	)

128 
	#ELFCLASS64
 2

	)

129 
	#ELFCLASSNUM
 3

	)

131 
	#EI_DATA
 5

	)

132 
	#ELFDATANONE
 0

	)

133 
	#ELFDATA2LSB
 1

	)

134 
	#ELFDATA2MSB
 2

	)

135 
	#ELFDATANUM
 3

	)

137 
	#EI_VERSION
 6

	)

140 
	#EI_OSABI
 7

	)

141 
	#ELFOSABI_NONE
 0

	)

142 
	#ELFOSABI_SYSV
 0

	)

143 
	#ELFOSABI_HPUX
 1

	)

144 
	#ELFOSABI_NETBSD
 2

	)

145 
	#ELFOSABI_LINUX
 3

	)

146 
	#ELFOSABI_SOLARIS
 6

	)

147 
	#ELFOSABI_AIX
 7

	)

148 
	#ELFOSABI_IRIX
 8

	)

149 
	#ELFOSABI_FREEBSD
 9

	)

150 
	#ELFOSABI_TRU64
 10

	)

151 
	#ELFOSABI_MODESTO
 11

	)

152 
	#ELFOSABI_OPENBSD
 12

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_860
 7

	)

182 
	#EM_MIPS
 8

	)

183 
	#EM_S370
 9

	)

184 
	#EM_MIPS_RS3_LE
 10

	)

186 
	#EM_PARISC
 15

	)

187 
	#EM_VPP500
 17

	)

188 
	#EM_SPARC32PLUS
 18

	)

189 
	#EM_960
 19

	)

190 
	#EM_PPC
 20

	)

191 
	#EM_PPC64
 21

	)

192 
	#EM_S390
 22

	)

194 
	#EM_V800
 36

	)

195 
	#EM_FR20
 37

	)

196 
	#EM_RH32
 38

	)

197 
	#EM_RCE
 39

	)

198 
	#EM_ARM
 40

	)

199 
	#EM_FAKE_ALPHA
 41

	)

200 
	#EM_SH
 42

	)

201 
	#EM_SPARCV9
 43

	)

202 
	#EM_TRICORE
 44

	)

203 
	#EM_ARC
 45

	)

204 
	#EM_H8_300
 46

	)

205 
	#EM_H8_300H
 47

	)

206 
	#EM_H8S
 48

	)

207 
	#EM_H8_500
 49

	)

208 
	#EM_IA_64
 50

	)

209 
	#EM_MIPS_X
 51

	)

210 
	#EM_COLDFIRE
 52

	)

211 
	#EM_68HC12
 53

	)

212 
	#EM_MMA
 54

	)

213 
	#EM_PCP
 55

	)

214 
	#EM_NCPU
 56

	)

215 
	#EM_NDR1
 57

	)

216 
	#EM_STARCORE
 58

	)

217 
	#EM_ME16
 59

	)

218 
	#EM_ST100
 60

	)

219 
	#EM_TINYJ
 61

	)

220 
	#EM_X86_64
 62

	)

221 
	#EM_PDSP
 63

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_A5
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_NUM
 95

	)

258 
	#EM_ALPHA
 0x9026

	)

262 
	#EV_NONE
 0

	)

263 
	#EV_CURRENT
 1

	)

264 
	#EV_NUM
 2

	)

270 
Elf32_W‹d
 
	msh_«me
;

271 
Elf32_W‹d
 
	msh_ty≥
;

272 
Elf32_W‹d
 
	msh_Êags
;

273 
Elf32_Addr
 
	msh_addr
;

274 
Elf32_Off
 
	msh_off£t
;

275 
Elf32_W‹d
 
	msh_size
;

276 
Elf32_W‹d
 
	msh_lök
;

277 
Elf32_W‹d
 
	msh_öfo
;

278 
Elf32_W‹d
 
	msh_addølign
;

279 
Elf32_W‹d
 
	msh_ítsize
;

280 } 
	tElf32_Shdr
;

284 
Elf64_W‹d
 
	msh_«me
;

285 
Elf64_W‹d
 
	msh_ty≥
;

286 
Elf64_Xw‹d
 
	msh_Êags
;

287 
Elf64_Addr
 
	msh_addr
;

288 
Elf64_Off
 
	msh_off£t
;

289 
Elf64_Xw‹d
 
	msh_size
;

290 
Elf64_W‹d
 
	msh_lök
;

291 
Elf64_W‹d
 
	msh_öfo
;

292 
Elf64_Xw‹d
 
	msh_addølign
;

293 
Elf64_Xw‹d
 
	msh_ítsize
;

294 } 
	tElf64_Shdr
;

298 
	#SHN_UNDEF
 0

	)

299 
	#SHN_LORESERVE
 0xff00

	)

300 
	#SHN_LOPROC
 0xff00

	)

301 
	#SHN_BEFORE
 0xff00

	)

303 
	#SHN_AFTER
 0xff01

	)

305 
	#SHN_HIPROC
 0xff1‡

	)

306 
	#SHN_LOOS
 0xff20

	)

307 
	#SHN_HIOS
 0xff3‡

	)

308 
	#SHN_ABS
 0xfff1

	)

309 
	#SHN_COMMON
 0xfff2

	)

310 
	#SHN_XINDEX
 0xfff‡

	)

311 
	#SHN_HIRESERVE
 0xfff‡

	)

315 
	#SHT_NULL
 0

	)

316 
	#SHT_PROGBITS
 1

	)

317 
	#SHT_SYMTAB
 2

	)

318 
	#SHT_STRTAB
 3

	)

319 
	#SHT_RELA
 4

	)

320 
	#SHT_HASH
 5

	)

321 
	#SHT_DYNAMIC
 6

	)

322 
	#SHT_NOTE
 7

	)

323 
	#SHT_NOBITS
 8

	)

324 
	#SHT_REL
 9

	)

325 
	#SHT_SHLIB
 10

	)

326 
	#SHT_DYNSYM
 11

	)

327 
	#SHT_INIT_ARRAY
 14

	)

328 
	#SHT_FINI_ARRAY
 15

	)

329 
	#SHT_PREINIT_ARRAY
 16

	)

330 
	#SHT_GROUP
 17

	)

331 
	#SHT_SYMTAB_SHNDX
 18

	)

332 
	#SHT_NUM
 19

	)

333 
	#SHT_LOOS
 0x60000000

	)

334 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

335 
	#SHT_GNU_HASH
 0x6ffffff6

	)

336 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

337 
	#SHT_CHECKSUM
 0x6ffffff8

	)

338 
	#SHT_LOSUNW
 0x6fffffÁ

	)

339 
	#SHT_SUNW_move
 0x6fffffÁ

	)

340 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

341 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

342 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

343 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

344 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

345 
	#SHT_HISUNW
 0x6ffffff‡

	)

346 
	#SHT_HIOS
 0x6ffffff‡

	)

347 
	#SHT_LOPROC
 0x70000000

	)

348 
	#SHT_HIPROC
 0x7ffffff‡

	)

349 
	#SHT_LOUSER
 0x80000000

	)

350 
	#SHT_HIUSER
 0x8ffffff‡

	)

354 
	#SHF_WRITE
 (1 << 0Ë

	)

355 
	#SHF_ALLOC
 (1 << 1Ë

	)

356 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

357 
	#SHF_MERGE
 (1 << 4Ë

	)

358 
	#SHF_STRINGS
 (1 << 5Ë

	)

359 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

360 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

361 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

363 
	#SHF_GROUP
 (1 << 9Ë

	)

364 
	#SHF_TLS
 (1 << 10Ë

	)

365 
	#SHF_MASKOS
 0x0ff00000

	)

366 
	#SHF_MASKPROC
 0xf0000000

	)

367 
	#SHF_ORDERED
 (1 << 30Ë

	)

369 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

373 
	#GRP_COMDAT
 0x1

	)

379 
Elf32_W‹d
 
	m°_«me
;

380 
Elf32_Addr
 
	m°_vÆue
;

381 
Elf32_W‹d
 
	m°_size
;

382 
	m°_öfo
;

383 
	m°_Ÿhî
;

384 
Elf32_Se˘i⁄
 
	m°_shndx
;

385 } 
	tElf32_Sym
;

389 
Elf64_W‹d
 
	m°_«me
;

390 
	m°_öfo
;

391 
	m°_Ÿhî
;

392 
Elf64_Se˘i⁄
 
	m°_shndx
;

393 
Elf64_Addr
 
	m°_vÆue
;

394 
Elf64_Xw‹d
 
	m°_size
;

395 } 
	tElf64_Sym
;

402 
Elf32_HÆf
 
	msi_boundto
;

403 
Elf32_HÆf
 
	msi_Êags
;

404 } 
	tElf32_Symöfo
;

408 
Elf64_HÆf
 
	msi_boundto
;

409 
Elf64_HÆf
 
	msi_Êags
;

410 } 
	tElf64_Symöfo
;

413 
	#SYMINFO_BT_SELF
 0xfff‡

	)

414 
	#SYMINFO_BT_PARENT
 0xff„

	)

415 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

418 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

419 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

420 
	#SYMINFO_FLG_COPY
 0x0004

	)

421 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

424 
	#SYMINFO_NONE
 0

	)

425 
	#SYMINFO_CURRENT
 1

	)

426 
	#SYMINFO_NUM
 2

	)

431 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

432 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

433 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

436 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

437 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

438 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

442 
	#STB_LOCAL
 0

	)

443 
	#STB_GLOBAL
 1

	)

444 
	#STB_WEAK
 2

	)

445 
	#STB_NUM
 3

	)

446 
	#STB_LOOS
 10

	)

447 
	#STB_GNU_UNIQUE
 10

	)

448 
	#STB_HIOS
 12

	)

449 
	#STB_LOPROC
 13

	)

450 
	#STB_HIPROC
 15

	)

454 
	#STT_NOTYPE
 0

	)

455 
	#STT_OBJECT
 1

	)

456 
	#STT_FUNC
 2

	)

457 
	#STT_SECTION
 3

	)

458 
	#STT_FILE
 4

	)

459 
	#STT_COMMON
 5

	)

460 
	#STT_TLS
 6

	)

461 
	#STT_NUM
 7

	)

462 
	#STT_LOOS
 10

	)

463 
	#STT_GNU_IFUNC
 10

	)

464 
	#STT_HIOS
 12

	)

465 
	#STT_LOPROC
 13

	)

466 
	#STT_HIPROC
 15

	)

473 
	#STN_UNDEF
 0

	)

478 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

481 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

484 
	#STV_DEFAULT
 0

	)

485 
	#STV_INTERNAL
 1

	)

486 
	#STV_HIDDEN
 2

	)

487 
	#STV_PROTECTED
 3

	)

494 
Elf32_Addr
 
	mr_off£t
;

495 
Elf32_W‹d
 
	mr_öfo
;

496 } 
	tElf32_Rñ
;

505 
Elf64_Addr
 
	mr_off£t
;

506 
Elf64_Xw‹d
 
	mr_öfo
;

507 } 
	tElf64_Rñ
;

513 
Elf32_Addr
 
	mr_off£t
;

514 
Elf32_W‹d
 
	mr_öfo
;

515 
Elf32_Sw‹d
 
	mr_addíd
;

516 } 
	tElf32_Rña
;

520 
Elf64_Addr
 
	mr_off£t
;

521 
Elf64_Xw‹d
 
	mr_öfo
;

522 
Elf64_Sxw‹d
 
	mr_addíd
;

523 } 
	tElf64_Rña
;

527 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

528 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

529 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

531 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

532 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

533 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

539 
Elf32_W‹d
 
	mp_ty≥
;

540 
Elf32_Off
 
	mp_off£t
;

541 
Elf32_Addr
 
	mp_vaddr
;

542 
Elf32_Addr
 
	mp_∑ddr
;

543 
Elf32_W‹d
 
	mp_fûesz
;

544 
Elf32_W‹d
 
	mp_memsz
;

545 
Elf32_W‹d
 
	mp_Êags
;

546 
Elf32_W‹d
 
	mp_Æign
;

547 } 
	tElf32_Phdr
;

551 
Elf64_W‹d
 
	mp_ty≥
;

552 
Elf64_W‹d
 
	mp_Êags
;

553 
Elf64_Off
 
	mp_off£t
;

554 
Elf64_Addr
 
	mp_vaddr
;

555 
Elf64_Addr
 
	mp_∑ddr
;

556 
Elf64_Xw‹d
 
	mp_fûesz
;

557 
Elf64_Xw‹d
 
	mp_memsz
;

558 
Elf64_Xw‹d
 
	mp_Æign
;

559 } 
	tElf64_Phdr
;

563 
	#PT_NULL
 0

	)

564 
	#PT_LOAD
 1

	)

565 
	#PT_DYNAMIC
 2

	)

566 
	#PT_INTERP
 3

	)

567 
	#PT_NOTE
 4

	)

568 
	#PT_SHLIB
 5

	)

569 
	#PT_PHDR
 6

	)

570 
	#PT_TLS
 7

	)

571 
	#PT_NUM
 8

	)

572 
	#PT_LOOS
 0x60000000

	)

573 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

574 
	#PT_GNU_STACK
 0x6474e551

	)

575 
	#PT_GNU_RELRO
 0x6474e552

	)

576 
	#PT_LOSUNW
 0x6fffffÁ

	)

577 
	#PT_SUNWBSS
 0x6fffffÁ

	)

578 
	#PT_SUNWSTACK
 0x6ffffffb

	)

579 
	#PT_HISUNW
 0x6fffffff

	)

580 
	#PT_HIOS
 0x6ffffff‡

	)

581 
	#PT_LOPROC
 0x70000000

	)

582 
	#PT_HIPROC
 0x7ffffff‡

	)

586 
	#PF_X
 (1 << 0Ë

	)

587 
	#PF_W
 (1 << 1Ë

	)

588 
	#PF_R
 (1 << 2Ë

	)

589 
	#PF_MASKOS
 0x0ff00000

	)

590 
	#PF_MASKPROC
 0xf0000000

	)

594 
	#NT_PRSTATUS
 1

	)

595 
	#NT_FPREGSET
 2

	)

596 
	#NT_PRPSINFO
 3

	)

597 
	#NT_PRXREG
 4

	)

598 
	#NT_TASKSTRUCT
 4

	)

599 
	#NT_PLATFORM
 5

	)

600 
	#NT_AUXV
 6

	)

601 
	#NT_GWINDOWS
 7

	)

602 
	#NT_ASRS
 8

	)

603 
	#NT_PSTATUS
 10

	)

604 
	#NT_PSINFO
 13

	)

605 
	#NT_PRCRED
 14

	)

606 
	#NT_UTSNAME
 15

	)

607 
	#NT_LWPSTATUS
 16

	)

608 
	#NT_LWPSINFO
 17

	)

609 
	#NT_PRFPXREG
 20

	)

610 
	#NT_PRXFPREG
 0x46e62b7‡

	)

611 
	#NT_PPC_VMX
 0x100

	)

612 
	#NT_PPC_SPE
 0x101

	)

613 
	#NT_PPC_VSX
 0x102

	)

614 
	#NT_386_TLS
 0x200

	)

615 
	#NT_386_IOPERM
 0x201

	)

619 
	#NT_VERSION
 1

	)

626 
Elf32_Sw‹d
 
	md_èg
;

629 
Elf32_W‹d
 
	md_vÆ
;

630 
Elf32_Addr
 
	md_±r
;

631 } 
	md_un
;

632 } 
	tElf32_Dyn
;

636 
Elf64_Sxw‹d
 
	md_èg
;

639 
Elf64_Xw‹d
 
	md_vÆ
;

640 
Elf64_Addr
 
	md_±r
;

641 } 
	md_un
;

642 } 
	tElf64_Dyn
;

646 
	#DT_NULL
 0

	)

647 
	#DT_NEEDED
 1

	)

648 
	#DT_PLTRELSZ
 2

	)

649 
	#DT_PLTGOT
 3

	)

650 
	#DT_HASH
 4

	)

651 
	#DT_STRTAB
 5

	)

652 
	#DT_SYMTAB
 6

	)

653 
	#DT_RELA
 7

	)

654 
	#DT_RELASZ
 8

	)

655 
	#DT_RELAENT
 9

	)

656 
	#DT_STRSZ
 10

	)

657 
	#DT_SYMENT
 11

	)

658 
	#DT_INIT
 12

	)

659 
	#DT_FINI
 13

	)

660 
	#DT_SONAME
 14

	)

661 
	#DT_RPATH
 15

	)

662 
	#DT_SYMBOLIC
 16

	)

663 
	#DT_REL
 17

	)

664 
	#DT_RELSZ
 18

	)

665 
	#DT_RELENT
 19

	)

666 
	#DT_PLTREL
 20

	)

667 
	#DT_DEBUG
 21

	)

668 
	#DT_TEXTREL
 22

	)

669 
	#DT_JMPREL
 23

	)

670 
	#DT_BIND_NOW
 24

	)

671 
	#DT_INIT_ARRAY
 25

	)

672 
	#DT_FINI_ARRAY
 26

	)

673 
	#DT_INIT_ARRAYSZ
 27

	)

674 
	#DT_FINI_ARRAYSZ
 28

	)

675 
	#DT_RUNPATH
 29

	)

676 
	#DT_FLAGS
 30

	)

677 
	#DT_ENCODING
 32

	)

678 
	#DT_PREINIT_ARRAY
 32

	)

679 
	#DT_PREINIT_ARRAYSZ
 33

	)

680 
	#DT_NUM
 34

	)

681 
	#DT_LOOS
 0x6000000d

	)

682 
	#DT_HIOS
 0x6ffff000

	)

683 
	#DT_LOPROC
 0x70000000

	)

684 
	#DT_HIPROC
 0x7ffffff‡

	)

685 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

690 
	#DT_VALRNGLO
 0x6ffffd00

	)

691 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

692 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

693 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

694 
	#DT_CHECKSUM
 0x6ffffdf8

	)

695 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

696 
	#DT_MOVEENT
 0x6ffffdÁ

	)

697 
	#DT_MOVESZ
 0x6ffffdfb

	)

698 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

699 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

701 
	#DT_SYMINSZ
 0x6ffffd„

	)

702 
	#DT_SYMINENT
 0x6ffffdf‡

	)

703 
	#DT_VALRNGHI
 0x6ffffdff

	)

704 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

705 
	#DT_VALNUM
 12

	)

712 
	#DT_ADDRRNGLO
 0x6fff„00

	)

713 
	#DT_GNU_HASH
 0x6fff„f5

	)

714 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

715 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

716 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

717 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

718 
	#DT_CONFIG
 0x6fff„Á

	)

719 
	#DT_DEPAUDIT
 0x6fff„fb

	)

720 
	#DT_AUDIT
 0x6fff„f¯

	)

721 
	#DT_PLTPAD
 0x6fff„fd

	)

722 
	#DT_MOVETAB
 0x6fff„„

	)

723 
	#DT_SYMINFO
 0x6fff„f‡

	)

724 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

725 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

726 
	#DT_ADDRNUM
 11

	)

730 
	#DT_VERSYM
 0x6ffffff0

	)

732 
	#DT_RELACOUNT
 0x6ffffff9

	)

733 
	#DT_RELCOUNT
 0x6fffffÁ

	)

736 
	#DT_FLAGS_1
 0x6ffffffb

	)

737 
	#DT_VERDEF
 0x6ffffff¯

	)

739 
	#DT_VERDEFNUM
 0x6ffffffd

	)

740 
	#DT_VERNEED
 0x6fffff„

	)

742 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

743 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

744 
	#DT_VERSIONTAGNUM
 16

	)

748 
	#DT_AUXILIARY
 0x7ffffffd

	)

749 
	#DT_FILTER
 0x7ffffff‡

	)

750 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

751 
	#DT_EXTRANUM
 3

	)

754 
	#DF_ORIGIN
 0x00000001

	)

755 
	#DF_SYMBOLIC
 0x00000002

	)

756 
	#DF_TEXTREL
 0x00000004

	)

757 
	#DF_BIND_NOW
 0x00000008

	)

758 
	#DF_STATIC_TLS
 0x00000010

	)

762 
	#DF_1_NOW
 0x00000001

	)

763 
	#DF_1_GLOBAL
 0x00000002

	)

764 
	#DF_1_GROUP
 0x00000004

	)

765 
	#DF_1_NODELETE
 0x00000008

	)

766 
	#DF_1_LOADFLTR
 0x00000010

	)

767 
	#DF_1_INITFIRST
 0x00000020

	)

768 
	#DF_1_NOOPEN
 0x00000040

	)

769 
	#DF_1_ORIGIN
 0x00000080

	)

770 
	#DF_1_DIRECT
 0x00000100

	)

771 
	#DF_1_TRANS
 0x00000200

	)

772 
	#DF_1_INTERPOSE
 0x00000400

	)

773 
	#DF_1_NODEFLIB
 0x00000800

	)

774 
	#DF_1_NODUMP
 0x00001000

	)

775 
	#DF_1_CONFALT
 0x00002000

	)

776 
	#DF_1_ENDFILTEE
 0x00004000

	)

777 
	#DF_1_DISPRELDNE
 0x00008000

	)

778 
	#DF_1_DISPRELPND
 0x00010000

	)

781 
	#DTF_1_PARINIT
 0x00000001

	)

782 
	#DTF_1_CONFEXP
 0x00000002

	)

785 
	#DF_P1_LAZYLOAD
 0x00000001

	)

786 
	#DF_P1_GROUPPERM
 0x00000002

	)

793 
Elf32_HÆf
 
	mvd_vîsi⁄
;

794 
Elf32_HÆf
 
	mvd_Êags
;

795 
Elf32_HÆf
 
	mvd_ndx
;

796 
Elf32_HÆf
 
	mvd_˙t
;

797 
Elf32_W‹d
 
	mvd_hash
;

798 
Elf32_W‹d
 
	mvd_aux
;

799 
Elf32_W‹d
 
	mvd_√xt
;

801 } 
	tElf32_Vîdef
;

805 
Elf64_HÆf
 
	mvd_vîsi⁄
;

806 
Elf64_HÆf
 
	mvd_Êags
;

807 
Elf64_HÆf
 
	mvd_ndx
;

808 
Elf64_HÆf
 
	mvd_˙t
;

809 
Elf64_W‹d
 
	mvd_hash
;

810 
Elf64_W‹d
 
	mvd_aux
;

811 
Elf64_W‹d
 
	mvd_√xt
;

813 } 
	tElf64_Vîdef
;

817 
	#VER_DEF_NONE
 0

	)

818 
	#VER_DEF_CURRENT
 1

	)

819 
	#VER_DEF_NUM
 2

	)

822 
	#VER_FLG_BASE
 0x1

	)

823 
	#VER_FLG_WEAK
 0x2

	)

826 
	#VER_NDX_LOCAL
 0

	)

827 
	#VER_NDX_GLOBAL
 1

	)

828 
	#VER_NDX_LORESERVE
 0xff00

	)

829 
	#VER_NDX_ELIMINATE
 0xff01

	)

835 
Elf32_W‹d
 
	mvda_«me
;

836 
Elf32_W‹d
 
	mvda_√xt
;

838 } 
	tElf32_Vîdaux
;

842 
Elf64_W‹d
 
	mvda_«me
;

843 
Elf64_W‹d
 
	mvda_√xt
;

845 } 
	tElf64_Vîdaux
;

852 
Elf32_HÆf
 
	mvn_vîsi⁄
;

853 
Elf32_HÆf
 
	mvn_˙t
;

854 
Elf32_W‹d
 
	mvn_fûe
;

856 
Elf32_W‹d
 
	mvn_aux
;

857 
Elf32_W‹d
 
	mvn_√xt
;

859 } 
	tElf32_Vî√ed
;

863 
Elf64_HÆf
 
	mvn_vîsi⁄
;

864 
Elf64_HÆf
 
	mvn_˙t
;

865 
Elf64_W‹d
 
	mvn_fûe
;

867 
Elf64_W‹d
 
	mvn_aux
;

868 
Elf64_W‹d
 
	mvn_√xt
;

870 } 
	tElf64_Vî√ed
;

874 
	#VER_NEED_NONE
 0

	)

875 
	#VER_NEED_CURRENT
 1

	)

876 
	#VER_NEED_NUM
 2

	)

882 
Elf32_W‹d
 
	mv«_hash
;

883 
Elf32_HÆf
 
	mv«_Êags
;

884 
Elf32_HÆf
 
	mv«_Ÿhî
;

885 
Elf32_W‹d
 
	mv«_«me
;

886 
Elf32_W‹d
 
	mv«_√xt
;

888 } 
	tElf32_Vî«ux
;

892 
Elf64_W‹d
 
	mv«_hash
;

893 
Elf64_HÆf
 
	mv«_Êags
;

894 
Elf64_HÆf
 
	mv«_Ÿhî
;

895 
Elf64_W‹d
 
	mv«_«me
;

896 
Elf64_W‹d
 
	mv«_√xt
;

898 } 
	tElf64_Vî«ux
;

902 
	#VER_FLG_WEAK
 0x2

	)

916 
uöt32_t
 
	ma_ty≥
;

919 
uöt32_t
 
	ma_vÆ
;

923 } 
	ma_un
;

924 } 
	tElf32_auxv_t
;

928 
uöt64_t
 
	ma_ty≥
;

931 
uöt64_t
 
	ma_vÆ
;

935 } 
	ma_un
;

936 } 
	tElf64_auxv_t
;

940 
	#AT_NULL
 0

	)

941 
	#AT_IGNORE
 1

	)

942 
	#AT_EXECFD
 2

	)

943 
	#AT_PHDR
 3

	)

944 
	#AT_PHENT
 4

	)

945 
	#AT_PHNUM
 5

	)

946 
	#AT_PAGESZ
 6

	)

947 
	#AT_BASE
 7

	)

948 
	#AT_FLAGS
 8

	)

949 
	#AT_ENTRY
 9

	)

950 
	#AT_NOTELF
 10

	)

951 
	#AT_UID
 11

	)

952 
	#AT_EUID
 12

	)

953 
	#AT_GID
 13

	)

954 
	#AT_EGID
 14

	)

955 
	#AT_CLKTCK
 17

	)

958 
	#AT_PLATFORM
 15

	)

959 
	#AT_HWCAP
 16

	)

964 
	#AT_FPUCW
 18

	)

967 
	#AT_DCACHEBSIZE
 19

	)

968 
	#AT_ICACHEBSIZE
 20

	)

969 
	#AT_UCACHEBSIZE
 21

	)

973 
	#AT_IGNOREPPC
 22

	)

975 
	#AT_SECURE
 23

	)

977 
	#AT_BASE_PLATFORM
 24

	)

979 
	#AT_RANDOM
 25

	)

981 
	#AT_EXECFN
 31

	)

985 
	#AT_SYSINFO
 32

	)

986 
	#AT_SYSINFO_EHDR
 33

	)

990 
	#AT_L1I_CACHESHAPE
 34

	)

991 
	#AT_L1D_CACHESHAPE
 35

	)

992 
	#AT_L2_CACHESHAPE
 36

	)

993 
	#AT_L3_CACHESHAPE
 37

	)

1000 
Elf32_W‹d
 
	mn_«mesz
;

1001 
Elf32_W‹d
 
	mn_descsz
;

1002 
Elf32_W‹d
 
	mn_ty≥
;

1003 } 
	tElf32_Nhdr
;

1007 
Elf64_W‹d
 
	mn_«mesz
;

1008 
Elf64_W‹d
 
	mn_descsz
;

1009 
Elf64_W‹d
 
	mn_ty≥
;

1010 } 
	tElf64_Nhdr
;

1015 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1018 
	#ELF_NOTE_GNU
 "GNU"

	)

1024 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1035 
	#NT_GNU_ABI_TAG
 1

	)

1036 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1040 
	#ELF_NOTE_OS_LINUX
 0

	)

1041 
	#ELF_NOTE_OS_GNU
 1

	)

1042 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1043 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1051 
	#NT_GNU_HWCAP
 2

	)

1055 
	#NT_GNU_BUILD_ID
 3

	)

1058 
	#NT_GNU_GOLD_VERSION
 4

	)

1064 
Elf32_Xw‹d
 
	mm_vÆue
;

1065 
Elf32_W‹d
 
	mm_öfo
;

1066 
Elf32_W‹d
 
	mm_poff£t
;

1067 
Elf32_HÆf
 
	mm_ª≥©
;

1068 
Elf32_HÆf
 
	mm_°ride
;

1069 } 
	tElf32_Move
;

1073 
Elf64_Xw‹d
 
	mm_vÆue
;

1074 
Elf64_Xw‹d
 
	mm_öfo
;

1075 
Elf64_Xw‹d
 
	mm_poff£t
;

1076 
Elf64_HÆf
 
	mm_ª≥©
;

1077 
Elf64_HÆf
 
	mm_°ride
;

1078 } 
	tElf64_Move
;

1081 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1082 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1083 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1085 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1086 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1087 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1093 
	#EF_CPU32
 0x00810000

	)

1097 
	#R_68K_NONE
 0

	)

1098 
	#R_68K_32
 1

	)

1099 
	#R_68K_16
 2

	)

1100 
	#R_68K_8
 3

	)

1101 
	#R_68K_PC32
 4

	)

1102 
	#R_68K_PC16
 5

	)

1103 
	#R_68K_PC8
 6

	)

1104 
	#R_68K_GOT32
 7

	)

1105 
	#R_68K_GOT16
 8

	)

1106 
	#R_68K_GOT8
 9

	)

1107 
	#R_68K_GOT32O
 10

	)

1108 
	#R_68K_GOT16O
 11

	)

1109 
	#R_68K_GOT8O
 12

	)

1110 
	#R_68K_PLT32
 13

	)

1111 
	#R_68K_PLT16
 14

	)

1112 
	#R_68K_PLT8
 15

	)

1113 
	#R_68K_PLT32O
 16

	)

1114 
	#R_68K_PLT16O
 17

	)

1115 
	#R_68K_PLT8O
 18

	)

1116 
	#R_68K_COPY
 19

	)

1117 
	#R_68K_GLOB_DAT
 20

	)

1118 
	#R_68K_JMP_SLOT
 21

	)

1119 
	#R_68K_RELATIVE
 22

	)

1121 
	#R_68K_NUM
 23

	)

1127 
	#R_386_NONE
 0

	)

1128 
	#R_386_32
 1

	)

1129 
	#R_386_PC32
 2

	)

1130 
	#R_386_GOT32
 3

	)

1131 
	#R_386_PLT32
 4

	)

1132 
	#R_386_COPY
 5

	)

1133 
	#R_386_GLOB_DAT
 6

	)

1134 
	#R_386_JMP_SLOT
 7

	)

1135 
	#R_386_RELATIVE
 8

	)

1136 
	#R_386_GOTOFF
 9

	)

1137 
	#R_386_GOTPC
 10

	)

1138 
	#R_386_32PLT
 11

	)

1139 
	#R_386_TLS_TPOFF
 14

	)

1140 
	#R_386_TLS_IE
 15

	)

1142 
	#R_386_TLS_GOTIE
 16

	)

1144 
	#R_386_TLS_LE
 17

	)

1146 
	#R_386_TLS_GD
 18

	)

1148 
	#R_386_TLS_LDM
 19

	)

1151 
	#R_386_16
 20

	)

1152 
	#R_386_PC16
 21

	)

1153 
	#R_386_8
 22

	)

1154 
	#R_386_PC8
 23

	)

1155 
	#R_386_TLS_GD_32
 24

	)

1157 
	#R_386_TLS_GD_PUSH
 25

	)

1158 
	#R_386_TLS_GD_CALL
 26

	)

1160 
	#R_386_TLS_GD_POP
 27

	)

1161 
	#R_386_TLS_LDM_32
 28

	)

1163 
	#R_386_TLS_LDM_PUSH
 29

	)

1164 
	#R_386_TLS_LDM_CALL
 30

	)

1166 
	#R_386_TLS_LDM_POP
 31

	)

1167 
	#R_386_TLS_LDO_32
 32

	)

1168 
	#R_386_TLS_IE_32
 33

	)

1170 
	#R_386_TLS_LE_32
 34

	)

1172 
	#R_386_TLS_DTPMOD32
 35

	)

1173 
	#R_386_TLS_DTPOFF32
 36

	)

1174 
	#R_386_TLS_TPOFF32
 37

	)

1176 
	#R_386_TLS_GOTDESC
 39

	)

1177 
	#R_386_TLS_DESC_CALL
 40

	)

1180 
	#R_386_TLS_DESC
 41

	)

1184 
	#R_386_IRELATIVE
 42

	)

1186 
	#R_386_NUM
 43

	)

1192 
	#STT_SPARC_REGISTER
 13

	)

1196 
	#EF_SPARCV9_MM
 3

	)

1197 
	#EF_SPARCV9_TSO
 0

	)

1198 
	#EF_SPARCV9_PSO
 1

	)

1199 
	#EF_SPARCV9_RMO
 2

	)

1200 
	#EF_SPARC_LEDATA
 0x800000

	)

1201 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1202 
	#EF_SPARC_32PLUS
 0x000100

	)

1203 
	#EF_SPARC_SUN_US1
 0x000200

	)

1204 
	#EF_SPARC_HAL_R1
 0x000400

	)

1205 
	#EF_SPARC_SUN_US3
 0x000800

	)

1209 
	#R_SPARC_NONE
 0

	)

1210 
	#R_SPARC_8
 1

	)

1211 
	#R_SPARC_16
 2

	)

1212 
	#R_SPARC_32
 3

	)

1213 
	#R_SPARC_DISP8
 4

	)

1214 
	#R_SPARC_DISP16
 5

	)

1215 
	#R_SPARC_DISP32
 6

	)

1216 
	#R_SPARC_WDISP30
 7

	)

1217 
	#R_SPARC_WDISP22
 8

	)

1218 
	#R_SPARC_HI22
 9

	)

1219 
	#R_SPARC_22
 10

	)

1220 
	#R_SPARC_13
 11

	)

1221 
	#R_SPARC_LO10
 12

	)

1222 
	#R_SPARC_GOT10
 13

	)

1223 
	#R_SPARC_GOT13
 14

	)

1224 
	#R_SPARC_GOT22
 15

	)

1225 
	#R_SPARC_PC10
 16

	)

1226 
	#R_SPARC_PC22
 17

	)

1227 
	#R_SPARC_WPLT30
 18

	)

1228 
	#R_SPARC_COPY
 19

	)

1229 
	#R_SPARC_GLOB_DAT
 20

	)

1230 
	#R_SPARC_JMP_SLOT
 21

	)

1231 
	#R_SPARC_RELATIVE
 22

	)

1232 
	#R_SPARC_UA32
 23

	)

1236 
	#R_SPARC_PLT32
 24

	)

1237 
	#R_SPARC_HIPLT22
 25

	)

1238 
	#R_SPARC_LOPLT10
 26

	)

1239 
	#R_SPARC_PCPLT32
 27

	)

1240 
	#R_SPARC_PCPLT22
 28

	)

1241 
	#R_SPARC_PCPLT10
 29

	)

1242 
	#R_SPARC_10
 30

	)

1243 
	#R_SPARC_11
 31

	)

1244 
	#R_SPARC_64
 32

	)

1245 
	#R_SPARC_OLO10
 33

	)

1246 
	#R_SPARC_HH22
 34

	)

1247 
	#R_SPARC_HM10
 35

	)

1248 
	#R_SPARC_LM22
 36

	)

1249 
	#R_SPARC_PC_HH22
 37

	)

1250 
	#R_SPARC_PC_HM10
 38

	)

1251 
	#R_SPARC_PC_LM22
 39

	)

1252 
	#R_SPARC_WDISP16
 40

	)

1253 
	#R_SPARC_WDISP19
 41

	)

1254 
	#R_SPARC_GLOB_JMP
 42

	)

1255 
	#R_SPARC_7
 43

	)

1256 
	#R_SPARC_5
 44

	)

1257 
	#R_SPARC_6
 45

	)

1258 
	#R_SPARC_DISP64
 46

	)

1259 
	#R_SPARC_PLT64
 47

	)

1260 
	#R_SPARC_HIX22
 48

	)

1261 
	#R_SPARC_LOX10
 49

	)

1262 
	#R_SPARC_H44
 50

	)

1263 
	#R_SPARC_M44
 51

	)

1264 
	#R_SPARC_L44
 52

	)

1265 
	#R_SPARC_REGISTER
 53

	)

1266 
	#R_SPARC_UA64
 54

	)

1267 
	#R_SPARC_UA16
 55

	)

1268 
	#R_SPARC_TLS_GD_HI22
 56

	)

1269 
	#R_SPARC_TLS_GD_LO10
 57

	)

1270 
	#R_SPARC_TLS_GD_ADD
 58

	)

1271 
	#R_SPARC_TLS_GD_CALL
 59

	)

1272 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1273 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1274 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1275 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1276 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1277 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1278 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1279 
	#R_SPARC_TLS_IE_HI22
 67

	)

1280 
	#R_SPARC_TLS_IE_LO10
 68

	)

1281 
	#R_SPARC_TLS_IE_LD
 69

	)

1282 
	#R_SPARC_TLS_IE_LDX
 70

	)

1283 
	#R_SPARC_TLS_IE_ADD
 71

	)

1284 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1285 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1286 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1287 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1288 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1289 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1290 
	#R_SPARC_TLS_TPOFF32
 78

	)

1291 
	#R_SPARC_TLS_TPOFF64
 79

	)

1292 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1293 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1294 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1295 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1296 
	#R_SPARC_GOTDATA_OP
 84

	)

1297 
	#R_SPARC_H34
 85

	)

1298 
	#R_SPARC_SIZE32
 86

	)

1299 
	#R_SPARC_SIZE64
 87

	)

1300 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1301 
	#R_SPARC_GNU_VTENTRY
 251

	)

1302 
	#R_SPARC_REV32
 252

	)

1304 
	#R_SPARC_NUM
 253

	)

1308 
	#DT_SPARC_REGISTER
 0x70000001

	)

1309 
	#DT_SPARC_NUM
 2

	)

1313 
	#HWCAP_SPARC_FLUSH
 1

	)

1314 
	#HWCAP_SPARC_STBAR
 2

	)

1315 
	#HWCAP_SPARC_SWAP
 4

	)

1316 
	#HWCAP_SPARC_MULDIV
 8

	)

1317 
	#HWCAP_SPARC_V9
 16

	)

1318 
	#HWCAP_SPARC_ULTRA3
 32

	)

1319 
	#HWCAP_SPARC_BLKINIT
 64

	)

1320 
	#HWCAP_SPARC_N2
 128

	)

1326 
	#EF_MIPS_NOREORDER
 1

	)

1327 
	#EF_MIPS_PIC
 2

	)

1328 
	#EF_MIPS_CPIC
 4

	)

1329 
	#EF_MIPS_XGOT
 8

	)

1330 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1331 
	#EF_MIPS_ABI2
 32

	)

1332 
	#EF_MIPS_ABI_ON32
 64

	)

1333 
	#EF_MIPS_ARCH
 0xf0000000

	)

1337 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1338 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1339 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1340 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1341 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1342 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1343 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1347 
	#E_MIPS_ARCH_1
 0x00000000

	)

1348 
	#E_MIPS_ARCH_2
 0x10000000

	)

1349 
	#E_MIPS_ARCH_3
 0x20000000

	)

1350 
	#E_MIPS_ARCH_4
 0x30000000

	)

1351 
	#E_MIPS_ARCH_5
 0x40000000

	)

1352 
	#E_MIPS_ARCH_32
 0x60000000

	)

1353 
	#E_MIPS_ARCH_64
 0x70000000

	)

1357 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1358 
	#SHN_MIPS_TEXT
 0xff01

	)

1359 
	#SHN_MIPS_DATA
 0xff02

	)

1360 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1361 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1365 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1366 
	#SHT_MIPS_MSYM
 0x70000001

	)

1367 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1368 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1369 
	#SHT_MIPS_UCODE
 0x70000004

	)

1370 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1371 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1372 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1373 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1374 
	#SHT_MIPS_RELD
 0x70000009

	)

1375 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1376 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1377 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1378 
	#SHT_MIPS_SHDR
 0x70000010

	)

1379 
	#SHT_MIPS_FDESC
 0x70000011

	)

1380 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1381 
	#SHT_MIPS_DENSE
 0x70000013

	)

1382 
	#SHT_MIPS_PDESC
 0x70000014

	)

1383 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1384 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1385 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1386 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1387 
	#SHT_MIPS_LINE
 0x70000019

	)

1388 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1389 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1390 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1391 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1392 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1393 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1394 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1395 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1396 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1397 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1398 
	#SHT_MIPS_XLATE
 0x70000024

	)

1399 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1400 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1401 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1402 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1403 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1407 
	#SHF_MIPS_GPREL
 0x10000000

	)

1408 
	#SHF_MIPS_MERGE
 0x20000000

	)

1409 
	#SHF_MIPS_ADDR
 0x40000000

	)

1410 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1411 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1412 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1413 
	#SHF_MIPS_NAMES
 0x02000000

	)

1414 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1420 
	#STO_MIPS_DEFAULT
 0x0

	)

1421 
	#STO_MIPS_INTERNAL
 0x1

	)

1422 
	#STO_MIPS_HIDDEN
 0x2

	)

1423 
	#STO_MIPS_PROTECTED
 0x3

	)

1424 
	#STO_MIPS_PLT
 0x8

	)

1425 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1428 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1436 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1437 
Elf32_W‹d
 
	mgt_unu£d
;

1438 } 
	mgt_hódî
;

1441 
Elf32_W‹d
 
	mgt_g_vÆue
;

1442 
Elf32_W‹d
 
	mgt_byãs
;

1443 } 
	mgt_íåy
;

1444 } 
	tElf32_g±ab
;

1450 
Elf32_W‹d
 
	mri_g¥mask
;

1451 
Elf32_W‹d
 
	mri_˝rmask
[4];

1452 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1453 } 
	tElf32_RegInfo
;

1459 
	mköd
;

1461 
	msize
;

1462 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1464 
Elf32_W‹d
 
	möfo
;

1465 } 
	tElf_O±i⁄s
;

1469 
	#ODK_NULL
 0

	)

1470 
	#ODK_REGINFO
 1

	)

1471 
	#ODK_EXCEPTIONS
 2

	)

1472 
	#ODK_PAD
 3

	)

1473 
	#ODK_HWPATCH
 4

	)

1474 
	#ODK_FILL
 5

	)

1475 
	#ODK_TAGS
 6

	)

1476 
	#ODK_HWAND
 7

	)

1477 
	#ODK_HWOR
 8

	)

1481 
	#OEX_FPU_MIN
 0x1‡

	)

1482 
	#OEX_FPU_MAX
 0x1f00

	)

1483 
	#OEX_PAGE0
 0x10000

	)

1484 
	#OEX_SMM
 0x20000

	)

1485 
	#OEX_FPDBUG
 0x40000

	)

1486 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1487 
	#OEX_DISMISS
 0x80000

	)

1489 
	#OEX_FPU_INVAL
 0x10

	)

1490 
	#OEX_FPU_DIV0
 0x08

	)

1491 
	#OEX_FPU_OFLO
 0x04

	)

1492 
	#OEX_FPU_UFLO
 0x02

	)

1493 
	#OEX_FPU_INEX
 0x01

	)

1497 
	#OHW_R4KEOP
 0x1

	)

1498 
	#OHW_R8KPFETCH
 0x2

	)

1499 
	#OHW_R5KEOP
 0x4

	)

1500 
	#OHW_R5KCVTL
 0x8

	)

1502 
	#OPAD_PREFIX
 0x1

	)

1503 
	#OPAD_POSTFIX
 0x2

	)

1504 
	#OPAD_SYMBOL
 0x4

	)

1510 
Elf32_W‹d
 
	mhwp_Êags1
;

1511 
Elf32_W‹d
 
	mhwp_Êags2
;

1512 } 
	tElf_O±i⁄s_Hw
;

1516 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1517 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1521 
	#R_MIPS_NONE
 0

	)

1522 
	#R_MIPS_16
 1

	)

1523 
	#R_MIPS_32
 2

	)

1524 
	#R_MIPS_REL32
 3

	)

1525 
	#R_MIPS_26
 4

	)

1526 
	#R_MIPS_HI16
 5

	)

1527 
	#R_MIPS_LO16
 6

	)

1528 
	#R_MIPS_GPREL16
 7

	)

1529 
	#R_MIPS_LITERAL
 8

	)

1530 
	#R_MIPS_GOT16
 9

	)

1531 
	#R_MIPS_PC16
 10

	)

1532 
	#R_MIPS_CALL16
 11

	)

1533 
	#R_MIPS_GPREL32
 12

	)

1535 
	#R_MIPS_SHIFT5
 16

	)

1536 
	#R_MIPS_SHIFT6
 17

	)

1537 
	#R_MIPS_64
 18

	)

1538 
	#R_MIPS_GOT_DISP
 19

	)

1539 
	#R_MIPS_GOT_PAGE
 20

	)

1540 
	#R_MIPS_GOT_OFST
 21

	)

1541 
	#R_MIPS_GOT_HI16
 22

	)

1542 
	#R_MIPS_GOT_LO16
 23

	)

1543 
	#R_MIPS_SUB
 24

	)

1544 
	#R_MIPS_INSERT_A
 25

	)

1545 
	#R_MIPS_INSERT_B
 26

	)

1546 
	#R_MIPS_DELETE
 27

	)

1547 
	#R_MIPS_HIGHER
 28

	)

1548 
	#R_MIPS_HIGHEST
 29

	)

1549 
	#R_MIPS_CALL_HI16
 30

	)

1550 
	#R_MIPS_CALL_LO16
 31

	)

1551 
	#R_MIPS_SCN_DISP
 32

	)

1552 
	#R_MIPS_REL16
 33

	)

1553 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1554 
	#R_MIPS_PJUMP
 35

	)

1555 
	#R_MIPS_RELGOT
 36

	)

1556 
	#R_MIPS_JALR
 37

	)

1557 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1558 
	#R_MIPS_TLS_DTPREL32
 39

	)

1559 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1560 
	#R_MIPS_TLS_DTPREL64
 41

	)

1561 
	#R_MIPS_TLS_GD
 42

	)

1562 
	#R_MIPS_TLS_LDM
 43

	)

1563 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1564 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1565 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1566 
	#R_MIPS_TLS_TPREL32
 47

	)

1567 
	#R_MIPS_TLS_TPREL64
 48

	)

1568 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1569 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1570 
	#R_MIPS_GLOB_DAT
 51

	)

1571 
	#R_MIPS_COPY
 126

	)

1572 
	#R_MIPS_JUMP_SLOT
 127

	)

1574 
	#R_MIPS_NUM
 128

	)

1578 
	#PT_MIPS_REGINFO
 0x70000000

	)

1579 
	#PT_MIPS_RTPROC
 0x70000001

	)

1580 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1584 
	#PF_MIPS_LOCAL
 0x10000000

	)

1588 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1589 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1590 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1591 
	#DT_MIPS_IVERSION
 0x70000004

	)

1592 
	#DT_MIPS_FLAGS
 0x70000005

	)

1593 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1594 
	#DT_MIPS_MSYM
 0x70000007

	)

1595 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1596 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1597 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1598 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1599 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1600 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1601 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1602 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1603 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1604 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1605 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1606 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1608 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1609 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1611 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1612 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1614 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1616 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1618 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1620 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1622 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1623 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1624 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1625 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1626 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1627 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1628 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1629 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1630 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1631 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1632 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1633 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1635 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1637 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1638 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1639 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1641 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1645 
	#DT_MIPS_RWPLT
 0x70000034

	)

1646 
	#DT_MIPS_NUM
 0x35

	)

1650 
	#RHF_NONE
 0

	)

1651 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1652 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1653 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1654 
	#RHF_NO_MOVE
 (1 << 3)

	)

1655 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1656 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1657 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1658 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1659 
	#RHF_PIXIE
 (1 << 8)

	)

1660 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1661 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1662 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1663 
	#RHF_CORD
 (1 << 12)

	)

1664 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1665 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1671 
Elf32_W‹d
 
	ml_«me
;

1672 
Elf32_W‹d
 
	ml_time_°amp
;

1673 
Elf32_W‹d
 
	ml_checksum
;

1674 
Elf32_W‹d
 
	ml_vîsi⁄
;

1675 
Elf32_W‹d
 
	ml_Êags
;

1676 } 
	tElf32_Lib
;

1680 
Elf64_W‹d
 
	ml_«me
;

1681 
Elf64_W‹d
 
	ml_time_°amp
;

1682 
Elf64_W‹d
 
	ml_checksum
;

1683 
Elf64_W‹d
 
	ml_vîsi⁄
;

1684 
Elf64_W‹d
 
	ml_Êags
;

1685 } 
	tElf64_Lib
;

1690 
	#LL_NONE
 0

	)

1691 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1692 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1693 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1694 
	#LL_EXPORTS
 (1 << 3)

	)

1695 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1696 
	#LL_DELTA
 (1 << 5)

	)

1700 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1707 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1708 
	#EF_PARISC_EXT
 0x00020000

	)

1709 
	#EF_PARISC_LSB
 0x00040000

	)

1710 
	#EF_PARISC_WIDE
 0x00080000

	)

1711 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1713 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1714 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1718 
	#EFA_PARISC_1_0
 0x020b

	)

1719 
	#EFA_PARISC_1_1
 0x0210

	)

1720 
	#EFA_PARISC_2_0
 0x0214

	)

1724 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1726 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1730 
	#SHT_PARISC_EXT
 0x70000000

	)

1731 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1732 
	#SHT_PARISC_DOC
 0x70000002

	)

1736 
	#SHF_PARISC_SHORT
 0x20000000

	)

1737 
	#SHF_PARISC_HUGE
 0x40000000

	)

1738 
	#SHF_PARISC_SBP
 0x80000000

	)

1742 
	#STT_PARISC_MILLICODE
 13

	)

1744 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1745 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1749 
	#R_PARISC_NONE
 0

	)

1750 
	#R_PARISC_DIR32
 1

	)

1751 
	#R_PARISC_DIR21L
 2

	)

1752 
	#R_PARISC_DIR17R
 3

	)

1753 
	#R_PARISC_DIR17F
 4

	)

1754 
	#R_PARISC_DIR14R
 6

	)

1755 
	#R_PARISC_PCREL32
 9

	)

1756 
	#R_PARISC_PCREL21L
 10

	)

1757 
	#R_PARISC_PCREL17R
 11

	)

1758 
	#R_PARISC_PCREL17F
 12

	)

1759 
	#R_PARISC_PCREL14R
 14

	)

1760 
	#R_PARISC_DPREL21L
 18

	)

1761 
	#R_PARISC_DPREL14R
 22

	)

1762 
	#R_PARISC_GPREL21L
 26

	)

1763 
	#R_PARISC_GPREL14R
 30

	)

1764 
	#R_PARISC_LTOFF21L
 34

	)

1765 
	#R_PARISC_LTOFF14R
 38

	)

1766 
	#R_PARISC_SECREL32
 41

	)

1767 
	#R_PARISC_SEGBASE
 48

	)

1768 
	#R_PARISC_SEGREL32
 49

	)

1769 
	#R_PARISC_PLTOFF21L
 50

	)

1770 
	#R_PARISC_PLTOFF14R
 54

	)

1771 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1772 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1773 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1774 
	#R_PARISC_FPTR64
 64

	)

1775 
	#R_PARISC_PLABEL32
 65

	)

1776 
	#R_PARISC_PLABEL21L
 66

	)

1777 
	#R_PARISC_PLABEL14R
 70

	)

1778 
	#R_PARISC_PCREL64
 72

	)

1779 
	#R_PARISC_PCREL22F
 74

	)

1780 
	#R_PARISC_PCREL14WR
 75

	)

1781 
	#R_PARISC_PCREL14DR
 76

	)

1782 
	#R_PARISC_PCREL16F
 77

	)

1783 
	#R_PARISC_PCREL16WF
 78

	)

1784 
	#R_PARISC_PCREL16DF
 79

	)

1785 
	#R_PARISC_DIR64
 80

	)

1786 
	#R_PARISC_DIR14WR
 83

	)

1787 
	#R_PARISC_DIR14DR
 84

	)

1788 
	#R_PARISC_DIR16F
 85

	)

1789 
	#R_PARISC_DIR16WF
 86

	)

1790 
	#R_PARISC_DIR16DF
 87

	)

1791 
	#R_PARISC_GPREL64
 88

	)

1792 
	#R_PARISC_GPREL14WR
 91

	)

1793 
	#R_PARISC_GPREL14DR
 92

	)

1794 
	#R_PARISC_GPREL16F
 93

	)

1795 
	#R_PARISC_GPREL16WF
 94

	)

1796 
	#R_PARISC_GPREL16DF
 95

	)

1797 
	#R_PARISC_LTOFF64
 96

	)

1798 
	#R_PARISC_LTOFF14WR
 99

	)

1799 
	#R_PARISC_LTOFF14DR
 100

	)

1800 
	#R_PARISC_LTOFF16F
 101

	)

1801 
	#R_PARISC_LTOFF16WF
 102

	)

1802 
	#R_PARISC_LTOFF16DF
 103

	)

1803 
	#R_PARISC_SECREL64
 104

	)

1804 
	#R_PARISC_SEGREL64
 112

	)

1805 
	#R_PARISC_PLTOFF14WR
 115

	)

1806 
	#R_PARISC_PLTOFF14DR
 116

	)

1807 
	#R_PARISC_PLTOFF16F
 117

	)

1808 
	#R_PARISC_PLTOFF16WF
 118

	)

1809 
	#R_PARISC_PLTOFF16DF
 119

	)

1810 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1811 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1812 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1813 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1814 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1815 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1816 
	#R_PARISC_LORESERVE
 128

	)

1817 
	#R_PARISC_COPY
 128

	)

1818 
	#R_PARISC_IPLT
 129

	)

1819 
	#R_PARISC_EPLT
 130

	)

1820 
	#R_PARISC_TPREL32
 153

	)

1821 
	#R_PARISC_TPREL21L
 154

	)

1822 
	#R_PARISC_TPREL14R
 158

	)

1823 
	#R_PARISC_LTOFF_TP21L
 162

	)

1824 
	#R_PARISC_LTOFF_TP14R
 166

	)

1825 
	#R_PARISC_LTOFF_TP14F
 167

	)

1826 
	#R_PARISC_TPREL64
 216

	)

1827 
	#R_PARISC_TPREL14WR
 219

	)

1828 
	#R_PARISC_TPREL14DR
 220

	)

1829 
	#R_PARISC_TPREL16F
 221

	)

1830 
	#R_PARISC_TPREL16WF
 222

	)

1831 
	#R_PARISC_TPREL16DF
 223

	)

1832 
	#R_PARISC_LTOFF_TP64
 224

	)

1833 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1834 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1835 
	#R_PARISC_LTOFF_TP16F
 229

	)

1836 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1837 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1838 
	#R_PARISC_GNU_VTENTRY
 232

	)

1839 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1840 
	#R_PARISC_TLS_GD21L
 234

	)

1841 
	#R_PARISC_TLS_GD14R
 235

	)

1842 
	#R_PARISC_TLS_GDCALL
 236

	)

1843 
	#R_PARISC_TLS_LDM21L
 237

	)

1844 
	#R_PARISC_TLS_LDM14R
 238

	)

1845 
	#R_PARISC_TLS_LDMCALL
 239

	)

1846 
	#R_PARISC_TLS_LDO21L
 240

	)

1847 
	#R_PARISC_TLS_LDO14R
 241

	)

1848 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1849 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1850 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1851 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1852 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1853 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1854 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1855 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1856 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1857 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1858 
	#R_PARISC_HIRESERVE
 255

	)

1862 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1863 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1864 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1865 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1866 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1867 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1868 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1869 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1870 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1871 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1872 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1873 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1874 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1875 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1876 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1878 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1879 
	#PT_PARISC_UNWIND
 0x70000001

	)

1883 
	#PF_PARISC_SBP
 0x08000000

	)

1885 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1886 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1887 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1888 
	#PF_HP_CODE
 0x01000000

	)

1889 
	#PF_HP_MODIFY
 0x02000000

	)

1890 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1891 
	#PF_HP_SBP
 0x08000000

	)

1898 
	#EF_ALPHA_32BIT
 1

	)

1899 
	#EF_ALPHA_CANRELAX
 2

	)

1904 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1905 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1909 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1912 
	#STO_ALPHA_NOPV
 0x80

	)

1913 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1917 
	#R_ALPHA_NONE
 0

	)

1918 
	#R_ALPHA_REFLONG
 1

	)

1919 
	#R_ALPHA_REFQUAD
 2

	)

1920 
	#R_ALPHA_GPREL32
 3

	)

1921 
	#R_ALPHA_LITERAL
 4

	)

1922 
	#R_ALPHA_LITUSE
 5

	)

1923 
	#R_ALPHA_GPDISP
 6

	)

1924 
	#R_ALPHA_BRADDR
 7

	)

1925 
	#R_ALPHA_HINT
 8

	)

1926 
	#R_ALPHA_SREL16
 9

	)

1927 
	#R_ALPHA_SREL32
 10

	)

1928 
	#R_ALPHA_SREL64
 11

	)

1929 
	#R_ALPHA_GPRELHIGH
 17

	)

1930 
	#R_ALPHA_GPRELLOW
 18

	)

1931 
	#R_ALPHA_GPREL16
 19

	)

1932 
	#R_ALPHA_COPY
 24

	)

1933 
	#R_ALPHA_GLOB_DAT
 25

	)

1934 
	#R_ALPHA_JMP_SLOT
 26

	)

1935 
	#R_ALPHA_RELATIVE
 27

	)

1936 
	#R_ALPHA_TLS_GD_HI
 28

	)

1937 
	#R_ALPHA_TLSGD
 29

	)

1938 
	#R_ALPHA_TLS_LDM
 30

	)

1939 
	#R_ALPHA_DTPMOD64
 31

	)

1940 
	#R_ALPHA_GOTDTPREL
 32

	)

1941 
	#R_ALPHA_DTPREL64
 33

	)

1942 
	#R_ALPHA_DTPRELHI
 34

	)

1943 
	#R_ALPHA_DTPRELLO
 35

	)

1944 
	#R_ALPHA_DTPREL16
 36

	)

1945 
	#R_ALPHA_GOTTPREL
 37

	)

1946 
	#R_ALPHA_TPREL64
 38

	)

1947 
	#R_ALPHA_TPRELHI
 39

	)

1948 
	#R_ALPHA_TPRELLO
 40

	)

1949 
	#R_ALPHA_TPREL16
 41

	)

1951 
	#R_ALPHA_NUM
 46

	)

1954 
	#LITUSE_ALPHA_ADDR
 0

	)

1955 
	#LITUSE_ALPHA_BASE
 1

	)

1956 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1957 
	#LITUSE_ALPHA_JSR
 3

	)

1958 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1959 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1962 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

1963 
	#DT_ALPHA_NUM
 1

	)

1968 
	#EF_PPC_EMB
 0x80000000

	)

1971 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1972 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

1976 
	#R_PPC_NONE
 0

	)

1977 
	#R_PPC_ADDR32
 1

	)

1978 
	#R_PPC_ADDR24
 2

	)

1979 
	#R_PPC_ADDR16
 3

	)

1980 
	#R_PPC_ADDR16_LO
 4

	)

1981 
	#R_PPC_ADDR16_HI
 5

	)

1982 
	#R_PPC_ADDR16_HA
 6

	)

1983 
	#R_PPC_ADDR14
 7

	)

1984 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

1985 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

1986 
	#R_PPC_REL24
 10

	)

1987 
	#R_PPC_REL14
 11

	)

1988 
	#R_PPC_REL14_BRTAKEN
 12

	)

1989 
	#R_PPC_REL14_BRNTAKEN
 13

	)

1990 
	#R_PPC_GOT16
 14

	)

1991 
	#R_PPC_GOT16_LO
 15

	)

1992 
	#R_PPC_GOT16_HI
 16

	)

1993 
	#R_PPC_GOT16_HA
 17

	)

1994 
	#R_PPC_PLTREL24
 18

	)

1995 
	#R_PPC_COPY
 19

	)

1996 
	#R_PPC_GLOB_DAT
 20

	)

1997 
	#R_PPC_JMP_SLOT
 21

	)

1998 
	#R_PPC_RELATIVE
 22

	)

1999 
	#R_PPC_LOCAL24PC
 23

	)

2000 
	#R_PPC_UADDR32
 24

	)

2001 
	#R_PPC_UADDR16
 25

	)

2002 
	#R_PPC_REL32
 26

	)

2003 
	#R_PPC_PLT32
 27

	)

2004 
	#R_PPC_PLTREL32
 28

	)

2005 
	#R_PPC_PLT16_LO
 29

	)

2006 
	#R_PPC_PLT16_HI
 30

	)

2007 
	#R_PPC_PLT16_HA
 31

	)

2008 
	#R_PPC_SDAREL16
 32

	)

2009 
	#R_PPC_SECTOFF
 33

	)

2010 
	#R_PPC_SECTOFF_LO
 34

	)

2011 
	#R_PPC_SECTOFF_HI
 35

	)

2012 
	#R_PPC_SECTOFF_HA
 36

	)

2015 
	#R_PPC_TLS
 67

	)

2016 
	#R_PPC_DTPMOD32
 68

	)

2017 
	#R_PPC_TPREL16
 69

	)

2018 
	#R_PPC_TPREL16_LO
 70

	)

2019 
	#R_PPC_TPREL16_HI
 71

	)

2020 
	#R_PPC_TPREL16_HA
 72

	)

2021 
	#R_PPC_TPREL32
 73

	)

2022 
	#R_PPC_DTPREL16
 74

	)

2023 
	#R_PPC_DTPREL16_LO
 75

	)

2024 
	#R_PPC_DTPREL16_HI
 76

	)

2025 
	#R_PPC_DTPREL16_HA
 77

	)

2026 
	#R_PPC_DTPREL32
 78

	)

2027 
	#R_PPC_GOT_TLSGD16
 79

	)

2028 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2029 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2030 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2031 
	#R_PPC_GOT_TLSLD16
 83

	)

2032 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2033 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2034 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2035 
	#R_PPC_GOT_TPREL16
 87

	)

2036 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2037 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2038 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2039 
	#R_PPC_GOT_DTPREL16
 91

	)

2040 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2041 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2042 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2046 
	#R_PPC_EMB_NADDR32
 101

	)

2047 
	#R_PPC_EMB_NADDR16
 102

	)

2048 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2049 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2050 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2051 
	#R_PPC_EMB_SDAI16
 106

	)

2052 
	#R_PPC_EMB_SDA2I16
 107

	)

2053 
	#R_PPC_EMB_SDA2REL
 108

	)

2054 
	#R_PPC_EMB_SDA21
 109

	)

2055 
	#R_PPC_EMB_MRKREF
 110

	)

2056 
	#R_PPC_EMB_RELSEC16
 111

	)

2057 
	#R_PPC_EMB_RELST_LO
 112

	)

2058 
	#R_PPC_EMB_RELST_HI
 113

	)

2059 
	#R_PPC_EMB_RELST_HA
 114

	)

2060 
	#R_PPC_EMB_BIT_FLD
 115

	)

2061 
	#R_PPC_EMB_RELSDA
 116

	)

2064 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2065 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2066 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2067 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2068 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2069 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2072 
	#R_PPC_IRELATIVE
 248

	)

2075 
	#R_PPC_REL16
 249

	)

2076 
	#R_PPC_REL16_LO
 250

	)

2077 
	#R_PPC_REL16_HI
 251

	)

2078 
	#R_PPC_REL16_HA
 252

	)

2082 
	#R_PPC_TOC16
 255

	)

2085 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2086 
	#DT_PPC_NUM
 1

	)

2089 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2090 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2091 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2092 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2093 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2094 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2095 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2096 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2097 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2098 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2099 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2100 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2101 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2102 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2103 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2104 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2105 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2106 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2108 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2109 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2110 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2111 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2113 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2114 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2115 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2116 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2117 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2118 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2119 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2120 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2122 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2123 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2124 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2125 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2126 
	#R_PPC64_ADDR30
 37

	)

2127 
	#R_PPC64_ADDR64
 38

	)

2128 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2129 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2130 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2131 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2132 
	#R_PPC64_UADDR64
 43

	)

2133 
	#R_PPC64_REL64
 44

	)

2134 
	#R_PPC64_PLT64
 45

	)

2135 
	#R_PPC64_PLTREL64
 46

	)

2136 
	#R_PPC64_TOC16
 47

	)

2137 
	#R_PPC64_TOC16_LO
 48

	)

2138 
	#R_PPC64_TOC16_HI
 49

	)

2139 
	#R_PPC64_TOC16_HA
 50

	)

2140 
	#R_PPC64_TOC
 51

	)

2141 
	#R_PPC64_PLTGOT16
 52

	)

2142 
	#R_PPC64_PLTGOT16_LO
 53

	)

2143 
	#R_PPC64_PLTGOT16_HI
 54

	)

2144 
	#R_PPC64_PLTGOT16_HA
 55

	)

2146 
	#R_PPC64_ADDR16_DS
 56

	)

2147 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2148 
	#R_PPC64_GOT16_DS
 58

	)

2149 
	#R_PPC64_GOT16_LO_DS
 59

	)

2150 
	#R_PPC64_PLT16_LO_DS
 60

	)

2151 
	#R_PPC64_SECTOFF_DS
 61

	)

2152 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2153 
	#R_PPC64_TOC16_DS
 63

	)

2154 
	#R_PPC64_TOC16_LO_DS
 64

	)

2155 
	#R_PPC64_PLTGOT16_DS
 65

	)

2156 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2159 
	#R_PPC64_TLS
 67

	)

2160 
	#R_PPC64_DTPMOD64
 68

	)

2161 
	#R_PPC64_TPREL16
 69

	)

2162 
	#R_PPC64_TPREL16_LO
 70

	)

2163 
	#R_PPC64_TPREL16_HI
 71

	)

2164 
	#R_PPC64_TPREL16_HA
 72

	)

2165 
	#R_PPC64_TPREL64
 73

	)

2166 
	#R_PPC64_DTPREL16
 74

	)

2167 
	#R_PPC64_DTPREL16_LO
 75

	)

2168 
	#R_PPC64_DTPREL16_HI
 76

	)

2169 
	#R_PPC64_DTPREL16_HA
 77

	)

2170 
	#R_PPC64_DTPREL64
 78

	)

2171 
	#R_PPC64_GOT_TLSGD16
 79

	)

2172 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2173 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2174 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2175 
	#R_PPC64_GOT_TLSLD16
 83

	)

2176 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2177 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2178 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2179 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2180 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2181 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2182 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2183 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2184 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2185 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2186 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2187 
	#R_PPC64_TPREL16_DS
 95

	)

2188 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2189 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2190 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2191 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2192 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2193 
	#R_PPC64_DTPREL16_DS
 101

	)

2194 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2195 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2196 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2197 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2198 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2201 
	#R_PPC64_JMP_IREL
 247

	)

2202 
	#R_PPC64_IRELATIVE
 248

	)

2203 
	#R_PPC64_REL16
 249

	)

2204 
	#R_PPC64_REL16_LO
 250

	)

2205 
	#R_PPC64_REL16_HI
 251

	)

2206 
	#R_PPC64_REL16_HA
 252

	)

2209 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2210 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2211 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2212 
	#DT_PPC64_NUM
 3

	)

2218 
	#EF_ARM_RELEXEC
 0x01

	)

2219 
	#EF_ARM_HASENTRY
 0x02

	)

2220 
	#EF_ARM_INTERWORK
 0x04

	)

2221 
	#EF_ARM_APCS_26
 0x08

	)

2222 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2223 
	#EF_ARM_PIC
 0x20

	)

2224 
	#EF_ARM_ALIGN8
 0x40

	)

2225 
	#EF_ARM_NEW_ABI
 0x80

	)

2226 
	#EF_ARM_OLD_ABI
 0x100

	)

2227 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2228 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2229 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2234 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2235 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2236 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2237 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2240 
	#EF_ARM_BE8
 0x00800000

	)

2241 
	#EF_ARM_LE8
 0x00400000

	)

2243 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2244 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2245 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2246 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2247 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2248 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2249 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2252 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2253 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2256 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2257 
	#SHF_ARM_COMDEF
 0x80000000

	)

2261 
	#PF_ARM_SB
 0x10000000

	)

2263 
	#PF_ARM_PI
 0x20000000

	)

2264 
	#PF_ARM_ABS
 0x40000000

	)

2267 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2270 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2271 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2272 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2277 
	#R_ARM_NONE
 0

	)

2278 
	#R_ARM_PC24
 1

	)

2279 
	#R_ARM_ABS32
 2

	)

2280 
	#R_ARM_REL32
 3

	)

2281 
	#R_ARM_PC13
 4

	)

2282 
	#R_ARM_ABS16
 5

	)

2283 
	#R_ARM_ABS12
 6

	)

2284 
	#R_ARM_THM_ABS5
 7

	)

2285 
	#R_ARM_ABS8
 8

	)

2286 
	#R_ARM_SBREL32
 9

	)

2287 
	#R_ARM_THM_PC22
 10

	)

2288 
	#R_ARM_THM_PC8
 11

	)

2289 
	#R_ARM_AMP_VCALL9
 12

	)

2290 
	#R_ARM_SWI24
 13

	)

2291 
	#R_ARM_THM_SWI8
 14

	)

2292 
	#R_ARM_XPC25
 15

	)

2293 
	#R_ARM_THM_XPC22
 16

	)

2294 
	#R_ARM_TLS_DTPMOD32
 17

	)

2295 
	#R_ARM_TLS_DTPOFF32
 18

	)

2296 
	#R_ARM_TLS_TPOFF32
 19

	)

2297 
	#R_ARM_COPY
 20

	)

2298 
	#R_ARM_GLOB_DAT
 21

	)

2299 
	#R_ARM_JUMP_SLOT
 22

	)

2300 
	#R_ARM_RELATIVE
 23

	)

2301 
	#R_ARM_GOTOFF
 24

	)

2302 
	#R_ARM_GOTPC
 25

	)

2303 
	#R_ARM_GOT32
 26

	)

2304 
	#R_ARM_PLT32
 27

	)

2305 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2306 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2307 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2308 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2309 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2310 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2311 
	#R_ARM_GNU_VTENTRY
 100

	)

2312 
	#R_ARM_GNU_VTINHERIT
 101

	)

2313 
	#R_ARM_THM_PC11
 102

	)

2314 
	#R_ARM_THM_PC9
 103

	)

2315 
	#R_ARM_TLS_GD32
 104

	)

2317 
	#R_ARM_TLS_LDM32
 105

	)

2319 
	#R_ARM_TLS_LDO32
 106

	)

2321 
	#R_ARM_TLS_IE32
 107

	)

2323 
	#R_ARM_TLS_LE32
 108

	)

2325 
	#R_ARM_RXPC25
 249

	)

2326 
	#R_ARM_RSBREL32
 250

	)

2327 
	#R_ARM_THM_RPC22
 251

	)

2328 
	#R_ARM_RREL32
 252

	)

2329 
	#R_ARM_RABS22
 253

	)

2330 
	#R_ARM_RPC24
 254

	)

2331 
	#R_ARM_RBASE
 255

	)

2333 
	#R_ARM_NUM
 256

	)

2338 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2339 
	#EF_IA_64_ABI64
 0x00000010

	)

2340 
	#EF_IA_64_ARCH
 0xff000000

	)

2343 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2344 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2345 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2346 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2347 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2350 
	#PF_IA_64_NORECOV
 0x80000000

	)

2353 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2354 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2357 
	#SHF_IA_64_SHORT
 0x10000000

	)

2358 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2361 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2362 
	#DT_IA_64_NUM
 1

	)

2365 
	#R_IA64_NONE
 0x00

	)

2366 
	#R_IA64_IMM14
 0x21

	)

2367 
	#R_IA64_IMM22
 0x22

	)

2368 
	#R_IA64_IMM64
 0x23

	)

2369 
	#R_IA64_DIR32MSB
 0x24

	)

2370 
	#R_IA64_DIR32LSB
 0x25

	)

2371 
	#R_IA64_DIR64MSB
 0x26

	)

2372 
	#R_IA64_DIR64LSB
 0x27

	)

2373 
	#R_IA64_GPREL22
 0x2®

	)

2374 
	#R_IA64_GPREL64I
 0x2b

	)

2375 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2376 
	#R_IA64_GPREL32LSB
 0x2d

	)

2377 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2378 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2379 
	#R_IA64_LTOFF22
 0x32

	)

2380 
	#R_IA64_LTOFF64I
 0x33

	)

2381 
	#R_IA64_PLTOFF22
 0x3®

	)

2382 
	#R_IA64_PLTOFF64I
 0x3b

	)

2383 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2384 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2385 
	#R_IA64_FPTR64I
 0x43

	)

2386 
	#R_IA64_FPTR32MSB
 0x44

	)

2387 
	#R_IA64_FPTR32LSB
 0x45

	)

2388 
	#R_IA64_FPTR64MSB
 0x46

	)

2389 
	#R_IA64_FPTR64LSB
 0x47

	)

2390 
	#R_IA64_PCREL60B
 0x48

	)

2391 
	#R_IA64_PCREL21B
 0x49

	)

2392 
	#R_IA64_PCREL21M
 0x4®

	)

2393 
	#R_IA64_PCREL21F
 0x4b

	)

2394 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2395 
	#R_IA64_PCREL32LSB
 0x4d

	)

2396 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2397 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2398 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2399 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2400 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2401 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2402 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2403 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2404 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2405 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2406 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2407 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2408 
	#R_IA64_SECREL32MSB
 0x64

	)

2409 
	#R_IA64_SECREL32LSB
 0x65

	)

2410 
	#R_IA64_SECREL64MSB
 0x66

	)

2411 
	#R_IA64_SECREL64LSB
 0x67

	)

2412 
	#R_IA64_REL32MSB
 0x6¯

	)

2413 
	#R_IA64_REL32LSB
 0x6d

	)

2414 
	#R_IA64_REL64MSB
 0x6ê

	)

2415 
	#R_IA64_REL64LSB
 0x6‡

	)

2416 
	#R_IA64_LTV32MSB
 0x74

	)

2417 
	#R_IA64_LTV32LSB
 0x75

	)

2418 
	#R_IA64_LTV64MSB
 0x76

	)

2419 
	#R_IA64_LTV64LSB
 0x77

	)

2420 
	#R_IA64_PCREL21BI
 0x79

	)

2421 
	#R_IA64_PCREL22
 0x7®

	)

2422 
	#R_IA64_PCREL64I
 0x7b

	)

2423 
	#R_IA64_IPLTMSB
 0x80

	)

2424 
	#R_IA64_IPLTLSB
 0x81

	)

2425 
	#R_IA64_COPY
 0x84

	)

2426 
	#R_IA64_SUB
 0x85

	)

2427 
	#R_IA64_LTOFF22X
 0x86

	)

2428 
	#R_IA64_LDXMOV
 0x87

	)

2429 
	#R_IA64_TPREL14
 0x91

	)

2430 
	#R_IA64_TPREL22
 0x92

	)

2431 
	#R_IA64_TPREL64I
 0x93

	)

2432 
	#R_IA64_TPREL64MSB
 0x96

	)

2433 
	#R_IA64_TPREL64LSB
 0x97

	)

2434 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2435 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2436 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2437 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2438 
	#R_IA64_DTPREL14
 0xb1

	)

2439 
	#R_IA64_DTPREL22
 0xb2

	)

2440 
	#R_IA64_DTPREL64I
 0xb3

	)

2441 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2442 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2443 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2444 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2445 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2450 
	#R_SH_NONE
 0

	)

2451 
	#R_SH_DIR32
 1

	)

2452 
	#R_SH_REL32
 2

	)

2453 
	#R_SH_DIR8WPN
 3

	)

2454 
	#R_SH_IND12W
 4

	)

2455 
	#R_SH_DIR8WPL
 5

	)

2456 
	#R_SH_DIR8WPZ
 6

	)

2457 
	#R_SH_DIR8BP
 7

	)

2458 
	#R_SH_DIR8W
 8

	)

2459 
	#R_SH_DIR8L
 9

	)

2460 
	#R_SH_SWITCH16
 25

	)

2461 
	#R_SH_SWITCH32
 26

	)

2462 
	#R_SH_USES
 27

	)

2463 
	#R_SH_COUNT
 28

	)

2464 
	#R_SH_ALIGN
 29

	)

2465 
	#R_SH_CODE
 30

	)

2466 
	#R_SH_DATA
 31

	)

2467 
	#R_SH_LABEL
 32

	)

2468 
	#R_SH_SWITCH8
 33

	)

2469 
	#R_SH_GNU_VTINHERIT
 34

	)

2470 
	#R_SH_GNU_VTENTRY
 35

	)

2471 
	#R_SH_TLS_GD_32
 144

	)

2472 
	#R_SH_TLS_LD_32
 145

	)

2473 
	#R_SH_TLS_LDO_32
 146

	)

2474 
	#R_SH_TLS_IE_32
 147

	)

2475 
	#R_SH_TLS_LE_32
 148

	)

2476 
	#R_SH_TLS_DTPMOD32
 149

	)

2477 
	#R_SH_TLS_DTPOFF32
 150

	)

2478 
	#R_SH_TLS_TPOFF32
 151

	)

2479 
	#R_SH_GOT32
 160

	)

2480 
	#R_SH_PLT32
 161

	)

2481 
	#R_SH_COPY
 162

	)

2482 
	#R_SH_GLOB_DAT
 163

	)

2483 
	#R_SH_JMP_SLOT
 164

	)

2484 
	#R_SH_RELATIVE
 165

	)

2485 
	#R_SH_GOTOFF
 166

	)

2486 
	#R_SH_GOTPC
 167

	)

2488 
	#R_SH_NUM
 256

	)

2492 
	#R_390_NONE
 0

	)

2493 
	#R_390_8
 1

	)

2494 
	#R_390_12
 2

	)

2495 
	#R_390_16
 3

	)

2496 
	#R_390_32
 4

	)

2497 
	#R_390_PC32
 5

	)

2498 
	#R_390_GOT12
 6

	)

2499 
	#R_390_GOT32
 7

	)

2500 
	#R_390_PLT32
 8

	)

2501 
	#R_390_COPY
 9

	)

2502 
	#R_390_GLOB_DAT
 10

	)

2503 
	#R_390_JMP_SLOT
 11

	)

2504 
	#R_390_RELATIVE
 12

	)

2505 
	#R_390_GOTOFF32
 13

	)

2506 
	#R_390_GOTPC
 14

	)

2507 
	#R_390_GOT16
 15

	)

2508 
	#R_390_PC16
 16

	)

2509 
	#R_390_PC16DBL
 17

	)

2510 
	#R_390_PLT16DBL
 18

	)

2511 
	#R_390_PC32DBL
 19

	)

2512 
	#R_390_PLT32DBL
 20

	)

2513 
	#R_390_GOTPCDBL
 21

	)

2514 
	#R_390_64
 22

	)

2515 
	#R_390_PC64
 23

	)

2516 
	#R_390_GOT64
 24

	)

2517 
	#R_390_PLT64
 25

	)

2518 
	#R_390_GOTENT
 26

	)

2519 
	#R_390_GOTOFF16
 27

	)

2520 
	#R_390_GOTOFF64
 28

	)

2521 
	#R_390_GOTPLT12
 29

	)

2522 
	#R_390_GOTPLT16
 30

	)

2523 
	#R_390_GOTPLT32
 31

	)

2524 
	#R_390_GOTPLT64
 32

	)

2525 
	#R_390_GOTPLTENT
 33

	)

2526 
	#R_390_PLTOFF16
 34

	)

2527 
	#R_390_PLTOFF32
 35

	)

2528 
	#R_390_PLTOFF64
 36

	)

2529 
	#R_390_TLS_LOAD
 37

	)

2530 
	#R_390_TLS_GDCALL
 38

	)

2532 
	#R_390_TLS_LDCALL
 39

	)

2534 
	#R_390_TLS_GD32
 40

	)

2536 
	#R_390_TLS_GD64
 41

	)

2538 
	#R_390_TLS_GOTIE12
 42

	)

2540 
	#R_390_TLS_GOTIE32
 43

	)

2542 
	#R_390_TLS_GOTIE64
 44

	)

2544 
	#R_390_TLS_LDM32
 45

	)

2546 
	#R_390_TLS_LDM64
 46

	)

2548 
	#R_390_TLS_IE32
 47

	)

2550 
	#R_390_TLS_IE64
 48

	)

2552 
	#R_390_TLS_IEENT
 49

	)

2554 
	#R_390_TLS_LE32
 50

	)

2556 
	#R_390_TLS_LE64
 51

	)

2558 
	#R_390_TLS_LDO32
 52

	)

2560 
	#R_390_TLS_LDO64
 53

	)

2562 
	#R_390_TLS_DTPMOD
 54

	)

2563 
	#R_390_TLS_DTPOFF
 55

	)

2564 
	#R_390_TLS_TPOFF
 56

	)

2566 
	#R_390_20
 57

	)

2567 
	#R_390_GOT20
 58

	)

2568 
	#R_390_GOTPLT20
 59

	)

2569 
	#R_390_TLS_GOTIE20
 60

	)

2572 
	#R_390_NUM
 61

	)

2576 
	#R_CRIS_NONE
 0

	)

2577 
	#R_CRIS_8
 1

	)

2578 
	#R_CRIS_16
 2

	)

2579 
	#R_CRIS_32
 3

	)

2580 
	#R_CRIS_8_PCREL
 4

	)

2581 
	#R_CRIS_16_PCREL
 5

	)

2582 
	#R_CRIS_32_PCREL
 6

	)

2583 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2584 
	#R_CRIS_GNU_VTENTRY
 8

	)

2585 
	#R_CRIS_COPY
 9

	)

2586 
	#R_CRIS_GLOB_DAT
 10

	)

2587 
	#R_CRIS_JUMP_SLOT
 11

	)

2588 
	#R_CRIS_RELATIVE
 12

	)

2589 
	#R_CRIS_16_GOT
 13

	)

2590 
	#R_CRIS_32_GOT
 14

	)

2591 
	#R_CRIS_16_GOTPLT
 15

	)

2592 
	#R_CRIS_32_GOTPLT
 16

	)

2593 
	#R_CRIS_32_GOTREL
 17

	)

2594 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2595 
	#R_CRIS_32_PLT_PCREL
 19

	)

2597 
	#R_CRIS_NUM
 20

	)

2601 
	#R_X86_64_NONE
 0

	)

2602 
	#R_X86_64_64
 1

	)

2603 
	#R_X86_64_PC32
 2

	)

2604 
	#R_X86_64_GOT32
 3

	)

2605 
	#R_X86_64_PLT32
 4

	)

2606 
	#R_X86_64_COPY
 5

	)

2607 
	#R_X86_64_GLOB_DAT
 6

	)

2608 
	#R_X86_64_JUMP_SLOT
 7

	)

2609 
	#R_X86_64_RELATIVE
 8

	)

2610 
	#R_X86_64_GOTPCREL
 9

	)

2612 
	#R_X86_64_32
 10

	)

2613 
	#R_X86_64_32S
 11

	)

2614 
	#R_X86_64_16
 12

	)

2615 
	#R_X86_64_PC16
 13

	)

2616 
	#R_X86_64_8
 14

	)

2617 
	#R_X86_64_PC8
 15

	)

2618 
	#R_X86_64_DTPMOD64
 16

	)

2619 
	#R_X86_64_DTPOFF64
 17

	)

2620 
	#R_X86_64_TPOFF64
 18

	)

2621 
	#R_X86_64_TLSGD
 19

	)

2623 
	#R_X86_64_TLSLD
 20

	)

2625 
	#R_X86_64_DTPOFF32
 21

	)

2626 
	#R_X86_64_GOTTPOFF
 22

	)

2628 
	#R_X86_64_TPOFF32
 23

	)

2629 
	#R_X86_64_PC64
 24

	)

2630 
	#R_X86_64_GOTOFF64
 25

	)

2631 
	#R_X86_64_GOTPC32
 26

	)

2634 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

2635 
	#R_X86_64_TLSDESC_CALL
 35

	)

2637 
	#R_X86_64_TLSDESC
 36

	)

2638 
	#R_X86_64_IRELATIVE
 37

	)

2640 
	#R_X86_64_NUM
 38

	)

2644 
	#R_MN10300_NONE
 0

	)

2645 
	#R_MN10300_32
 1

	)

2646 
	#R_MN10300_16
 2

	)

2647 
	#R_MN10300_8
 3

	)

2648 
	#R_MN10300_PCREL32
 4

	)

2649 
	#R_MN10300_PCREL16
 5

	)

2650 
	#R_MN10300_PCREL8
 6

	)

2651 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2652 
	#R_MN10300_GNU_VTENTRY
 8

	)

2653 
	#R_MN10300_24
 9

	)

2654 
	#R_MN10300_GOTPC32
 10

	)

2655 
	#R_MN10300_GOTPC16
 11

	)

2656 
	#R_MN10300_GOTOFF32
 12

	)

2657 
	#R_MN10300_GOTOFF24
 13

	)

2658 
	#R_MN10300_GOTOFF16
 14

	)

2659 
	#R_MN10300_PLT32
 15

	)

2660 
	#R_MN10300_PLT16
 16

	)

2661 
	#R_MN10300_GOT32
 17

	)

2662 
	#R_MN10300_GOT24
 18

	)

2663 
	#R_MN10300_GOT16
 19

	)

2664 
	#R_MN10300_COPY
 20

	)

2665 
	#R_MN10300_GLOB_DAT
 21

	)

2666 
	#R_MN10300_JMP_SLOT
 22

	)

2667 
	#R_MN10300_RELATIVE
 23

	)

2669 
	#R_MN10300_NUM
 24

	)

2673 
	#R_M32R_NONE
 0

	)

2674 
	#R_M32R_16
 1

	)

2675 
	#R_M32R_32
 2

	)

2676 
	#R_M32R_24
 3

	)

2677 
	#R_M32R_10_PCREL
 4

	)

2678 
	#R_M32R_18_PCREL
 5

	)

2679 
	#R_M32R_26_PCREL
 6

	)

2680 
	#R_M32R_HI16_ULO
 7

	)

2681 
	#R_M32R_HI16_SLO
 8

	)

2682 
	#R_M32R_LO16
 9

	)

2683 
	#R_M32R_SDA16
 10

	)

2684 
	#R_M32R_GNU_VTINHERIT
 11

	)

2685 
	#R_M32R_GNU_VTENTRY
 12

	)

2687 
	#R_M32R_16_RELA
 33

	)

2688 
	#R_M32R_32_RELA
 34

	)

2689 
	#R_M32R_24_RELA
 35

	)

2690 
	#R_M32R_10_PCREL_RELA
 36

	)

2691 
	#R_M32R_18_PCREL_RELA
 37

	)

2692 
	#R_M32R_26_PCREL_RELA
 38

	)

2693 
	#R_M32R_HI16_ULO_RELA
 39

	)

2694 
	#R_M32R_HI16_SLO_RELA
 40

	)

2695 
	#R_M32R_LO16_RELA
 41

	)

2696 
	#R_M32R_SDA16_RELA
 42

	)

2697 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2698 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2699 
	#R_M32R_REL32
 45

	)

2701 
	#R_M32R_GOT24
 48

	)

2702 
	#R_M32R_26_PLTREL
 49

	)

2703 
	#R_M32R_COPY
 50

	)

2704 
	#R_M32R_GLOB_DAT
 51

	)

2705 
	#R_M32R_JMP_SLOT
 52

	)

2706 
	#R_M32R_RELATIVE
 53

	)

2707 
	#R_M32R_GOTOFF
 54

	)

2708 
	#R_M32R_GOTPC24
 55

	)

2709 
	#R_M32R_GOT16_HI_ULO
 56

	)

2711 
	#R_M32R_GOT16_HI_SLO
 57

	)

2713 
	#R_M32R_GOT16_LO
 58

	)

2714 
	#R_M32R_GOTPC_HI_ULO
 59

	)

2716 
	#R_M32R_GOTPC_HI_SLO
 60

	)

2718 
	#R_M32R_GOTPC_LO
 61

	)

2720 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

2722 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

2724 
	#R_M32R_GOTOFF_LO
 64

	)

2725 
	#R_M32R_NUM
 256

	)

2728 
	g__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/execinfo.h

19 #i‚de‡
_EXECINFO_H


20 
	#_EXECINFO_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


28 
	$backåa˚
 (**
__¨øy
, 
__size
Ë
	`__n⁄nuŒ
 ((1));

33 **
	$backåa˚_symbﬁs
 (*
__c⁄°
 *
__¨øy
, 
__size
)

34 
__THROW
 
	`__n⁄nuŒ
 ((1));

39 
	$backåa˚_symbﬁs_fd
 (*
__c⁄°
 *
__¨øy
, 
__size
, 
__fd
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1));

42 
__END_DECLS


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #ifde‡
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #i‚de‡
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifde‡
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

64 
f˙é
 (
__fd
, 
__cmd
, ...);

72 #i‚de‡
__USE_FILE_OFFSET64


73 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__REDIRECT


76 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

77 
	`__n⁄nuŒ
 ((1));

79 
	#›í
 
›í64


	)

82 #ifde‡
__USE_LARGEFILE64


83 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

86 #ifde‡
__USE_ATFILE


96 #i‚de‡
__USE_FILE_OFFSET64


97 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

98 
	`__n⁄nuŒ
 ((2));

100 #ifde‡
__REDIRECT


101 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

102 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

104 
	#›í©
 
›í©64


	)

108 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

109 
	`__n⁄nuŒ
 ((2));

117 #i‚de‡
__USE_FILE_OFFSET64


118 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

120 #ifde‡
__REDIRECT


121 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

122 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

124 
	#¸ót
 
¸ót64


	)

127 #ifde‡
__USE_LARGEFILE64


128 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

131 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

132 && !
deföed
 
__USE_POSIX
))

141 
	#F_ULOCK
 0

	)

142 
	#F_LOCK
 1

	)

143 
	#F_TLOCK
 2

	)

144 
	#F_TEST
 3

	)

146 #i‚de‡
__USE_FILE_OFFSET64


147 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

149 #ifde‡
__REDIRECT


150 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

152 
	#lockf
 
lockf64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

160 #ifde‡
__USE_XOPEN2K


163 #i‚de‡
__USE_FILE_OFFSET64


164 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

165 
__advi£
Ë
__THROW
;

167 #ifde‡
__REDIRECT_NTH


168 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

169 
__off64_t
 
__Àn
, 
__advi£
),

170 
posix_Ádvi£64
);

172 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

175 #ifde‡
__USE_LARGEFILE64


176 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

177 
__advi£
Ë
__THROW
;

185 #i‚de‡
__USE_FILE_OFFSET64


186 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

190 
__off64_t
 
__Àn
),

191 
posix_ÁŒoˇã64
);

193 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

196 #ifde‡
__USE_LARGEFILE64


197 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

203 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

204 && 
deföed
 
__va_¨g_∑ck_Àn


205 
	~<bôs/f˙é2.h
>

208 
__END_DECLS


	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

95 #unde‡
__USE_ISOC99


96 #unde‡
__USE_ISOC95


97 #unde‡
__USE_POSIX


98 #unde‡
__USE_POSIX2


99 #unde‡
__USE_POSIX199309


100 #unde‡
__USE_POSIX199506


101 #unde‡
__USE_XOPEN


102 #unde‡
__USE_XOPEN_EXTENDED


103 #unde‡
__USE_UNIX98


104 #unde‡
__USE_XOPEN2K


105 #unde‡
__USE_XOPEN2K8


106 #unde‡
__USE_LARGEFILE


107 #unde‡
__USE_LARGEFILE64


108 #unde‡
__USE_FILE_OFFSET64


109 #unde‡
__USE_BSD


110 #unde‡
__USE_SVID


111 #unde‡
__USE_MISC


112 #unde‡
__USE_ATFILE


113 #unde‡
__USE_GNU


114 #unde‡
__USE_REENTRANT


115 #unde‡
__USE_FORTIFY_LEVEL


116 #unde‡
__FAVOR_BSD


117 #unde‡
__KERNEL_STRICT_NAMES


121 #i‚de‡
_LOOSE_KERNEL_NAMES


122 
	#__KERNEL_STRICT_NAMES


	)

126 
	#__USE_ANSI
 1

	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

144 #i‡
deföed
 
_BSD_SOURCE
 && \

145 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

146 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

147 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

148 
	#__FAVOR_BSD
 1

	)

152 #ifde‡
_GNU_SOURCE


153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_POSIX_SOURCE


156 
	#_POSIX_SOURCE
 1

	)

157 #unde‡
_POSIX_C_SOURCE


158 
	#_POSIX_C_SOURCE
 200809L

	)

159 #unde‡
_XOPEN_SOURCE


160 
	#_XOPEN_SOURCE
 700

	)

161 #unde‡
_XOPEN_SOURCE_EXTENDED


162 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

163 #unde‡
_LARGEFILE64_SOURCE


164 
	#_LARGEFILE64_SOURCE
 1

	)

165 #unde‡
_BSD_SOURCE


166 
	#_BSD_SOURCE
 1

	)

167 #unde‡
_SVID_SOURCE


168 
	#_SVID_SOURCE
 1

	)

169 #unde‡
_ATFILE_SOURCE


170 
	#_ATFILE_SOURCE
 1

	)

175 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

176 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

177 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

178 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

179 
	#_BSD_SOURCE
 1

	)

180 
	#_SVID_SOURCE
 1

	)

187 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

188 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

189 
	#__USE_ISOC99
 1

	)

193 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

194 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

195 
	#__USE_ISOC95
 1

	)

200 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

201 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

202 
	#_POSIX_SOURCE
 1

	)

203 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

204 
	#_POSIX_C_SOURCE
 2

	)

205 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

206 
	#_POSIX_C_SOURCE
 199506L

	)

207 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

208 
	#_POSIX_C_SOURCE
 200112L

	)

210 
	#_POSIX_C_SOURCE
 200809L

	)

212 
	#__USE_POSIX_IMPLICITLY
 1

	)

215 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


216 
	#__USE_POSIX
 1

	)

219 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX2
 1

	)

223 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

224 
	#__USE_POSIX199309
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

228 
	#__USE_POSIX199506
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

232 
	#__USE_XOPEN2K
 1

	)

233 #unde‡
__USE_ISOC99


234 
	#__USE_ISOC99
 1

	)

237 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

238 
	#__USE_XOPEN2K8
 1

	)

239 #unde‡
_ATFILE_SOURCE


240 
	#_ATFILE_SOURCE
 1

	)

243 #ifdef 
_XOPEN_SOURCE


244 
	#__USE_XOPEN
 1

	)

245 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

246 
	#__USE_XOPEN_EXTENDED
 1

	)

247 
	#__USE_UNIX98
 1

	)

248 #unde‡
_LARGEFILE_SOURCE


249 
	#_LARGEFILE_SOURCE
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

252 
	#__USE_XOPEN2K8
 1

	)

254 
	#__USE_XOPEN2K
 1

	)

255 #unde‡
__USE_ISOC99


256 
	#__USE_ISOC99
 1

	)

259 #ifde‡
_XOPEN_SOURCE_EXTENDED


260 
	#__USE_XOPEN_EXTENDED
 1

	)

265 #ifde‡
_LARGEFILE_SOURCE


266 
	#__USE_LARGEFILE
 1

	)

269 #ifde‡
_LARGEFILE64_SOURCE


270 
	#__USE_LARGEFILE64
 1

	)

273 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

274 
	#__USE_FILE_OFFSET64
 1

	)

277 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


278 
	#__USE_MISC
 1

	)

281 #ifdef 
_BSD_SOURCE


282 
	#__USE_BSD
 1

	)

285 #ifdef 
_SVID_SOURCE


286 
	#__USE_SVID
 1

	)

289 #ifdef 
_ATFILE_SOURCE


290 
	#__USE_ATFILE
 1

	)

293 #ifdef 
_GNU_SOURCE


294 
	#__USE_GNU
 1

	)

297 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


298 
	#__USE_REENTRANT
 1

	)

301 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

302 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

303 #i‡
_FORTIFY_SOURCE
 > 1

304 
	#__USE_FORTIFY_LEVEL
 2

	)

306 
	#__USE_FORTIFY_LEVEL
 1

	)

309 
	#__USE_FORTIFY_LEVEL
 0

	)

313 
	~<bôs/¥edefs.h
>

316 
	#__STDC_ISO_10646__
 200009L

	)

324 #unde‡
__GNU_LIBRARY__


325 
	#__GNU_LIBRARY__
 6

	)

329 
	#__GLIBC__
 2

	)

330 
	#__GLIBC_MINOR__
 11

	)

332 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

333 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

336 #i‡
deföed
 
__GNUC__
 \

337 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

338 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

339 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

340 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

344 #i‚de‡
__ASSEMBLER__


345 #i‚de‡
_SYS_CDEFS_H


346 
	~<sys/cdefs.h
>

351 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


352 
	#__USE_LARGEFILE
 1

	)

353 
	#__USE_LARGEFILE64
 1

	)

359 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

360 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

361 && 
deföed
 
	g__exã∫_ölöe


362 
	#__USE_EXTERN_INLINES
 1

	)

367 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

368 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

369 && 
deföed
 
	g__exã∫_ölöe


370 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

378 
	~<gnu/°ubs.h
>

	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/link.h

21 #i‚def 
_LINK_H


22 
	#_LINK_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<ñf.h
>

26 
	~<dlf˙.h
>

27 
	~<sys/ty≥s.h
>

31 
	#ElfW
(
ty≥
Ë
	`_ElfW
 (
Elf
, 
__ELF_NATIVE_CLASS
,Åy≥)

	)

32 
	#_ElfW
(
e
,
w
,
t
Ë
	`_ElfW_1
 (e, w, 
_
##t)

	)

33 
	#_ElfW_1
(
e
,
w
,
t
Ëe##w##
	)
t

35 
	~<bôs/ñf˛ass.h
>

36 
	~<bôs/lök.h
>

43 
	sr_debug


45 
	mr_vîsi⁄
;

47 
lök_m≠
 *
	mr_m≠
;

54 
ElfW
(
Addr
Ë
	mr_brk
;

59 
	mRT_CONSISTENT
,

60 
	mRT_ADD
,

61 
	mRT_DELETE


62 } 
	mr_°©e
;

64 
ElfW
(
Addr
Ë
	mr_ldba£
;

68 
r_debug
 
_r_debug
;

77 
	$ElfW
(
Dyn
Ë
_DYNAMIC
[];

85 
	slök_m≠


90 
	`ElfW
(
Addr
Ë
l_addr
;

91 *
l_«me
;

92 
	`ElfW
(
Dyn
Ë*
l_ld
;

93 
lök_m≠
 *
l_√xt
, *
l_¥ev
;

96 #ifde‡
__USE_GNU


99 
	#LAV_CURRENT
 1

	)

104 
LA_ACT_CONSISTENT
,

105 
LA_ACT_ADD
,

106 
LA_ACT_DELETE


112 
LA_SER_ORIG
 = 0x01,

113 
LA_SER_LIBPATH
 = 0x02,

114 
LA_SER_RUNPATH
 = 0x04,

115 
LA_SER_CONFIG
 = 0x08,

116 
LA_SER_DEFAULT
 = 0x40,

117 
LA_SER_SECURE
 = 0x80

123 
LA_FLG_BINDTO
 = 0x01,

124 
LA_FLG_BINDFROM
 = 0x02

130 
LA_SYMB_NOPLTENTER
 = 0x01,

131 
LA_SYMB_NOPLTEXIT
 = 0x02,

132 
LA_SYMB_STRUCTCALL
 = 0x04,

133 
LA_SYMB_DLSYM
 = 0x08,

134 
LA_SYMB_ALTVALUE
 = 0x10

138 
	sdl_phdr_öfo


140 
	`ElfW
(
Addr
Ë
dÕi_addr
;

141 c⁄° *
dÕi_«me
;

142 c⁄° 
	`ElfW
(
Phdr
Ë*
dÕi_phdr
;

143 
	`ElfW
(
HÆf
Ë
dÕi_phnum
;

151 
dÕi_adds
;

153 
dÕi_subs
;

157 
size_t
 
dÕi_és_modid
;

162 *
dÕi_és_d©a
;

165 
__BEGIN_DECLS


167 
	`dl_ôî©e_phdr
 ((*
__ˇŒback
Ë(
dl_phdr_öfo
 *,

168 
size_t
, *),

169 *
__d©a
);

175 
	`œ_vîsi⁄
 (
__vîsi⁄
);

176 
	`œ_a˘ivôy
 (
uöçå_t
 *
__cookõ
, 
__Êag
);

177 *
	`œ_obj£¨ch
 (c⁄° *
__«me
, 
uöçå_t
 *
__cookõ
,

178 
__Êag
);

179 
	`œ_obj›í
 (
lök_m≠
 *
__m≠
, 
Lmid_t
 
__lmid
,

180 
uöçå_t
 *
__cookõ
);

181 
	`œ_¥eöô
 (
uöçå_t
 *
__cookõ
);

182 
uöçå_t
 
	`œ_symböd32
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

183 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

184 *
__Êags
, c⁄° *
__sym«me
);

185 
uöçå_t
 
	`œ_symböd64
 (
Elf64_Sym
 *
__sym
, 
__ndx
,

186 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

187 *
__Êags
, c⁄° *
__sym«me
);

188 
	`œ_obj˛o£
 (
uöçå_t
 *
__cookõ
);

190 
__END_DECLS


	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 132640

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

42 
	#__MALLOC_P
(
¨gs
Ë
	)
args

43 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

48 
__BEGIN_DECLS


51 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

54 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

55 
__©åibuã_mÆloc__
 
__wur
;

62 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

63 
__©åibuã_w¨n_unu£d_ªsu…__
;

66 
‰ì
 
__MALLOC_P
 ((*
__±r
));

69 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

72 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

73 
__©åibuã_mÆloc__
 
__wur
;

76 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

77 
__©åibuã_mÆloc__
 
__wur
;

81 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

82 
__©åibuã_mÆloc__
 
__wur
;

86 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

89 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

90 
__©åibuã_mÆloc__
;

94 
	smÆlöfo
 {

95 
	m¨ía
;

96 
	m‹dblks
;

97 
	msmblks
;

98 
	mhblks
;

99 
	mhblkhd
;

100 
	musmblks
;

101 
	mfsmblks
;

102 
	mu‹dblks
;

103 
	mf‹dblks
;

104 
	mkìpco°
;

108 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

111 #i‚de‡
M_MXFAST


112 
	#M_MXFAST
 1

	)

114 #i‚de‡
M_NLBLKS


115 
	#M_NLBLKS
 2

	)

117 #i‚de‡
M_GRAIN


118 
	#M_GRAIN
 3

	)

120 #i‚de‡
M_KEEP


121 
	#M_KEEP
 4

	)

125 
	#M_TRIM_THRESHOLD
 -1

	)

126 
	#M_TOP_PAD
 -2

	)

127 
	#M_MMAP_THRESHOLD
 -3

	)

128 
	#M_MMAP_MAX
 -4

	)

129 
	#M_CHECK_ACTION
 -5

	)

130 
	#M_PERTURB
 -6

	)

131 
	#M_ARENA_TEST
 -7

	)

132 
	#M_ARENA_MAX
 -8

	)

135 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

139 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

143 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

146 
mÆloc_°©s
 
__MALLOC_P
 (());

149 
mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
);

152 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

156 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

161 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

163 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

164 
__c⁄°
 
__mÆloc_±r_t
));

165 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

166 
__c⁄°
 
__mÆloc_±r_t
));

167 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

168 
__c⁄°
 
__mÆloc_±r_t
));

169 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

170 
size_t
 
__size
,

171 
__c⁄°
 
__mÆloc_±r_t
));

172 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

175 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

178 
__END_DECLS


	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bôs/±hªadty≥s.h
>

31 
	~<bôs/£tjmp.h
>

32 
	~<bôs/w‹dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifde‡
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifde‡
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifde‡
__USE_XOPEN2K


70 
	mPTHREAD_MUTEX_STALLED
,

71 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_ROBUST
,

73 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


78 #ifde‡
__USE_UNIX98


82 
	mPTHREAD_PRIO_NONE
,

83 
	mPTHREAD_PRIO_INHERIT
,

84 
	mPTHREAD_PRIO_PROTECT


90 #i‡
__WORDSIZE
 == 64

91 
	#PTHREAD_MUTEX_INITIALIZER
 \

92 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

93 #ifde‡
__USE_GNU


94 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

102 
	#PTHREAD_MUTEX_INITIALIZER
 \

103 { { 0, 0, 0, 0, 0, { 0 } } }

	)

104 #ifde‡
__USE_GNU


105 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

109 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

110 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

116 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


119 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

121 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

122 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 
	#PTHREAD_RWLOCK_INITIALIZER
 \

127 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

128 #ifde‡
__USE_GNU


129 #i‡
__WORDSIZE
 == 64

130 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

132 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

134 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

136 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

137 0, 0, 0, 0 } }

	)

139 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

141 0 } }

	)

151 
	mPTHREAD_INHERIT_SCHED
,

152 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

153 
	mPTHREAD_EXPLICIT_SCHED


154 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

161 
	mPTHREAD_SCOPE_SYSTEM
,

162 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

163 
	mPTHREAD_SCOPE_PROCESS


164 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

171 
	mPTHREAD_PROCESS_PRIVATE
,

172 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

173 
	mPTHREAD_PROCESS_SHARED


174 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

180 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

184 
	s_±hªad_˛ónup_buf„r


186 (*
	m__routöe
) (*);

187 *
	m__¨g
;

188 
	m__ˇn˚…y≥
;

189 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

195 
	mPTHREAD_CANCEL_ENABLE
,

196 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

197 
	mPTHREAD_CANCEL_DISABLE


198 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

202 
	mPTHREAD_CANCEL_DEFERRED
,

203 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

204 
	mPTHREAD_CANCEL_ASYNCHRONOUS


205 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

207 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

211 
	#PTHREAD_ONCE_INIT
 0

	)

214 #ifde‡
__USE_XOPEN2K


218 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

222 
__BEGIN_DECLS


227 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

228 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

229 *(*
__°¨t_routöe
) (*),

230 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

236 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

244 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

246 #ifde‡
__USE_GNU


249 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

257 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

258 
__c⁄°
 
time•ec
 *
__ab°ime
);

265 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

269 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

272 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

280 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

283 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

288 *
__dëach°©e
)

289 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

292 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

293 
__dëach°©e
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

299 
size_t
 *
__gu¨dsize
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

303 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

304 
size_t
 
__gu¨dsize
)

305 
__THROW
 
	`__n⁄nuŒ
 ((1));

309 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


310 
__©å
,

311 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

315 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


317 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


321 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1));

329 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


330 
__©å
, *
__ª°ri˘
 
__öhîô
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

334 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

335 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

341 *
__ª°ri˘
 
__sc›e
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

345 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1));

349 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


350 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

357 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

358 *
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


363 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

369 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

370 
size_t
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1));

373 #ifde‡
__USE_XOPEN2K


375 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

376 **
__ª°ri˘
 
__°ackaddr
,

377 
size_t
 *
__ª°ri˘
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

383 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

384 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

387 #ifde‡
__USE_GNU


390 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

391 
size_t
 
__˝u£tsize
,

392 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

397 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

406 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

407 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

416 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

417 
__THROW
 
	`__n⁄nuŒ
 ((3));

420 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

421 *
__ª°ri˘
 
__pﬁicy
,

422 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

423 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

426 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

427 
__THROW
;

430 #ifde‡
__USE_UNIX98


432 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

435 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

438 #ifde‡
__USE_GNU


443 
	$±hªad_yõld
 (Ë
__THROW
;

448 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

449 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

450 
__THROW
 
	`__n⁄nuŒ
 ((3));

453 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

454 
˝u_£t_t
 *
__˝u£t
)

455 
__THROW
 
	`__n⁄nuŒ
 ((3));

468 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

469 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

480 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

484 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

487 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

492 
	`±hªad_ã°ˇn˚l
 ();

501 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

502 
__mask_was_ßved
;

503 } 
__ˇn˚l_jmp_buf
[1];

504 *
__∑d
[4];

505 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

508 #i‚de‡
__˛ónup_f˘_©åibuã


509 
	#__˛ónup_f˘_©åibuã


	)

514 
	s__±hªad_˛ónup_‰ame


516 (*
__ˇn˚l_routöe
) (*);

517 *
__ˇn˚l_¨g
;

518 
__do_ô
;

519 
__ˇn˚l_ty≥
;

522 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


523 #ifde‡
__˝lu•lus


525 ˛as†
	c__±hªad_˛ónup_˛ass


527 (*
__ˇn˚l_routöe
) (*);

528 *
__ˇn˚l_¨g
;

529 
__do_ô
;

530 
__ˇn˚l_ty≥
;

532 
public
:

533 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

534 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

535 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

536 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

537 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

538 &
__ˇn˚l_ty≥
); 
	}
}

539 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

549 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

551 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

555 
	#±hªad_˛ónup_p›
(
execuã
) \

556 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

557 } 0)

	)

559 #ifde‡
__USE_GNU


563 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

565 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

566 
__˛‰ame
.
	`__de„r
 ()

	)

571 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

572 
__˛‰ame
.
	`__ª°‹e
 (); \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

581 
__exã∫_ölöe
 

582 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

584 i‡(
__‰ame
->
__do_ô
)

585 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

586 
	}
}

595 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

597 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

598 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

599 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

600 .
__do_ô
 = 1 };

	)

604 
	#±hªad_˛ónup_p›
(
execuã
) \

605 
__˛‰ame
.
__do_ô
 = (
execuã
); \

606 } 0)

	)

608 #ifde‡
__USE_GNU


612 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 }; \

618 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

619 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

624 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

625 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

626 
__˛‰ame
.
__do_ô
 = (
execuã
); \

627 } 0)

	)

638 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

640 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

641 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

642 *
__ˇn˚l_¨g
 = (
¨g
); \

643 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

644 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

645 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

647 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

648 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

652 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

653 dÿ{

	)

654 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

655 
__˛ónup_f˘_©åibuã
;

659 
	#±hªad_˛ónup_p›
(
execuã
) \

662 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 i‡(
execuã
) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 } 0)

	)

666 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

667 
__˛ónup_f˘_©åibuã
;

669 #ifde‡
__USE_GNU


673 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

675 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

676 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

677 *
__ˇn˚l_¨g
 = (
¨g
); \

678 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

679 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

680 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

682 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

683 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

687 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

688 dÿ{

	)

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

690 
__˛ónup_f˘_©åibuã
;

695 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

698 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

699 i‡(
execuã
) \

700 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

701 
	}
} 0)

	)

702 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

703 
__˛ónup_f˘_©åibuã
;

707 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

708 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

709 #i‚de‡
SHARED


710 
	`__©åibuã__
 ((
__wók__
))

716 
__jmp_buf_èg
;

717 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

723 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

724 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1));

728 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

729 
__THROW
 
	`__n⁄nuŒ
 ((1));

732 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

733 
__THROW
 
	`__n⁄nuŒ
 ((1));

736 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

737 
__THROW
 
	`__n⁄nuŒ
 ((1));

739 #ifde‡
__USE_XOPEN2K


741 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

742 
__c⁄°
 
time•ec
 *
__ª°ri˘


743 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

747 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

748 
__THROW
 
	`__n⁄nuŒ
 ((1));

751 #ifde‡
__USE_UNIX98


753 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

754 
__ª°ri˘
 
__muãx
,

755 *
__ª°ri˘
 
__¥io˚ûög
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

760 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

761 
__¥io˚ûög
,

762 *
__ª°ri˘
 
__ﬁd_˚ûög
)

763 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

767 #ifde‡
__USE_XOPEN2K8


769 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1));

771 #ifde‡
__USE_GNU


772 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

773 
__THROW
 
	`__n⁄nuŒ
 ((1));

782 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

791 
__ª°ri˘
 
__©å
,

792 *
__ª°ri˘
 
__psh¨ed
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

797 
__psh¨ed
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

800 #ifde‡
__USE_UNIX98


802 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


803 
__©å
, *
__ª°ri˘
 
__köd
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

809 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1));

813 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

814 
__ª°ri˘
 
__©å
,

815 *
__ª°ri˘
 
__¥Ÿocﬁ
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__¥Ÿocﬁ
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__¥io˚ûög
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__¥io˚ûög
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

836 #ifde‡
__USE_XOPEN2K


838 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

839 *
__robu°√ss
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

841 #ifde‡
__USE_GNU


842 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

843 *
__robu°√ss
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

849 
__robu°√ss
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_GNU


852 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

853 
__robu°√ss
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


864 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

865 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


866 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

870 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 #ifde‡
__USE_XOPEN2K


882 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

883 
__c⁄°
 
time•ec
 *
__ª°ri˘


884 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

888 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 
__c⁄°
 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROW
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

911 
__THROW
 
	`__n⁄nuŒ
 ((1));

914 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

915 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

919 
__ª°ri˘
 
__©å
,

920 *
__ª°ri˘
 
__psh¨ed
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

924 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

925 
__psh¨ed
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

930 
__ª°ri˘
 
__©å
,

931 *
__ª°ri˘
 
__¥ef
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

935 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

936 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

945 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


946 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

954 
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

967 
	`__n⁄nuŒ
 ((1, 2));

976 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

977 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

978 
__c⁄°
 
time•ec
 *
__ª°ri˘


979 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

984 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

989 
__THROW
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

993 
__ª°ri˘
 
__©å
,

994 *
__ª°ri˘
 
__psh¨ed
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

998 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

999 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1001 #ifde‡
__USE_XOPEN2K


1003 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1004 
__ª°ri˘
 
__©å
,

1005 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1009 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1010 
__˛ockid_t
 
__˛ock_id
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1015 #ifde‡
__USE_XOPEN2K


1020 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1045 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1046 
__©å
, 
__cou¡
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1051 
__THROW
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1064 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1068 
__ª°ri˘
 
__©å
,

1069 *
__ª°ri˘
 
__psh¨ed
)

1070 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1073 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1074 
__psh¨ed
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1088 (*
__de°r_fun˘i⁄
) (*))

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1095 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1098 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1099 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1102 #ifde‡
__USE_XOPEN2K


1104 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1105 
__˛ockid_t
 *
__˛ock_id
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((2));

1121 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1122 (*
__∑ª¡
) (),

1123 (*
__chûd
Ë()Ë
__THROW
;

1126 #ifde‡
__USE_EXTERN_INLINES


1128 
__exã∫_ölöe
 

1129 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1131  
__thªad1
 =
__thªad2
;

1132 
	}
}

1135 
	g__END_DECLS


	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bôs/sched.h
>

37 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

40 
__BEGIN_DECLS


43 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

44 
__THROW
;

47 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

50 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

51 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

54 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

57 
	$sched_yõld
 (Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

66 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

73 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

74 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

75 
˝u£ç
)

	)

76 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

77 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

80 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

81 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

86 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

87 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

105 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

106 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

110 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

111 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

114 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

115 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

118 
__END_DECLS


	@/usr/include/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


20 
	#_SEMAPHORE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 #ifde‡
__USE_XOPEN2K


25 
	#__√ed_time•ec


	)

26 
	~<time.h
>

30 
	~<bôs/£m≠h‹e.h
>

33 
__BEGIN_DECLS


37 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

38 
__THROW
;

40 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

43 
£m_t
 *
	$£m_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...Ë
__THROW
;

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

49 
	$£m_u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
;

55 
	`£m_waô
 (
£m_t
 *
__£m
);

57 #ifde‡
__USE_XOPEN2K


62 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

63 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

67 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROW
;

70 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROW
;

73 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

74 
__THROW
;

77 
__END_DECLS


	@/usr/include/setjmp.h

23 #i‚def 
_SETJMP_H


24 
	#_SETJMP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/sig£t.h
>

35 
	s__jmp_buf_èg


41 
__jmp_buf
 
	m__jmpbuf
;

42 
	m__mask_was_ßved
;

43 
__sig£t_t
 
	m__ßved_mask
;

47 
__BEGIN_NAMESPACE_STD


49 
__jmp_buf_èg
 
	tjmp_buf
[1];

53 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROW
;

55 
__END_NAMESPACE_STD


60 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROW
;

62 #i‚def 
__FAVOR_BSD


65 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROW
;

69 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

74 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

78 
__BEGIN_NAMESPACE_STD


82 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_NAMESPACE_STD


87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


91 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

92 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

96 #ifdef 
__USE_POSIX


100 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

104 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

110 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

111 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

116 #i‡
__USE_FORTIFY_LEVEL
 > 0

117 
	~<bôs/£tjmp2.h
>

120 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #ifde‡
__USE_XOPEN


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifde‡
__USE_XOPEN


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

89 
__BEGIN_NAMESPACE_STD


90 #i‚de‡
__USE_FILE_OFFSET64


91 
_G_Âos_t
 
	tÂos_t
;

93 
_G_Âos64_t
 
	tÂos_t
;

95 
__END_NAMESPACE_STD


96 #ifde‡
__USE_LARGEFILE64


97 
_G_Âos64_t
 
	tÂos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #i‚de‡
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #i‚de‡
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


128 
	#P_tmpdú
 "/tmp"

	)

141 
	~<bôs/°dio_lim.h
>

145 
_IO_FILE
 *
°dö
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dîr
;

149 
	#°dö
 
°dö


	)

150 
	#°dout
 
°dout


	)

151 
	#°dîr
 
°dîr


	)

153 
__BEGIN_NAMESPACE_STD


155 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

157 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

158 
__END_NAMESPACE_STD


160 #ifde‡
__USE_ATFILE


162 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

163 
__c⁄°
 *
__√w
Ë
__THROW
;

166 
__BEGIN_NAMESPACE_STD


171 #i‚de‡
__USE_FILE_OFFSET64


172 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

174 #ifde‡
__REDIRECT


175 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

177 
	#tmpfûe
 
tmpfûe64


	)

181 #ifde‡
__USE_LARGEFILE64


182 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

186 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

187 
__END_NAMESPACE_STD


189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

209 
__BEGIN_NAMESPACE_STD


214 
	`f˛o£
 (
FILE
 *
__°ªam
);

219 
	`fÊush
 (
FILE
 *
__°ªam
);

220 
__END_NAMESPACE_STD


222 #ifde‡
__USE_MISC


229 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_GNU


239 
	`f˛o£Æl
 ();

243 
__BEGIN_NAMESPACE_STD


244 #i‚de‡
__USE_FILE_OFFSET64


249 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

250 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

255 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

256 
__c⁄°
 *
__ª°ri˘
 
__modes
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

259 #ifde‡
__REDIRECT


260 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

261 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

262 
__wur
;

263 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

264 
__c⁄°
 *
__ª°ri˘
 
__modes
,

265 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

266 
__wur
;

268 
	#f›í
 
f›í64


	)

269 
	#‰e›í
 
‰e›í64


	)

272 
__END_NAMESPACE_STD


273 #ifde‡
__USE_LARGEFILE64


274 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

275 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

276 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

277 
__c⁄°
 *
__ª°ri˘
 
__modes
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifdef 
__USE_POSIX


283 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

286 #ifdef 
__USE_GNU


289 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

290 
__c⁄°
 *
__ª°ri˘
 
__modes
,

291 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

294 #ifde‡
__USE_XOPEN2K8


296 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

297 
__THROW
 
__wur
;

302 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

306 
__BEGIN_NAMESPACE_STD


309 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

313 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

314 
__modes
, 
size_t
 
__n
Ë
__THROW
;

315 
__END_NAMESPACE_STD


317 #ifdef 
__USE_BSD


320 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

321 
size_t
 
__size
Ë
__THROW
;

324 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

328 
__BEGIN_NAMESPACE_STD


333 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

334 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

339 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

341 
	$•rötf
 (*
__ª°ri˘
 
__s
,

342 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

348 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

349 
_G_va_li°
 
__¨g
);

354 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

356 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

357 
_G_va_li°
 
__¨g
Ë
__THROW
;

358 
__END_NAMESPACE_STD


360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


361 
__BEGIN_NAMESPACE_C99


363 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

365 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

367 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

368 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

369 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

370 
__END_NAMESPACE_C99


373 #ifde‡
__USE_GNU


376 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

377 
_G_va_li°
 
__¨g
)

378 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

379 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

380 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

381 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

382 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

383 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

384 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

387 #ifde‡
__USE_XOPEN2K8


394 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

395 
_G_va_li°
 
__¨g
)

396 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

397 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

398 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

402 
__BEGIN_NAMESPACE_STD


407 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

413 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

415 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

416 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

418 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

419 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

420 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

421 #ifde‡
__REDIRECT


425 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

427 
__isoc99_fsˇnf
Ë
__wur
;

428 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

429 
__isoc99_sˇnf
Ë
__wur
;

430 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

431 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

432 
__isoc99_ssˇnf
Ë
__THROW
;

434 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

436 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

439 
	#fsˇnf
 
__isoc99_fsˇnf


	)

440 
	#sˇnf
 
__isoc99_sˇnf


	)

441 
	#ssˇnf
 
__isoc99_ssˇnf


	)

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_ISOC99


448 
__BEGIN_NAMESPACE_C99


453 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

454 
_G_va_li°
 
__¨g
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

461 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

462 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

465 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

466 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

467 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

469 #i‡!
deföed
 
__USE_GNU
 \

470 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

471 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

472 #ifde‡
__REDIRECT


476 
	`__REDIRECT
 (
vfsˇnf
,

477 (
FILE
 *
__ª°ri˘
 
__s
,

478 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

479 
__isoc99_vfsˇnf
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

482 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vssˇnf
,

485 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

487 
__isoc99_vssˇnf
)

488 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

490 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

491 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

492 
_G_va_li°
 
__¨g
Ë
__wur
;

493 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

494 
_G_va_li°
 
__¨g
Ë
__wur
;

495 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

496 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

497 
_G_va_li°
 
__¨g
Ë
__THROW
;

498 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

499 
	#vsˇnf
 
__isoc99_vsˇnf


	)

500 
	#vssˇnf
 
__isoc99_vssˇnf


	)

504 
__END_NAMESPACE_C99


508 
__BEGIN_NAMESPACE_STD


513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

521 
__END_NAMESPACE_STD


525 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

527 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


532 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

533 
	`gëch¨_u∆ocked
 ();

536 #ifde‡
__USE_MISC


543 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

547 
__BEGIN_NAMESPACE_STD


555 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

562 
	`putch¨
 (
__c
);

563 
__END_NAMESPACE_STD


567 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

569 #ifde‡
__USE_MISC


576 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

579 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


584 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

585 
	`putch¨_u∆ocked
 (
__c
);

589 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

590 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

592 
	`gëw
 (
FILE
 *
__°ªam
);

595 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

599 
__BEGIN_NAMESPACE_STD


604 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

605 
__wur
;

612 *
	$gës
 (*
__s
Ë
__wur
;

613 
__END_NAMESPACE_STD


615 #ifde‡
__USE_GNU


622 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

623 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

627 #ifdef 
__USE_XOPEN2K8


638 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

639 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

640 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

641 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

642 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

652 
size_t
 *
__ª°ri˘
 
__n
,

653 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

657 
__BEGIN_NAMESPACE_STD


662 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

668 
	`puts
 (
__c⁄°
 *
__s
);

675 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

682 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

683 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

688 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

689 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

690 
__END_NAMESPACE_STD


692 #ifde‡
__USE_GNU


699 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

700 
FILE
 *
__ª°ri˘
 
__°ªam
);

703 #ifde‡
__USE_MISC


710 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

717 
__BEGIN_NAMESPACE_STD


722 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

727 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

732 
	`ªwöd
 (
FILE
 *
__°ªam
);

733 
__END_NAMESPACE_STD


740 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


741 #i‚de‡
__USE_FILE_OFFSET64


746 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

751 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

753 #ifde‡
__REDIRECT


754 
	`__REDIRECT
 (
f£eko
,

755 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

756 
f£eko64
);

757 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

759 
	#f£eko
 
f£eko64


	)

760 
	#·ñlo
 
·ñlo64


	)

765 
__BEGIN_NAMESPACE_STD


766 #i‚de‡
__USE_FILE_OFFSET64


771 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

776 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

778 #ifde‡
__REDIRECT


779 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

780 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

781 
	`__REDIRECT
 (
f£ços
,

782 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

784 
	#fgëpos
 
fgëpos64


	)

785 
	#f£ços
 
f£ços64


	)

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_LARGEFILE64


791 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

792 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

793 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

794 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

797 
__BEGIN_NAMESPACE_STD


799 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

801 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

803 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
__END_NAMESPACE_STD


806 #ifde‡
__USE_MISC


808 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

809 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

810 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

814 
__BEGIN_NAMESPACE_STD


819 
	`≥º‹
 (
__c⁄°
 *
__s
);

820 
__END_NAMESPACE_STD


826 
	~<bôs/sys_îæi°.h
>

829 #ifdef 
__USE_POSIX


831 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 #ifde‡
__USE_MISC


836 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

840 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

841 
deföed
 
__USE_MISC
)

846 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

852 
	`p˛o£
 (
FILE
 *
__°ªam
);

856 #ifdef 
__USE_POSIX


858 *
	$˘îmid
 (*
__s
Ë
__THROW
;

862 #ifde‡
__USE_XOPEN


864 *
	`cu£rid
 (*
__s
);

868 #ifdef 
__USE_GNU


869 
ob°ack
;

872 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

873 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

874 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

875 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

876 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

877 
_G_va_li°
 
__¨gs
)

878 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

882 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


886 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

890 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

893 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

896 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


900 
	#__√ed_gë›t


	)

901 
	~<gë›t.h
>

906 #ifde‡
__USE_EXTERN_INLINES


907 
	~<bôs/°dio.h
>

909 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


910 
	~<bôs/°dio2.h
>

912 #ifde‡
__LDBL_COMPAT


913 
	~<bôs/°dio-ldbl.h
>

916 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

519 #ifde‡
__USE_GNU


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #ifde‡
__USE_GNU


551 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

553 
__END_NAMESPACE_STD


555 #ifde‡
__USE_ISOC99


556 
__BEGIN_NAMESPACE_C99


559 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

560 
__END_NAMESPACE_C99


564 
__BEGIN_NAMESPACE_STD


566 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

567 
__END_NAMESPACE_STD


571 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


604 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

614 #i‚de‡
__USE_FILE_OFFSET64


615 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__REDIRECT


618 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

619 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 
	#mk°emp
 
mk°emp64


	)

624 #ifde‡
__USE_LARGEFILE64


625 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

629 #ifde‡
__USE_MISC


636 #i‚de‡
__USE_FILE_OFFSET64


637 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

639 #ifde‡
__REDIRECT


640 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

641 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 
	#mk°emps
 
mk°emps64


	)

646 #ifde‡
__USE_LARGEFILE64


647 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

648 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

652 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


658 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

661 #ifde‡
__USE_GNU


668 #i‚de‡
__USE_FILE_OFFSET64


669 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

671 #ifde‡
__REDIRECT


672 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

673 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 
	#mko°emp
 
mko°emp64


	)

678 #ifde‡
__USE_LARGEFILE64


679 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‚de‡
__USE_FILE_OFFSET64


689 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

690 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #ifde‡
__REDIRECT


693 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

694 
__Êags
), 
mko°emps64
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 
	#mko°emps
 
mko°emps64


	)

700 #ifde‡
__USE_LARGEFILE64


701 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

702 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

707 
__BEGIN_NAMESPACE_STD


712 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

713 
__END_NAMESPACE_STD


716 #ifdef 
__USE_GNU


719 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

720 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


729 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

730 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

735 #i‚de‡
__COMPAR_FN_T


736 
	#__COMPAR_FN_T


	)

737 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

739 #ifdef 
__USE_GNU


740 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

743 #ifde‡
__USE_GNU


744 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

747 
__BEGIN_NAMESPACE_STD


750 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

751 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

752 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

756 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

757 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

758 #ifde‡
__USE_GNU


759 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

760 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

761 
	`__n⁄nuŒ
 ((1, 4));

766 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

767 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

768 
__END_NAMESPACE_STD


770 #ifde‡
__USE_ISOC99


771 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

772 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__BEGIN_NAMESPACE_STD


780 
div_t
 
	$div
 (
__numî
, 
__díom
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

782 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

783 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__END_NAMESPACE_STD


786 #ifde‡
__USE_ISOC99


787 
__BEGIN_NAMESPACE_C99


788 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

789 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
__END_NAMESPACE_C99


795 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


802 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

808 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

815 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

818 #ifde‡
__USE_MISC


820 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

821 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

822 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

824 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

826 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

832 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

833 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

834 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

835 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

836 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

837 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

839 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

840 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

841 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

842 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

843 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

844 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

845 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

846 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
__BEGIN_NAMESPACE_STD


854 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

857 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

858 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

861 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

865 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

866 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

868 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

869 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

870 
__THROW
;

871 
__END_NAMESPACE_STD


874 #ifde‡
__USE_SVID


879 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 #ifde‡
__USE_XOPEN_EXTENDED


890 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

891 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

892 **
__ª°ri˘
 
__vÆuï
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

897 #ifde‡
__USE_XOPEN


899 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

910 #ifde‡
__USE_XOPEN


915 
	$gø¡±
 (
__fd
Ë
__THROW
;

919 
	$u∆ock±
 (
__fd
Ë
__THROW
;

924 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

927 #ifde‡
__USE_GNU


931 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

932 
__THROW
 
	`__n⁄nuŒ
 ((2));

935 
	`gë±
 ();

938 #ifde‡
__USE_BSD


942 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

943 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


949 
	~<bôs/°dlib.h
>

951 #ifde‡
__LDBL_COMPAT


952 
	~<bôs/°dlib-ldbl.h
>

956 #unde‡
__√ed_mÆloc_™d_ˇŒoc


958 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

41 
__BEGIN_NAMESPACE_STD


43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

44 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

45 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

49 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 
__END_NAMESPACE_STD


55 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


56 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
__c
, 
size_t
 
__n
)

58 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

62 
__BEGIN_NAMESPACE_STD


64 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

67 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

68 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

71 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


74 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__OPTIMIZE__


80 
__exã∫_Æways_ölöe
 *

81 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


83  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

86 
__exã∫_Æways_ölöe
 
__c⁄°
 *

87 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


89  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

92 
	}
}

94 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

95 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

97 
__END_NAMESPACE_STD


99 #ifde‡
__USE_GNU


102 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


103 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

113 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


114 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

116 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

119 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

120 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 
__BEGIN_NAMESPACE_STD


127 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

131 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

132 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

135 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

138 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

139 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

142 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

143 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

145 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

149 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

150 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

152 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

153 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((2));

155 
__END_NAMESPACE_STD


157 #ifde‡
__USE_XOPEN2K8


161 
	~<xloˇÀ.h
>

164 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

165 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

167 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

168 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

171 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


173 *
	$°rdup
 (
__c⁄°
 *
__s
)

174 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

180 #i‡
deföed
 
__USE_XOPEN2K8


181 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

182 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

185 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


187 
	#°rdu∑
(
s
) \

188 (
__exãnsi⁄__
 \

190 
__c⁄°
 *
__ﬁd
 = (
s
); \

191 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

192 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

193 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

194 
	}
}))

	)

197 
	#°∫du∑
(
s
, 
n
) \

198 (
__exãnsi⁄__
 \

200 
__c⁄°
 *
__ﬁd
 = (
s
); \

201 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

202 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

203 
__√w
[
__Àn
] = '\0'; \

204 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

205 }))

	)

208 
	g__BEGIN_NAMESPACE_STD


210 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


213 *
°rchr
 (*
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

215 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 #ifde‡
__OPTIMIZE__


219 
__exã∫_Æways_ölöe
 *

220 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


222  
__buûtö_°rchr
 (
__s
, 
__c
);

225 
__exã∫_Æways_ölöe
 
__c⁄°
 *

226 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


228  
__buûtö_°rchr
 (
__s
, 
__c
);

233 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

234 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


240 *
	`°ºchr
 (*
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

242 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 #ifde‡
__OPTIMIZE__


246 
__exã∫_Æways_ölöe
 *

247 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


249  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

252 
__exã∫_Æways_ölöe
 
__c⁄°
 *

253 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


255  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

258 
	}
}

260 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

261 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 
__END_NAMESPACE_STD


265 #ifde‡
__USE_GNU


268 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


269 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

271 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

275 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

279 
__BEGIN_NAMESPACE_STD


282 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

283 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

286 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


292 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

294 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__OPTIMIZE__


298 
__exã∫_Æways_ölöe
 *

299 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


301  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

304 
__exã∫_Æways_ölöe
 
__c⁄°
 *

305 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


307  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

310 
	}
}

312 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

313 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

316 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


319 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

321 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

322 
__c⁄°
 *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

325 #ifde‡
__OPTIMIZE__


326 
__exã∫_Æways_ölöe
 *

327 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


329  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

332 
__exã∫_Æways_ölöe
 
__c⁄°
 *

333 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


335  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

338 
	}
}

340 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2));

348 
__END_NAMESPACE_STD


352 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

353 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

354 **
__ª°ri˘
 
__ßve_±r
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

356 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


357 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

358 **
__ª°ri˘
 
__ßve_±r
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

362 #ifde‡
__USE_GNU


364 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


365 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

367 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

368 
__c⁄°
 *
__√edÀ
)

369 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

371 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

372 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 #ifde‡
__USE_GNU


380 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

381 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

386 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

387 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

389 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

390 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

395 
__BEGIN_NAMESPACE_STD


397 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

399 
__END_NAMESPACE_STD


401 #ifdef 
__USE_XOPEN2K8


404 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

405 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

409 
__BEGIN_NAMESPACE_STD


411 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

412 
__END_NAMESPACE_STD


413 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


421 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


424 #ifde‡
__REDIRECT_NTH


425 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

426 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

427 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

429 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

430 
__THROW
 
	`__n⁄nuŒ
 ((2));

431 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

436 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 #ifde‡
__USE_XOPEN2K8


443 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

449 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

451 #ifde‡
__USE_BSD


453 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

454 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

460 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

461 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


467 *
	`ödex
 (*
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

472 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


473 
__exã∫_Æways_ölöe
 *

474 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


476  
	`__buûtö_ödex
 (
__s
, 
__c
);

479 
__exã∫_Æways_ölöe
 
__c⁄°
 *

480 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


482  
	`__buûtö_ödex
 (
__s
, 
__c
);

485 
	}
}

487 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

488 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

492 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


495 *
	`rödex
 (*
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

500 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


501 
__exã∫_Æways_ölöe
 *

502 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


504  
	`__buûtö_rödex
 (
__s
, 
__c
);

507 
__exã∫_Æways_ölöe
 
__c⁄°
 *

508 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


510  
	`__buûtö_rödex
 (
__s
, 
__c
);

513 
	}
}

515 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

516 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

521 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifdef 
__USE_GNU


526 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifde‡
__GNUC__


528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/elf.h

19 #i‚de‡
_SYS_ELF_H


20 
	#_SYS_ELF_H
 1

	)

24 
	~<sys/¥ocfs.h
>

	@/usr/include/sys/errno.h

1 
	~<î∫o.h
>

	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 #i‚de‡
ARG_MAX


23 
	#__undef_ARG_MAX


	)

26 
	~<limôs.h
>

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #i‚de‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


38 
	#NBBY
 
CHAR_BIT


	)

39 #i‚def 
NGROUPS


40 
	#NGROUPS
 
NGROUPS_MAX


	)

42 
	#MAXSYMLINKS
 20

	)

43 
	#CANBSIZ
 
MAX_CANON


	)

44 
	#MAXPATHLEN
 
PATH_MAX


	)

48 
	#NOFILE
 256

	)

49 
	#NCARGS
 131072

	)

52 
	~<sys/ty≥s.h
>

55 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

56 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

57 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

58 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

61 #i‚de‡
howm™y


62 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

64 #ifde‡
__GNUC__


65 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

66 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

67 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

69 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

71 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

74 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

75 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

79 
	#DEV_BSIZE
 512

	)

	@/usr/include/sys/procfs.h

19 #i‚de‡
_SYS_PROCFS_H


20 
	#_SYS_PROCFS_H
 1

	)

31 
	~<„©uªs.h
>

32 
	~<sys/time.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/u£r.h
>

36 
__BEGIN_DECLS


39 
	tñf_gªg_t
;

45 
	#ELF_NGREG
 ( (
u£r_ªgs_°ru˘
Ë/ (
ñf_gªg_t
))

	)

46 
ñf_gªg_t
 
	tñf_gªg£t_t
[
ELF_NGREG
];

48 #i‡
__WORDSIZE
 == 32

50 
u£r_Âªgs_°ru˘
 
	tñf_Âªg£t_t
;

55 
u£r_Âxªgs_°ru˘
 
	tñf_Âxªg£t_t
;

60 
u£r_Âªgs_°ru˘
 
	tñf_Âªg£t_t
;

64 
	sñf_sigöfo


66 
	msi_signo
;

67 
	msi_code
;

68 
	msi_î∫o
;

79 
	sñf_¥°©us


81 
ñf_sigöfo
 
	m¥_öfo
;

82 
	m¥_cursig
;

83 
	m¥_sig≥nd
;

84 
	m¥_sighﬁd
;

85 
__pid_t
 
	m¥_pid
;

86 
__pid_t
 
	m¥_µid
;

87 
__pid_t
 
	m¥_pgΩ
;

88 
__pid_t
 
	m¥_sid
;

89 
timevÆ
 
	m¥_utime
;

90 
timevÆ
 
	m¥_°ime
;

91 
timevÆ
 
	m¥_cutime
;

92 
timevÆ
 
	m¥_c°ime
;

93 
ñf_gªg£t_t
 
	m¥_ªg
;

94 
	m¥_ÂvÆid
;

98 
	#ELF_PRARGSZ
 (80Ë

	)

100 
	sñf_¥psöfo


102 
	m¥_°©e
;

103 
	m¥_¢ame
;

104 
	m¥_zomb
;

105 
	m¥_ni˚
;

106 
	m¥_Êag
;

107 #i‡
__WORDSIZE
 == 32

108 
	m¥_uid
;

109 
	m¥_gid
;

111 
	m¥_uid
;

112 
	m¥_gid
;

114 
	m¥_pid
, 
	m¥_µid
, 
	m¥_pgΩ
, 
	m¥_sid
;

116 
	m¥_‚ame
[16];

117 
	m¥_pßrgs
[
ELF_PRARGSZ
];

126 *
	tpßddr_t
;

129 
ñf_gªg£t_t
 
	t¥gªg£t_t
;

130 
ñf_Âªg£t_t
 
	t¥Âªg£t_t
;

134 
__pid_t
 
	tlwpid_t
;

137 
ñf_¥°©us
 
	t¥°©us_t
;

138 
ñf_¥psöfo
 
	t¥psöfo_t
;

140 
	g__END_DECLS


	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/signal.h

1 
	~<sig«l.h
>

	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

365 
__c⁄°
 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 
__c⁄°
 *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES_IN_LIBC


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/syscall.h

19 #i‚de‡
_SYSCALL_H


20 
	#_SYSCALL_H
 1

	)

25 
	~<asm/uni°d.h
>

27 #i‚de‡
_LIBC


32 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/sysctl.h

19 #i‚def 
_SYS_SYSCTL_H


20 
	#_SYS_SYSCTL_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 #i‚de‡
_LINUX_KERNEL_H


27 
	#_LINUX_KERNEL_H
 1

	)

28 
	#__undef_LINUX_KERNEL_H


	)

30 #i‚de‡
_LINUX_TYPES_H


31 
	#_LINUX_TYPES_H
 1

	)

32 
	#__undef_LINUX_TYPES_H


	)

34 #i‚de‡
_LINUX_LIST_H


35 
	#_LINUX_LIST_H
 1

	)

36 
	#__undef_LINUX_LIST_H


	)

38 #i‚de‡
__LINUX_COMPILER_H


39 
	#__LINUX_COMPILER_H
 1

	)

40 
	#__u£r


	)

41 
	#__undef__LINUX_COMPILER_H


	)

44 
	~<löux/sys˘l.h
>

46 #ifde‡
__undef_LINUX_KERNEL_H


47 #unde‡
_LINUX_KERNEL_H


48 #unde‡
__undef_LINUX_KERNEL_H


50 #ifde‡
__undef_LINUX_TYPES_H


51 #unde‡
_LINUX_TYPES_H


52 #unde‡
__undef_LINUX_TYPES_H


54 #ifde‡
__undef_LINUX_LIST_H


55 #unde‡
_LINUX_LIST_H


56 #unde‡
__undef_LINUX_LIST_H


58 #ifde‡
__undef__LINUX_COMPILER_H


59 #unde‡
__LINUX_COMPILER_H


60 #unde‡
__u£r


61 #unde‡
__undef__LINUX_COMPILER_H


64 
__BEGIN_DECLS


67 
	$sys˘l
 (*
__«me
, 
__∆í
, *
__ﬁdvÆ
,

68 
size_t
 *
__ﬁdÀ≈
, *
__√wvÆ
, size_à
__√wÀn
Ë
__THROW
;

70 
__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/ucontext.h

21 #i‚de‡
_UCONTEXT_H


22 
	#_UCONTEXT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<sys/uc⁄ãxt.h
>

29 
__BEGIN_DECLS


32 
	$gëc⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
Ë
__THROW
;

35 
	$£tc⁄ãxt
 (
__c⁄°
 
uc⁄ãxt_t
 *
__u˝
Ë
__THROW
;

39 
	$sw≠c⁄ãxt
 (
uc⁄ãxt_t
 *
__ª°ri˘
 
__ou˝
,

40 
__c⁄°
 
uc⁄ãxt_t
 *
__ª°ri˘
 
__u˝
Ë
__THROW
;

48 
	`makec⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
, (*
__func
) (),

49 
__¨gc
, ...Ë
__THROW
;

51 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #ifde‡
__USE_UNIX98


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #ifde‡
__USE_UNIX98


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


448 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

449 
__THROW
;

456 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

465 
	`∑u£
 ();

469 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

470 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

472 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


474 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

479 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

480 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

484 #ifde‡
__USE_ATFILE


487 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

488 
__gid_t
 
__group
, 
__Êag
)

489 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

493 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

495 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


497 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

507 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

509 #ifdef 
__USE_GNU


513 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

516 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


520 *
	$gëwd
 (*
__buf
)

521 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

526 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

529 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

531 #ifde‡
__USE_GNU


534 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

538 **
__ívú⁄
;

539 #ifde‡
__USE_GNU


540 **
ívú⁄
;

546 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

547 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

549 #ifde‡
__USE_XOPEN2K8


552 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

553 
__THROW
;

558 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((1));

563 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

564 
__THROW
 
	`__n⁄nuŒ
 ((1));

568 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1));

573 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

574 
__THROW
 
	`__n⁄nuŒ
 ((1));

579 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

580 
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #ifde‡
__USE_GNU


585 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

586 *
__c⁄°
 
__ívp
[])

587 
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


593 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

598 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

604 
	~<bôs/c⁄‚ame.h
>

607 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

611 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

614 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

616 #ifdef 
__USE_POSIX2


618 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

623 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

626 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

630 #i‚de‡
__FAVOR_BSD


631 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

633 #ifde‡
__REDIRECT_NTH


634 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

636 
	#gëpgΩ
 
__gëpgid


	)

641 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

642 #ifde‡
__USE_XOPEN_EXTENDED


643 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

650 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

652 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


663 #i‚de‡
__FAVOR_BSD


667 
	$£çgΩ
 (Ë
__THROW
;

672 #ifde‡
__REDIRECT_NTH


673 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

675 
	#£çgΩ
 
£çgid


	)

684 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

686 #ifde‡
__USE_XOPEN_EXTENDED


688 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

692 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

695 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

698 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

701 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

706 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

708 #ifdef 
__USE_GNU


710 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

717 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

734 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

736 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


739 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


744 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

747 #ifde‡
__USE_GNU


750 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

751 
__THROW
;

755 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

756 
__THROW
;

760 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

761 
__THROW
;

765 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

766 
__THROW
;

773 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

775 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


780 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

786 *
	$ây«me
 (
__fd
Ë
__THROW
;

790 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

791 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

795 
	$ißây
 (
__fd
Ë
__THROW
;

797 #i‡
deföed
 
__USE_BSD
 \

798 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

801 
	$ây¶Ÿ
 (Ë
__THROW
;

806 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 #ifde‡
__USE_ATFILE


812 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

813 
__c⁄°
 *
__to
, 
__Êags
)

814 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

817 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


819 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

825 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

826 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

830 #ifde‡
__USE_ATFILE


832 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

833 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

836 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

837 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

838 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

842 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_ATFILE


846 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

847 
__THROW
 
	`__n⁄nuŒ
 ((2));

851 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

855 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

858 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

865 *
	`gëlogö
 ();

866 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


873 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

876 #ifdef 
__USE_BSD


878 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_POSIX2


886 
	#__√ed_gë›t


	)

887 
	~<gë›t.h
>

891 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


895 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

902 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

913 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

914 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$vh™gup
 (Ë
__THROW
;

925 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

933 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

934 
size_t
 
__off£t
, 
__sˇÀ
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

941 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

945 *
	$gëu£rshñl
 (Ë
__THROW
;

946 
	$ídu£rshñl
 (Ë
__THROW
;

947 
	$£tu£rshñl
 (Ë
__THROW
;

953 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

957 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

960 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

964 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

968 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


973 
	`fsync
 (
__fd
);

977 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


980 
	`gëho°id
 ();

983 
	$sync
 (Ë
__THROW
;

988 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

993 
	$gëdèbÀsize
 (Ë
__THROW
;

997 #i‚de‡
__USE_FILE_OFFSET64


998 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

999 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 #ifde‡
__REDIRECT_NTH


1002 
	`__REDIRECT_NTH
 (
åunˇã
,

1003 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1004 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1006 
	#åunˇã
 
åunˇã64


	)

1009 #ifde‡
__USE_LARGEFILE64


1010 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1016 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1019 #i‚de‡
__USE_FILE_OFFSET64


1020 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1022 #ifde‡
__REDIRECT_NTH


1023 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1024 
·runˇã64
Ë
__wur
;

1026 
	#·runˇã
 
·runˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1036 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1142 #ifde‡
__USE_XOPEN


1144 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1149 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1150 
	~<bôs/uni°d.h
>

1153 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm-generic/signal-defs.h

1 #i‚de‡
__ASM_GENERIC_SIGNAL_DEFS_H


2 
	#__ASM_GENERIC_SIGNAL_DEFS_H


	)

6 #i‚de‡
SIG_BLOCK


7 
	#SIG_BLOCK
 0

	)

9 #i‚de‡
SIG_UNBLOCK


10 
	#SIG_UNBLOCK
 1

	)

12 #i‚de‡
SIG_SETMASK


13 
	#SIG_SETMASK
 2

	)

16 #i‚de‡
__ASSEMBLY__


17 
	t__sig«l‚_t
();

18 
__sig«l‚_t
 *
	t__sigh™dÀr_t
;

20 
	t__ª°‹e‚_t
();

21 
__ª°‹e‚_t
 *
	t__sigª°‹e_t
;

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
)0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
)1Ë

	)

25 
	#SIG_ERR
 ((
__sigh™dÀr_t
)-1Ë

	)

	@/usr/include/asm/unistd.h

1 #ifde‡
__i386__


2 
	~"uni°d_32.h
"

4 
	~"uni°d_64.h
"

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/dlfcn.h

20 #i‚de‡
_DLFCN_H


25 
	#RTLD_LAZY
 0x00001

	)

26 
	#RTLD_NOW
 0x00002

	)

27 
	#RTLD_BINDING_MASK
 0x3

	)

28 
	#RTLD_NOLOAD
 0x00004

	)

29 
	#RTLD_DEEPBIND
 0x00008

	)

34 
	#RTLD_GLOBAL
 0x00100

	)

39 
	#RTLD_LOCAL
 0

	)

42 
	#RTLD_NODELETE
 0x01000

	)

44 #ifde‡
__USE_GNU


55 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

56 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

58 
__BEGIN_DECLS


61 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

63 
__END_DECLS


	@/usr/include/bits/elfclass.h

5 #i‚de‡
_LINK_H


9 
	~<bôs/w‹dsize.h
>

11 
	#__ELF_NATIVE_CLASS
 
__WORDSIZE


	)

14 
uöt32_t
 
	tElf_Symndx
;

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
__ASSEMBLER__


43 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

45 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


47 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

52 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


56 
	#EDOM
 33

	)

57 
	#EILSEQ
 84

	)

58 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


24 
	~<sys/ty≥s.h
>

25 
	~<bôs/w‹dsize.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifde‡
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

53 
	#O_CLOEXEC
 02000000

	)

59 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


60 
	#O_DSYNC
 
O_SYNC


	)

61 
	#O_RSYNC
 
O_SYNC


	)

64 #ifde‡
__USE_LARGEFILE64


65 #i‡
__WORDSIZE
 == 64

66 
	#O_LARGEFILE
 0

	)

68 
	#O_LARGEFILE
 0100000

	)

73 
	#F_DUPFD
 0

	)

74 
	#F_GETFD
 1

	)

75 
	#F_SETFD
 2

	)

76 
	#F_GETFL
 3

	)

77 
	#F_SETFL
 4

	)

78 #i‡
__WORDSIZE
 == 64

79 
	#F_GETLK
 5

	)

80 
	#F_SETLK
 6

	)

81 
	#F_SETLKW
 7

	)

83 
	#F_GETLK64
 5

	)

84 
	#F_SETLK64
 6

	)

85 
	#F_SETLKW64
 7

	)

87 #i‚de‡
__USE_FILE_OFFSET64


88 
	#F_GETLK
 5

	)

89 
	#F_SETLK
 6

	)

90 
	#F_SETLKW
 7

	)

92 
	#F_GETLK
 
F_GETLK64


	)

93 
	#F_SETLK
 
F_SETLK64


	)

94 
	#F_SETLKW
 
F_SETLKW64


	)

96 
	#F_GETLK64
 12

	)

97 
	#F_SETLK64
 13

	)

98 
	#F_SETLKW64
 14

	)

101 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


102 
	#F_SETOWN
 8

	)

103 
	#F_GETOWN
 9

	)

106 #ifde‡
__USE_GNU


107 
	#F_SETSIG
 10

	)

108 
	#F_GETSIG
 11

	)

109 
	#F_SETOWN_EX
 15

	)

110 
	#F_GETOWN_EX
 16

	)

113 #ifde‡
__USE_GNU


114 
	#F_SETLEASE
 1024

	)

115 
	#F_GETLEASE
 1025

	)

116 
	#F_NOTIFY
 1026

	)

117 
	#F_DUPFD_CLOEXEC
 1030

	)

122 
	#FD_CLOEXEC
 1

	)

125 
	#F_RDLCK
 0

	)

126 
	#F_WRLCK
 1

	)

127 
	#F_UNLCK
 2

	)

130 
	#F_EXLCK
 4

	)

131 
	#F_SHLCK
 8

	)

133 #ifde‡
__USE_BSD


135 
	#LOCK_SH
 1

	)

136 
	#LOCK_EX
 2

	)

137 
	#LOCK_NB
 4

	)

139 
	#LOCK_UN
 8

	)

142 #ifde‡
__USE_GNU


143 
	#LOCK_MAND
 32

	)

144 
	#LOCK_READ
 64

	)

145 
	#LOCK_WRITE
 128

	)

146 
	#LOCK_RW
 192

	)

149 #ifde‡
__USE_GNU


151 
	#DN_ACCESS
 0x00000001

	)

152 
	#DN_MODIFY
 0x00000002

	)

153 
	#DN_CREATE
 0x00000004

	)

154 
	#DN_DELETE
 0x00000008

	)

155 
	#DN_RENAME
 0x00000010

	)

156 
	#DN_ATTRIB
 0x00000020

	)

157 
	#DN_MULTISHOT
 0x80000000

	)

160 
	sÊock


162 
	ml_ty≥
;

163 
	ml_whí˚
;

164 #i‚de‡
__USE_FILE_OFFSET64


165 
__off_t
 
	ml_°¨t
;

166 
__off_t
 
	ml_Àn
;

168 
__off64_t
 
	ml_°¨t
;

169 
__off64_t
 
	ml_Àn
;

171 
__pid_t
 
	ml_pid
;

174 #ifde‡
__USE_LARGEFILE64


175 
	sÊock64


177 
	ml_ty≥
;

178 
	ml_whí˚
;

179 
__off64_t
 
	ml_°¨t
;

180 
__off64_t
 
	ml_Àn
;

181 
__pid_t
 
	ml_pid
;

185 #ifde‡
__USE_GNU


187 
	e__pid_ty≥


189 
	mF_OWNER_TID
 = 0,

190 
	mF_OWNER_PID
,

191 
	mF_OWNER_GID


195 
	sf_ow√r_ex


197 
__pid_ty≥
 
	mty≥
;

198 
__pid_t
 
	mpid
;

204 #ifdef 
__USE_BSD


205 
	#FAPPEND
 
O_APPEND


	)

206 
	#FFSYNC
 
O_FSYNC


	)

207 
	#FASYNC
 
O_ASYNC


	)

208 
	#FNONBLOCK
 
O_NONBLOCK


	)

209 
	#FNDELAY
 
O_NDELAY


	)

213 #ifde‡
__USE_XOPEN2K


214 
	#POSIX_FADV_NORMAL
 0

	)

215 
	#POSIX_FADV_RANDOM
 1

	)

216 
	#POSIX_FADV_SEQUENTIAL
 2

	)

217 
	#POSIX_FADV_WILLNEED
 3

	)

218 
	#POSIX_FADV_DONTNEED
 4

	)

219 
	#POSIX_FADV_NOREUSE
 5

	)

223 #ifde‡
__USE_GNU


225 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

228 
	#SYNC_FILE_RANGE_WRITE
 2

	)

231 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

236 
	#SPLICE_F_MOVE
 1

	)

237 
	#SPLICE_F_NONBLOCK
 2

	)

240 
	#SPLICE_F_MORE
 4

	)

241 
	#SPLICE_F_GIFT
 8

	)

245 #ifde‡
__USE_ATFILE


246 
	#AT_FDCWD
 -100

	)

249 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

250 
	#AT_REMOVEDIR
 0x200

	)

252 
	#AT_SYMLINK_FOLLOW
 0x400

	)

253 
	#AT_EACCESS
 0x200

	)

257 
	g__BEGIN_DECLS


259 #ifde‡
__USE_GNU


262 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

263 
__THROW
;

267 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__‰om
, __off64_à
__to
,

268 
__Êags
);

272 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

273 
size_t
 
__cou¡
, 
__Êags
);

276 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

277 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

278 
__Êags
);

281 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

282 
__Êags
);

285 #i‚de‡
__USE_FILE_OFFSET64


286 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

288 #ifde‡
__REDIRECT


289 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

290 
__off64_t
 
__Àn
),

291 
ÁŒoˇã64
);

293 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

296 #ifde‡
__USE_LARGEFILE64


297 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

298 
__off64_t
 
__Àn
);

302 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/link.h

19 #i‚def 
_LINK_H


24 #i‡
__ELF_NATIVE_CLASS
 == 32

26 
	sLa_i86_ªgs


28 
uöt32_t
 
	mÃ_edx
;

29 
uöt32_t
 
	mÃ_ecx
;

30 
uöt32_t
 
	mÃ_óx
;

31 
uöt32_t
 
	mÃ_ebp
;

32 
uöt32_t
 
	mÃ_e•
;

33 } 
	tLa_i86_ªgs
;

36 
	sLa_i86_ªtvÆ


38 
uöt32_t
 
	mÃv_óx
;

39 
uöt32_t
 
	mÃv_edx
;

40 
	mÃv_°0
;

41 
	mÃv_°1
;

42 } 
	tLa_i86_ªtvÆ
;

45 
__BEGIN_DECLS


47 
Elf32_Addr
 
œ_i86_gnu_∂ã¡î
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

48 
uöçå_t
 *
__ªfcook
,

49 
uöçå_t
 *
__defcook
,

50 
La_i86_ªgs
 *
__ªgs
,

51 *
__Êags
,

52 c⁄° *
__sym«me
,

53 *
__‰amesizï
);

54 
œ_i86_gnu_∂ãxô
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

55 
uöçå_t
 *
__ªfcook
,

56 
uöçå_t
 *
__defcook
,

57 c⁄° 
La_i86_ªgs
 *
__öªgs
,

58 
La_i86_ªtvÆ
 *
__ouåegs
,

59 c⁄° *
sym«me
);

61 
	g__END_DECLS


66 #i‡
__GNUC_PREREQ
 (4,0)

67 
	tLa_x86_64_xmm
 
	t__©åibuã__
 ((
	t__ve˘‹_size__
 (16)));

68 
	tLa_x86_64_ymm
 
	t__©åibuã__
 ((
	t__ve˘‹_size__
 (32)));

70 
	tLa_x86_64_xmm
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__V4SF__
)));

75 #i‡
__GNUC_PREREQ
 (4,0)

76 
La_x86_64_ymm
 
	mymm
[2];

78 
La_x86_64_xmm
 
	mxmm
[4];

79 } 
	tLa_x86_64_ve˘‹
 
	t__©åibuã__
 ((
	tÆig√d
(16)));

81 
	sLa_x86_64_ªgs


83 
uöt64_t
 
	mÃ_rdx
;

84 
uöt64_t
 
	mÃ_r8
;

85 
uöt64_t
 
	mÃ_r9
;

86 
uöt64_t
 
	mÃ_rcx
;

87 
uöt64_t
 
	mÃ_rsi
;

88 
uöt64_t
 
	mÃ_rdi
;

89 
uöt64_t
 
	mÃ_rbp
;

90 
uöt64_t
 
	mÃ_r•
;

91 
La_x86_64_xmm
 
	mÃ_xmm
[8];

92 
La_x86_64_ve˘‹
 
	mÃ_ve˘‹
[8];

93 } 
	tLa_x86_64_ªgs
;

96 
	sLa_x86_64_ªtvÆ


98 
uöt64_t
 
	mÃv_øx
;

99 
uöt64_t
 
	mÃv_rdx
;

100 
La_x86_64_xmm
 
	mÃv_xmm0
;

101 
La_x86_64_xmm
 
	mÃv_xmm1
;

102 
	mÃv_°0
;

103 
	mÃv_°1
;

104 
La_x86_64_ve˘‹
 
	mÃv_ve˘‹0
;

105 
La_x86_64_ve˘‹
 
	mÃv_ve˘‹1
;

106 } 
	tLa_x86_64_ªtvÆ
;

109 
__BEGIN_DECLS


111 
Elf64_Addr
 
œ_x86_64_gnu_∂ã¡î
 (
Elf64_Sym
 *
__sym
,

112 
__ndx
,

113 
uöçå_t
 *
__ªfcook
,

114 
uöçå_t
 *
__defcook
,

115 
La_x86_64_ªgs
 *
__ªgs
,

116 *
__Êags
,

117 c⁄° *
__sym«me
,

118 *
__‰amesizï
);

119 
œ_x86_64_gnu_∂ãxô
 (
Elf64_Sym
 *
__sym
,

120 
__ndx
,

121 
uöçå_t
 *
__ªfcook
,

122 
uöçå_t
 *
__defcook
,

123 c⁄° 
La_x86_64_ªgs
 *
__öªgs
,

124 
La_x86_64_ªtvÆ
 *
__ouåegs
,

125 c⁄° *
__sym«me
);

127 
	g__END_DECLS


	@/usr/include/bits/mman.h

20 #i‚de‡
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifde‡
__USE_MISC


46 
	#MAP_TYPE
 0x0‡

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifde‡
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifde‡
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

67 
	#MAP_STACK
 0x20000

	)

71 
	#MS_ASYNC
 1

	)

72 
	#MS_SYNC
 4

	)

73 
	#MS_INVALIDATE
 2

	)

76 
	#MCL_CURRENT
 1

	)

77 
	#MCL_FUTURE
 2

	)

81 #ifde‡
__USE_GNU


82 
	#MREMAP_MAYMOVE
 1

	)

83 
	#MREMAP_FIXED
 2

	)

87 #ifde‡
__USE_BSD


88 
	#MADV_NORMAL
 0

	)

89 
	#MADV_RANDOM
 1

	)

90 
	#MADV_SEQUENTIAL
 2

	)

91 
	#MADV_WILLNEED
 3

	)

92 
	#MADV_DONTNEED
 4

	)

93 
	#MADV_REMOVE
 9

	)

94 
	#MADV_DONTFORK
 10

	)

95 
	#MADV_DOFORK
 11

	)

96 
	#MADV_MERGEABLE
 12

	)

97 
	#MADV_UNMERGEABLE
 13

	)

98 
	#MADV_HWPOISON
 100

	)

102 #ifde‡
__USE_XOPEN2K


103 
	#POSIX_MADV_NORMAL
 0

	)

104 
	#POSIX_MADV_RANDOM
 1

	)

105 
	#POSIX_MADV_SEQUENTIAL
 2

	)

106 
	#POSIX_MADV_WILLNEED
 3

	)

107 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


167 
	mRUSAGE_THREAD
 = 1

168 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

170 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

174 
	#__√ed_timevÆ


	)

175 
	~<bôs/time.h
>

178 
	srußge


181 
timevÆ
 
	mru_utime
;

183 
timevÆ
 
	mru_°ime
;

185 
	mru_maxrss
;

188 
	mru_ixrss
;

190 
	mru_idrss
;

192 
	mru_i§ss
;

195 
	mru_möÊt
;

197 
	mru_majÊt
;

199 
	mru_nsw≠
;

202 
	mru_öblock
;

204 
	mru_oublock
;

206 
	mru_msg¢d
;

208 
	mru_msgrcv
;

210 
	mru_nsig«ls
;

214 
	mru_nvcsw
;

217 
	mru_nivcsw
;

221 
	#PRIO_MIN
 -20

	)

222 
	#PRIO_MAX
 20

	)

226 
	e__¥i‹ôy_which


228 
	mPRIO_PROCESS
 = 0,

229 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

230 
	mPRIO_PGRP
 = 1,

231 
	#PRIO_PGRP
 
PRIO_PGRP


	)

232 
	mPRIO_USER
 = 2

233 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifde‡
__USE_MISC


39 
	#CSIGNAL
 0x000000f‡

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_NEWUTS
 0x04000000

	)

63 
	#CLONE_NEWIPC
 0x08000000

	)

64 
	#CLONE_NEWUSER
 0x10000000

	)

65 
	#CLONE_NEWPID
 0x20000000

	)

66 
	#CLONE_NEWNET
 0x40000000

	)

67 
	#CLONE_IO
 0x80000000

	)

71 
	ssched_∑øm


73 
	m__sched_¥i‹ôy
;

76 
	g__BEGIN_DECLS


78 #ifde‡
__USE_MISC


80 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

81 
__Êags
, *
__¨g
, ...Ë
__THROW
;

84 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

87 
	$sched_gë˝u
 (Ë
__THROW
;

90 
__END_DECLS


94 #i‡!
deföed
 
__deföed_sched∑øm
 \

95 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

96 
	#__deföed_sched∑øm
 1

	)

98 
	s__sched_∑øm


100 
__sched_¥i‹ôy
;

102 #unde‡
__√ed_sched∑øm


106 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


107 
	#__˝u_£t_t_deföed


	)

109 
	#__CPU_SETSIZE
 1024

	)

110 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

113 
	t__˝u_mask
;

116 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

117 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

122 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

123 } 
	t˝u_£t_t
;

126 #i‡
	`__GNUC_PREREQ
 (2, 91)

127 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

128 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

132 
size_t
 
__i
; \

133 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

134 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

135 
__i
 = 0; __ò< 
__imax
; ++__i) \

136 
__bôs
[
__i
] = 0; \

137 
	}
} 0)

	)

139 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

140 (
__exãnsi⁄__
 \

141 ({ 
size_t
 
__˝u
 = (
˝u
); \

142 
__˝u
 < 8 * (
£tsize
) \

143 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

144 |
	`__CPUMASK
 (
__˝u
)) \

145 : 0; }))

	)

146 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

147 (
__exãnsi⁄__
 \

148 ({ 
size_t
 
__˝u
 = (
˝u
); \

149 
__˝u
 < 8 * (
£tsize
) \

150 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

151 &~
	`__CPUMASK
 (
__˝u
)) \

152 : 0; }))

	)

153 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

154 (
__exãnsi⁄__
 \

155 ({ 
size_t
 
__˝u
 = (
˝u
); \

156 
__˝u
 < 8 * (
£tsize
) \

157 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

158 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

159 : 0; }))

	)

161 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

162 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

164 #i‡
__GNUC_PREREQ
 (2, 91)

165 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

166 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
__exãnsi⁄__
 \

170 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

171 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

172 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

173 
size_t
 
__i
; \

174 
__i
 = 0; __ò< 
__imax
; ++__i) \

175 i‡(
__bôs
[
__i
] != __bits[__i]) \

177 
__i
 =
__imax
; }))

	)

180 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

181 (
__exãnsi⁄__
 \

182 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

183 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

184 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

185 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

186 
size_t
 
__i
; \

187 
__i
 = 0; __ò< 
__imax
; ++__i) \

188 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

189 
__de°
; }))

	)

191 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

192 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

193 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

194 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

196 
__BEGIN_DECLS


198 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

199 
__THROW
;

200 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

201 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/semaphore.h

20 #i‚de‡
_SEMAPHORE_H


24 
	~<bôs/w‹dsize.h
>

26 #i‡
__WORDSIZE
 == 64

27 
	#__SIZEOF_SEM_T
 32

	)

29 
	#__SIZEOF_SEM_T
 16

	)

34 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

39 
	m__size
[
__SIZEOF_SEM_T
];

40 
	m__Æign
;

41 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/setjmp2.h

20 #i‚de‡
_SETJMP_H


25 #ifde‡
__REDIRECT_NTH


26 
__REDIRECT_NTH
 (
l⁄gjmp
,

27 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

28 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

29 
__REDIRECT_NTH
 (
_l⁄gjmp
,

30 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

31 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

32 
__REDIRECT_NTH
 (
sigl⁄gjmp
,

33 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

34 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

36 
__l⁄gjmp_chk
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

37 
__THROW
 
__©åibuã__
 ((
__n‹ëu∫__
));

38 
	#l⁄gjmp
 
__l⁄gjmp_chk


	)

39 
	#_l⁄gjmp
 
__l⁄gjmp_chk


	)

40 
	#sigl⁄gjmp
 
__l⁄gjmp_chk


	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #i‡
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__∑d1
;

49 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


50 
__öo_t
 
	m°_öo
;

52 
__öo_t
 
	m__°_öo
;

54 #i‡
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆ök_t
 
	m°_∆ök
;

58 
__∆ök_t
 
	m°_∆ök
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #i‡
__WORDSIZE
 == 64

64 
	m__∑d0
;

66 
__dev_t
 
	m°_rdev
;

67 #i‡
__WORDSIZE
 == 32

68 
	m__∑d2
;

70 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


77 
__blk˙t_t
 
	m°_blocks
;

79 
__blk˙t64_t
 
	m°_blocks
;

81 #ifde‡
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_˘im
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imí£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimí£c
;

99 
__time_t
 
	m°_˘ime
;

100 
	m°_˘imí£c
;

102 #i‡
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #i‚de‡
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__öo64_t
 
	m°_öo
;

114 #ifde‡
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #i‡
__WORDSIZE
 == 64

120 
__öo64_t
 
	m°_öo
;

121 
__∆ök_t
 
	m°_∆ök
;

122 
__mode_t
 
	m°_mode
;

124 
	m__∑d1
;

125 
__öo_t
 
	m__°_öo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆ök_t
 
	m°_∆ök
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #i‡
__WORDSIZE
 == 64

132 
	m__∑d0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__∑d2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blk˙t64_t
 
	m°_blocks
;

142 #ifde‡
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_˘im
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
	m°_˘imí£c
;

163 #i‡
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

81 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

83 
	`__w¨n_mem£t_zîo_Àn
 ();

84  
__de°
;

86  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

87 
	}
}

89 #ifde‡
__USE_BSD


90 
__exã∫_Æways_ölöe
 

91 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

92 
size_t
 
__Àn
))

94 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

95 
	}
}

97 
__exã∫_Æways_ölöe
 

98 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

100 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

101 
	}
}

104 
__exã∫_Æways_ölöe
 *

105 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

107  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

108 
	}
}

110 #ifde‡
__USE_GNU


111 
__exã∫_Æways_ölöe
 *

112 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

114  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

115 
	}
}

119 
__exã∫_Æways_ölöe
 *

120 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

121 
size_t
 
__Àn
))

123  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

124 
	}
}

127 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

128 
size_t
 
__de°Àn
Ë
__THROW
;

129 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

130 
__c⁄°
 *
__§c
,

131 
size_t
 
__n
), 
°≤˝y
);

133 
__exã∫_Æways_ölöe
 *

134 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

136 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

137 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

138  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

139  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

140 
	}
}

143 
__exã∫_Æways_ölöe
 *

144 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

146  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

147 
	}
}

150 
__exã∫_Æways_ölöe
 *

151 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

152 
size_t
 
__Àn
))

154  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

155 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


7 
	~<bôs/w‹dsize.h
>

9 
	#SYS__sys˘l
 
__NR__sys˘l


	)

10 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

11 
	#SYS_ac˘
 
__NR_ac˘


	)

12 
	#SYS_add_key
 
__NR_add_key


	)

13 
	#SYS_adjtimex
 
__NR_adjtimex


	)

14 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

15 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

16 
	#SYS_brk
 
__NR_brk


	)

17 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

18 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

19 
	#SYS_chdú
 
__NR_chdú


	)

20 
	#SYS_chmod
 
__NR_chmod


	)

21 
	#SYS_chown
 
__NR_chown


	)

22 
	#SYS_chroŸ
 
__NR_chroŸ


	)

23 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

24 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

25 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

26 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

27 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

28 
	#SYS_˛o£
 
__NR_˛o£


	)

29 
	#SYS_¸ót
 
__NR_¸ót


	)

30 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

31 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

32 
	#SYS_dup
 
__NR_dup


	)

33 
	#SYS_dup2
 
__NR_dup2


	)

34 
	#SYS_dup3
 
__NR_dup3


	)

35 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

36 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

37 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

38 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

39 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

40 
	#SYS_evítfd
 
__NR_evítfd


	)

41 
	#SYS_evítfd2
 
__NR_evítfd2


	)

42 
	#SYS_execve
 
__NR_execve


	)

43 
	#SYS_exô
 
__NR_exô


	)

44 
	#SYS_exô_group
 
__NR_exô_group


	)

45 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

46 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

47 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

48 
	#SYS_fchdú
 
__NR_fchdú


	)

49 
	#SYS_fchmod
 
__NR_fchmod


	)

50 
	#SYS_fchmod©
 
__NR_fchmod©


	)

51 
	#SYS_fchown
 
__NR_fchown


	)

52 
	#SYS_fchow«t
 
__NR_fchow«t


	)

53 
	#SYS_f˙é
 
__NR_f˙é


	)

54 
	#SYS_fd©async
 
__NR_fd©async


	)

55 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

56 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

57 
	#SYS_Êock
 
__NR_Êock


	)

58 
	#SYS_f‹k
 
__NR_f‹k


	)

59 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

60 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

61 
	#SYS_f°©
 
__NR_f°©


	)

62 
	#SYS_f°©fs
 
__NR_f°©fs


	)

63 
	#SYS_fsync
 
__NR_fsync


	)

64 
	#SYS_·runˇã
 
__NR_·runˇã


	)

65 
	#SYS_fuãx
 
__NR_fuãx


	)

66 
	#SYS_futimeßt
 
__NR_futimeßt


	)

67 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

68 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

69 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

70 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

71 
	#SYS_gëcwd
 
__NR_gëcwd


	)

72 
	#SYS_gëdíts
 
__NR_gëdíts


	)

73 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

74 
	#SYS_gëegid
 
__NR_gëegid


	)

75 
	#SYS_gëeuid
 
__NR_gëeuid


	)

76 
	#SYS_gëgid
 
__NR_gëgid


	)

77 
	#SYS_gëgroups
 
__NR_gëgroups


	)

78 
	#SYS_gëôimî
 
__NR_gëôimî


	)

79 
	#SYS_gëpgid
 
__NR_gëpgid


	)

80 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

81 
	#SYS_gëpid
 
__NR_gëpid


	)

82 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

83 
	#SYS_gëµid
 
__NR_gëµid


	)

84 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

85 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

86 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

87 
	#SYS_gëæimô
 
__NR_gëæimô


	)

88 
	#SYS_gërußge
 
__NR_gërußge


	)

89 
	#SYS_gësid
 
__NR_gësid


	)

90 
	#SYS_gëtid
 
__NR_gëtid


	)

91 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

92 
	#SYS_gëuid
 
__NR_gëuid


	)

93 
	#SYS_gëx©å
 
__NR_gëx©å


	)

94 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

95 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

96 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

97 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

98 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

99 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

100 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

101 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

102 
	#SYS_io_£tup
 
__NR_io_£tup


	)

103 
	#SYS_io_submô
 
__NR_io_submô


	)

104 
	#SYS_io˘l
 
__NR_io˘l


	)

105 
	#SYS_i›îm
 
__NR_i›îm


	)

106 
	#SYS_i›l
 
__NR_i›l


	)

107 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

108 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

109 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

110 
	#SYS_key˘l
 
__NR_key˘l


	)

111 
	#SYS_kûl
 
__NR_kûl


	)

112 
	#SYS_lchown
 
__NR_lchown


	)

113 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

114 
	#SYS_lök
 
__NR_lök


	)

115 
	#SYS_lök©
 
__NR_lök©


	)

116 
	#SYS_li°x©å
 
__NR_li°x©å


	)

117 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

118 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

119 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

120 
	#SYS_l£ek
 
__NR_l£ek


	)

121 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

122 
	#SYS_l°©
 
__NR_l°©


	)

123 
	#SYS_madvi£
 
__NR_madvi£


	)

124 
	#SYS_mböd
 
__NR_mböd


	)

125 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

126 
	#SYS_möc‹e
 
__NR_möc‹e


	)

127 
	#SYS_mkdú
 
__NR_mkdú


	)

128 
	#SYS_mkdú©
 
__NR_mkdú©


	)

129 
	#SYS_mknod
 
__NR_mknod


	)

130 
	#SYS_mknod©
 
__NR_mknod©


	)

131 
	#SYS_mlock
 
__NR_mlock


	)

132 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

133 
	#SYS_mm≠
 
__NR_mm≠


	)

134 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

135 
	#SYS_mou¡
 
__NR_mou¡


	)

136 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

137 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

138 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

139 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

140 
	#SYS_mq_›í
 
__NR_mq_›í


	)

141 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

142 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

143 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

144 
	#SYS_mªm≠
 
__NR_mªm≠


	)

145 
	#SYS_msync
 
__NR_msync


	)

146 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

147 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

148 
	#SYS_munm≠
 
__NR_munm≠


	)

149 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

150 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

151 
	#SYS_›í
 
__NR_›í


	)

152 
	#SYS_›í©
 
__NR_›í©


	)

153 
	#SYS_∑u£
 
__NR_∑u£


	)

154 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

155 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

156 
	#SYS_pùe
 
__NR_pùe


	)

157 
	#SYS_pùe2
 
__NR_pùe2


	)

158 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

159 
	#SYS_pﬁl
 
__NR_pﬁl


	)

160 
	#SYS_µﬁl
 
__NR_µﬁl


	)

161 
	#SYS_¥˘l
 
__NR_¥˘l


	)

162 
	#SYS_¥ód64
 
__NR_¥ód64


	)

163 
	#SYS_¥ódv
 
__NR_¥ódv


	)

164 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

165 
	#SYS_±ø˚
 
__NR_±ø˚


	)

166 
	#SYS_puçmsg
 
__NR_puçmsg


	)

167 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

168 
	#SYS_pwrôev
 
__NR_pwrôev


	)

169 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

170 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

171 
	#SYS_ªad
 
__NR_ªad


	)

172 
	#SYS_ªadahód
 
__NR_ªadahód


	)

173 
	#SYS_ªadlök
 
__NR_ªadlök


	)

174 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

175 
	#SYS_ªadv
 
__NR_ªadv


	)

176 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

177 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

178 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

179 
	#SYS_ª«me
 
__NR_ª«me


	)

180 
	#SYS_ª«mót
 
__NR_ª«mót


	)

181 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

182 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

183 
	#SYS_rmdú
 
__NR_rmdú


	)

184 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

185 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

186 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

187 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

188 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

189 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

190 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

191 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

192 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

193 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

194 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

195 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

196 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

197 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

198 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

199 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

200 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

201 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

202 
	#SYS_£À˘
 
__NR_£À˘


	)

203 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

204 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

205 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

206 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

207 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

208 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

209 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

210 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

211 
	#SYS_£tgid
 
__NR_£tgid


	)

212 
	#SYS_£tgroups
 
__NR_£tgroups


	)

213 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

214 
	#SYS_£tôimî
 
__NR_£tôimî


	)

215 
	#SYS_£çgid
 
__NR_£çgid


	)

216 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

217 
	#SYS_£åegid
 
__NR_£åegid


	)

218 
	#SYS_£åesgid
 
__NR_£åesgid


	)

219 
	#SYS_£åesuid
 
__NR_£åesuid


	)

220 
	#SYS_£åeuid
 
__NR_£åeuid


	)

221 
	#SYS_£ålimô
 
__NR_£ålimô


	)

222 
	#SYS_£tsid
 
__NR_£tsid


	)

223 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

224 
	#SYS_£tuid
 
__NR_£tuid


	)

225 
	#SYS_£tx©å
 
__NR_£tx©å


	)

226 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

227 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

228 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

229 
	#SYS_•li˚
 
__NR_•li˚


	)

230 
	#SYS_°©
 
__NR_°©


	)

231 
	#SYS_°©fs
 
__NR_°©fs


	)

232 
	#SYS_sw≠off
 
__NR_sw≠off


	)

233 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

234 
	#SYS_symlök
 
__NR_symlök


	)

235 
	#SYS_symlök©
 
__NR_symlök©


	)

236 
	#SYS_sync
 
__NR_sync


	)

237 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

238 
	#SYS_sysfs
 
__NR_sysfs


	)

239 
	#SYS_sysöfo
 
__NR_sysöfo


	)

240 
	#SYS_sy¶og
 
__NR_sy¶og


	)

241 
	#SYS_ãe
 
__NR_ãe


	)

242 
	#SYS_tgkûl
 
__NR_tgkûl


	)

243 
	#SYS_time
 
__NR_time


	)

244 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

245 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

246 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

247 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

248 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

249 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

250 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

251 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

252 
	#SYS_times
 
__NR_times


	)

253 
	#SYS_tkûl
 
__NR_tkûl


	)

254 
	#SYS_åunˇã
 
__NR_åunˇã


	)

255 
	#SYS_umask
 
__NR_umask


	)

256 
	#SYS_umou¡2
 
__NR_umou¡2


	)

257 
	#SYS_u«me
 
__NR_u«me


	)

258 
	#SYS_u∆ök
 
__NR_u∆ök


	)

259 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

260 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

261 
	#SYS_u£lib
 
__NR_u£lib


	)

262 
	#SYS_u°©
 
__NR_u°©


	)

263 
	#SYS_utime
 
__NR_utime


	)

264 
	#SYS_utimíßt
 
__NR_utimíßt


	)

265 
	#SYS_utimes
 
__NR_utimes


	)

266 
	#SYS_vf‹k
 
__NR_vf‹k


	)

267 
	#SYS_vh™gup
 
__NR_vh™gup


	)

268 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

269 
	#SYS_v£rvî
 
__NR_v£rvî


	)

270 
	#SYS_waô4
 
__NR_waô4


	)

271 
	#SYS_waôid
 
__NR_waôid


	)

272 
	#SYS_wrôe
 
__NR_wrôe


	)

273 
	#SYS_wrôev
 
__NR_wrôev


	)

274 #i‡
__WORDSIZE
 == 64

275 
	#SYS_ac˚±
 
__NR_ac˚±


	)

276 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

277 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

278 
	#SYS_böd
 
__NR_böd


	)

279 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

280 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

281 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

282 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

283 
	#SYS_gësock«me
 
__NR_gësock«me


	)

284 
	#SYS_gësock›t
 
__NR_gësock›t


	)

285 
	#SYS_li°í
 
__NR_li°í


	)

286 
	#SYS_msg˘l
 
__NR_msg˘l


	)

287 
	#SYS_msggë
 
__NR_msggë


	)

288 
	#SYS_msgrcv
 
__NR_msgrcv


	)

289 
	#SYS_msg¢d
 
__NR_msg¢d


	)

290 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

291 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

292 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

293 
	#SYS_£curôy
 
__NR_£curôy


	)

294 
	#SYS_£m˘l
 
__NR_£m˘l


	)

295 
	#SYS_£mgë
 
__NR_£mgë


	)

296 
	#SYS_£m›
 
__NR_£m›


	)

297 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

298 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

299 
	#SYS_£ndto
 
__NR_£ndto


	)

300 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

301 
	#SYS_shm©
 
__NR_shm©


	)

302 
	#SYS_shm˘l
 
__NR_shm˘l


	)

303 
	#SYS_shmdt
 
__NR_shmdt


	)

304 
	#SYS_shmgë
 
__NR_shmgë


	)

305 
	#SYS_shutdown
 
__NR_shutdown


	)

306 
	#SYS_sockë
 
__NR_sockë


	)

307 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

308 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

310 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

311 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

312 
	#SYS_bdÊush
 
__NR_bdÊush


	)

313 
	#SYS_bªak
 
__NR_bªak


	)

314 
	#SYS_chown32
 
__NR_chown32


	)

315 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

316 
	#SYS_fchown32
 
__NR_fchown32


	)

317 
	#SYS_f˙é64
 
__NR_f˙é64


	)

318 
	#SYS_f°©64
 
__NR_f°©64


	)

319 
	#SYS_f°©©64
 
__NR_f°©©64


	)

320 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

321 
	#SYS_·ime
 
__NR_·ime


	)

322 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

323 
	#SYS_gë˝u
 
__NR_gë˝u


	)

324 
	#SYS_gëegid32
 
__NR_gëegid32


	)

325 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

326 
	#SYS_gëgid32
 
__NR_gëgid32


	)

327 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

328 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

329 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

330 
	#SYS_gëuid32
 
__NR_gëuid32


	)

331 
	#SYS_gây
 
__NR_gây


	)

332 
	#SYS_idÀ
 
__NR_idÀ


	)

333 
	#SYS_ùc
 
__NR_ùc


	)

334 
	#SYS_lchown32
 
__NR_lchown32


	)

335 
	#SYS_lock
 
__NR_lock


	)

336 
	#SYS_l°©64
 
__NR_l°©64


	)

337 
	#SYS_madvi£1
 
__NR_madvi£1


	)

338 
	#SYS_mm≠2
 
__NR_mm≠2


	)

339 
	#SYS_mpx
 
__NR_mpx


	)

340 
	#SYS_ni˚
 
__NR_ni˚


	)

341 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

342 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

343 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

344 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

345 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

346 
	#SYS_¥of
 
__NR_¥of


	)

347 
	#SYS_¥ofû
 
__NR_¥ofû


	)

348 
	#SYS_ªaddú
 
__NR_ªaddú


	)

349 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

350 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

351 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

352 
	#SYS_£tgid32
 
__NR_£tgid32


	)

353 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

354 
	#SYS_£åegid32
 
__NR_£åegid32


	)

355 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

356 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

357 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

358 
	#SYS_£tuid32
 
__NR_£tuid32


	)

359 
	#SYS_sgëmask
 
__NR_sgëmask


	)

360 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

361 
	#SYS_sig«l
 
__NR_sig«l


	)

362 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

363 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

364 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

365 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

366 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

367 
	#SYS_s£tmask
 
__NR_s£tmask


	)

368 
	#SYS_°©64
 
__NR_°©64


	)

369 
	#SYS_°©fs64
 
__NR_°©fs64


	)

370 
	#SYS_°ime
 
__NR_°ime


	)

371 
	#SYS_°ty
 
__NR_°ty


	)

372 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

373 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

374 
	#SYS_ulimô
 
__NR_ulimô


	)

375 
	#SYS_umou¡
 
__NR_umou¡


	)

376 
	#SYS_vm86
 
__NR_vm86


	)

377 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

378 
	#SYS_waôpid
 
__NR_waôpid


	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/sysctl.h

25 #i‚de‡
_LINUX_SYSCTL_H


26 
	#_LINUX_SYSCTL_H


	)

28 
	~<löux/kî√l.h
>

29 
	~<löux/ty≥s.h
>

32 
	gcom∂ëi⁄
;

34 
	#CTL_MAXNAME
 10

	)

39 
	s__sys˘l_¨gs
 {

40 *
	m«me
;

41 
	m∆í
;

42 *
	mﬁdvÆ
;

43 
size_t
 *
	mﬁdÀ≈
;

44 *
	m√wvÆ
;

45 
size_t
 
	m√wÀn
;

46 
	m__unu£d
[4];

57 
	mCTL_KERN
=1,

58 
	mCTL_VM
=2,

59 
	mCTL_NET
=3,

60 
	mCTL_PROC
=4,

61 
	mCTL_FS
=5,

62 
	mCTL_DEBUG
=6,

63 
	mCTL_DEV
=7,

64 
	mCTL_BUS
=8,

65 
	mCTL_ABI
=9,

66 
	mCTL_CPU
=10,

67 
	mCTL_ARLAN
=254,

68 
	mCTL_S390DBF
=5677,

69 
	mCTL_SUNRPC
=7249,

70 
	mCTL_PM
=9899,

71 
	mCTL_FRV
=9898,

77 
	mCTL_BUS_ISA
=1

83 
	mINOTIFY_MAX_USER_INSTANCES
=1,

84 
	mINOTIFY_MAX_USER_WATCHES
=2,

85 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

91 
	mKERN_OSTYPE
=1,

92 
	mKERN_OSRELEASE
=2,

93 
	mKERN_OSREV
=3,

94 
	mKERN_VERSION
=4,

95 
	mKERN_SECUREMASK
=5,

96 
	mKERN_PROF
=6,

97 
	mKERN_NODENAME
=7,

98 
	mKERN_DOMAINNAME
=8,

100 
	mKERN_PANIC
=15,

101 
	mKERN_REALROOTDEV
=16,

103 
	mKERN_SPARC_REBOOT
=21,

104 
	mKERN_CTLALTDEL
=22,

105 
	mKERN_PRINTK
=23,

106 
	mKERN_NAMETRANS
=24,

107 
	mKERN_PPC_HTABRECLAIM
=25,

108 
	mKERN_PPC_ZEROPAGED
=26,

109 
	mKERN_PPC_POWERSAVE_NAP
=27,

110 
	mKERN_MODPROBE
=28,

111 
	mKERN_SG_BIG_BUFF
=29,

112 
	mKERN_ACCT
=30,

113 
	mKERN_PPC_L2CR
=31,

115 
	mKERN_RTSIGNR
=32,

116 
	mKERN_RTSIGMAX
=33,

118 
	mKERN_SHMMAX
=34,

119 
	mKERN_MSGMAX
=35,

120 
	mKERN_MSGMNB
=36,

121 
	mKERN_MSGPOOL
=37,

122 
	mKERN_SYSRQ
=38,

123 
	mKERN_MAX_THREADS
=39,

124 
	mKERN_RANDOM
=40,

125 
	mKERN_SHMALL
=41,

126 
	mKERN_MSGMNI
=42,

127 
	mKERN_SEM
=43,

128 
	mKERN_SPARC_STOP_A
=44,

129 
	mKERN_SHMMNI
=45,

130 
	mKERN_OVERFLOWUID
=46,

131 
	mKERN_OVERFLOWGID
=47,

132 
	mKERN_SHMPATH
=48,

133 
	mKERN_HOTPLUG
=49,

134 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

135 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

136 
	mKERN_CORE_USES_PID
=52,

137 
	mKERN_TAINTED
=53,

138 
	mKERN_CADPID
=54,

139 
	mKERN_PIDMAX
=55,

140 
	mKERN_CORE_PATTERN
=56,

141 
	mKERN_PANIC_ON_OOPS
=57,

142 
	mKERN_HPPA_PWRSW
=58,

143 
	mKERN_HPPA_UNALIGNED
=59,

144 
	mKERN_PRINTK_RATELIMIT
=60,

145 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

146 
	mKERN_PTY
=62,

147 
	mKERN_NGROUPS_MAX
=63,

148 
	mKERN_SPARC_SCONS_PWROFF
=64,

149 
	mKERN_HZ_TIMER
=65,

150 
	mKERN_UNKNOWN_NMI_PANIC
=66,

151 
	mKERN_BOOTLOADER_TYPE
=67,

152 
	mKERN_RANDOMIZE
=68,

153 
	mKERN_SETUID_DUMPABLE
=69,

154 
	mKERN_SPIN_RETRY
=70,

155 
	mKERN_ACPI_VIDEO_FLAGS
=71,

156 
	mKERN_IA64_UNALIGNED
=72,

157 
	mKERN_COMPAT_LOG
=73,

158 
	mKERN_MAX_LOCK_DEPTH
=74,

159 
	mKERN_NMI_WATCHDOG
=75,

160 
	mKERN_PANIC_ON_NMI
=76,

168 
	mVM_UNUSED1
=1,

169 
	mVM_UNUSED2
=2,

170 
	mVM_UNUSED3
=3,

171 
	mVM_UNUSED4
=4,

172 
	mVM_OVERCOMMIT_MEMORY
=5,

173 
	mVM_UNUSED5
=6,

174 
	mVM_UNUSED7
=7,

175 
	mVM_UNUSED8
=8,

176 
	mVM_UNUSED9
=9,

177 
	mVM_PAGE_CLUSTER
=10,

178 
	mVM_DIRTY_BACKGROUND
=11,

179 
	mVM_DIRTY_RATIO
=12,

180 
	mVM_DIRTY_WB_CS
=13,

181 
	mVM_DIRTY_EXPIRE_CS
=14,

182 
	mVM_NR_PDFLUSH_THREADS
=15,

183 
	mVM_OVERCOMMIT_RATIO
=16,

184 
	mVM_PAGEBUF
=17,

185 
	mVM_HUGETLB_PAGES
=18,

186 
	mVM_SWAPPINESS
=19,

187 
	mVM_LOWMEM_RESERVE_RATIO
=20,

188 
	mVM_MIN_FREE_KBYTES
=21,

189 
	mVM_MAX_MAP_COUNT
=22,

190 
	mVM_LAPTOP_MODE
=23,

191 
	mVM_BLOCK_DUMP
=24,

192 
	mVM_HUGETLB_GROUP
=25,

193 
	mVM_VFS_CACHE_PRESSURE
=26,

194 
	mVM_LEGACY_VA_LAYOUT
=27,

195 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

196 
	mVM_DROP_PAGECACHE
=29,

197 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

198 
	mVM_ZONE_RECLAIM_MODE
=31,

199 
	mVM_MIN_UNMAPPED
=32,

200 
	mVM_PANIC_ON_OOM
=33,

201 
	mVM_VDSO_ENABLED
=34,

202 
	mVM_MIN_SLAB
=35,

209 
	mNET_CORE
=1,

210 
	mNET_ETHER
=2,

211 
	mNET_802
=3,

212 
	mNET_UNIX
=4,

213 
	mNET_IPV4
=5,

214 
	mNET_IPX
=6,

215 
	mNET_ATALK
=7,

216 
	mNET_NETROM
=8,

217 
	mNET_AX25
=9,

218 
	mNET_BRIDGE
=10,

219 
	mNET_ROSE
=11,

220 
	mNET_IPV6
=12,

221 
	mNET_X25
=13,

222 
	mNET_TR
=14,

223 
	mNET_DECNET
=15,

224 
	mNET_ECONET
=16,

225 
	mNET_SCTP
=17,

226 
	mNET_LLC
=18,

227 
	mNET_NETFILTER
=19,

228 
	mNET_DCCP
=20,

229 
	mNET_IRDA
=412,

235 
	mRANDOM_POOLSIZE
=1,

236 
	mRANDOM_ENTROPY_COUNT
=2,

237 
	mRANDOM_READ_THRESH
=3,

238 
	mRANDOM_WRITE_THRESH
=4,

239 
	mRANDOM_BOOT_ID
=5,

240 
	mRANDOM_UUID
=6

246 
	mPTY_MAX
=1,

247 
	mPTY_NR
=2

253 
	mBUS_ISA_MEM_BASE
=1,

254 
	mBUS_ISA_PORT_BASE
=2,

255 
	mBUS_ISA_PORT_SHIFT
=3

261 
	mNET_CORE_WMEM_MAX
=1,

262 
	mNET_CORE_RMEM_MAX
=2,

263 
	mNET_CORE_WMEM_DEFAULT
=3,

264 
	mNET_CORE_RMEM_DEFAULT
=4,

266 
	mNET_CORE_MAX_BACKLOG
=6,

267 
	mNET_CORE_FASTROUTE
=7,

268 
	mNET_CORE_MSG_COST
=8,

269 
	mNET_CORE_MSG_BURST
=9,

270 
	mNET_CORE_OPTMEM_MAX
=10,

271 
	mNET_CORE_HOT_LIST_LENGTH
=11,

272 
	mNET_CORE_DIVERT_VERSION
=12,

273 
	mNET_CORE_NO_CONG_THRESH
=13,

274 
	mNET_CORE_NO_CONG
=14,

275 
	mNET_CORE_LO_CONG
=15,

276 
	mNET_CORE_MOD_CONG
=16,

277 
	mNET_CORE_DEV_WEIGHT
=17,

278 
	mNET_CORE_SOMAXCONN
=18,

279 
	mNET_CORE_BUDGET
=19,

280 
	mNET_CORE_AEVENT_ETIME
=20,

281 
	mNET_CORE_AEVENT_RSEQTH
=21,

282 
	mNET_CORE_WARNINGS
=22,

293 
	mNET_UNIX_DESTROY_DELAY
=1,

294 
	mNET_UNIX_DELETE_DELAY
=2,

295 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

301 
	mNET_NF_CONNTRACK_MAX
=1,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

304 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

305 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

306 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

307 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

308 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

309 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

310 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

311 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

312 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

313 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

314 
	mNET_NF_CONNTRACK_BUCKETS
=14,

315 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

316 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

317 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

318 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

319 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

321 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

322 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

323 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

324 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

325 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

326 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

327 
	mNET_NF_CONNTRACK_COUNT
=27,

328 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

329 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

330 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

331 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

332 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

339 
	mNET_IPV4_FORWARD
=8,

340 
	mNET_IPV4_DYNADDR
=9,

342 
	mNET_IPV4_CONF
=16,

343 
	mNET_IPV4_NEIGH
=17,

344 
	mNET_IPV4_ROUTE
=18,

345 
	mNET_IPV4_FIB_HASH
=19,

346 
	mNET_IPV4_NETFILTER
=20,

348 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

349 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

350 
	mNET_IPV4_TCP_SACK
=35,

351 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

352 
	mNET_IPV4_DEFAULT_TTL
=37,

353 
	mNET_IPV4_AUTOCONFIG
=38,

354 
	mNET_IPV4_NO_PMTU_DISC
=39,

355 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

356 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

357 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

358 
	mNET_IPV4_IPFRAG_TIME
=43,

359 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

360 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

361 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

362 
	mNET_IPV4_TCP_RETRIES1
=47,

363 
	mNET_IPV4_TCP_RETRIES2
=48,

364 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

365 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

366 
	mNET_TCP_SYNCOOKIES
=51,

367 
	mNET_TCP_STDURG
=52,

368 
	mNET_TCP_RFC1337
=53,

369 
	mNET_TCP_SYN_TAILDROP
=54,

370 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

371 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

372 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

373 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

374 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

375 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

376 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

377 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

378 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

379 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

380 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

381 
	mNET_TCP_TW_RECYCLE
=66,

382 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

383 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

384 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

385 
	mNET_IPV4_INET_PEER_MINTTL
=70,

386 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

387 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

388 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

389 
	mNET_TCP_ORPHAN_RETRIES
=74,

390 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

391 
	mNET_TCP_SYNACK_RETRIES
=76,

392 
	mNET_TCP_MAX_ORPHANS
=77,

393 
	mNET_TCP_MAX_TW_BUCKETS
=78,

394 
	mNET_TCP_FACK
=79,

395 
	mNET_TCP_REORDERING
=80,

396 
	mNET_TCP_ECN
=81,

397 
	mNET_TCP_DSACK
=82,

398 
	mNET_TCP_MEM
=83,

399 
	mNET_TCP_WMEM
=84,

400 
	mNET_TCP_RMEM
=85,

401 
	mNET_TCP_APP_WIN
=86,

402 
	mNET_TCP_ADV_WIN_SCALE
=87,

403 
	mNET_IPV4_NONLOCAL_BIND
=88,

404 
	mNET_IPV4_ICMP_RATELIMIT
=89,

405 
	mNET_IPV4_ICMP_RATEMASK
=90,

406 
	mNET_TCP_TW_REUSE
=91,

407 
	mNET_TCP_FRTO
=92,

408 
	mNET_TCP_LOW_LATENCY
=93,

409 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

410 
	mNET_IPV4_IGMP_MAX_MSF
=96,

411 
	mNET_TCP_NO_METRICS_SAVE
=97,

412 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

413 
	mNET_TCP_MODERATE_RCVBUF
=106,

414 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

415 
	mNET_TCP_BIC_BETA
=108,

416 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

417 
	mNET_TCP_CONG_CONTROL
=110,

418 
	mNET_TCP_ABC
=111,

419 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

420 
	mNET_TCP_MTU_PROBING
=113,

421 
	mNET_TCP_BASE_MSS
=114,

422 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

423 
	mNET_TCP_DMA_COPYBREAK
=116,

424 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

425 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

426 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

427 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

428 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

429 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

430 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

431 
	mNET_TCP_MAX_SSTHRESH
=124,

432 
	mNET_TCP_FRTO_RESPONSE
=125,

436 
	mNET_IPV4_ROUTE_FLUSH
=1,

437 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

438 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

439 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

440 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

441 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

442 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

443 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

444 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

445 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

446 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

447 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

448 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

449 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

450 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

451 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

452 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

453 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

454 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

459 
	mNET_PROTO_CONF_ALL
=-2,

460 
	mNET_PROTO_CONF_DEFAULT
=-3

467 
	mNET_IPV4_CONF_FORWARDING
=1,

468 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

469 
	mNET_IPV4_CONF_PROXY_ARP
=3,

470 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

471 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

472 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

473 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

474 
	mNET_IPV4_CONF_RP_FILTER
=8,

475 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

476 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

477 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

478 
	mNET_IPV4_CONF_TAG
=12,

479 
	mNET_IPV4_CONF_ARPFILTER
=13,

480 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

481 
	mNET_IPV4_CONF_NOXFRM
=15,

482 
	mNET_IPV4_CONF_NOPOLICY
=16,

483 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

484 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

485 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

486 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

487 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

488 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

489 
	mNET_IPV4_CONF_SRC_VMARK
=24,

490 
	m__NET_IPV4_CONF_MAX


496 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

497 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

498 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

499 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

500 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

501 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

502 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

503 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

504 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

505 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

506 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

507 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

508 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

509 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

510 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

511 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

512 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

513 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

514 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

515 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

516 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

517 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

518 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

519 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

520 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

521 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

522 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

523 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

528 
	mNET_IPV6_CONF
=16,

529 
	mNET_IPV6_NEIGH
=17,

530 
	mNET_IPV6_ROUTE
=18,

531 
	mNET_IPV6_ICMP
=19,

532 
	mNET_IPV6_BINDV6ONLY
=20,

533 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

534 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

535 
	mNET_IPV6_IP6FRAG_TIME
=23,

536 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

537 
	mNET_IPV6_MLD_MAX_MSF
=25,

541 
	mNET_IPV6_ROUTE_FLUSH
=1,

542 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

543 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

544 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

545 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

546 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

547 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

548 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

549 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

550 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

554 
	mNET_IPV6_FORWARDING
=1,

555 
	mNET_IPV6_HOP_LIMIT
=2,

556 
	mNET_IPV6_MTU
=3,

557 
	mNET_IPV6_ACCEPT_RA
=4,

558 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

559 
	mNET_IPV6_AUTOCONF
=6,

560 
	mNET_IPV6_DAD_TRANSMITS
=7,

561 
	mNET_IPV6_RTR_SOLICITS
=8,

562 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

563 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

564 
	mNET_IPV6_USE_TEMPADDR
=11,

565 
	mNET_IPV6_TEMP_VALID_LFT
=12,

566 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

567 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

568 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

569 
	mNET_IPV6_MAX_ADDRESSES
=16,

570 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

571 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

572 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

573 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

574 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

575 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

576 
	mNET_IPV6_PROXY_NDP
=23,

577 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

578 
	m__NET_IPV6_MAX


583 
	mNET_IPV6_ICMP_RATELIMIT
=1

588 
	mNET_NEIGH_MCAST_SOLICIT
=1,

589 
	mNET_NEIGH_UCAST_SOLICIT
=2,

590 
	mNET_NEIGH_APP_SOLICIT
=3,

591 
	mNET_NEIGH_RETRANS_TIME
=4,

592 
	mNET_NEIGH_REACHABLE_TIME
=5,

593 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

594 
	mNET_NEIGH_GC_STALE_TIME
=7,

595 
	mNET_NEIGH_UNRES_QLEN
=8,

596 
	mNET_NEIGH_PROXY_QLEN
=9,

597 
	mNET_NEIGH_ANYCAST_DELAY
=10,

598 
	mNET_NEIGH_PROXY_DELAY
=11,

599 
	mNET_NEIGH_LOCKTIME
=12,

600 
	mNET_NEIGH_GC_INTERVAL
=13,

601 
	mNET_NEIGH_GC_THRESH1
=14,

602 
	mNET_NEIGH_GC_THRESH2
=15,

603 
	mNET_NEIGH_GC_THRESH3
=16,

604 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

605 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

606 
	m__NET_NEIGH_MAX


611 
	mNET_DCCP_DEFAULT
=1,

616 
	mNET_IPX_PPROP_BROADCASTING
=1,

617 
	mNET_IPX_FORWARDING
=2

622 
	mNET_LLC2
=1,

623 
	mNET_LLC_STATION
=2,

628 
	mNET_LLC2_TIMEOUT
=1,

633 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

638 
	mNET_LLC2_ACK_TIMEOUT
=1,

639 
	mNET_LLC2_P_TIMEOUT
=2,

640 
	mNET_LLC2_REJ_TIMEOUT
=3,

641 
	mNET_LLC2_BUSY_TIMEOUT
=4,

646 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

647 
	mNET_ATALK_AARP_TICK_TIME
=2,

648 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

649 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

655 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

656 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

657 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

658 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

659 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

660 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

661 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

662 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

663 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

664 
	mNET_NETROM_ROUTING_CONTROL
=10,

665 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

666 
	mNET_NETROM_RESET
=12

671 
	mNET_AX25_IP_DEFAULT_MODE
=1,

672 
	mNET_AX25_DEFAULT_MODE
=2,

673 
	mNET_AX25_BACKOFF_TYPE
=3,

674 
	mNET_AX25_CONNECT_MODE
=4,

675 
	mNET_AX25_STANDARD_WINDOW
=5,

676 
	mNET_AX25_EXTENDED_WINDOW
=6,

677 
	mNET_AX25_T1_TIMEOUT
=7,

678 
	mNET_AX25_T2_TIMEOUT
=8,

679 
	mNET_AX25_T3_TIMEOUT
=9,

680 
	mNET_AX25_IDLE_TIMEOUT
=10,

681 
	mNET_AX25_N2
=11,

682 
	mNET_AX25_PACLEN
=12,

683 
	mNET_AX25_PROTOCOL
=13,

684 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

689 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

690 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

691 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

692 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

693 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

694 
	mNET_ROSE_ROUTING_CONTROL
=6,

695 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

696 
	mNET_ROSE_MAX_VCS
=8,

697 
	mNET_ROSE_WINDOW_SIZE
=9,

698 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

703 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

704 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

705 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

706 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

707 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

708 
	mNET_X25_FORWARD
=6

714 
	mNET_TR_RIF_TIMEOUT
=1

719 
	mNET_DECNET_NODE_TYPE
 = 1,

720 
	mNET_DECNET_NODE_ADDRESS
 = 2,

721 
	mNET_DECNET_NODE_NAME
 = 3,

722 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

723 
	mNET_DECNET_TIME_WAIT
 = 5,

724 
	mNET_DECNET_DN_COUNT
 = 6,

725 
	mNET_DECNET_DI_COUNT
 = 7,

726 
	mNET_DECNET_DR_COUNT
 = 8,

727 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

728 
	mNET_DECNET_CONF
 = 10,

729 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

730 
	mNET_DECNET_MEM
 = 12,

731 
	mNET_DECNET_RMEM
 = 13,

732 
	mNET_DECNET_WMEM
 = 14,

733 
	mNET_DECNET_DEBUG_LEVEL
 = 255

738 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

739 
	mNET_DECNET_CONF_DDCMP
 = -3,

740 
	mNET_DECNET_CONF_PPP
 = -4,

741 
	mNET_DECNET_CONF_X25
 = -5,

742 
	mNET_DECNET_CONF_GRE
 = -6,

743 
	mNET_DECNET_CONF_ETHER
 = -7

750 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

751 
	mNET_DECNET_CONF_DEV_T1
 = 2,

752 
	mNET_DECNET_CONF_DEV_T2
 = 3,

753 
	mNET_DECNET_CONF_DEV_T3
 = 4,

754 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

755 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

756 
	mNET_DECNET_CONF_DEV_STATE
 = 7

761 
	mNET_SCTP_RTO_INITIAL
 = 1,

762 
	mNET_SCTP_RTO_MIN
 = 2,

763 
	mNET_SCTP_RTO_MAX
 = 3,

764 
	mNET_SCTP_RTO_ALPHA
 = 4,

765 
	mNET_SCTP_RTO_BETA
 = 5,

766 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

767 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

768 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

769 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

770 
	mNET_SCTP_HB_INTERVAL
 = 10,

771 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

772 
	mNET_SCTP_MAX_BURST
 = 12,

773 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

774 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

775 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

776 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

777 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

782 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

783 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

784 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

785 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

786 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

791 
	mNET_IRDA_DISCOVERY
=1,

792 
	mNET_IRDA_DEVNAME
=2,

793 
	mNET_IRDA_DEBUG
=3,

794 
	mNET_IRDA_FAST_POLL
=4,

795 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

796 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

797 
	mNET_IRDA_SLOT_TIMEOUT
=7,

798 
	mNET_IRDA_MAX_BAUD_RATE
=8,

799 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

800 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

801 
	mNET_IRDA_MAX_TX_WINDOW
=11,

802 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

803 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

804 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

811 
	mFS_NRINODE
=1,

812 
	mFS_STATINODE
=2,

813 
	mFS_MAXINODE
=3,

814 
	mFS_NRDQUOT
=4,

815 
	mFS_MAXDQUOT
=5,

816 
	mFS_NRFILE
=6,

817 
	mFS_MAXFILE
=7,

818 
	mFS_DENTRY
=8,

819 
	mFS_NRSUPER
=9,

820 
	mFS_MAXSUPER
=10,

821 
	mFS_OVERFLOWUID
=11,

822 
	mFS_OVERFLOWGID
=12,

823 
	mFS_LEASES
=13,

824 
	mFS_DIR_NOTIFY
=14,

825 
	mFS_LEASE_TIME
=15,

826 
	mFS_DQSTATS
=16,

827 
	mFS_XFS
=17,

828 
	mFS_AIO_NR
=18,

829 
	mFS_AIO_MAX_NR
=19,

830 
	mFS_INOTIFY
=20,

831 
	mFS_OCFS2
=988,

836 
	mFS_DQ_LOOKUPS
 = 1,

837 
	mFS_DQ_DROPS
 = 2,

838 
	mFS_DQ_READS
 = 3,

839 
	mFS_DQ_WRITES
 = 4,

840 
	mFS_DQ_CACHE_HITS
 = 5,

841 
	mFS_DQ_ALLOCATED
 = 6,

842 
	mFS_DQ_FREE
 = 7,

843 
	mFS_DQ_SYNCS
 = 8,

844 
	mFS_DQ_WARNINGS
 = 9,

851 
	mDEV_CDROM
=1,

852 
	mDEV_HWMON
=2,

853 
	mDEV_PARPORT
=3,

854 
	mDEV_RAID
=4,

855 
	mDEV_MAC_HID
=5,

856 
	mDEV_SCSI
=6,

857 
	mDEV_IPMI
=7,

862 
	mDEV_CDROM_INFO
=1,

863 
	mDEV_CDROM_AUTOCLOSE
=2,

864 
	mDEV_CDROM_AUTOEJECT
=3,

865 
	mDEV_CDROM_DEBUG
=4,

866 
	mDEV_CDROM_LOCK
=5,

867 
	mDEV_CDROM_CHECK_MEDIA
=6

872 
	mDEV_PARPORT_DEFAULT
=-3

877 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

878 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

883 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

884 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

889 
	mDEV_PARPORT_SPINTIME
=1,

890 
	mDEV_PARPORT_BASE_ADDR
=2,

891 
	mDEV_PARPORT_IRQ
=3,

892 
	mDEV_PARPORT_DMA
=4,

893 
	mDEV_PARPORT_MODES
=5,

894 
	mDEV_PARPORT_DEVICES
=6,

895 
	mDEV_PARPORT_AUTOPROBE
=16

900 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

905 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

910 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

911 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

912 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

913 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

914 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

915 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

920 
	mDEV_SCSI_LOGGING_LEVEL
=1,

925 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

931 
	mABI_DEFHANDLER_COFF
=1,

932 
	mABI_DEFHANDLER_ELF
=2,

933 
	mABI_DEFHANDLER_LCALL7
=3,

934 
	mABI_DEFHANDLER_LIBCSO
=4,

935 
	mABI_TRACE
=5,

936 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
__kî√l_time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

15 
	stimevÆ
 {

16 
__kî√l_time_t
 
	mtv_£c
;

17 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

20 
	stimez⁄e
 {

21 
	mtz_möuãswe°
;

22 
	mtz_d°time
;

26 
	#NFDBITS
 
__NFDBITS


	)

28 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

29 
	#FD_SET
(
fd
,
fd£ç
Ë
	`__FD_SET
(fd,fd£ç)

	)

30 
	#FD_CLR
(
fd
,
fd£ç
Ë
	`__FD_CLR
(fd,fd£ç)

	)

31 
	#FD_ISSET
(
fd
,
fd£ç
Ë
	`__FD_ISSET
(fd,fd£ç)

	)

32 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
(fd£ç)

	)

38 
	#ITIMER_REAL
 0

	)

39 
	#ITIMER_VIRTUAL
 1

	)

40 
	#ITIMER_PROF
 2

	)

42 
	sôimî•ec
 {

43 
time•ec
 
	mô_öãrvÆ
;

44 
time•ec
 
	mô_vÆue
;

47 
	sôimîvÆ
 {

48 
timevÆ
 
	mô_öãrvÆ
;

49 
timevÆ
 
	mô_vÆue
;

55 
	#CLOCK_REALTIME
 0

	)

56 
	#CLOCK_MONOTONIC
 1

	)

57 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

58 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

59 
	#CLOCK_MONOTONIC_RAW
 4

	)

60 
	#CLOCK_REALTIME_COARSE
 5

	)

61 
	#CLOCK_MONOTONIC_COARSE
 6

	)

66 
	#CLOCK_SGI_CYCLE
 10

	)

67 
	#MAX_CLOCKS
 16

	)

68 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

69 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

74 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/user.h

19 #i‚de‡
_SYS_USER_H


20 
	#_SYS_USER_H
 1

	)

26 
	~<bôs/w‹dsize.h
>

27 
	~<uni°d.h
>

29 #i‡
__WORDSIZE
 == 64

31 
	su£r_Âªgs_°ru˘


33 
__uöt16_t
 
	mcwd
;

34 
__uöt16_t
 
	mswd
;

35 
__uöt16_t
 
	m·w
;

36 
__uöt16_t
 
	mf›
;

37 
__uöt64_t
 
	mrù
;

38 
__uöt64_t
 
	mrdp
;

39 
__uöt32_t
 
	mmxc§
;

40 
__uöt32_t
 
	mmx¸_mask
;

41 
__uöt32_t
 
	m°_•a˚
[32];

42 
__uöt32_t
 
	mxmm_•a˚
[64];

43 
__uöt32_t
 
	m∑ddög
[24];

46 
	su£r_ªgs_°ru˘


48 
	mr15
;

49 
	mr14
;

50 
	mr13
;

51 
	mr12
;

52 
	mrbp
;

53 
	mrbx
;

54 
	mr11
;

55 
	mr10
;

56 
	mr9
;

57 
	mr8
;

58 
	møx
;

59 
	mrcx
;

60 
	mrdx
;

61 
	mrsi
;

62 
	mrdi
;

63 
	m‹ig_øx
;

64 
	mrù
;

65 
	mcs
;

66 
	meÊags
;

67 
	mr•
;

68 
	mss
;

69 
	mfs_ba£
;

70 
	mgs_ba£
;

71 
	mds
;

72 
	mes
;

73 
	mfs
;

74 
	mgs
;

77 
	su£r


79 
u£r_ªgs_°ru˘
 
	mªgs
;

80 
	mu_ÂvÆid
;

81 
u£r_Âªgs_°ru˘
 
	mi387
;

82 
	mu_tsize
;

83 
	mu_dsize
;

84 
	mu_ssize
;

85 
	m°¨t_code
;

86 
	m°¨t_°ack
;

87 
	msig«l
;

88 
	mª£rved
;

89 
u£r_ªgs_°ru˘
* 
	mu_¨0
;

90 
u£r_Âªgs_°ru˘
* 
	mu_Â°©e
;

91 
	mmagic
;

92 
	mu_comm
 [32];

93 
	mu_debugªg
 [8];

98 
	su£r_Âªgs_°ru˘


100 
	mcwd
;

101 
	mswd
;

102 
	mtwd
;

103 
	mfù
;

104 
	mfcs
;

105 
	mfoo
;

106 
	mfos
;

107 
	m°_•a˚
 [20];

110 
	su£r_Âxªgs_°ru˘


112 
	mcwd
;

113 
	mswd
;

114 
	mtwd
;

115 
	mf›
;

116 
	mfù
;

117 
	mfcs
;

118 
	mfoo
;

119 
	mfos
;

120 
	mmxc§
;

121 
	mª£rved
;

122 
	m°_•a˚
[32];

123 
	mxmm_•a˚
[32];

124 
	m∑ddög
[56];

127 
	su£r_ªgs_°ru˘


129 
	mebx
;

130 
	mecx
;

131 
	medx
;

132 
	mesi
;

133 
	medi
;

134 
	mebp
;

135 
	móx
;

136 
	mxds
;

137 
	mxes
;

138 
	mxfs
;

139 
	mxgs
;

140 
	m‹ig_óx
;

141 
	meù
;

142 
	mxcs
;

143 
	meÊags
;

144 
	me•
;

145 
	mxss
;

148 
	su£r


150 
u£r_ªgs_°ru˘
 
	mªgs
;

151 
	mu_ÂvÆid
;

152 
u£r_Âªgs_°ru˘
 
	mi387
;

153 
	mu_tsize
;

154 
	mu_dsize
;

155 
	mu_ssize
;

156 
	m°¨t_code
;

157 
	m°¨t_°ack
;

158 
	msig«l
;

159 
	mª£rved
;

160 
u£r_ªgs_°ru˘
* 
	mu_¨0
;

161 
u£r_Âªgs_°ru˘
* 
	mu_Â°©e
;

162 
	mmagic
;

163 
	mu_comm
 [32];

164 
	mu_debugªg
 [8];

168 
	#PAGE_SIZE
 (
	`sysc⁄f
(
_SC_PAGESIZE
))

	)

169 
	#PAGE_MASK
 (~(
PAGE_SIZE
-1))

	)

170 
	#NBPG
 
PAGE_SIZE


	)

171 
	#UPAGES
 1

	)

172 
	#HOST_TEXT_START_ADDR
 (
u
.
°¨t_code
)

	)

173 
	#HOST_STACK_END_ADDR
 (
u
.
°¨t_°ack
 + u.
u_ssize
 * 
NBPG
)

	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	#dma_addr_t
 
dma_addr_t


	)

6 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

55 
	#__bsw≠_c⁄°™t_32
(
x
) \

56 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

57 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

59 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

60 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

61 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

62 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

63 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

64 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

65 || 
deföed
 
	g__amdÁm10__
)

68 
	#__bsw≠_32
(
x
) \

69 (
__exãnsi⁄__
 \

70 ({ 
__v
, 
__x
 = (
x
); \

71 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

72 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

74 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

75 
__v
; }))

	)

77 
	#__bsw≠_32
(
x
) \

78 (
__exãnsi⁄__
 \

79 ({ 
__v
, 
__x
 = (
x
); \

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

81 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

83 
	`__asm__
 ("rorw $8, %w0;" \

86 : "Ù" (
__v
) \

87 : "0" (
__x
) \

89 
__v
; }))

	)

92 
	#__bsw≠_32
(
x
) \

93 (
__exãnsi⁄__
 \

94 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

100 
	#__bsw≠_c⁄°™t_64
(
x
) \

101 ((((
x
) & 0xff00000000000000ull) >> 56) \

102 | (((
x
) & 0x00ff000000000000ull) >> 40) \

103 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

104 | (((
x
) & 0x000000ff00000000ull) >> 8) \

105 | (((
x
) & 0x00000000ff000000ull) << 8) \

106 | (((
x
) & 0x0000000000ff0000ull) << 24) \

107 | (((
x
) & 0x000000000000ff00ull) << 40) \

108 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

110 #i‡
__WORDSIZE
 == 64

111 
	#__bsw≠_64
(
x
) \

112 (
__exãnsi⁄__
 \

113 ({ 
__v
, 
__x
 = (
x
); \

114 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

115 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

117 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

118 
__v
; }))

	)

120 
	#__bsw≠_64
(
x
) \

121 (
__exãnsi⁄__
 \

122 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

123 
__l
[2]; } 
__w
, 
__r
; \

124 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

125 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

128 
__w
.
__Œ
 = (
x
); \

129 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

130 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

132 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

10 
	#SI_LOAD_SHIFT
 16

	)

11 
	ssysöfo
 {

12 
	mu±ime
;

13 
	mlﬂds
[3];

14 
	mtŸÆøm
;

15 
	m‰ìøm
;

16 
	msh¨edøm
;

17 
	mbuf„ºam
;

18 
	mtŸÆsw≠
;

19 
	m‰ìsw≠
;

20 
	m¥ocs
;

21 
	m∑d
;

22 
	mtŸÆhigh
;

23 
	m‰ìhigh
;

24 
	mmem_unô
;

25 
	m_f
[20-2*()-()];

29 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()
	`BUILD_BUG_ON_ZERO
(c⁄dôi⁄))

	)

32 
	#MAYBE_BUILD_BUG_ON
(
c⁄d
Ë(()([1 - 2 * !!(c⁄d)]))

	)

38 
	#BUILD_BUG_ON_ZERO
(
e
Ë((°ru˘ { :-!!”); }))

	)

39 
	#BUILD_BUG_ON_NULL
(
e
Ë((*)(°ru˘ { :-!!”); }))

	)

42 
	#__FUNCTION__
 (
__func__
)

	)

45 #ifde‡
CONFIG_NUMA


46 
	#NUMA_BUILD
 1

	)

48 
	#NUMA_BUILD
 0

	)

52 #ifde‡
CONFIG_FTRACE_MCOUNT_RECORD


53 
	#REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD


	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 #i‚de‡
EXEC_PAGESIZE


10 
	#EXEC_PAGESIZE
 4096

	)

13 #i‚de‡
NOGROUP


14 
	#NOGROUP
 (-1)

	)

17 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

55 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

56 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

61 #i‚de‡
_WINT_T


66 
	#_WINT_T


	)

67 
	twöt_t
;

71 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

72 && 
deföed
 
__WINT_TYPE__


73 
__BEGIN_NAMESPACE_STD


74 
__WINT_TYPE__
 
	twöt_t
;

75 
	g__END_NAMESPACE_STD


80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

561 #ifdef 
__USE_XOPEN2K8


564 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

20 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

21 
	#__OPTION_EGLIBC_ENVZ
 1

	)

22 
	#__OPTION_EGLIBC_FCVT
 1

	)

23 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

24 
	#__OPTION_EGLIBC_FSTAB
 1

	)

25 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

26 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

27 
	#__OPTION_EGLIBC_INET
 1

	)

28 
	#__OPTION_EGLIBC_LIBM
 1

	)

29 
	#__OPTION_EGLIBC_LOCALES
 1

	)

30 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

31 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

32 
	#__OPTION_EGLIBC_NIS
 1

	)

33 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

34 
	#__OPTION_EGLIBC_RCMD
 1

	)

35 
	#__OPTION_EGLIBC_SPAWN
 1

	)

36 
	#__OPTION_EGLIBC_STREAMS
 1

	)

37 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

38 
	#__OPTION_EGLIBC_UTMP
 1

	)

39 
	#__OPTION_EGLIBC_UTMPX
 1

	)

40 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

41 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

42 
	#__OPTION_POSIX_REGEXP
 1

	)

43 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

44 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<°ddef.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
290
8442
AmigaOS.c
MacOS.c
Mac_files/MacOS_Test_config.h
Mac_files/MacOS_config.h
Mac_files/dataend.c
Mac_files/datastart.c
add_gc_prefix.c
allchblk.c
alloc.c
backgraph.c
blacklst.c
checksums.c
cord/cordbscs.c
cord/cordprnt.c
cord/cordtest.c
cord/cordxtra.c
cord/de.c
cord/de_cmds.h
cord/de_win.c
cord/de_win.h
darwin_stop_world.c
dbg_mlc.c
dyn_load.c
finalize.c
gc_cpp.cc
gc_cpp.cpp
gc_dlopen.c
gcj_mlc.c
gcname.c
headers.c
if_mach.c
if_not_there.c
include/cord.h
include/ec.h
include/extra/gc.h
include/extra/gc_cpp.h
include/gc.h
include/gc_allocator.h
include/gc_amiga_redirects.h
include/gc_backptr.h
include/gc_config_macros.h
include/gc_cpp.h
include/gc_gcj.h
include/gc_inline.h
include/gc_mark.h
include/gc_pthread_redirects.h
include/gc_tiny_fl.h
include/gc_typed.h
include/gc_version.h
include/javaxfc.h
include/leak_detector.h
include/new_gc_alloc.h
include/private/cord_pos.h
include/private/darwin_semaphore.h
include/private/darwin_stop_world.h
include/private/dbg_mlc.h
include/private/gc_hdrs.h
include/private/gc_locks.h
include/private/gc_pmark.h
include/private/gc_priv.h
include/private/gcconfig.h
include/private/msvc_dbg.h
include/private/pthread_stop_world.h
include/private/pthread_support.h
include/private/specific.h
include/private/thread_local_alloc.h
include/weakpointer.h
libatomic_ops-1.2/src/atomic_ops.c
libatomic_ops-1.2/src/atomic_ops.h
libatomic_ops-1.2/src/atomic_ops/generalize-small.h
libatomic_ops-1.2/src/atomic_ops/generalize.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/acquire_release_volatile.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/aligned_atomic_load_store.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/all_acquire_release_volatile.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/all_aligned_atomic_load_store.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/all_atomic_load_store.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/ao_t_is_int.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/armcc/arm_v6.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/atomic_load_store.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/char_acquire_release_volatile.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/char_atomic_load_store.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/emul_cas.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/alpha.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/arm.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/cris.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/hppa.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/ia64.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/m68k.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/powerpc.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/s390.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/sparc.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/x86.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/x86_64.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/generic_pthread.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/hpc/hppa.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/hpc/ia64.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/ibmc/powerpc.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/icc/ia64.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/int_acquire_release_volatile.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/int_aligned_atomic_load_store.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/int_atomic_load_store.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/msftc/x86.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/msftc/x86_64.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/ordered.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/ordered_except_wr.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/read_ordered.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/short_acquire_release_volatile.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/short_aligned_atomic_load_store.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/short_atomic_load_store.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/standard_ao_double_t.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/sunc/sparc.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/test_and_set_t_is_ao_t.h
libatomic_ops-1.2/src/atomic_ops/sysdeps/test_and_set_t_is_char.h
libatomic_ops-1.2/src/atomic_ops_malloc.c
libatomic_ops-1.2/src/atomic_ops_malloc.h
libatomic_ops-1.2/src/atomic_ops_stack.c
libatomic_ops-1.2/src/atomic_ops_stack.h
libatomic_ops-1.2/src/config.h
libatomic_ops-1.2/tests/list_atomic.c
libatomic_ops-1.2/tests/test_atomic.c
libatomic_ops-1.2/tests/test_atomic_include.h
libatomic_ops-1.2/tests/test_malloc.c
libatomic_ops-1.2/tests/test_stack.c
mach_dep.c
malloc.c
mallocx.c
mark.c
mark_rts.c
misc.c
msvc_dbg.c
new_hblk.c
obj_map.c
os_dep.c
pcr_interface.c
pthread_stop_world.c
pthread_support.c
ptr_chck.c
real_malloc.c
reclaim.c
setjmp_t.c
specific.c
stubborn.c
tests/huge_test.c
tests/leak_test.c
tests/middle.c
tests/smash_test.c
tests/test.c
tests/test_cpp.cc
tests/thread_leak_test.c
thread_local_alloc.c
threadlibs.c
typd_mlc.c
win32_threads.c
/usr/include/asm/sigcontext.h
/usr/include/asm/signal.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/elf.h
/usr/include/errno.h
/usr/include/execinfo.h
/usr/include/fcntl.h
/usr/include/features.h
/usr/include/limits.h
/usr/include/link.h
/usr/include/linux/version.h
/usr/include/malloc.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/elf.h
/usr/include/sys/errno.h
/usr/include/sys/mman.h
/usr/include/sys/param.h
/usr/include/sys/procfs.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/signal.h
/usr/include/sys/stat.h
/usr/include/sys/syscall.h
/usr/include/sys/sysctl.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/time.h
/usr/include/ucontext.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm-generic/signal-defs.h
/usr/include/asm/unistd.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/dlfcn.h
/usr/include/bits/elfclass.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/link.h
/usr/include/bits/mman.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/predefs.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/setjmp2.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/getopt.h
/usr/include/gnu/stubs.h
/usr/include/libio.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/sysctl.h
/usr/include/linux/time.h
/usr/include/linux/types.h
/usr/include/sys/cdefs.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/sys/user.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/param.h
/usr/include/asm/types.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs-32.h
/usr/include/linux/errno.h
/usr/include/linux/kernel.h
/usr/include/linux/posix_types.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/int-ll64.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm/bitsperlong.h
/usr/include/asm-generic/bitsperlong.h
